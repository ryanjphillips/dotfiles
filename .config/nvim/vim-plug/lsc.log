#######
LanguageClient 0.1.161
#######
11:11:43 INFO unnamed src/language_server_protocol.rs:3580 settings synced
11:11:43 INFO unnamed src/language_server_protocol.rs:3607 Project root: /home/ys/Code/project/project-jka
11:11:43 INFO unnamed src/language_server_protocol.rs:840 initialize; params=Object({"bufnr": Number(1), "filename": String("/home/ys/Code/project/project-jka/src/code/cgame/cg_ents.cpp"), "languageId": String("cpp"), "position": Object({"character": Number(0), "line": Number(0)}), "viewport": Object({"end": Number(65), "start": Number(0)})})
11:11:43 INFO unnamed src/language_server_protocol.rs:567 register_cm_source; language_id="cpp" result=Object({"capabilities": Object({"codeActionProvider": Object({"codeActionKinds": Array([String("quickfix")])}), "codeLensProvider": Object({"resolveProvider": Bool(false)}), "completionProvider": Object({"resolveProvider": Bool(false), "triggerCharacters": Array([String("."), String(":"), String(">"), String("#"), String("<"), String("\""), String("/")])}), "declarationProvider": Bool(true), "definitionProvider": Bool(true), "documentFormattingProvider": Bool(true), "documentHighlightProvider": Bool(true), "documentLinkProvider": Object({"resolveProvider": Bool(true)}), "documentOnTypeFormattingProvider": Object({"firstTriggerCharacter": String("}"), "moreTriggerCharacter": Array([])}), "documentRangeFormattingProvider": Bool(true), "documentSymbolProvider": Bool(true), "executeCommandProvider": Object({"commands": Array([String("ccls.xref")])}), "foldingRangeProvider": Bool(true), "hoverProvider": Bool(true), "implementationProvider": Bool(true), "referencesProvider": Bool(true), "renameProvider": Bool(true), "signatureHelpProvider": Object({"triggerCharacters": Array([String("("), String(",")])}), "textDocumentSync": Object({"change": Number(2), "openClose": Bool(true), "save": Object({"includeText": Bool(false)}), "willSave": Bool(false), "willSaveWaitUntil": Bool(false)}), "typeDefinitionProvider": Bool(true), "workspace": Object({"workspaceFolders": Object({"changeNotifications": Bool(true), "supported": Bool(true)})}), "workspaceSymbolProvider": Bool(true)}), "serverInfo": Object({"name": String("ccls"), "version": String("0.20210330-1")})})
11:11:43 INFO unnamed src/language_server_protocol.rs:607 register_ncm2_source; language_id="cpp" result=Object({"capabilities": Object({"codeActionProvider": Object({"codeActionKinds": Array([String("quickfix")])}), "codeLensProvider": Object({"resolveProvider": Bool(false)}), "completionProvider": Object({"resolveProvider": Bool(false), "triggerCharacters": Array([String("."), String(":"), String(">"), String("#"), String("<"), String("\""), String("/")])}), "declarationProvider": Bool(true), "definitionProvider": Bool(true), "documentFormattingProvider": Bool(true), "documentHighlightProvider": Bool(true), "documentLinkProvider": Object({"resolveProvider": Bool(true)}), "documentOnTypeFormattingProvider": Object({"firstTriggerCharacter": String("}"), "moreTriggerCharacter": Array([])}), "documentRangeFormattingProvider": Bool(true), "documentSymbolProvider": Bool(true), "executeCommandProvider": Object({"commands": Array([String("ccls.xref")])}), "foldingRangeProvider": Bool(true), "hoverProvider": Bool(true), "implementationProvider": Bool(true), "referencesProvider": Bool(true), "renameProvider": Bool(true), "signatureHelpProvider": Object({"triggerCharacters": Array([String("("), String(",")])}), "textDocumentSync": Object({"change": Number(2), "openClose": Bool(true), "save": Object({"includeText": Bool(false)}), "willSave": Bool(false), "willSaveWaitUntil": Bool(false)}), "typeDefinitionProvider": Bool(true), "workspace": Object({"workspaceFolders": Object({"changeNotifications": Bool(true), "supported": Bool(true)})}), "workspaceSymbolProvider": Bool(true)}), "serverInfo": Object({"name": String("ccls"), "version": String("0.20210330-1")})})
11:11:43 INFO unnamed src/language_server_protocol.rs:647 parse_semantic_scopes; language_id="cpp" result=Object({"capabilities": Object({"codeActionProvider": Object({"codeActionKinds": Array([String("quickfix")])}), "codeLensProvider": Object({"resolveProvider": Bool(false)}), "completionProvider": Object({"resolveProvider": Bool(false), "triggerCharacters": Array([String("."), String(":"), String(">"), String("#"), String("<"), String("\""), String("/")])}), "declarationProvider": Bool(true), "definitionProvider": Bool(true), "documentFormattingProvider": Bool(true), "documentHighlightProvider": Bool(true), "documentLinkProvider": Object({"resolveProvider": Bool(true)}), "documentOnTypeFormattingProvider": Object({"firstTriggerCharacter": String("}"), "moreTriggerCharacter": Array([])}), "documentRangeFormattingProvider": Bool(true), "documentSymbolProvider": Bool(true), "executeCommandProvider": Object({"commands": Array([String("ccls.xref")])}), "foldingRangeProvider": Bool(true), "hoverProvider": Bool(true), "implementationProvider": Bool(true), "referencesProvider": Bool(true), "renameProvider": Bool(true), "signatureHelpProvider": Object({"triggerCharacters": Array([String("("), String(",")])}), "textDocumentSync": Object({"change": Number(2), "openClose": Bool(true), "save": Object({"includeText": Bool(false)}), "willSave": Bool(false), "willSaveWaitUntil": Bool(false)}), "typeDefinitionProvider": Bool(true), "workspace": Object({"workspaceFolders": Object({"changeNotifications": Bool(true), "supported": Bool(true)})}), "workspaceSymbolProvider": Bool(true)}), "serverInfo": Object({"name": String("ccls"), "version": String("0.20210330-1")})})
11:11:43 INFO unnamed src/language_server_protocol.rs:1019 initialized; params=Object({"bufnr": Number(1), "filename": String("/home/ys/Code/project/project-jka/src/code/cgame/cg_ents.cpp"), "languageId": String("cpp"), "position": Object({"character": Number(0), "line": Number(0)}), "viewport": Object({"end": Number(65), "start": Number(0)})})
11:11:43 INFO unnamed src/language_server_protocol.rs:666 update_semantic_highlight_tables; language_id="cpp"
11:11:43 WARN unnamed src/language_server_protocol.rs:3707 Failed to get workspace settings: Failed to read file (/home/ys.config/nvim/settings.json)
11:11:43 INFO unnamed src/language_server_protocol.rs:1946 text_document_did_open; params=Object({"bufnr": Number(1), "filename": String("/home/ys/Code/project/project-jka/src/code/cgame/cg_ents.cpp"), "languageId": String("cpp"), "position": Object({"character": Number(0), "line": Number(0)}), "viewport": Object({"end": Number(65), "start": Number(0)})})
11:11:43 INFO unnamed src/language_server_protocol.rs:1888 text_document_code_lens; params=Object({"bufnr": Number(1), "filename": String("/home/ys/Code/project/project-jka/src/code/cgame/cg_ents.cpp"), "languageId": String("cpp"), "position": Object({"character": Number(0), "line": Number(0)}), "viewport": Object({"end": Number(65), "start": Number(0)})})
11:11:43 INFO unnamed src/language_server_protocol.rs:2489 client_register_capability; language_id="cpp" params=Object({"registrations": Array([Object({"id": String("didChangeWatchedFiles"), "method": String("workspace/didChangeWatchedFiles"), "registerOptions": Object({"watchers": Array([Object({"globPattern": String("**/*")})])})})])})
11:11:43 INFO unnamed src/language_server_protocol.rs:2512 Watching glob pattern: **/*
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "FX_ATSTMain.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "FX_Blaster.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "FX_Bowcaster.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "FX_BryarPistol.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "FX_Concussion.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "FX_DEMP2.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "FX_Disruptor.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "FX_Emplaced.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "FX_Flechette.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "FX_HeavyRepeater.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "FX_NoghriShot.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "FX_RocketLauncher.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "FX_TuskenShot.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "FxParsing.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "FxParsing.h"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "FxPrimitives.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "FxPrimitives.h"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "FxScheduler.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "FxScheduler.h"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "FxSystem.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "FxSystem.h"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "FxTemplate.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "FxUtil.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "FxUtil.h"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "animtable.h"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_camera.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_camera.h"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_consolecmds.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_credits.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_draw.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_drawtools.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_effects.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_ents.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_event.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_headers.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_headers.h"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_info.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_lights.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_lights.h"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_local.h"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_localents.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_main.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_marks.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_media.h"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_players.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_playerstate.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_predict.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_public.h"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_scoreboard.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_servercmds.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_snapshot.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_syscalls.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_text.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_view.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "cg_weapons.cpp"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "common_headers.h"
11:11:43 INFO unnamed src/language_server_protocol.rs:2524 Start watching path "strip_objectives.h"
11:11:43 INFO unnamed src/language_server_protocol.rs:2095 text_document_publish_diagnostics; params=Object({"diagnostics": Array([Object({"code": Number(1), "message": String("version control conflict marker in file"), "range": Object({"end": Object({"character": Number(2), "line": Number(0)}), "start": Object({"character": Number(0), "line": Number(0)})}), "relatedInformation": Array([]), "severity": Number(1), "source": String("ccls")})]), "uri": String("file:///home/ys/Code/project/project-jka/src/code/cgame/cg_ents.cpp")})
11:11:43 INFO unnamed src/vim.rs:225 Begin setqflist
11:11:43 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Null force_redraw=true
11:11:43 INFO unnamed src/language_server_protocol.rs:2847 get_signs_to_display; filename="/home/ys/Code/project/project-jka/src/code/cgame/cg_ents.cpp" viewport=Viewport { start: 0, end: 65 }
11:11:43 WARN unnamed src/rpchandler.rs:217 Message not handled: Notification { jsonrpc: Some(V2), method: "$ccls/publishSkippedRanges", params: Map({"skippedRanges": Array([Object({"end": Object({"character": Number(6), "line": Number(1862)}), "start": Object({"character": Number(0), "line": Number(1762)})})]), "uri": String("file:///home/ys/Code/project/project-jka/src/code/cgame/cg_ents.cpp")}) }
11:11:43 WARN unnamed src/rpchandler.rs:217 Message not handled: Notification { jsonrpc: Some(V2), method: "$ccls/publishSemanticHighlight", params: Map({"symbols": Array([Object({"id": Number(966), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(1883), "R": Number(1912)})]), "storage": Number(0)}), Object({"id": Number(946), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(39660), "R": Number(39671)})]), "storage": Number(0)}), Object({"id": Number(969), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(1058), "R": Number(1080)})]), "storage": Number(0)}), Object({"id": Number(955), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(17186), "R": Number(17192)})]), "storage": Number(0)}), Object({"id": Number(4521), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(60412), "R": Number(60427)})]), "storage": Number(0)}), Object({"id": Number(157), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(54171), "R": Number(54177)})]), "storage": Number(0)}), Object({"id": Number(4711), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(64452), "R": Number(64477)})]), "storage": Number(1)}), Object({"id": Number(4643), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(12735), "R": Number(12754)})]), "storage": Number(0)}), Object({"id": Number(4777), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(34395), "R": Number(34406)})]), "storage": Number(0)}), Object({"id": Number(4723), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(3886), "R": Number(3894)})]), "storage": Number(0)}), Object({"id": Number(4685), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(49863), "R": Number(49878)})]), "storage": Number(0)}), Object({"id": Number(4847), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(60862), "R": Number(60871)}), Object({"L": Number(60926), "R": Number(60935)}), Object({"L": Number(62322), "R": Number(62331)})]), "storage": Number(0)}), Object({"id": Number(930), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(43469), "R": Number(43481)})]), "storage": Number(0)}), Object({"id": Number(2744), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(36676), "R": Number(36691)})]), "storage": Number(0)}), Object({"id": Number(3886), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(67439), "R": Number(67449)})]), "storage": Number(0)}), Object({"id": Number(4738), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(22649), "R": Number(22656)}), Object({"L": Number(22748), "R": Number(22755)}), Object({"L": Number(23870), "R": Number(23877)})]), "storage": Number(0)}), Object({"id": Number(525), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(71918), "R": Number(71922)}), Object({"L": Number(72703), "R": Number(72707)})]), "storage": Number(0)}), Object({"id": Number(4517), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(13566), "R": Number(13577)}), Object({"L": Number(15261), "R": Number(15272)})]), "storage": Number(0)}), Object({"id": Number(921), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(62833), "R": Number(62850)})]), "storage": Number(0)}), Object({"id": Number(4601), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(35396), "R": Number(35404)})]), "storage": Number(0)}), Object({"id": Number(117), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(68197), "R": Number(68210)})]), "storage": Number(0)}), Object({"id": Number(3633), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(67562), "R": Number(67569)})]), "storage": Number(0)}), Object({"id": Number(2413), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(53711), "R": Number(53718)})]), "storage": Number(0)}), Object({"id": Number(3956), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(67389), "R": Number(67404)})]), "storage": Number(0)}), Object({"id": Number(960), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(53660), "R": Number(53677)})]), "storage": Number(0)}), Object({"id": Number(4484), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(39334), "R": Number(39341)}), Object({"L": Number(43183), "R": Number(43190)})]), "storage": Number(0)}), Object({"id": Number(222), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7274), "R": Number(7284)}), Object({"L": Number(13068), "R": Number(13078)})]), "storage": Number(0)}), Object({"id": Number(238), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(53982), "R": Number(53996)})]), "storage": Number(0)}), Object({"id": Number(4497), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(16165), "R": Number(16170)}), Object({"L": Number(22560), "R": Number(22565)}), Object({"L": Number(27605), "R": Number(27610)}), Object({"L": Number(32594), "R": Number(32599)}), Object({"L": Number(49160), "R": Number(49165)}), Object({"L": Number(60937), "R": Number(60942)})]), "storage": Number(0)}), Object({"id": Number(3642), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(12513), "R": Number(12523)}), Object({"L": Number(32745), "R": Number(32755)})]), "storage": Number(1)}), Object({"id": Number(4887), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(60268), "R": Number(60287)})]), "storage": Number(0)}), Object({"id": Number(918), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(71992), "R": Number(71999)})]), "storage": Number(0)}), Object({"id": Number(4575), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(612), "R": Number(620)})]), "storage": Number(0)}), Object({"id": Number(2072), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(60684), "R": Number(60694)})]), "storage": Number(0)}), Object({"id": Number(958), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(27029), "R": Number(27036)})]), "storage": Number(0)}), Object({"id": Number(4835), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(73825), "R": Number(73834)})]), "storage": Number(0)}), Object({"id": Number(975), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(22846), "R": Number(22859)})]), "storage": Number(0)}), Object({"id": Number(4818), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(54145), "R": Number(54150)}), Object({"L": Number(54470), "R": Number(54475)}), Object({"L": Number(54805), "R": Number(54810)})]), "storage": Number(0)}), Object({"id": Number(4879), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(7234), "R": Number(7246)})]), "storage": Number(0)}), Object({"id": Number(3643), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(27745), "R": Number(27756)})]), "storage": Number(1)}), Object({"id": Number(4529), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(496), "R": Number(506)})]), "storage": Number(0)}), Object({"id": Number(4689), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(10448), "R": Number(10452)})]), "storage": Number(0)}), Object({"id": Number(2456), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(39398), "R": Number(39405)})]), "storage": Number(0)}), Object({"id": Number(4467), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(24811), "R": Number(24816)}), Object({"L": Number(25136), "R": Number(25141)})]), "storage": Number(0)}), Object({"id": Number(952), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(39806), "R": Number(39821)})]), "storage": Number(0)}), Object({"id": Number(4714), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(26785), "R": Number(26794)})]), "storage": Number(0)}), Object({"id": Number(4516), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(18455), "R": Number(18468)}), Object({"L": Number(21050), "R": Number(21063)})]), "storage": Number(0)}), Object({"id": Number(4888), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(60429), "R": Number(60443)})]), "storage": Number(0)}), Object({"id": Number(4652), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(4411), "R": Number(4420)}), Object({"L": Number(4654), "R": Number(4663)}), Object({"L": Number(4705), "R": Number(4714)})]), "storage": Number(0)}), Object({"id": Number(4519), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(36007), "R": Number(36018)})]), "storage": Number(0)}), Object({"id": Number(2881), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(33675), "R": Number(33688)}), Object({"L": Number(33741), "R": Number(33754)})]), "storage": Number(0)}), Object({"id": Number(3663), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(67699), "R": Number(67706)})]), "storage": Number(0)}), Object({"id": Number(4806), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(45689), "R": Number(45711)}), Object({"L": Number(45757), "R": Number(45779)}), Object({"L": Number(69572), "R": Number(69594)})]), "storage": Number(0)}), Object({"id": Number(4656), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(14007), "R": Number(14017)})]), "storage": Number(0)}), Object({"id": Number(4855), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(471), "R": Number(476)})]), "storage": Number(0)}), Object({"id": Number(4761), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(482), "R": Number(490)})]), "storage": Number(0)}), Object({"id": Number(1000), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(26734), "R": Number(26750)}), Object({"L": Number(73763), "R": Number(73779)})]), "storage": Number(0)}), Object({"id": Number(4629), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(4548), "R": Number(4563)})]), "storage": Number(0)}), Object({"id": Number(4487), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(2023), "R": Number(2032)}), Object({"L": Number(2228), "R": Number(2237)}), Object({"L": Number(2272), "R": Number(2281)}), Object({"L": Number(2359), "R": Number(2368)})]), "storage": Number(0)}), Object({"id": Number(2944), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(33063), "R": Number(33080)}), Object({"L": Number(33134), "R": Number(33151)})]), "storage": Number(0)}), Object({"id": Number(4746), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(33892), "R": Number(33904)}), Object({"L": Number(33999), "R": Number(34011)})]), "storage": Number(0)}), Object({"id": Number(4891), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(63339), "R": Number(63350)})]), "storage": Number(0)}), Object({"id": Number(992), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(26525), "R": Number(26535)}), Object({"L": Number(67895), "R": Number(67905)})]), "storage": Number(0)}), Object({"id": Number(4733), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(35940), "R": Number(35952)})]), "storage": Number(0)}), Object({"id": Number(4890), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(61200), "R": Number(61226)}), Object({"L": Number(64384), "R": Number(64410)})]), "storage": Number(0)}), Object({"id": Number(4576), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(39680), "R": Number(39685)}), Object({"L": Number(39782), "R": Number(39787)})]), "storage": Number(0)}), Object({"id": Number(2464), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9659), "R": Number(9674)}), Object({"L": Number(38581), "R": Number(38596)})]), "storage": Number(0)}), Object({"id": Number(3632), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(67745), "R": Number(67754)})]), "storage": Number(0)}), Object({"id": Number(4471), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(14079), "R": Number(14094)}), Object({"L": Number(14154), "R": Number(14169)})]), "storage": Number(0)}), Object({"id": Number(925), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(65584), "R": Number(65593)}), Object({"L": Number(68019), "R": Number(68028)})]), "storage": Number(0)}), Object({"id": Number(4541), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(515), "R": Number(521)})]), "storage": Number(0)}), Object({"id": Number(4530), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(35160), "R": Number(35166)})]), "storage": Number(0)}), Object({"id": Number(3986), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(49195), "R": Number(49211)})]), "storage": Number(0)}), Object({"id": Number(2520), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9953), "R": Number(9967)}), Object({"L": Number(38469), "R": Number(38483)})]), "storage": Number(0)}), Object({"id": Number(1), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(4429), "R": Number(4443)})]), "storage": Number(0)}), Object({"id": Number(4618), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(891), "R": Number(908)}), Object({"L": Number(58975), "R": Number(58992)})]), "storage": Number(1)}), Object({"id": Number(4766), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(39751), "R": Number(39757)}), Object({"L": Number(39797), "R": Number(39803)})]), "storage": Number(0)}), Object({"id": Number(4805), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(45712), "R": Number(45718)})]), "storage": Number(0)}), Object({"id": Number(4490), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(58652), "R": Number(58673)})]), "storage": Number(0)}), Object({"id": Number(244), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(59384), "R": Number(59399)})]), "storage": Number(0)}), Object({"id": Number(4535), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(1980), "R": Number(1991)}), Object({"L": Number(2137), "R": Number(2148)})]), "storage": Number(0)}), Object({"id": Number(2315), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(68328), "R": Number(68336)}), Object({"L": Number(69934), "R": Number(69942)})]), "storage": Number(0)}), Object({"id": Number(4824), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(57079), "R": Number(57094)}), Object({"L": Number(57194), "R": Number(57209)}), Object({"L": Number(59127), "R": Number(59142)})]), "storage": Number(0)}), Object({"id": Number(4527), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(7441), "R": Number(7452)}), Object({"L": Number(7482), "R": Number(7493)}), Object({"L": Number(12378), "R": Number(12389)}), Object({"L": Number(16497), "R": Number(16508)}), Object({"L": Number(16548), "R": Number(16559)}), Object({"L": Number(16797), "R": Number(16808)}), Object({"L": Number(16848), "R": Number(16859)}), Object({"L": Number(19080), "R": Number(19091)}), Object({"L": Number(19131), "R": Number(19142)}), Object({"L": Number(19355), "R": Number(19366)}), Object({"L": Number(19406), "R": Number(19417)}), Object({"L": Number(21513), "R": Number(21524)}), Object({"L": Number(44206), "R": Number(44217)}), Object({"L": Number(56636), "R": Number(56647)}), Object({"L": Number(62264), "R": Number(62275)}), Object({"L": Number(62480), "R": Number(62491)}), Object({"L": Number(62722), "R": Number(62733)}), Object({"L": Number(68306), "R": Number(68317)}), Object({"L": Number(69628), "R": Number(69639)}), Object({"L": Number(69912), "R": Number(69923)})]), "storage": Number(1)}), Object({"id": Number(4613), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(70005), "R": Number(70021)})]), "storage": Number(1)}), Object({"id": Number(325), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(24820), "R": Number(24845)})]), "storage": Number(0)}), Object({"id": Number(2435), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(10234), "R": Number(10240)}), Object({"L": Number(10428), "R": Number(10434)}), Object({"L": Number(29864), "R": Number(29870)}), Object({"L": Number(29910), "R": Number(29916)}), Object({"L": Number(34507), "R": Number(34513)}), Object({"L": Number(34554), "R": Number(34560)}), Object({"L": Number(36663), "R": Number(36669)}), Object({"L": Number(36725), "R": Number(36731)}), Object({"L": Number(36860), "R": Number(36866)}), Object({"L": Number(37817), "R": Number(37823)})]), "storage": Number(0)}), Object({"id": Number(4457), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(70580), "R": Number(70582)}), Object({"L": Number(73119), "R": Number(73121)}), Object({"L": Number(73499), "R": Number(73501)}), Object({"L": Number(73541), "R": Number(73543)}), Object({"L": Number(73583), "R": Number(73585)})]), "storage": Number(0)}), Object({"id": Number(4615), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(1148), "R": Number(1159)}), Object({"L": Number(1257), "R": Number(1268)})]), "storage": Number(0)}), Object({"id": Number(4852), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(65606), "R": Number(65610)}), Object({"L": Number(65662), "R": Number(65666)}), Object({"L": Number(65760), "R": Number(65764)}), Object({"L": Number(65894), "R": Number(65898)}), Object({"L": Number(65930), "R": Number(65934)}), Object({"L": Number(65981), "R": Number(65985)}), Object({"L": Number(66078), "R": Number(66082)}), Object({"L": Number(66147), "R": Number(66151)})]), "storage": Number(0)}), Object({"id": Number(2426), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(9682), "R": Number(9689)}), Object({"L": Number(34382), "R": Number(34389)}), Object({"L": Number(36534), "R": Number(36541)}), Object({"L": Number(38217), "R": Number(38224)}), Object({"L": Number(38604), "R": Number(38611)}), Object({"L": Number(39412), "R": Number(39419)}), Object({"L": Number(43604), "R": Number(43611)})]), "storage": Number(0)}), Object({"id": Number(2499), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(65963), "R": Number(65972)})]), "storage": Number(0)}), Object({"id": Number(4659), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(17557), "R": Number(17566)}), Object({"L": Number(26584), "R": Number(26593)}), Object({"L": Number(27011), "R": Number(27020)}), Object({"L": Number(43624), "R": Number(43633)})]), "storage": Number(0)}), Object({"id": Number(957), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(70252), "R": Number(70277)})]), "storage": Number(0)}), Object({"id": Number(941), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(5815), "R": Number(5835)}), Object({"L": Number(11293), "R": Number(11313)}), Object({"L": Number(11862), "R": Number(11882)}), Object({"L": Number(22246), "R": Number(22266)}), Object({"L": Number(25641), "R": Number(25661)}), Object({"L": Number(31678), "R": Number(31698)}), Object({"L": Number(66237), "R": Number(66257)}), Object({"L": Number(66313), "R": Number(66333)})]), "storage": Number(0)}), Object({"id": Number(4715), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(60586), "R": Number(60590)}), Object({"L": Number(60658), "R": Number(60662)}), Object({"L": Number(60668), "R": Number(60672)})]), "storage": Number(0)}), Object({"id": Number(4701), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(28669), "R": Number(28679)}), Object({"L": Number(69196), "R": Number(69206)}), Object({"L": Number(69219), "R": Number(69229)}), Object({"L": Number(69275), "R": Number(69285)}), Object({"L": Number(69428), "R": Number(69438)})]), "storage": Number(0)}), Object({"id": Number(4674), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(6093), "R": Number(6094)}), Object({"L": Number(6101), "R": Number(6102)}), Object({"L": Number(6109), "R": Number(6110)}), Object({"L": Number(6149), "R": Number(6150)})]), "storage": Number(0)}), Object({"id": Number(4658), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(70073), "R": Number(70085)})]), "storage": Number(0)}), Object({"id": Number(4884), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(16747), "R": Number(16758)}), Object({"L": Number(19305), "R": Number(19316)})]), "storage": Number(0)}), Object({"id": Number(4863), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(70461), "R": Number(70467)}), Object({"L": Number(72000), "R": Number(72006)}), Object({"L": Number(74227), "R": Number(74233)})]), "storage": Number(0)}), Object({"id": Number(4638), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(32512), "R": Number(32514)}), Object({"L": Number(32614), "R": Number(32616)}), Object({"L": Number(32646), "R": Number(32648)}), Object({"L": Number(32681), "R": Number(32683)}), Object({"L": Number(32722), "R": Number(32724)}), Object({"L": Number(32756), "R": Number(32758)}), Object({"L": Number(32776), "R": Number(32778)}), Object({"L": Number(32852), "R": Number(32854)}), Object({"L": Number(34613), "R": Number(34615)}), Object({"L": Number(34720), "R": Number(34722)}), Object({"L": Number(34794), "R": Number(34796)}), Object({"L": Number(34840), "R": Number(34842)}), Object({"L": Number(35076), "R": Number(35078)}), Object({"L": Number(35152), "R": Number(35154)}), Object({"L": Number(35229), "R": Number(35231)}), Object({"L": Number(35392), "R": Number(35394)}), Object({"L": Number(35615), "R": Number(35617)}), Object({"L": Number(35646), "R": Number(35648)}), Object({"L": Number(35678), "R": Number(35680)}), Object({"L": Number(35712), "R": Number(35714)})]), "storage": Number(0)}), Object({"id": Number(4465), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(17636), "R": Number(17645)}), Object({"L": Number(17804), "R": Number(17813)}), Object({"L": Number(17991), "R": Number(18000)}), Object({"L": Number(18216), "R": Number(18225)}), Object({"L": Number(18339), "R": Number(18348)}), Object({"L": Number(18478), "R": Number(18487)}), Object({"L": Number(18678), "R": Number(18687)})]), "storage": Number(0)}), Object({"id": Number(4713), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(26706), "R": Number(26714)}), Object({"L": Number(26932), "R": Number(26940)})]), "storage": Number(0)}), Object({"id": Number(4472), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(7060), "R": Number(7068)}), Object({"L": Number(7143), "R": Number(7151)}), Object({"L": Number(7222), "R": Number(7230)}), Object({"L": Number(10740), "R": Number(10748)}), Object({"L": Number(59485), "R": Number(59493)}), Object({"L": Number(60259), "R": Number(60267)}), Object({"L": Number(60777), "R": Number(60785)}), Object({"L": Number(62177), "R": Number(62185)}), Object({"L": Number(63330), "R": Number(63338)}), Object({"L": Number(63541), "R": Number(63549)}), Object({"L": Number(63814), "R": Number(63822)}), Object({"L": Number(64271), "R": Number(64279)}), Object({"L": Number(64892), "R": Number(64900)})]), "storage": Number(0)}), Object({"id": Number(4599), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(70041), "R": Number(70054)})]), "storage": Number(1)}), Object({"id": Number(4798), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(69299), "R": Number(69313)}), Object({"L": Number(69326), "R": Number(69340)}), Object({"L": Number(69386), "R": Number(69400)}), Object({"L": Number(69473), "R": Number(69487)})]), "storage": Number(0)}), Object({"id": Number(4880), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(11758), "R": Number(11770)})]), "storage": Number(0)}), Object({"id": Number(4871), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(7098), "R": Number(7107)})]), "storage": Number(0)}), Object({"id": Number(936), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(39361), "R": Number(39370)})]), "storage": Number(0)}), Object({"id": Number(4648), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(3103), "R": Number(3111)}), Object({"L": Number(3391), "R": Number(3399)}), Object({"L": Number(3896), "R": Number(3904)}), Object({"L": Number(3971), "R": Number(3979)}), Object({"L": Number(4043), "R": Number(4051)}), Object({"L": Number(4068), "R": Number(4076)})]), "storage": Number(2)}), Object({"id": Number(4609), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(8227), "R": Number(8230)}), Object({"L": Number(8279), "R": Number(8282)}), Object({"L": Number(8301), "R": Number(8304)}), Object({"L": Number(8349), "R": Number(8352)}), Object({"L": Number(8363), "R": Number(8366)}), Object({"L": Number(8384), "R": Number(8387)}), Object({"L": Number(8403), "R": Number(8406)}), Object({"L": Number(8445), "R": Number(8448)}), Object({"L": Number(8467), "R": Number(8470)}), Object({"L": Number(8515), "R": Number(8518)}), Object({"L": Number(8529), "R": Number(8532)}), Object({"L": Number(8550), "R": Number(8553)}), Object({"L": Number(8569), "R": Number(8572)}), Object({"L": Number(8611), "R": Number(8614)}), Object({"L": Number(8633), "R": Number(8636)}), Object({"L": Number(8681), "R": Number(8684)}), Object({"L": Number(8695), "R": Number(8698)}), Object({"L": Number(8716), "R": Number(8719)}), Object({"L": Number(8735), "R": Number(8738)})]), "storage": Number(0)}), Object({"id": Number(4680), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(68510), "R": Number(68515)}), Object({"L": Number(68520), "R": Number(68525)}), Object({"L": Number(68584), "R": Number(68589)}), Object({"L": Number(68719), "R": Number(68724)})]), "storage": Number(0)}), Object({"id": Number(4730), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(61103), "R": Number(61109)}), Object({"L": Number(62614), "R": Number(62620)}), Object({"L": Number(63403), "R": Number(63409)}), Object({"L": Number(64374), "R": Number(64380)}), Object({"L": Number(64975), "R": Number(64981)})]), "storage": Number(0)}), Object({"id": Number(4669), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(6328), "R": Number(6334)}), Object({"L": Number(10962), "R": Number(10968)}), Object({"L": Number(12486), "R": Number(12492)}), Object({"L": Number(12541), "R": Number(12547)}), Object({"L": Number(16089), "R": Number(16095)}), Object({"L": Number(19659), "R": Number(19665)}), Object({"L": Number(22025), "R": Number(22031)}), Object({"L": Number(25997), "R": Number(26003)}), Object({"L": Number(26028), "R": Number(26034)}), Object({"L": Number(26060), "R": Number(26066)}), Object({"L": Number(32650), "R": Number(32656)}), Object({"L": Number(32685), "R": Number(32691)}), Object({"L": Number(32726), "R": Number(32732)}), Object({"L": Number(32760), "R": Number(32766)}), Object({"L": Number(35619), "R": Number(35625)}), Object({"L": Number(35650), "R": Number(35656)}), Object({"L": Number(35682), "R": Number(35688)})]), "storage": Number(0)}), Object({"id": Number(333), "kind": Number(5), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(22969), "R": Number(22987)}), Object({"L": Number(23404), "R": Number(23422)})]), "storage": Number(0)}), Object({"id": Number(2902), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(26007), "R": Number(26017)}), Object({"L": Number(35629), "R": Number(35639)})]), "storage": Number(0)}), Object({"id": Number(4686), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(14732), "R": Number(14754)}), Object({"L": Number(14937), "R": Number(14959)})]), "storage": Number(0)}), Object({"id": Number(4622), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(1954), "R": Number(1960)}), Object({"L": Number(2150), "R": Number(2156)}), Object({"L": Number(2168), "R": Number(2174)}), Object({"L": Number(2192), "R": Number(2198)}), Object({"L": Number(2445), "R": Number(2451)}), Object({"L": Number(2556), "R": Number(2562)}), Object({"L": Number(2694), "R": Number(2700)})]), "storage": Number(0)}), Object({"id": Number(4644), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(30423), "R": Number(30429)}), Object({"L": Number(30491), "R": Number(30497)}), Object({"L": Number(66090), "R": Number(66096)})]), "storage": Number(0)}), Object({"id": Number(991), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(15556), "R": Number(15568)}), Object({"L": Number(30643), "R": Number(30655)}), Object({"L": Number(35259), "R": Number(35271)}), Object({"L": Number(36331), "R": Number(36343)}), Object({"L": Number(37768), "R": Number(37780)}), Object({"L": Number(69411), "R": Number(69423)}), Object({"L": Number(69456), "R": Number(69468)})]), "storage": Number(0)}), Object({"id": Number(4662), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(23162), "R": Number(23166)}), Object({"L": Number(23183), "R": Number(23187)}), Object({"L": Number(23236), "R": Number(23240)}), Object({"L": Number(23257), "R": Number(23261)}), Object({"L": Number(23310), "R": Number(23314)}), Object({"L": Number(23331), "R": Number(23335)}), Object({"L": Number(23614), "R": Number(23618)}), Object({"L": Number(23635), "R": Number(23639)}), Object({"L": Number(23689), "R": Number(23693)}), Object({"L": Number(23710), "R": Number(23714)}), Object({"L": Number(23764), "R": Number(23768)}), Object({"L": Number(23785), "R": Number(23789)}), Object({"L": Number(23979), "R": Number(23983)})]), "storage": Number(0)}), Object({"id": Number(4481), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(11748), "R": Number(11755)}), Object({"L": Number(55439), "R": Number(55446)})]), "storage": Number(0)}), Object({"id": Number(2439), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(66115), "R": Number(66122)})]), "storage": Number(0)}), Object({"id": Number(2453), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9843), "R": Number(9856)}), Object({"L": Number(38359), "R": Number(38372)})]), "storage": Number(0)}), Object({"id": Number(945), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(24362), "R": Number(24374)}), Object({"L": Number(73079), "R": Number(73091)})]), "storage": Number(0)}), Object({"id": Number(4666), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(57033), "R": Number(57038)}), Object({"L": Number(57273), "R": Number(57278)}), Object({"L": Number(57732), "R": Number(57737)}), Object({"L": Number(57746), "R": Number(57751)}), Object({"L": Number(58232), "R": Number(58237)}), Object({"L": Number(58246), "R": Number(58251)}), Object({"L": Number(58431), "R": Number(58436)}), Object({"L": Number(58445), "R": Number(58450)}), Object({"L": Number(58505), "R": Number(58510)}), Object({"L": Number(58832), "R": Number(58837)}), Object({"L": Number(58847), "R": Number(58852)}), Object({"L": Number(58877), "R": Number(58882)}), Object({"L": Number(58924), "R": Number(58929)})]), "storage": Number(0)}), Object({"id": Number(4698), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(12372), "R": Number(12374)}), Object({"L": Number(12469), "R": Number(12471)}), Object({"L": Number(12524), "R": Number(12526)}), Object({"L": Number(12567), "R": Number(12569)}), Object({"L": Number(12611), "R": Number(12613)}), Object({"L": Number(13101), "R": Number(13103)}), Object({"L": Number(13537), "R": Number(13539)}), Object({"L": Number(13793), "R": Number(13795)}), Object({"L": Number(13928), "R": Number(13930)}), Object({"L": Number(13978), "R": Number(13980)}), Object({"L": Number(14075), "R": Number(14077)}), Object({"L": Number(14150), "R": Number(14152)}), Object({"L": Number(14340), "R": Number(14342)}), Object({"L": Number(14587), "R": Number(14589)}), Object({"L": Number(14626), "R": Number(14628)}), Object({"L": Number(15232), "R": Number(15234)}), Object({"L": Number(15288), "R": Number(15290)})]), "storage": Number(0)}), Object({"id": Number(4776), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(40249), "R": Number(40251)}), Object({"L": Number(40886), "R": Number(40888)}), Object({"L": Number(41140), "R": Number(41142)})]), "storage": Number(0)}), Object({"id": Number(4536), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(59312), "R": Number(59315)})]), "storage": Number(0)}), Object({"id": Number(4787), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(41391), "R": Number(41397)}), Object({"L": Number(41762), "R": Number(41768)}), Object({"L": Number(41795), "R": Number(41801)}), Object({"L": Number(41943), "R": Number(41949)}), Object({"L": Number(42064), "R": Number(42070)}), Object({"L": Number(42162), "R": Number(42168)}), Object({"L": Number(42236), "R": Number(42242)}), Object({"L": Number(42357), "R": Number(42363)})]), "storage": Number(0)}), Object({"id": Number(4561), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(1500), "R": Number(1506)}), Object({"L": Number(2264), "R": Number(2270)}), Object({"L": Number(2283), "R": Number(2289)}), Object({"L": Number(2545), "R": Number(2551)})]), "storage": Number(0)}), Object({"id": Number(4828), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(57703), "R": Number(57710)}), Object({"L": Number(57799), "R": Number(57806)})]), "storage": Number(0)}), Object({"id": Number(3898), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(12637), "R": Number(12650)}), Object({"L": Number(14366), "R": Number(14379)}), Object({"L": Number(14652), "R": Number(14665)}), Object({"L": Number(24284), "R": Number(24297)})]), "storage": Number(0)}), Object({"id": Number(4630), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(1122), "R": Number(1128)}), Object({"L": Number(1270), "R": Number(1276)}), Object({"L": Number(1288), "R": Number(1294)}), Object({"L": Number(1312), "R": Number(1318)}), Object({"L": Number(1398), "R": Number(1404)}), Object({"L": Number(1511), "R": Number(1517)}), Object({"L": Number(1657), "R": Number(1663)}), Object({"L": Number(1708), "R": Number(1714)})]), "storage": Number(0)}), Object({"id": Number(986), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(40144), "R": Number(40151)})]), "storage": Number(0)}), Object({"id": Number(4565), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(3517), "R": Number(3523)}), Object({"L": Number(3553), "R": Number(3559)}), Object({"L": Number(6724), "R": Number(6730)}), Object({"L": Number(7401), "R": Number(7407)}), Object({"L": Number(9061), "R": Number(9067)}), Object({"L": Number(12769), "R": Number(12775)}), Object({"L": Number(13261), "R": Number(13267)}), Object({"L": Number(14769), "R": Number(14775)}), Object({"L": Number(14974), "R": Number(14980)}), Object({"L": Number(15762), "R": Number(15768)}), Object({"L": Number(27480), "R": Number(27486)}), Object({"L": Number(29649), "R": Number(29655)}), Object({"L": Number(29683), "R": Number(29689)}), Object({"L": Number(57001), "R": Number(57007)}), Object({"L": Number(57739), "R": Number(57745)}), Object({"L": Number(58239), "R": Number(58245)}), Object({"L": Number(58438), "R": Number(58444)}), Object({"L": Number(58839), "R": Number(58845)}), Object({"L": Number(67110), "R": Number(67116)}), Object({"L": Number(67175), "R": Number(67181)})]), "storage": Number(0)}), Object({"id": Number(4568), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(65650), "R": Number(65652)}), Object({"L": Number(65656), "R": Number(65658)})]), "storage": Number(0)}), Object({"id": Number(4637), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(14814), "R": Number(14822)}), Object({"L": Number(15019), "R": Number(15027)})]), "storage": Number(0)}), Object({"id": Number(951), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(1612), "R": Number(1626)}), Object({"L": Number(2596), "R": Number(2610)}), Object({"L": Number(2652), "R": Number(2666)})]), "storage": Number(0)}), Object({"id": Number(4757), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(36102), "R": Number(36104)}), Object({"L": Number(36108), "R": Number(36110)}), Object({"L": Number(36627), "R": Number(36629)}), Object({"L": Number(36692), "R": Number(36694)}), Object({"L": Number(36749), "R": Number(36751)}), Object({"L": Number(37124), "R": Number(37126)}), Object({"L": Number(37153), "R": Number(37155)}), Object({"L": Number(37200), "R": Number(37202)}), Object({"L": Number(37841), "R": Number(37843)}), Object({"L": Number(38070), "R": Number(38072)}), Object({"L": Number(38236), "R": Number(38238)}), Object({"L": Number(38388), "R": Number(38390)}), Object({"L": Number(38511), "R": Number(38513)}), Object({"L": Number(38532), "R": Number(38534)}), Object({"L": Number(38614), "R": Number(38616)}), Object({"L": Number(38913), "R": Number(38915)})]), "storage": Number(0)}), Object({"id": Number(4750), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(34812), "R": Number(34825)}), Object({"L": Number(49236), "R": Number(49249)})]), "storage": Number(0)}), Object({"id": Number(4522), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(45194), "R": Number(45207)}), Object({"L": Number(45243), "R": Number(45256)}), Object({"L": Number(45278), "R": Number(45291)}), Object({"L": Number(45322), "R": Number(45335)}), Object({"L": Number(45371), "R": Number(45384)}), Object({"L": Number(45406), "R": Number(45419)}), Object({"L": Number(45450), "R": Number(45463)}), Object({"L": Number(45499), "R": Number(45512)}), Object({"L": Number(45534), "R": Number(45547)})]), "storage": Number(0)}), Object({"id": Number(972), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(1233), "R": Number(1246)}), Object({"L": Number(2113), "R": Number(2126)})]), "storage": Number(0)}), Object({"id": Number(288), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(56857), "R": Number(56864)})]), "storage": Number(0)}), Object({"id": Number(4869), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(55451), "R": Number(55464)})]), "storage": Number(0)}), Object({"id": Number(2421), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(6800), "R": Number(6806)}), Object({"L": Number(10287), "R": Number(10293)}), Object({"L": Number(10335), "R": Number(10341)}), Object({"L": Number(27926), "R": Number(27932)}), Object({"L": Number(65885), "R": Number(65891)})]), "storage": Number(0)}), Object({"id": Number(4533), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(7194), "R": Number(7200)}), Object({"L": Number(7249), "R": Number(7255)}), Object({"L": Number(7453), "R": Number(7459)}), Object({"L": Number(7494), "R": Number(7500)})]), "storage": Number(0)}), Object({"id": Number(4509), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(23204), "R": Number(23213)}), Object({"L": Number(23657), "R": Number(23666)})]), "storage": Number(0)}), Object({"id": Number(4479), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(68213), "R": Number(68215)}), Object({"L": Number(69563), "R": Number(69565)}), Object({"L": Number(69623), "R": Number(69625)}), Object({"L": Number(69641), "R": Number(69643)})]), "storage": Number(0)}), Object({"id": Number(4653), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(4451), "R": Number(4460)})]), "storage": Number(0)}), Object({"id": Number(3387), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(7681), "R": Number(7687)}), Object({"L": Number(7725), "R": Number(7731)}), Object({"L": Number(7769), "R": Number(7775)}), Object({"L": Number(7815), "R": Number(7821)}), Object({"L": Number(7860), "R": Number(7866)}), Object({"L": Number(7905), "R": Number(7911)}), Object({"L": Number(7951), "R": Number(7957)}), Object({"L": Number(7996), "R": Number(8002)}), Object({"L": Number(8041), "R": Number(8047)}), Object({"L": Number(8087), "R": Number(8093)}), Object({"L": Number(8132), "R": Number(8138)}), Object({"L": Number(8177), "R": Number(8183)})]), "storage": Number(0)}), Object({"id": Number(2436), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(5401), "R": Number(5409)}), Object({"L": Number(5877), "R": Number(5885)}), Object({"L": Number(9649), "R": Number(9657)}), Object({"L": Number(9833), "R": Number(9841)}), Object({"L": Number(9943), "R": Number(9951)}), Object({"L": Number(10610), "R": Number(10618)}), Object({"L": Number(16593), "R": Number(16601)}), Object({"L": Number(19176), "R": Number(19184)}), Object({"L": Number(19597), "R": Number(19605)}), Object({"L": Number(21576), "R": Number(21584)}), Object({"L": Number(21691), "R": Number(21699)}), Object({"L": Number(22420), "R": Number(22428)}), Object({"L": Number(25555), "R": Number(25563)}), Object({"L": Number(25592), "R": Number(25600)}), Object({"L": Number(31739), "R": Number(31747)}), Object({"L": Number(34417), "R": Number(34425)}), Object({"L": Number(36465), "R": Number(36473)}), Object({"L": Number(38349), "R": Number(38357)}), Object({"L": Number(38459), "R": Number(38467)}), Object({"L": Number(38571), "R": Number(38579)}), Object({"L": Number(39435), "R": Number(39443)}), Object({"L": Number(66104), "R": Number(66112)})]), "storage": Number(0)}), Object({"id": Number(4861), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(70403), "R": Number(70407)}), Object({"L": Number(70740), "R": Number(70744)}), Object({"L": Number(70776), "R": Number(70780)}), Object({"L": Number(71259), "R": Number(71263)}), Object({"L": Number(73693), "R": Number(73697)}), Object({"L": Number(73867), "R": Number(73871)}), Object({"L": Number(73955), "R": Number(73959)}), Object({"L": Number(74043), "R": Number(74047)})]), "storage": Number(0)}), Object({"id": Number(409), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(738), "R": Number(744)}), Object({"L": Number(5665), "R": Number(5671)}), Object({"L": Number(11539), "R": Number(11545)}), Object({"L": Number(11652), "R": Number(11658)}), Object({"L": Number(12068), "R": Number(12074)}), Object({"L": Number(30156), "R": Number(30162)}), Object({"L": Number(55330), "R": Number(55336)}), Object({"L": Number(59341), "R": Number(59347)}), Object({"L": Number(61692), "R": Number(61698)})]), "storage": Number(0)}), Object({"id": Number(4621), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(42534), "R": Number(42539)})]), "storage": Number(0)}), Object({"id": Number(4544), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24345), "R": Number(24349)}), Object({"L": Number(24464), "R": Number(24468)}), Object({"L": Number(24525), "R": Number(24529)})]), "storage": Number(0)}), Object({"id": Number(4549), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(3352), "R": Number(3358)}), Object({"L": Number(4035), "R": Number(4041)}), Object({"L": Number(4845), "R": Number(4851)}), Object({"L": Number(5500), "R": Number(5506)}), Object({"L": Number(10567), "R": Number(10573)}), Object({"L": Number(12262), "R": Number(12268)}), Object({"L": Number(12291), "R": Number(12297)}), Object({"L": Number(12415), "R": Number(12421)}), Object({"L": Number(16530), "R": Number(16536)}), Object({"L": Number(16574), "R": Number(16580)}), Object({"L": Number(16830), "R": Number(16836)}), Object({"L": Number(16874), "R": Number(16880)}), Object({"L": Number(17453), "R": Number(17459)}), Object({"L": Number(18631), "R": Number(18637)}), Object({"L": Number(19113), "R": Number(19119)}), Object({"L": Number(19157), "R": Number(19163)}), Object({"L": Number(19388), "R": Number(19394)}), Object({"L": Number(19432), "R": Number(19438)}), Object({"L": Number(20132), "R": Number(20138)}), Object({"L": Number(21221), "R": Number(21227)}), Object({"L": Number(21546), "R": Number(21552)}), Object({"L": Number(25896), "R": Number(25902)}), Object({"L": Number(26777), "R": Number(26783)}), Object({"L": Number(28296), "R": Number(28302)}), Object({"L": Number(31358), "R": Number(31364)}), Object({"L": Number(33366), "R": Number(33372)}), Object({"L": Number(33952), "R": Number(33958)}), Object({"L": Number(35518), "R": Number(35524)}), Object({"L": Number(38899), "R": Number(38905)}), Object({"L": Number(45586), "R": Number(45592)}), Object({"L": Number(49131), "R": Number(49137)}), Object({"L": Number(53752), "R": Number(53758)}), Object({"L": Number(56657), "R": Number(56663)}), Object({"L": Number(62335), "R": Number(62341)}), Object({"L": Number(68344), "R": Number(68350)}), Object({"L": Number(69950), "R": Number(69956)}), Object({"L": Number(73817), "R": Number(73823)})]), "storage": Number(0)}), Object({"id": Number(335), "kind": Number(23), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(22681), "R": Number(22696)})]), "storage": Number(0)}), Object({"id": Number(4790), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(42522), "R": Number(42525)})]), "storage": Number(0)}), Object({"id": Number(4694), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(55354), "R": Number(55367)}), Object({"L": Number(57335), "R": Number(57348)}), Object({"L": Number(59218), "R": Number(59231)}), Object({"L": Number(61714), "R": Number(61727)})]), "storage": Number(0)}), Object({"id": Number(929), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(43948), "R": Number(43973)}), Object({"L": Number(49799), "R": Number(49824)})]), "storage": Number(0)}), Object({"id": Number(109), "kind": Number(23), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(59271), "R": Number(59280)}), Object({"L": Number(60575), "R": Number(60584)})]), "storage": Number(0)}), Object({"id": Number(959), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(760), "R": Number(781)}), Object({"L": Number(26363), "R": Number(26384)}), Object({"L": Number(31406), "R": Number(31427)}), Object({"L": Number(35837), "R": Number(35858)}), Object({"L": Number(38984), "R": Number(39005)})]), "storage": Number(0)}), Object({"id": Number(4587), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(6953), "R": Number(6957)}), Object({"L": Number(7041), "R": Number(7045)}), Object({"L": Number(7124), "R": Number(7128)}), Object({"L": Number(7203), "R": Number(7207)}), Object({"L": Number(7389), "R": Number(7393)}), Object({"L": Number(7548), "R": Number(7552)})]), "storage": Number(0)}), Object({"id": Number(989), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(42492), "R": Number(42499)})]), "storage": Number(0)}), Object({"id": Number(4833), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(58994), "R": Number(59001)}), Object({"L": Number(59033), "R": Number(59040)}), Object({"L": Number(61408), "R": Number(61415)})]), "storage": Number(0)}), Object({"id": Number(4767), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(40074), "R": Number(40076)})]), "storage": Number(2)}), Object({"id": Number(4562), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(3079), "R": Number(3083)}), Object({"L": Number(3119), "R": Number(3123)}), Object({"L": Number(3226), "R": Number(3230)}), Object({"L": Number(3272), "R": Number(3276)}), Object({"L": Number(3333), "R": Number(3337)}), Object({"L": Number(3419), "R": Number(3423)}), Object({"L": Number(3463), "R": Number(3467)}), Object({"L": Number(3480), "R": Number(3484)}), Object({"L": Number(3505), "R": Number(3509)}), Object({"L": Number(3541), "R": Number(3545)}), Object({"L": Number(3855), "R": Number(3859)}), Object({"L": Number(3953), "R": Number(3957)}), Object({"L": Number(4016), "R": Number(4020)})]), "storage": Number(0)}), Object({"id": Number(4657), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(16623), "R": Number(16634)}), Object({"L": Number(16898), "R": Number(16909)}), Object({"L": Number(58512), "R": Number(58523)}), Object({"L": Number(58854), "R": Number(58865)}), Object({"L": Number(58884), "R": Number(58895)})]), "storage": Number(0)}), Object({"id": Number(4684), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(5298), "R": Number(5302)}), Object({"L": Number(5426), "R": Number(5430)}), Object({"L": Number(5447), "R": Number(5451)}), Object({"L": Number(5479), "R": Number(5483)}), Object({"L": Number(5510), "R": Number(5514)}), Object({"L": Number(5560), "R": Number(5564)}), Object({"L": Number(5631), "R": Number(5635)}), Object({"L": Number(6307), "R": Number(6311)}), Object({"L": Number(6397), "R": Number(6401)})]), "storage": Number(0)}), Object({"id": Number(4567), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(18193), "R": Number(18206)}), Object({"L": Number(20795), "R": Number(20808)})]), "storage": Number(0)}), Object({"id": Number(4774), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(70573), "R": Number(70578)}), Object({"L": Number(73112), "R": Number(73117)}), Object({"L": Number(73355), "R": Number(73360)}), Object({"L": Number(73400), "R": Number(73405)}), Object({"L": Number(73445), "R": Number(73450)})]), "storage": Number(0)}), Object({"id": Number(4612), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(39123), "R": Number(39127)}), Object({"L": Number(39192), "R": Number(39196)}), Object({"L": Number(39509), "R": Number(39513)})]), "storage": Number(0)}), Object({"id": Number(4538), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(1205), "R": Number(1211)}), Object({"L": Number(1249), "R": Number(1255)}), Object({"L": Number(1493), "R": Number(1499)}), Object({"L": Number(1628), "R": Number(1634)})]), "storage": Number(0)}), Object({"id": Number(4607), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(6972), "R": Number(6975)}), Object({"L": Number(7653), "R": Number(7656)}), Object({"L": Number(7697), "R": Number(7700)}), Object({"L": Number(7741), "R": Number(7744)}), Object({"L": Number(7786), "R": Number(7789)}), Object({"L": Number(7831), "R": Number(7834)}), Object({"L": Number(7876), "R": Number(7879)}), Object({"L": Number(7922), "R": Number(7925)}), Object({"L": Number(7967), "R": Number(7970)}), Object({"L": Number(8012), "R": Number(8015)}), Object({"L": Number(8058), "R": Number(8061)}), Object({"L": Number(8103), "R": Number(8106)}), Object({"L": Number(8148), "R": Number(8151)})]), "storage": Number(0)}), Object({"id": Number(4667), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(5011), "R": Number(5012)}), Object({"L": Number(5099), "R": Number(5100)}), Object({"L": Number(5237), "R": Number(5238)})]), "storage": Number(0)}), Object({"id": Number(4707), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(6855), "R": Number(6865)}), Object({"L": Number(13302), "R": Number(13312)}), Object({"L": Number(15397), "R": Number(15407)}), Object({"L": Number(15576), "R": Number(15586)}), Object({"L": Number(16663), "R": Number(16673)}), Object({"L": Number(16946), "R": Number(16956)}), Object({"L": Number(19221), "R": Number(19231)}), Object({"L": Number(19479), "R": Number(19489)}), Object({"L": Number(24382), "R": Number(24392)}), Object({"L": Number(28687), "R": Number(28697)}), Object({"L": Number(32870), "R": Number(32880)}), Object({"L": Number(35279), "R": Number(35289)}), Object({"L": Number(36351), "R": Number(36361)}), Object({"L": Number(37713), "R": Number(37723)}), Object({"L": Number(45798), "R": Number(45808)}), Object({"L": Number(46690), "R": Number(46700)}), Object({"L": Number(46752), "R": Number(46762)}), Object({"L": Number(46814), "R": Number(46824)}), Object({"L": Number(48425), "R": Number(48435)}), Object({"L": Number(49753), "R": Number(49763)}), Object({"L": Number(62769), "R": Number(62779)}), Object({"L": Number(72917), "R": Number(72927)}), Object({"L": Number(73046), "R": Number(73056)})]), "storage": Number(0)}), Object({"id": Number(2448), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(5955), "R": Number(5965)}), Object({"L": Number(5988), "R": Number(5998)}), Object({"L": Number(6021), "R": Number(6031)}), Object({"L": Number(15934), "R": Number(15944)}), Object({"L": Number(15983), "R": Number(15993)}), Object({"L": Number(16032), "R": Number(16042)}), Object({"L": Number(22302), "R": Number(22312)}), Object({"L": Number(22375), "R": Number(22385)}), Object({"L": Number(22395), "R": Number(22405)}), Object({"L": Number(25448), "R": Number(25458)}), Object({"L": Number(25468), "R": Number(25478)}), Object({"L": Number(25488), "R": Number(25498)}), Object({"L": Number(25525), "R": Number(25535)}), Object({"L": Number(27997), "R": Number(28007)}), Object({"L": Number(28024), "R": Number(28034)}), Object({"L": Number(28051), "R": Number(28061)}), Object({"L": Number(28078), "R": Number(28088)}), Object({"L": Number(31816), "R": Number(31826)}), Object({"L": Number(31836), "R": Number(31846)}), Object({"L": Number(31868), "R": Number(31878)}), Object({"L": Number(65798), "R": Number(65808)}), Object({"L": Number(65818), "R": Number(65828)}), Object({"L": Number(65838), "R": Number(65848)}), Object({"L": Number(65858), "R": Number(65868)})]), "storage": Number(0)}), Object({"id": Number(4671), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(10589), "R": Number(10598)}), Object({"L": Number(25864), "R": Number(25873)}), Object({"L": Number(31326), "R": Number(31335)}), Object({"L": Number(35486), "R": Number(35495)}), Object({"L": Number(38867), "R": Number(38876)}), Object({"L": Number(45608), "R": Number(45617)}), Object({"L": Number(69645), "R": Number(69654)})]), "storage": Number(0)}), Object({"id": Number(4583), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(59429), "R": Number(59447)}), Object({"L": Number(59615), "R": Number(59633)}), Object({"L": Number(59753), "R": Number(59771)}), Object({"L": Number(59888), "R": Number(59906)}), Object({"L": Number(61882), "R": Number(61900)}), Object({"L": Number(61925), "R": Number(61943)}), Object({"L": Number(62918), "R": Number(62936)}), Object({"L": Number(63494), "R": Number(63512)}), Object({"L": Number(63912), "R": Number(63930)}), Object({"L": Number(64506), "R": Number(64524)}), Object({"L": Number(64598), "R": Number(64616)}), Object({"L": Number(64654), "R": Number(64672)}), Object({"L": Number(64734), "R": Number(64752)}), Object({"L": Number(64767), "R": Number(64785)}), Object({"L": Number(65095), "R": Number(65113)}), Object({"L": Number(65180), "R": Number(65198)}), Object({"L": Number(65236), "R": Number(65254)}), Object({"L": Number(65309), "R": Number(65327)}), Object({"L": Number(65342), "R": Number(65360)})]), "storage": Number(0)}), Object({"id": Number(71), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(1138), "R": Number(1147)}), Object({"L": Number(1970), "R": Number(1979)})]), "storage": Number(0)}), Object({"id": Number(4560), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(1635), "R": Number(1639)}), Object({"L": Number(2350), "R": Number(2354)}), Object({"L": Number(2370), "R": Number(2374)}), Object({"L": Number(2633), "R": Number(2637)})]), "storage": Number(0)}), Object({"id": Number(4859), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(70333), "R": Number(70334)}), Object({"L": Number(70973), "R": Number(70974)}), Object({"L": Number(70994), "R": Number(70995)}), Object({"L": Number(71019), "R": Number(71020)}), Object({"L": Number(71037), "R": Number(71038)}), Object({"L": Number(71138), "R": Number(71139)}), Object({"L": Number(71183), "R": Number(71184)}), Object({"L": Number(71205), "R": Number(71206)}), Object({"L": Number(71232), "R": Number(71233)}), Object({"L": Number(71523), "R": Number(71524)}), Object({"L": Number(71605), "R": Number(71606)}), Object({"L": Number(71626), "R": Number(71627)}), Object({"L": Number(71650), "R": Number(71651)}), Object({"L": Number(71677), "R": Number(71678)}), Object({"L": Number(72417), "R": Number(72418)}), Object({"L": Number(72484), "R": Number(72485)}), Object({"L": Number(72507), "R": Number(72508)}), Object({"L": Number(72537), "R": Number(72538)}), Object({"L": Number(72569), "R": Number(72570)})]), "storage": Number(0)}), Object({"id": Number(4736), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(68171), "R": Number(68174)}), Object({"L": Number(68244), "R": Number(68247)}), Object({"L": Number(68254), "R": Number(68257)}), Object({"L": Number(68283), "R": Number(68286)}), Object({"L": Number(68338), "R": Number(68341)}), Object({"L": Number(69853), "R": Number(69856)}), Object({"L": Number(69863), "R": Number(69866)}), Object({"L": Number(69892), "R": Number(69895)}), Object({"L": Number(69944), "R": Number(69947)}), Object({"L": Number(69995), "R": Number(69998)}), Object({"L": Number(70001), "R": Number(70004)}), Object({"L": Number(70022), "R": Number(70025)}), Object({"L": Number(70055), "R": Number(70058)})]), "storage": Number(0)}), Object({"id": Number(4838), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(29542), "R": Number(29552)}), Object({"L": Number(29616), "R": Number(29626)}), Object({"L": Number(30458), "R": Number(30468)}), Object({"L": Number(30521), "R": Number(30531)}), Object({"L": Number(30569), "R": Number(30579)}), Object({"L": Number(30657), "R": Number(30667)})]), "storage": Number(0)}), Object({"id": Number(4831), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(58608), "R": Number(58627)})]), "storage": Number(0)}), Object({"id": Number(632), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(9233), "R": Number(9239)}), Object({"L": Number(27814), "R": Number(27820)}), Object({"L": Number(28149), "R": Number(28155)}), Object({"L": Number(34140), "R": Number(34146)}), Object({"L": Number(36165), "R": Number(36171)}), Object({"L": Number(39243), "R": Number(39249)}), Object({"L": Number(43090), "R": Number(43096)}), Object({"L": Number(65713), "R": Number(65719)})]), "storage": Number(0)}), Object({"id": Number(985), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(34876), "R": Number(34897)}), Object({"L": Number(34986), "R": Number(35007)}), Object({"L": Number(35112), "R": Number(35133)}), Object({"L": Number(35189), "R": Number(35210)})]), "storage": Number(0)}), Object({"id": Number(528), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(8428), "R": Number(8433)}), Object({"L": Number(8594), "R": Number(8599)}), Object({"L": Number(8760), "R": Number(8765)}), Object({"L": Number(11551), "R": Number(11556)}), Object({"L": Number(11664), "R": Number(11669)}), Object({"L": Number(12080), "R": Number(12085)}), Object({"L": Number(61968), "R": Number(61973)})]), "storage": Number(0)}), Object({"id": Number(4593), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(58952), "R": Number(58966)})]), "storage": Number(0)}), Object({"id": Number(2430), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(8408), "R": Number(8425)}), Object({"L": Number(8574), "R": Number(8591)}), Object({"L": Number(8740), "R": Number(8757)}), Object({"L": Number(30136), "R": Number(30153)})]), "storage": Number(0)}), Object({"id": Number(4682), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(2045), "R": Number(2046)}), Object({"L": Number(2301), "R": Number(2302)}), Object({"L": Number(2309), "R": Number(2310)}), Object({"L": Number(2317), "R": Number(2318)}), Object({"L": Number(2355), "R": Number(2356)}), Object({"L": Number(2375), "R": Number(2376)}), Object({"L": Number(2486), "R": Number(2487)}), Object({"L": Number(2494), "R": Number(2495)}), Object({"L": Number(2502), "R": Number(2503)}), Object({"L": Number(2552), "R": Number(2553)}), Object({"L": Number(2569), "R": Number(2570)})]), "storage": Number(0)}), Object({"id": Number(953), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(4226), "R": Number(4242)}), Object({"L": Number(66820), "R": Number(66836)})]), "storage": Number(0)}), Object({"id": Number(994), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(45213), "R": Number(45222)}), Object({"L": Number(45341), "R": Number(45350)}), Object({"L": Number(45469), "R": Number(45478)}), Object({"L": Number(46706), "R": Number(46715)}), Object({"L": Number(46768), "R": Number(46777)}), Object({"L": Number(46830), "R": Number(46839)})]), "storage": Number(0)}), Object({"id": Number(4693), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(41413), "R": Number(41416)}), Object({"L": Number(41454), "R": Number(41457)}), Object({"L": Number(41466), "R": Number(41469)}), Object({"L": Number(41478), "R": Number(41481)}), Object({"L": Number(41508), "R": Number(41511)}), Object({"L": Number(41518), "R": Number(41521)}), Object({"L": Number(41528), "R": Number(41531)}), Object({"L": Number(41582), "R": Number(41585)}), Object({"L": Number(41604), "R": Number(41607)}), Object({"L": Number(41635), "R": Number(41638)}), Object({"L": Number(41650), "R": Number(41653)}), Object({"L": Number(41668), "R": Number(41671)}), Object({"L": Number(41683), "R": Number(41686)}), Object({"L": Number(41702), "R": Number(41705)}), Object({"L": Number(41717), "R": Number(41720)}), Object({"L": Number(41735), "R": Number(41738)}), Object({"L": Number(41750), "R": Number(41753)}), Object({"L": Number(41769), "R": Number(41772)}), Object({"L": Number(41784), "R": Number(41787)}), Object({"L": Number(41802), "R": Number(41805)}), Object({"L": Number(41817), "R": Number(41820)}), Object({"L": Number(41838), "R": Number(41841)}), Object({"L": Number(41853), "R": Number(41856)}), Object({"L": Number(41871), "R": Number(41874)}), Object({"L": Number(41886), "R": Number(41889)}), Object({"L": Number(41916), "R": Number(41919)}), Object({"L": Number(41933), "R": Number(41936)}), Object({"L": Number(41950), "R": Number(41953)}), Object({"L": Number(41967), "R": Number(41970)}), Object({"L": Number(41982), "R": Number(41985)}), Object({"L": Number(42209), "R": Number(42212)}), Object({"L": Number(42226), "R": Number(42229)}), Object({"L": Number(42243), "R": Number(42246)}), Object({"L": Number(42260), "R": Number(42263)}), Object({"L": Number(42275), "R": Number(42278)})]), "storage": Number(0)}), Object({"id": Number(4552), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(37680), "R": Number(37691)}), Object({"L": Number(37750), "R": Number(37761)}), Object({"L": Number(37782), "R": Number(37793)})]), "storage": Number(0)}), Object({"id": Number(4876), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(7155), "R": Number(7165)})]), "storage": Number(0)}), Object({"id": Number(4811), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(49043), "R": Number(49050)}), Object({"L": Number(49472), "R": Number(49479)}), Object({"L": Number(49510), "R": Number(49517)}), Object({"L": Number(49552), "R": Number(49559)}), Object({"L": Number(49587), "R": Number(49594)})]), "storage": Number(0)}), Object({"id": Number(4848), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(62951), "R": Number(62952)}), Object({"L": Number(63011), "R": Number(63012)}), Object({"L": Number(63123), "R": Number(63124)})]), "storage": Number(0)}), Object({"id": Number(4461), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24114), "R": Number(24121)}), Object({"L": Number(24167), "R": Number(24174)}), Object({"L": Number(24237), "R": Number(24244)})]), "storage": Number(0)}), Object({"id": Number(4590), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(62217), "R": Number(62224)}), Object({"L": Number(62355), "R": Number(62362)}), Object({"L": Number(62539), "R": Number(62546)}), Object({"L": Number(62548), "R": Number(62555)}), Object({"L": Number(62572), "R": Number(62579)})]), "storage": Number(0)}), Object({"id": Number(4673), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(49094), "R": Number(49097)}), Object({"L": Number(49148), "R": Number(49151)}), Object({"L": Number(49155), "R": Number(49158)}), Object({"L": Number(49179), "R": Number(49182)}), Object({"L": Number(49215), "R": Number(49218)}), Object({"L": Number(49428), "R": Number(49431)}), Object({"L": Number(49521), "R": Number(49524)})]), "storage": Number(0)}), Object({"id": Number(4708), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(7114), "R": Number(7121)}), Object({"L": Number(7168), "R": Number(7175)}), Object({"L": Number(7419), "R": Number(7426)})]), "storage": Number(0)}), Object({"id": Number(60), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(4574), "R": Number(4585)}), Object({"L": Number(53864), "R": Number(53875)})]), "storage": Number(0)}), Object({"id": Number(4627), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(3563), "R": Number(3583)})]), "storage": Number(0)}), Object({"id": Number(332), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(1191), "R": Number(1204)}), Object({"L": Number(2008), "R": Number(2021)}), Object({"L": Number(2049), "R": Number(2062)})]), "storage": Number(0)}), Object({"id": Number(4610), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(4991), "R": Number(4993)}), Object({"L": Number(5017), "R": Number(5019)}), Object({"L": Number(5062), "R": Number(5064)}), Object({"L": Number(5080), "R": Number(5082)}), Object({"L": Number(5105), "R": Number(5107)}), Object({"L": Number(5133), "R": Number(5135)})]), "storage": Number(0)}), Object({"id": Number(4532), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(11126), "R": Number(11130)}), Object({"L": Number(11387), "R": Number(11391)}), Object({"L": Number(11511), "R": Number(11515)}), Object({"L": Number(11623), "R": Number(11627)}), Object({"L": Number(11706), "R": Number(11710)}), Object({"L": Number(12040), "R": Number(12044)})]), "storage": Number(0)}), Object({"id": Number(3645), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(30379), "R": Number(30384)}), Object({"L": Number(31491), "R": Number(31496)})]), "storage": Number(0)}), Object({"id": Number(4545), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(40218), "R": Number(40223)}), Object({"L": Number(40477), "R": Number(40482)}), Object({"L": Number(40512), "R": Number(40517)}), Object({"L": Number(40548), "R": Number(40553)}), Object({"L": Number(40583), "R": Number(40588)}), Object({"L": Number(40619), "R": Number(40624)}), Object({"L": Number(40654), "R": Number(40659)}), Object({"L": Number(40692), "R": Number(40697)}), Object({"L": Number(40727), "R": Number(40732)}), Object({"L": Number(40774), "R": Number(40779)}), Object({"L": Number(40793), "R": Number(40798)}), Object({"L": Number(40812), "R": Number(40817)}), Object({"L": Number(40831), "R": Number(40836)}), Object({"L": Number(40879), "R": Number(40884)}), Object({"L": Number(41028), "R": Number(41033)}), Object({"L": Number(41047), "R": Number(41052)}), Object({"L": Number(41066), "R": Number(41071)}), Object({"L": Number(41085), "R": Number(41090)}), Object({"L": Number(41133), "R": Number(41138)})]), "storage": Number(0)}), Object({"id": Number(4547), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(43988), "R": Number(43990)}), Object({"L": Number(44172), "R": Number(44174)}), Object({"L": Number(44292), "R": Number(44294)}), Object({"L": Number(44731), "R": Number(44733)})]), "storage": Number(0)}), Object({"id": Number(4542), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(17385), "R": Number(17395)}), Object({"L": Number(20013), "R": Number(20023)})]), "storage": Number(0)}), Object({"id": Number(4741), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(32906), "R": Number(32914)}), Object({"L": Number(34490), "R": Number(34498)})]), "storage": Number(0)}), Object({"id": Number(515), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(718), "R": Number(726)}), Object({"L": Number(827), "R": Number(835)}), Object({"L": Number(59319), "R": Number(59327)}), Object({"L": Number(68140), "R": Number(68148)})]), "storage": Number(0)}), Object({"id": Number(4459), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(70553), "R": Number(70562)}), Object({"L": Number(73157), "R": Number(73166)}), Object({"L": Number(73186), "R": Number(73195)}), Object({"L": Number(73233), "R": Number(73242)}), Object({"L": Number(73280), "R": Number(73289)}), Object({"L": Number(73339), "R": Number(73348)}), Object({"L": Number(73384), "R": Number(73393)}), Object({"L": Number(73429), "R": Number(73438)}), Object({"L": Number(73483), "R": Number(73492)}), Object({"L": Number(73525), "R": Number(73534)}), Object({"L": Number(73567), "R": Number(73576)}), Object({"L": Number(73646), "R": Number(73655)})]), "storage": Number(0)}), Object({"id": Number(4495), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(5466), "R": Number(5472)}), Object({"L": Number(11153), "R": Number(11159)}), Object({"L": Number(19534), "R": Number(19540)}), Object({"L": Number(21631), "R": Number(21637)}), Object({"L": Number(21993), "R": Number(21999)})]), "storage": Number(0)}), Object({"id": Number(210), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(6177), "R": Number(6189)}), Object({"L": Number(6383), "R": Number(6395)}), Object({"L": Number(32017), "R": Number(32029)})]), "storage": Number(0)}), Object({"id": Number(2458), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(6702), "R": Number(6708)})]), "storage": Number(0)}), Object({"id": Number(4735), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(32466), "R": Number(32470)}), Object({"L": Number(32582), "R": Number(32586)}), Object({"L": Number(32620), "R": Number(32624)}), Object({"L": Number(32864), "R": Number(32868)}), Object({"L": Number(32894), "R": Number(32898)}), Object({"L": Number(33009), "R": Number(33013)}), Object({"L": Number(33109), "R": Number(33113)}), Object({"L": Number(33347), "R": Number(33351)}), Object({"L": Number(33374), "R": Number(33378)}), Object({"L": Number(33621), "R": Number(33625)}), Object({"L": Number(33716), "R": Number(33720)}), Object({"L": Number(33933), "R": Number(33937)}), Object({"L": Number(33960), "R": Number(33964)}), Object({"L": Number(34184), "R": Number(34188)}), Object({"L": Number(34228), "R": Number(34232)}), Object({"L": Number(34312), "R": Number(34316)}), Object({"L": Number(34478), "R": Number(34482)}), Object({"L": Number(35273), "R": Number(35277)}), Object({"L": Number(35499), "R": Number(35503)}), Object({"L": Number(35552), "R": Number(35556)}), Object({"L": Number(35866), "R": Number(35870)})]), "storage": Number(0)}), Object({"id": Number(4589), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(62235), "R": Number(62248)}), Object({"L": Number(62581), "R": Number(62594)}), Object({"L": Number(62699), "R": Number(62712)})]), "storage": Number(0)}), Object({"id": Number(4591), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(31935), "R": Number(31936)}), Object({"L": Number(31943), "R": Number(31944)}), Object({"L": Number(31951), "R": Number(31952)}), Object({"L": Number(31990), "R": Number(31991)})]), "storage": Number(0)}), Object({"id": Number(4745), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(37592), "R": Number(37603)}), Object({"L": Number(37737), "R": Number(37748)})]), "storage": Number(0)}), Object({"id": Number(4726), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(39180), "R": Number(39182)}), Object({"L": Number(39186), "R": Number(39188)}), Object({"L": Number(39287), "R": Number(39289)}), Object({"L": Number(39330), "R": Number(39332)})]), "storage": Number(0)}), Object({"id": Number(295), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(49029), "R": Number(49041)})]), "storage": Number(0)}), Object({"id": Number(58), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(423), "R": Number(432)}), Object({"L": Number(440), "R": Number(449)}), Object({"L": Number(573), "R": Number(582)}), Object({"L": Number(590), "R": Number(599)}), Object({"L": Number(801), "R": Number(810)}), Object({"L": Number(857), "R": Number(866)}), Object({"L": Number(3068), "R": Number(3077)}), Object({"L": Number(4244), "R": Number(4253)}), Object({"L": Number(5287), "R": Number(5296)}), Object({"L": Number(6677), "R": Number(6686)}), Object({"L": Number(6942), "R": Number(6951)}), Object({"L": Number(8877), "R": Number(8886)}), Object({"L": Number(12361), "R": Number(12370)}), Object({"L": Number(26537), "R": Number(26546)}), Object({"L": Number(27117), "R": Number(27126)}), Object({"L": Number(32455), "R": Number(32464)}), Object({"L": Number(36045), "R": Number(36054)}), Object({"L": Number(39112), "R": Number(39121)}), Object({"L": Number(42781), "R": Number(42790)}), Object({"L": Number(44034), "R": Number(44043)}), Object({"L": Number(44951), "R": Number(44960)}), Object({"L": Number(53617), "R": Number(53626)}), Object({"L": Number(53999), "R": Number(54008)}), Object({"L": Number(56867), "R": Number(56876)}), Object({"L": Number(59402), "R": Number(59411)}), Object({"L": Number(65459), "R": Number(65468)}), Object({"L": Number(65595), "R": Number(65604)}), Object({"L": Number(66479), "R": Number(66488)}), Object({"L": Number(68177), "R": Number(68186)}), Object({"L": Number(70279), "R": Number(70288)})]), "storage": Number(0)}), Object({"id": Number(4814), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(53918), "R": Number(53923)}), Object({"L": Number(53965), "R": Number(53970)})]), "storage": Number(0)}), Object({"id": Number(4641), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(46171), "R": Number(46178)}), Object({"L": Number(46589), "R": Number(46596)}), Object({"L": Number(46717), "R": Number(46724)}), Object({"L": Number(46779), "R": Number(46786)}), Object({"L": Number(46841), "R": Number(46848)}), Object({"L": Number(47696), "R": Number(47703)}), Object({"L": Number(47812), "R": Number(47819)}), Object({"L": Number(47841), "R": Number(47848)}), Object({"L": Number(47880), "R": Number(47887)}), Object({"L": Number(47909), "R": Number(47916)}), Object({"L": Number(47948), "R": Number(47955)}), Object({"L": Number(47977), "R": Number(47984)})]), "storage": Number(0)}), Object({"id": Number(4505), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(42838), "R": Number(42840)}), Object({"L": Number(42844), "R": Number(42846)}), Object({"L": Number(43179), "R": Number(43181)}), Object({"L": Number(43221), "R": Number(43223)}), Object({"L": Number(43569), "R": Number(43571)}), Object({"L": Number(43620), "R": Number(43622)})]), "storage": Number(0)}), Object({"id": Number(4579), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(17064), "R": Number(17074)}), Object({"L": Number(17120), "R": Number(17130)}), Object({"L": Number(17527), "R": Number(17537)}), Object({"L": Number(49101), "R": Number(49111)}), Object({"L": Number(60292), "R": Number(60302)}), Object({"L": Number(60355), "R": Number(60365)}), Object({"L": Number(60486), "R": Number(60496)}), Object({"L": Number(60593), "R": Number(60603)}), Object({"L": Number(60816), "R": Number(60826)}), Object({"L": Number(60880), "R": Number(60890)}), Object({"L": Number(62276), "R": Number(62286)})]), "storage": Number(1)}), Object({"id": Number(4650), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(4255), "R": Number(4259)}), Object({"L": Number(4348), "R": Number(4352)}), Object({"L": Number(4392), "R": Number(4396)}), Object({"L": Number(4482), "R": Number(4486)}), Object({"L": Number(4594), "R": Number(4598)}), Object({"L": Number(4635), "R": Number(4639)}), Object({"L": Number(4686), "R": Number(4690)}), Object({"L": Number(4826), "R": Number(4830)}), Object({"L": Number(4947), "R": Number(4951)}), Object({"L": Number(5022), "R": Number(5026)}), Object({"L": Number(5182), "R": Number(5186)})]), "storage": Number(0)}), Object({"id": Number(4493), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(5002), "R": Number(5003)}), Object({"L": Number(5125), "R": Number(5126)}), Object({"L": Number(5207), "R": Number(5208)})]), "storage": Number(0)}), Object({"id": Number(4867), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(63550), "R": Number(63566)})]), "storage": Number(0)}), Object({"id": Number(9), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(508), "R": Number(514)}), Object({"L": Number(523), "R": Number(529)}), Object({"L": Number(638), "R": Number(644)}), Object({"L": Number(653), "R": Number(659)}), Object({"L": Number(706), "R": Number(712)}), Object({"L": Number(2072), "R": Number(2078)}), Object({"L": Number(3033), "R": Number(3039)}), Object({"L": Number(3096), "R": Number(3102)}), Object({"L": Number(3166), "R": Number(3172)}), Object({"L": Number(4291), "R": Number(4297)}), Object({"L": Number(5780), "R": Number(5786)}), Object({"L": Number(11119), "R": Number(11125)}), Object({"L": Number(22640), "R": Number(22646)}), Object({"L": Number(24107), "R": Number(24113)}), Object({"L": Number(24333), "R": Number(24339)}), Object({"L": Number(29535), "R": Number(29541)}), Object({"L": Number(31644), "R": Number(31650)}), Object({"L": Number(37673), "R": Number(37679)}), Object({"L": Number(39673), "R": Number(39679)}), Object({"L": Number(39687), "R": Number(39693)}), Object({"L": Number(39713), "R": Number(39719)}), Object({"L": Number(39732), "R": Number(39738)}), Object({"L": Number(40153), "R": Number(40159)}), Object({"L": Number(40166), "R": Number(40172)}), Object({"L": Number(40179), "R": Number(40185)}), Object({"L": Number(40211), "R": Number(40217)}), Object({"L": Number(41295), "R": Number(41301)}), Object({"L": Number(41308), "R": Number(41314)}), Object({"L": Number(41368), "R": Number(41374)}), Object({"L": Number(42501), "R": Number(42507)}), Object({"L": Number(42515), "R": Number(42521)}), Object({"L": Number(42527), "R": Number(42533)}), Object({"L": Number(43981), "R": Number(43987)}), Object({"L": Number(44018), "R": Number(44024)}), Object({"L": Number(44052), "R": Number(44058)}), Object({"L": Number(44900), "R": Number(44906)}), Object({"L": Number(46163), "R": Number(46169)}), Object({"L": Number(54157), "R": Number(54163)}), Object({"L": Number(62210), "R": Number(62216)}), Object({"L": Number(62228), "R": Number(62234)}), Object({"L": Number(70507), "R": Number(70513)})]), "storage": Number(0)}), Object({"id": Number(4095), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(4782), "R": Number(4791)}), Object({"L": Number(9139), "R": Number(9148)}), Object({"L": Number(27517), "R": Number(27526)}), Object({"L": Number(37213), "R": Number(37222)}), Object({"L": Number(38083), "R": Number(38092)})]), "storage": Number(0)}), Object({"id": Number(4786), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(41383), "R": Number(41389)}), Object({"L": Number(41695), "R": Number(41701)}), Object({"L": Number(41728), "R": Number(41734)}), Object({"L": Number(41926), "R": Number(41932)}), Object({"L": Number(42015), "R": Number(42021)}), Object({"L": Number(42056), "R": Number(42062)}), Object({"L": Number(42219), "R": Number(42225)}), Object({"L": Number(42308), "R": Number(42314)}), Object({"L": Number(42349), "R": Number(42355)})]), "storage": Number(0)}), Object({"id": Number(4853), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(65629), "R": Number(65632)}), Object({"L": Number(65722), "R": Number(65725)}), Object({"L": Number(65738), "R": Number(65741)}), Object({"L": Number(65778), "R": Number(65781)}), Object({"L": Number(65794), "R": Number(65797)}), Object({"L": Number(65814), "R": Number(65817)}), Object({"L": Number(65834), "R": Number(65837)}), Object({"L": Number(65854), "R": Number(65857)}), Object({"L": Number(65881), "R": Number(65884)}), Object({"L": Number(65915), "R": Number(65918)}), Object({"L": Number(65950), "R": Number(65953)}), Object({"L": Number(66063), "R": Number(66066)}), Object({"L": Number(66100), "R": Number(66103)}), Object({"L": Number(66218), "R": Number(66221)}), Object({"L": Number(66294), "R": Number(66297)}), Object({"L": Number(66389), "R": Number(66392)})]), "storage": Number(0)}), Object({"id": Number(4670), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(61321), "R": Number(61343)}), Object({"L": Number(63197), "R": Number(63219)}), Object({"L": Number(64427), "R": Number(64449)}), Object({"L": Number(64553), "R": Number(64575)}), Object({"L": Number(64701), "R": Number(64723)}), Object({"L": Number(64824), "R": Number(64846)})]), "storage": Number(0)}), Object({"id": Number(964), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(5356), "R": Number(5381)}), Object({"L": Number(6047), "R": Number(6072)}), Object({"L": Number(22447), "R": Number(22472)}), Object({"L": Number(25698), "R": Number(25723)}), Object({"L": Number(28101), "R": Number(28126)}), Object({"L": Number(31221), "R": Number(31246)}), Object({"L": Number(31889), "R": Number(31914)}), Object({"L": Number(39569), "R": Number(39594)}), Object({"L": Number(43774), "R": Number(43799)}), Object({"L": Number(66361), "R": Number(66386)})]), "storage": Number(0)}), Object({"id": Number(923), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(61637), "R": Number(61649)}), Object({"L": Number(63707), "R": Number(63719)}), Object({"L": Number(63992), "R": Number(64004)})]), "storage": Number(0)}), Object({"id": Number(4466), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(3875), "R": Number(3885)}), Object({"L": Number(6424), "R": Number(6434)}), Object({"L": Number(13555), "R": Number(13565)}), Object({"L": Number(13811), "R": Number(13821)}), Object({"L": Number(13946), "R": Number(13956)}), Object({"L": Number(13996), "R": Number(14006)}), Object({"L": Number(15250), "R": Number(15260)}), Object({"L": Number(15306), "R": Number(15316)})]), "storage": Number(0)}), Object({"id": Number(4751), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(53908), "R": Number(53912)}), Object({"L": Number(53959), "R": Number(53963)})]), "storage": Number(0)}), Object({"id": Number(4857), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(70542), "R": Number(70551)}), Object({"L": Number(72802), "R": Number(72811)}), Object({"L": Number(72929), "R": Number(72938)}), Object({"L": Number(73058), "R": Number(73067)}), Object({"L": Number(73092), "R": Number(73101)}), Object({"L": Number(73657), "R": Number(73666)})]), "storage": Number(0)}), Object({"id": Number(4563), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(1187), "R": Number(1188)}), Object({"L": Number(1439), "R": Number(1440)}), Object({"L": Number(1447), "R": Number(1448)}), Object({"L": Number(1455), "R": Number(1456)}), Object({"L": Number(1507), "R": Number(1508)}), Object({"L": Number(1524), "R": Number(1525)})]), "storage": Number(0)}), Object({"id": Number(4557), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(44078), "R": Number(44089)}), Object({"L": Number(44649), "R": Number(44660)}), Object({"L": Number(44735), "R": Number(44746)})]), "storage": Number(0)}), Object({"id": Number(4893), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(64901), "R": Number(64916)})]), "storage": Number(0)}), Object({"id": Number(974), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(23850), "R": Number(23860)}), Object({"L": Number(73625), "R": Number(73635)})]), "storage": Number(0)}), Object({"id": Number(4747), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(39133), "R": Number(39138)}), Object({"L": Number(39422), "R": Number(39427)})]), "storage": Number(0)}), Object({"id": Number(3634), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(3447), "R": Number(3456)}), Object({"L": Number(67515), "R": Number(67524)})]), "storage": Number(0)}), Object({"id": Number(4802), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(45046), "R": Number(45059)}), Object({"L": Number(60553), "R": Number(60566)})]), "storage": Number(0)}), Object({"id": Number(4834), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(59328), "R": Number(59338)}), Object({"L": Number(61679), "R": Number(61689)}), Object({"L": Number(61955), "R": Number(61965)})]), "storage": Number(0)}), Object({"id": Number(997), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(15212), "R": Number(15222)}), Object({"L": Number(23927), "R": Number(23937)}), Object({"L": Number(24205), "R": Number(24215)}), Object({"L": Number(24490), "R": Number(24500)})]), "storage": Number(0)}), Object({"id": Number(4789), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(41433), "R": Number(41434)}), Object({"L": Number(41550), "R": Number(41551)}), Object({"L": Number(41557), "R": Number(41558)}), Object({"L": Number(41564), "R": Number(41565)}), Object({"L": Number(41586), "R": Number(41587)}), Object({"L": Number(41608), "R": Number(41609)})]), "storage": Number(0)}), Object({"id": Number(947), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(405), "R": Number(421)}), Object({"L": Number(16478), "R": Number(16494)}), Object({"L": Number(19061), "R": Number(19077)}), Object({"L": Number(21494), "R": Number(21510)})]), "storage": Number(0)}), Object({"id": Number(4717), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(60077), "R": Number(60088)}), Object({"L": Number(61868), "R": Number(61879)}), Object({"L": Number(61910), "R": Number(61921)}), Object({"L": Number(62967), "R": Number(62978)}), Object({"L": Number(63018), "R": Number(63029)}), Object({"L": Number(63482), "R": Number(63493)}), Object({"L": Number(63900), "R": Number(63911)}), Object({"L": Number(64492), "R": Number(64503)}), Object({"L": Number(64585), "R": Number(64596)}), Object({"L": Number(64640), "R": Number(64651)}), Object({"L": Number(64753), "R": Number(64764)}), Object({"L": Number(65081), "R": Number(65092)}), Object({"L": Number(65167), "R": Number(65178)}), Object({"L": Number(65222), "R": Number(65233)}), Object({"L": Number(65328), "R": Number(65339)})]), "storage": Number(0)}), Object({"id": Number(4543), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(22183), "R": Number(22192)}), Object({"L": Number(61808), "R": Number(61817)})]), "storage": Number(0)}), Object({"id": Number(4624), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(68381), "R": Number(68392)})]), "storage": Number(0)}), Object({"id": Number(2431), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(1519), "R": Number(1523)}), Object({"L": Number(1666), "R": Number(1670)}), Object({"L": Number(1680), "R": Number(1684)}), Object({"L": Number(2564), "R": Number(2568)}), Object({"L": Number(2620), "R": Number(2624)}), Object({"L": Number(2703), "R": Number(2707)}), Object({"L": Number(2717), "R": Number(2721)}), Object({"L": Number(6157), "R": Number(6161)}), Object({"L": Number(7791), "R": Number(7795)}), Object({"L": Number(7836), "R": Number(7840)}), Object({"L": Number(7881), "R": Number(7885)}), Object({"L": Number(7927), "R": Number(7931)}), Object({"L": Number(7972), "R": Number(7976)}), Object({"L": Number(8017), "R": Number(8021)}), Object({"L": Number(8063), "R": Number(8067)}), Object({"L": Number(8108), "R": Number(8112)}), Object({"L": Number(8153), "R": Number(8157)}), Object({"L": Number(8354), "R": Number(8358)}), Object({"L": Number(8389), "R": Number(8393)}), Object({"L": Number(8520), "R": Number(8524)}), Object({"L": Number(8555), "R": Number(8559)}), Object({"L": Number(8686), "R": Number(8690)}), Object({"L": Number(8721), "R": Number(8725)}), Object({"L": Number(15592), "R": Number(15596)}), Object({"L": Number(22739), "R": Number(22743)}), Object({"L": Number(23883), "R": Number(23887)}), Object({"L": Number(23989), "R": Number(23993)}), Object({"L": Number(24158), "R": Number(24162)}), Object({"L": Number(24250), "R": Number(24254)}), Object({"L": Number(28730), "R": Number(28734)}), Object({"L": Number(30673), "R": Number(30677)}), Object({"L": Number(31997), "R": Number(32001)}), Object({"L": Number(34741), "R": Number(34745)}), Object({"L": Number(34767), "R": Number(34771)}), Object({"L": Number(34903), "R": Number(34907)}), Object({"L": Number(35013), "R": Number(35017)}), Object({"L": Number(35139), "R": Number(35143)}), Object({"L": Number(35216), "R": Number(35220)}), Object({"L": Number(35295), "R": Number(35299)}), Object({"L": Number(36367), "R": Number(36371)}), Object({"L": Number(37799), "R": Number(37803)}), Object({"L": Number(39376), "R": Number(39380)}), Object({"L": Number(43240), "R": Number(43244)}), Object({"L": Number(43277), "R": Number(43281)}), Object({"L": Number(43290), "R": Number(43294)}), Object({"L": Number(43443), "R": Number(43447)}), Object({"L": Number(43456), "R": Number(43460)}), Object({"L": Number(43487), "R": Number(43491)}), Object({"L": Number(43500), "R": Number(43504)}), Object({"L": Number(43513), "R": Number(43517)})]), "storage": Number(0)}), Object({"id": Number(4799), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(44962), "R": Number(44966)}), Object({"L": Number(44977), "R": Number(44981)}), Object({"L": Number(44991), "R": Number(44995)}), Object({"L": Number(45013), "R": Number(45017)}), Object({"L": Number(45063), "R": Number(45067)}), Object({"L": Number(45175), "R": Number(45179)}), Object({"L": Number(45224), "R": Number(45228)}), Object({"L": Number(45261), "R": Number(45265)}), Object({"L": Number(45303), "R": Number(45307)}), Object({"L": Number(45352), "R": Number(45356)}), Object({"L": Number(45389), "R": Number(45393)}), Object({"L": Number(45431), "R": Number(45435)}), Object({"L": Number(45480), "R": Number(45484)}), Object({"L": Number(45517), "R": Number(45521)}), Object({"L": Number(45567), "R": Number(45571)}), Object({"L": Number(45720), "R": Number(45724)}), Object({"L": Number(45792), "R": Number(45796)}), Object({"L": Number(46002), "R": Number(46006)}), Object({"L": Number(46445), "R": Number(46449)}), Object({"L": Number(46497), "R": Number(46501)}), Object({"L": Number(46543), "R": Number(46547)}), Object({"L": Number(46624), "R": Number(46628)}), Object({"L": Number(46684), "R": Number(46688)}), Object({"L": Number(46746), "R": Number(46750)}), Object({"L": Number(46808), "R": Number(46812)}), Object({"L": Number(47405), "R": Number(47409)}), Object({"L": Number(47456), "R": Number(47460)}), Object({"L": Number(47651), "R": Number(47655)}), Object({"L": Number(47731), "R": Number(47735)}), Object({"L": Number(47790), "R": Number(47794)}), Object({"L": Number(47858), "R": Number(47862)}), Object({"L": Number(47926), "R": Number(47930)}), Object({"L": Number(48294), "R": Number(48298)}), Object({"L": Number(48373), "R": Number(48377)}), Object({"L": Number(48419), "R": Number(48423)}), Object({"L": Number(48450), "R": Number(48454)}), Object({"L": Number(48529), "R": Number(48533)}), Object({"L": Number(48574), "R": Number(48578)}), Object({"L": Number(49054), "R": Number(49058)}), Object({"L": Number(49112), "R": Number(49116)}), Object({"L": Number(49448), "R": Number(49452)}), Object({"L": Number(49605), "R": Number(49609)}), Object({"L": Number(49713), "R": Number(49717)}), Object({"L": Number(49747), "R": Number(49751)}), Object({"L": Number(49826), "R": Number(49830)}), Object({"L": Number(49844), "R": Number(49848)}), Object({"L": Number(49889), "R": Number(49893)})]), "storage": Number(0)}), Object({"id": Number(2437), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(27854), "R": Number(27860)}), Object({"L": Number(39389), "R": Number(39395)}), Object({"L": Number(43529), "R": Number(43535)}), Object({"L": Number(65954), "R": Number(65960)})]), "storage": Number(0)}), Object({"id": Number(967), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(3261), "R": Number(3270)}), Object({"L": Number(37696), "R": Number(37705)}), Object({"L": Number(44720), "R": Number(44729)})]), "storage": Number(0)}), Object({"id": Number(4819), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(70374), "R": Number(70391)}), Object({"L": Number(71493), "R": Number(71510)}), Object({"L": Number(71897), "R": Number(71914)}), Object({"L": Number(71930), "R": Number(71947)}), Object({"L": Number(71962), "R": Number(71979)})]), "storage": Number(0)}), Object({"id": Number(4739), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(32780), "R": Number(32783)}), Object({"L": Number(34724), "R": Number(34727)}), Object({"L": Number(34798), "R": Number(34801)}), Object({"L": Number(35156), "R": Number(35159)}), Object({"L": Number(39291), "R": Number(39294)}), Object({"L": Number(44358), "R": Number(44361)}), Object({"L": Number(44522), "R": Number(44525)}), Object({"L": Number(47424), "R": Number(47427)}), Object({"L": Number(47670), "R": Number(47673)}), Object({"L": Number(47748), "R": Number(47751)}), Object({"L": Number(48469), "R": Number(48472)}), Object({"L": Number(48548), "R": Number(48551)}), Object({"L": Number(49073), "R": Number(49076)}), Object({"L": Number(49222), "R": Number(49225)}), Object({"L": Number(49528), "R": Number(49531)}), Object({"L": Number(56586), "R": Number(56589)})]), "storage": Number(0)}), Object({"id": Number(3628), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(67999), "R": Number(68007)})]), "storage": Number(0)}), Object({"id": Number(4555), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27243), "R": Number(27248)}), Object({"L": Number(28260), "R": Number(28265)}), Object({"L": Number(28379), "R": Number(28384)})]), "storage": Number(0)}), Object({"id": Number(3684), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(67369), "R": Number(67381)})]), "storage": Number(0)}), Object({"id": Number(3630), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(67412), "R": Number(67431)})]), "storage": Number(0)}), Object({"id": Number(4661), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(3125), "R": Number(3137)}), Object({"L": Number(3232), "R": Number(3244)}), Object({"L": Number(3339), "R": Number(3351)}), Object({"L": Number(3425), "R": Number(3437)}), Object({"L": Number(4022), "R": Number(4034)}), Object({"L": Number(4398), "R": Number(4410)}), Object({"L": Number(4600), "R": Number(4612)}), Object({"L": Number(4641), "R": Number(4653)}), Object({"L": Number(4692), "R": Number(4704)}), Object({"L": Number(4832), "R": Number(4844)}), Object({"L": Number(4953), "R": Number(4965)}), Object({"L": Number(5028), "R": Number(5040)}), Object({"L": Number(5637), "R": Number(5649)}), Object({"L": Number(6751), "R": Number(6763)}), Object({"L": Number(6815), "R": Number(6827)}), Object({"L": Number(7047), "R": Number(7059)}), Object({"L": Number(7130), "R": Number(7142)}), Object({"L": Number(7209), "R": Number(7221)}), Object({"L": Number(7461), "R": Number(7473)}), Object({"L": Number(7502), "R": Number(7514)}), Object({"L": Number(7554), "R": Number(7566)}), Object({"L": Number(8953), "R": Number(8965)}), Object({"L": Number(9292), "R": Number(9304)}), Object({"L": Number(12278), "R": Number(12290)}), Object({"L": Number(12473), "R": Number(12485)}), Object({"L": Number(12528), "R": Number(12540)}), Object({"L": Number(12571), "R": Number(12583)}), Object({"L": Number(12615), "R": Number(12627)}), Object({"L": Number(13367), "R": Number(13379)}), Object({"L": Number(14344), "R": Number(14356)}), Object({"L": Number(14591), "R": Number(14603)}), Object({"L": Number(14630), "R": Number(14642)}), Object({"L": Number(15650), "R": Number(15662)}), Object({"L": Number(17081), "R": Number(17093)}), Object({"L": Number(17137), "R": Number(17149)}), Object({"L": Number(17440), "R": Number(17452)}), Object({"L": Number(17544), "R": Number(17556)}), Object({"L": Number(18618), "R": Number(18630)}), Object({"L": Number(19801), "R": Number(19813)}), Object({"L": Number(20119), "R": Number(20131)}), Object({"L": Number(21208), "R": Number(21220)}), Object({"L": Number(25883), "R": Number(25895)}), Object({"L": Number(26571), "R": Number(26583)}), Object({"L": Number(26764), "R": Number(26776)}), Object({"L": Number(26821), "R": Number(26833)}), Object({"L": Number(26965), "R": Number(26977)}), Object({"L": Number(26998), "R": Number(27010)}), Object({"L": Number(27264), "R": Number(27276)}), Object({"L": Number(28283), "R": Number(28295)}), Object({"L": Number(31345), "R": Number(31357)}), Object({"L": Number(32626), "R": Number(32638)}), Object({"L": Number(33353), "R": Number(33365)}), Object({"L": Number(33939), "R": Number(33951)}), Object({"L": Number(35505), "R": Number(35517)}), Object({"L": Number(36120), "R": Number(36132)}), Object({"L": Number(36898), "R": Number(36910)}), Object({"L": Number(38886), "R": Number(38898)}), Object({"L": Number(39198), "R": Number(39210)}), Object({"L": Number(42856), "R": Number(42868)}), Object({"L": Number(44243), "R": Number(44255)}), Object({"L": Number(44345), "R": Number(44357)}), Object({"L": Number(44509), "R": Number(44521)}), Object({"L": Number(45181), "R": Number(45193)}), Object({"L": Number(45230), "R": Number(45242)}), Object({"L": Number(45309), "R": Number(45321)}), Object({"L": Number(45358), "R": Number(45370)}), Object({"L": Number(45437), "R": Number(45449)}), Object({"L": Number(45486), "R": Number(45498)}), Object({"L": Number(45573), "R": Number(45585)}), Object({"L": Number(46451), "R": Number(46463)}), Object({"L": Number(46549), "R": Number(46561)}), Object({"L": Number(47411), "R": Number(47423)}), Object({"L": Number(47657), "R": Number(47669)}), Object({"L": Number(48300), "R": Number(48312)}), Object({"L": Number(48379), "R": Number(48391)}), Object({"L": Number(48456), "R": Number(48468)}), Object({"L": Number(48535), "R": Number(48547)}), Object({"L": Number(49060), "R": Number(49072)}), Object({"L": Number(49118), "R": Number(49130)}), Object({"L": Number(49719), "R": Number(49731)}), Object({"L": Number(49850), "R": Number(49862)}), Object({"L": Number(59472), "R": Number(59484)}), Object({"L": Number(59544), "R": Number(59556)}), Object({"L": Number(59642), "R": Number(59654)}), Object({"L": Number(59691), "R": Number(59703)}), Object({"L": Number(59727), "R": Number(59739)}), Object({"L": Number(59915), "R": Number(59927)}), Object({"L": Number(60050), "R": Number(60062)}), Object({"L": Number(60155), "R": Number(60167)}), Object({"L": Number(60246), "R": Number(60258)}), Object({"L": Number(60309), "R": Number(60321)}), Object({"L": Number(60372), "R": Number(60384)}), Object({"L": Number(60503), "R": Number(60515)}), Object({"L": Number(60610), "R": Number(60622)}), Object({"L": Number(60764), "R": Number(60776)}), Object({"L": Number(60833), "R": Number(60845)}), Object({"L": Number(60897), "R": Number(60909)}), Object({"L": Number(62164), "R": Number(62176)}), Object({"L": Number(62293), "R": Number(62305)}), Object({"L": Number(62498), "R": Number(62510)}), Object({"L": Number(62740), "R": Number(62752)}), Object({"L": Number(63317), "R": Number(63329)}), Object({"L": Number(63528), "R": Number(63540)}), Object({"L": Number(63676), "R": Number(63688)}), Object({"L": Number(63751), "R": Number(63763)}), Object({"L": Number(63801), "R": Number(63813)}), Object({"L": Number(64258), "R": Number(64270)}), Object({"L": Number(64879), "R": Number(64891)}), Object({"L": Number(65668), "R": Number(65680)}), Object({"L": Number(66570), "R": Number(66582)}), Object({"L": Number(66955), "R": Number(66967)}), Object({"L": Number(67256), "R": Number(67268)}), Object({"L": Number(67332), "R": Number(67344)}), Object({"L": Number(68368), "R": Number(68380)}), Object({"L": Number(69657), "R": Number(69669)}), Object({"L": Number(73804), "R": Number(73816)})]), "storage": Number(0)}), Object({"id": Number(4476), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(13079), "R": Number(13089)}), Object({"L": Number(13284), "R": Number(13294)}), Object({"L": Number(13517), "R": Number(13527)}), Object({"L": Number(13769), "R": Number(13779)}), Object({"L": Number(13904), "R": Number(13914)})]), "storage": Number(0)}), Object({"id": Number(4475), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(3438), "R": Number(3443)}), Object({"L": Number(4613), "R": Number(4618)}), Object({"L": Number(44256), "R": Number(44261)}), Object({"L": Number(55403), "R": Number(55408)}), Object({"L": Number(66583), "R": Number(66588)}), Object({"L": Number(66968), "R": Number(66973)}), Object({"L": Number(67269), "R": Number(67274)}), Object({"L": Number(67345), "R": Number(67350)})]), "storage": Number(0)}), Object({"id": Number(1304), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(11195), "R": Number(11206)})]), "storage": Number(0)}), Object({"id": Number(962), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8199), "R": Number(8213)}), Object({"L": Number(15722), "R": Number(15736)})]), "storage": Number(0)}), Object({"id": Number(4780), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(41325), "R": Number(41329)}), Object({"L": Number(42023), "R": Number(42027)}), Object({"L": Number(42072), "R": Number(42076)}), Object({"L": Number(42121), "R": Number(42125)}), Object({"L": Number(42170), "R": Number(42174)}), Object({"L": Number(42316), "R": Number(42320)}), Object({"L": Number(42365), "R": Number(42369)}), Object({"L": Number(42414), "R": Number(42418)}), Object({"L": Number(42463), "R": Number(42467)})]), "storage": Number(0)}), Object({"id": Number(4866), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(11376), "R": Number(11385)}), Object({"L": Number(11695), "R": Number(11704)})]), "storage": Number(0)}), Object({"id": Number(4550), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(42547), "R": Number(42552)})]), "storage": Number(0)}), Object({"id": Number(4878), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(6196), "R": Number(6200)}), Object({"L": Number(6202), "R": Number(6206)}), Object({"L": Number(6447), "R": Number(6451)}), Object({"L": Number(6453), "R": Number(6457)}), Object({"L": Number(12454), "R": Number(12458)}), Object({"L": Number(14140), "R": Number(14144)}), Object({"L": Number(16583), "R": Number(16587)}), Object({"L": Number(19166), "R": Number(19170)}), Object({"L": Number(21560), "R": Number(21564)}), Object({"L": Number(21589), "R": Number(21593)}), Object({"L": Number(21595), "R": Number(21599)}), Object({"L": Number(24399), "R": Number(24403)}), Object({"L": Number(24405), "R": Number(24409)}), Object({"L": Number(26752), "R": Number(26756)}), Object({"L": Number(32036), "R": Number(32040)}), Object({"L": Number(32042), "R": Number(32046)}), Object({"L": Number(33510), "R": Number(33514)}), Object({"L": Number(34088), "R": Number(34092)}), Object({"L": Number(35406), "R": Number(35410)}), Object({"L": Number(40893), "R": Number(40897)}), Object({"L": Number(40899), "R": Number(40903)}), Object({"L": Number(41147), "R": Number(41151)}), Object({"L": Number(41153), "R": Number(41157)}), Object({"L": Number(46341), "R": Number(46345)}), Object({"L": Number(49482), "R": Number(49486)}), Object({"L": Number(54212), "R": Number(54216)})]), "storage": Number(0)}), Object({"id": Number(4520), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27153), "R": Number(27156)}), Object({"L": Number(27823), "R": Number(27826)}), Object({"L": Number(27839), "R": Number(27842)}), Object({"L": Number(27850), "R": Number(27853)}), Object({"L": Number(27906), "R": Number(27909)}), Object({"L": Number(27922), "R": Number(27925)}), Object({"L": Number(27941), "R": Number(27944)}), Object({"L": Number(27993), "R": Number(27996)}), Object({"L": Number(28020), "R": Number(28023)}), Object({"L": Number(28047), "R": Number(28050)}), Object({"L": Number(28074), "R": Number(28077)}), Object({"L": Number(28128), "R": Number(28131)}), Object({"L": Number(28158), "R": Number(28161)}), Object({"L": Number(28173), "R": Number(28176)}), Object({"L": Number(28726), "R": Number(28729)}), Object({"L": Number(29860), "R": Number(29863)}), Object({"L": Number(29906), "R": Number(29909)}), Object({"L": Number(30000), "R": Number(30003)}), Object({"L": Number(30070), "R": Number(30073)}), Object({"L": Number(30114), "R": Number(30117)}), Object({"L": Number(30132), "R": Number(30135)}), Object({"L": Number(30669), "R": Number(30672)}), Object({"L": Number(31248), "R": Number(31251)}), Object({"L": Number(31430), "R": Number(31433)}), Object({"L": Number(31659), "R": Number(31662)}), Object({"L": Number(31735), "R": Number(31738)}), Object({"L": Number(31812), "R": Number(31815)}), Object({"L": Number(31832), "R": Number(31835)}), Object({"L": Number(31864), "R": Number(31867)}), Object({"L": Number(31916), "R": Number(31919)}), Object({"L": Number(31977), "R": Number(31980)}), Object({"L": Number(31993), "R": Number(31996)}), Object({"L": Number(32248), "R": Number(32251)})]), "storage": Number(0)}), Object({"id": Number(4846), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(60639), "R": Number(60649)})]), "storage": Number(0)}), Object({"id": Number(4595), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(11236), "R": Number(11247)}), Object({"L": Number(11803), "R": Number(11814)}), Object({"L": Number(13601), "R": Number(13612)}), Object({"L": Number(14696), "R": Number(14707)})]), "storage": Number(0)}), Object({"id": Number(1003), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(32443), "R": Number(32453)}), Object({"L": Number(67619), "R": Number(67629)})]), "storage": Number(0)}), Object({"id": Number(4502), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(15962), "R": Number(15971)}), Object({"L": Number(16011), "R": Number(16020)}), Object({"L": Number(16060), "R": Number(16069)}), Object({"L": Number(55674), "R": Number(55683)}), Object({"L": Number(55731), "R": Number(55740)}), Object({"L": Number(55911), "R": Number(55920)}), Object({"L": Number(56094), "R": Number(56103)}), Object({"L": Number(56145), "R": Number(56154)}), Object({"L": Number(56312), "R": Number(56321)}), Object({"L": Number(56363), "R": Number(56372)}), Object({"L": Number(56391), "R": Number(56400)})]), "storage": Number(0)}), Object({"id": Number(4845), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(60206), "R": Number(60215)})]), "storage": Number(1)}), Object({"id": Number(4740), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(31651), "R": Number(31654)}), Object({"L": Number(32006), "R": Number(32009)}), Object({"L": Number(32031), "R": Number(32034)})]), "storage": Number(0)}), Object({"id": Number(4759), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(61093), "R": Number(61102)}), Object({"L": Number(61274), "R": Number(61283)}), Object({"L": Number(61311), "R": Number(61320)}), Object({"L": Number(61354), "R": Number(61363)}), Object({"L": Number(62604), "R": Number(62613)}), Object({"L": Number(62664), "R": Number(62673)}), Object({"L": Number(62804), "R": Number(62813)}), Object({"L": Number(62854), "R": Number(62863)}), Object({"L": Number(63092), "R": Number(63101)}), Object({"L": Number(63187), "R": Number(63196)}), Object({"L": Number(63234), "R": Number(63243)}), Object({"L": Number(63393), "R": Number(63402)}), Object({"L": Number(63446), "R": Number(63455)}), Object({"L": Number(63580), "R": Number(63589)}), Object({"L": Number(64364), "R": Number(64373)}), Object({"L": Number(64417), "R": Number(64426)}), Object({"L": Number(64543), "R": Number(64552)}), Object({"L": Number(64691), "R": Number(64700)}), Object({"L": Number(64814), "R": Number(64823)}), Object({"L": Number(64965), "R": Number(64974)}), Object({"L": Number(65018), "R": Number(65027)}), Object({"L": Number(65131), "R": Number(65140)}), Object({"L": Number(65272), "R": Number(65281)}), Object({"L": Number(65389), "R": Number(65398)})]), "storage": Number(0)}), Object({"id": Number(4720), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(59364), "R": Number(59377)}), Object({"L": Number(61393), "R": Number(61406)})]), "storage": Number(1)}), Object({"id": Number(4514), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(8913), "R": Number(8916)}), Object({"L": Number(9242), "R": Number(9245)}), Object({"L": Number(9257), "R": Number(9260)}), Object({"L": Number(9445), "R": Number(9448)}), Object({"L": Number(9645), "R": Number(9648)}), Object({"L": Number(9678), "R": Number(9681)}), Object({"L": Number(9794), "R": Number(9797)}), Object({"L": Number(9829), "R": Number(9832)}), Object({"L": Number(9908), "R": Number(9911)}), Object({"L": Number(9939), "R": Number(9942)}), Object({"L": Number(9983), "R": Number(9986)}), Object({"L": Number(10010), "R": Number(10013)}), Object({"L": Number(10025), "R": Number(10028)}), Object({"L": Number(10037), "R": Number(10040)}), Object({"L": Number(10100), "R": Number(10103)}), Object({"L": Number(10168), "R": Number(10171)}), Object({"L": Number(10212), "R": Number(10215)}), Object({"L": Number(10230), "R": Number(10233)}), Object({"L": Number(10283), "R": Number(10286)}), Object({"L": Number(10331), "R": Number(10334)}), Object({"L": Number(10424), "R": Number(10427)}), Object({"L": Number(10606), "R": Number(10609)}), Object({"L": Number(10783), "R": Number(10786)}), Object({"L": Number(11274), "R": Number(11277)}), Object({"L": Number(11843), "R": Number(11846)}), Object({"L": Number(15588), "R": Number(15591)}), Object({"L": Number(15675), "R": Number(15678)}), Object({"L": Number(15738), "R": Number(15741)}), Object({"L": Number(15930), "R": Number(15933)}), Object({"L": Number(15979), "R": Number(15982)}), Object({"L": Number(16028), "R": Number(16031)}), Object({"L": Number(16589), "R": Number(16592)}), Object({"L": Number(19172), "R": Number(19175)}), Object({"L": Number(19593), "R": Number(19596)}), Object({"L": Number(21567), "R": Number(21570)}), Object({"L": Number(21572), "R": Number(21575)}), Object({"L": Number(21687), "R": Number(21690)}), Object({"L": Number(21967), "R": Number(21970)}), Object({"L": Number(22227), "R": Number(22230)}), Object({"L": Number(22298), "R": Number(22301)}), Object({"L": Number(22371), "R": Number(22374)}), Object({"L": Number(22391), "R": Number(22394)}), Object({"L": Number(22416), "R": Number(22419)}), Object({"L": Number(22475), "R": Number(22478)}), Object({"L": Number(22717), "R": Number(22720)}), Object({"L": Number(22735), "R": Number(22738)}), Object({"L": Number(23879), "R": Number(23882)}), Object({"L": Number(23985), "R": Number(23988)}), Object({"L": Number(24136), "R": Number(24139)}), Object({"L": Number(24154), "R": Number(24157)}), Object({"L": Number(24246), "R": Number(24249)}), Object({"L": Number(24441), "R": Number(24444)}), Object({"L": Number(25444), "R": Number(25447)}), Object({"L": Number(25464), "R": Number(25467)}), Object({"L": Number(25484), "R": Number(25487)}), Object({"L": Number(25521), "R": Number(25524)}), Object({"L": Number(25551), "R": Number(25554)}), Object({"L": Number(25588), "R": Number(25591)}), Object({"L": Number(25622), "R": Number(25625)}), Object({"L": Number(25726), "R": Number(25729)}), Object({"L": Number(26387), "R": Number(26390)})]), "storage": Number(0)}), Object({"id": Number(4792), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(54225), "R": Number(54226)}), Object({"L": Number(55616), "R": Number(55617)}), Object({"L": Number(55623), "R": Number(55624)}), Object({"L": Number(55630), "R": Number(55631)}), Object({"L": Number(55657), "R": Number(55658)}), Object({"L": Number(55684), "R": Number(55685)}), Object({"L": Number(55714), "R": Number(55715)}), Object({"L": Number(55741), "R": Number(55742)}), Object({"L": Number(55823), "R": Number(55824)}), Object({"L": Number(55830), "R": Number(55831)}), Object({"L": Number(55837), "R": Number(55838)}), Object({"L": Number(55864), "R": Number(55865)}), Object({"L": Number(55891), "R": Number(55892)}), Object({"L": Number(55921), "R": Number(55922)}), Object({"L": Number(55948), "R": Number(55949)}), Object({"L": Number(56036), "R": Number(56037)}), Object({"L": Number(56043), "R": Number(56044)}), Object({"L": Number(56050), "R": Number(56051)}), Object({"L": Number(56077), "R": Number(56078)}), Object({"L": Number(56104), "R": Number(56105)}), Object({"L": Number(56237), "R": Number(56238)}), Object({"L": Number(56244), "R": Number(56245)}), Object({"L": Number(56251), "R": Number(56252)}), Object({"L": Number(56295), "R": Number(56296)}), Object({"L": Number(56322), "R": Number(56323)})]), "storage": Number(0)}), Object({"id": Number(2465), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5412), "R": Number(5422)}), Object({"L": Number(19609), "R": Number(19619)}), Object({"L": Number(21703), "R": Number(21713)})]), "storage": Number(0)}), Object({"id": Number(14), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(27180), "R": Number(27187)})]), "storage": Number(0)}), Object({"id": Number(4526), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(11180), "R": Number(11191)}), Object({"L": Number(22069), "R": Number(22080)}), Object({"L": Number(61759), "R": Number(61770)})]), "storage": Number(0)}), Object({"id": Number(4508), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(5913), "R": Number(5915)}), Object({"L": Number(7523), "R": Number(7525)}), Object({"L": Number(9462), "R": Number(9464)}), Object({"L": Number(9921), "R": Number(9923)}), Object({"L": Number(10577), "R": Number(10579)}), Object({"L": Number(12816), "R": Number(12818)}), Object({"L": Number(13332), "R": Number(13334)}), Object({"L": Number(14020), "R": Number(14022)}), Object({"L": Number(14871), "R": Number(14873)}), Object({"L": Number(15076), "R": Number(15078)}), Object({"L": Number(21800), "R": Number(21802)}), Object({"L": Number(22195), "R": Number(22197)}), Object({"L": Number(22324), "R": Number(22326)}), Object({"L": Number(25243), "R": Number(25245)}), Object({"L": Number(25311), "R": Number(25313)}), Object({"L": Number(25799), "R": Number(25801)}), Object({"L": Number(25852), "R": Number(25854)}), Object({"L": Number(26690), "R": Number(26692)}), Object({"L": Number(26949), "R": Number(26951)}), Object({"L": Number(28359), "R": Number(28361)}), Object({"L": Number(28666), "R": Number(28668)}), Object({"L": Number(28713), "R": Number(28715)}), Object({"L": Number(31261), "R": Number(31263)}), Object({"L": Number(31314), "R": Number(31316)}), Object({"L": Number(31775), "R": Number(31777)}), Object({"L": Number(34392), "R": Number(34394)}), Object({"L": Number(34909), "R": Number(34911)}), Object({"L": Number(35019), "R": Number(35021)}), Object({"L": Number(35421), "R": Number(35423)}), Object({"L": Number(35474), "R": Number(35476)}), Object({"L": Number(36546), "R": Number(36548)}), Object({"L": Number(37068), "R": Number(37070)}), Object({"L": Number(38437), "R": Number(38439)}), Object({"L": Number(38802), "R": Number(38804)}), Object({"L": Number(38855), "R": Number(38857)}), Object({"L": Number(44363), "R": Number(44365)}), Object({"L": Number(45149), "R": Number(45151)}), Object({"L": Number(45596), "R": Number(45598)}), Object({"L": Number(45686), "R": Number(45688)}), Object({"L": Number(45754), "R": Number(45756)}), Object({"L": Number(46326), "R": Number(46328)}), Object({"L": Number(46414), "R": Number(46416)}), Object({"L": Number(46568), "R": Number(46570)}), Object({"L": Number(46647), "R": Number(46649)}), Object({"L": Number(47675), "R": Number(47677)}), Object({"L": Number(47753), "R": Number(47755)}), Object({"L": Number(48398), "R": Number(48400)}), Object({"L": Number(48553), "R": Number(48555)}), Object({"L": Number(49596), "R": Number(49598)}), Object({"L": Number(49738), "R": Number(49740)}), Object({"L": Number(49880), "R": Number(49882)}), Object({"L": Number(53701), "R": Number(53703)}), Object({"L": Number(54055), "R": Number(54057)}), Object({"L": Number(54573), "R": Number(54575)}), Object({"L": Number(54906), "R": Number(54908)}), Object({"L": Number(55132), "R": Number(55134)}), Object({"L": Number(57212), "R": Number(57214)}), Object({"L": Number(57627), "R": Number(57629)}), Object({"L": Number(57848), "R": Number(57850)}), Object({"L": Number(59145), "R": Number(59147)}), Object({"L": Number(60034), "R": Number(60036)}), Object({"L": Number(60182), "R": Number(60184)}), Object({"L": Number(61090), "R": Number(61092)}), Object({"L": Number(61271), "R": Number(61273)}), Object({"L": Number(61308), "R": Number(61310)}), Object({"L": Number(61351), "R": Number(61353)}), Object({"L": Number(61820), "R": Number(61822)}), Object({"L": Number(62601), "R": Number(62603)}), Object({"L": Number(62661), "R": Number(62663)}), Object({"L": Number(62801), "R": Number(62803)}), Object({"L": Number(62851), "R": Number(62853)}), Object({"L": Number(63089), "R": Number(63091)}), Object({"L": Number(63184), "R": Number(63186)}), Object({"L": Number(63231), "R": Number(63233)}), Object({"L": Number(63390), "R": Number(63392)}), Object({"L": Number(63443), "R": Number(63445)}), Object({"L": Number(63577), "R": Number(63579)}), Object({"L": Number(64361), "R": Number(64363)}), Object({"L": Number(64414), "R": Number(64416)}), Object({"L": Number(64540), "R": Number(64542)}), Object({"L": Number(64688), "R": Number(64690)}), Object({"L": Number(64811), "R": Number(64813)}), Object({"L": Number(64962), "R": Number(64964)}), Object({"L": Number(65015), "R": Number(65017)}), Object({"L": Number(65128), "R": Number(65130)}), Object({"L": Number(65269), "R": Number(65271)}), Object({"L": Number(65386), "R": Number(65388)}), Object({"L": Number(66712), "R": Number(66714)}), Object({"L": Number(68260), "R": Number(68262)}), Object({"L": Number(68319), "R": Number(68321)}), Object({"L": Number(68485), "R": Number(68487)}), Object({"L": Number(68529), "R": Number(68531)}), Object({"L": Number(68555), "R": Number(68557)}), Object({"L": Number(68605), "R": Number(68607)}), Object({"L": Number(68652), "R": Number(68654)}), Object({"L": Number(68685), "R": Number(68687)}), Object({"L": Number(68695), "R": Number(68697)}), Object({"L": Number(68884), "R": Number(68886)}), Object({"L": Number(69193), "R": Number(69195)}), Object({"L": Number(69216), "R": Number(69218)}), Object({"L": Number(69237), "R": Number(69239)}), Object({"L": Number(69272), "R": Number(69274)}), Object({"L": Number(69296), "R": Number(69298)}), Object({"L": Number(69323), "R": Number(69325)}), Object({"L": Number(69348), "R": Number(69350)}), Object({"L": Number(69383), "R": Number(69385)}), Object({"L": Number(69425), "R": Number(69427)}), Object({"L": Number(69440), "R": Number(69442)}), Object({"L": Number(69470), "R": Number(69472)}), Object({"L": Number(69489), "R": Number(69491)}), Object({"L": Number(69569), "R": Number(69571)}), Object({"L": Number(69869), "R": Number(69871)}), Object({"L": Number(69925), "R": Number(69927)})]), "storage": Number(1)}), Object({"id": Number(4600), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(25837), "R": Number(25843)}), Object({"L": Number(31299), "R": Number(31305)}), Object({"L": Number(35459), "R": Number(35465)}), Object({"L": Number(38840), "R": Number(38846)})]), "storage": Number(0)}), Object({"id": Number(4668), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(63285), "R": Number(63290)}), Object({"L": Number(64478), "R": Number(64483)}), Object({"L": Number(65067), "R": Number(65072)})]), "storage": Number(0)}), Object({"id": Number(4458), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(70564), "R": Number(70571)}), Object({"L": Number(73103), "R": Number(73110)}), Object({"L": Number(73202), "R": Number(73209)}), Object({"L": Number(73249), "R": Number(73256)}), Object({"L": Number(73296), "R": Number(73303)})]), "storage": Number(0)}), Object({"id": Number(4840), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(59413), "R": Number(59417)}), Object({"L": Number(59466), "R": Number(59470)}), Object({"L": Number(59538), "R": Number(59542)}), Object({"L": Number(59636), "R": Number(59640)}), Object({"L": Number(59685), "R": Number(59689)}), Object({"L": Number(59721), "R": Number(59725)}), Object({"L": Number(59909), "R": Number(59913)}), Object({"L": Number(60044), "R": Number(60048)}), Object({"L": Number(60149), "R": Number(60153)}), Object({"L": Number(60240), "R": Number(60244)}), Object({"L": Number(60303), "R": Number(60307)}), Object({"L": Number(60366), "R": Number(60370)}), Object({"L": Number(60497), "R": Number(60501)}), Object({"L": Number(60604), "R": Number(60608)}), Object({"L": Number(60758), "R": Number(60762)}), Object({"L": Number(60827), "R": Number(60831)}), Object({"L": Number(60891), "R": Number(60895)}), Object({"L": Number(61702), "R": Number(61706)}), Object({"L": Number(61747), "R": Number(61751)}), Object({"L": Number(61796), "R": Number(61800)}), Object({"L": Number(62158), "R": Number(62162)}), Object({"L": Number(62287), "R": Number(62291)}), Object({"L": Number(62492), "R": Number(62496)}), Object({"L": Number(62734), "R": Number(62738)}), Object({"L": Number(63311), "R": Number(63315)}), Object({"L": Number(63522), "R": Number(63526)}), Object({"L": Number(63670), "R": Number(63674)}), Object({"L": Number(63745), "R": Number(63749)}), Object({"L": Number(63795), "R": Number(63799)}), Object({"L": Number(64252), "R": Number(64256)}), Object({"L": Number(64873), "R": Number(64877)})]), "storage": Number(0)}), Object({"id": Number(4582), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(713), "R": Number(716)})]), "storage": Number(0)}), Object({"id": Number(920), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(65448), "R": Number(65456)}), Object({"L": Number(67966), "R": Number(67974)})]), "storage": Number(0)}), Object({"id": Number(4611), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(15844), "R": Number(15853)}), Object({"L": Number(15888), "R": Number(15897)}), Object({"L": Number(16272), "R": Number(16281)}), Object({"L": Number(16317), "R": Number(16326)}), Object({"L": Number(25107), "R": Number(25116)})]), "storage": Number(0)}), Object({"id": Number(4734), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(35986), "R": Number(35995)})]), "storage": Number(0)}), Object({"id": Number(917), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(73971), "R": Number(73981)}), Object({"L": Number(74068), "R": Number(74078)}), Object({"L": Number(74175), "R": Number(74185)})]), "storage": Number(0)}), Object({"id": Number(4795), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(44010), "R": Number(44016)}), Object({"L": Number(44527), "R": Number(44533)})]), "storage": Number(0)}), Object({"id": Number(4688), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(4298), "R": Number(4306)}), Object({"L": Number(4355), "R": Number(4363)}), Object({"L": Number(4853), "R": Number(4861)})]), "storage": Number(0)}), Object({"id": Number(2327), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(44372), "R": Number(44382)}), Object({"L": Number(46577), "R": Number(46587)}), Object({"L": Number(46660), "R": Number(46670)}), Object({"L": Number(47684), "R": Number(47694)}), Object({"L": Number(47766), "R": Number(47776)}), Object({"L": Number(48407), "R": Number(48417)}), Object({"L": Number(48562), "R": Number(48572)}), Object({"L": Number(68542), "R": Number(68552)}), Object({"L": Number(68564), "R": Number(68574)}), Object({"L": Number(68704), "R": Number(68714)})]), "storage": Number(0)}), Object({"id": Number(4625), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(727), "R": Number(735)})]), "storage": Number(0)}), Object({"id": Number(3771), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(12593), "R": Number(12602)}), Object({"L": Number(14613), "R": Number(14622)}), Object({"L": Number(22535), "R": Number(22544)})]), "storage": Number(0)}), Object({"id": Number(4636), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(32794), "R": Number(32808)}), Object({"L": Number(34632), "R": Number(34646)}), Object({"L": Number(46479), "R": Number(46493)}), Object({"L": Number(47438), "R": Number(47452)}), Object({"L": Number(48328), "R": Number(48342)}), Object({"L": Number(48483), "R": Number(48497)}), Object({"L": Number(56600), "R": Number(56614)})]), "storage": Number(0)}), Object({"id": Number(4494), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(17697), "R": Number(17706)}), Object({"L": Number(17776), "R": Number(17785)}), Object({"L": Number(17874), "R": Number(17883)}), Object({"L": Number(20312), "R": Number(20321)}), Object({"L": Number(20390), "R": Number(20399)}), Object({"L": Number(20486), "R": Number(20495)})]), "storage": Number(0)}), Object({"id": Number(4691), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(5590), "R": Number(5606)}), Object({"L": Number(17294), "R": Number(17310)}), Object({"L": Number(19923), "R": Number(19939)})]), "storage": Number(0)}), Object({"id": Number(4865), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(70528), "R": Number(70540)}), Object({"L": Number(71423), "R": Number(71435)}), Object({"L": Number(71818), "R": Number(71830)}), Object({"L": Number(71884), "R": Number(71896)}), Object({"L": Number(73213), "R": Number(73225)}), Object({"L": Number(73260), "R": Number(73272)}), Object({"L": Number(73307), "R": Number(73319)}), Object({"L": Number(73364), "R": Number(73376)}), Object({"L": Number(73409), "R": Number(73421)}), Object({"L": Number(73454), "R": Number(73466)}), Object({"L": Number(73505), "R": Number(73517)}), Object({"L": Number(73547), "R": Number(73559)}), Object({"L": Number(73589), "R": Number(73601)})]), "storage": Number(0)}), Object({"id": Number(4687), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(5317), "R": Number(5320)}), Object({"L": Number(5383), "R": Number(5386)}), Object({"L": Number(5396), "R": Number(5399)}), Object({"L": Number(5795), "R": Number(5798)}), Object({"L": Number(5872), "R": Number(5875)}), Object({"L": Number(5950), "R": Number(5953)}), Object({"L": Number(5983), "R": Number(5986)}), Object({"L": Number(6016), "R": Number(6019)}), Object({"L": Number(6074), "R": Number(6077)}), Object({"L": Number(6135), "R": Number(6138)}), Object({"L": Number(6152), "R": Number(6155)})]), "storage": Number(0)}), Object({"id": Number(4631), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(3138), "R": Number(3143)}), Object({"L": Number(36631), "R": Number(36636)}), Object({"L": Number(37128), "R": Number(37133)})]), "storage": Number(0)}), Object({"id": Number(4645), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27128), "R": Number(27132)}), Object({"L": Number(27258), "R": Number(27262)}), Object({"L": Number(27468), "R": Number(27472)}), Object({"L": Number(27578), "R": Number(27582)}), Object({"L": Number(27593), "R": Number(27597)}), Object({"L": Number(27888), "R": Number(27892)}), Object({"L": Number(28277), "R": Number(28281)}), Object({"L": Number(28317), "R": Number(28321)}), Object({"L": Number(28681), "R": Number(28685)}), Object({"L": Number(29594), "R": Number(29598)}), Object({"L": Number(29637), "R": Number(29641)}), Object({"L": Number(29671), "R": Number(29675)}), Object({"L": Number(30005), "R": Number(30009)}), Object({"L": Number(30052), "R": Number(30056)}), Object({"L": Number(30096), "R": Number(30100)}), Object({"L": Number(30271), "R": Number(30275)}), Object({"L": Number(30411), "R": Number(30415)}), Object({"L": Number(30479), "R": Number(30483)}), Object({"L": Number(31339), "R": Number(31343)}), Object({"L": Number(31392), "R": Number(31396)}), Object({"L": Number(31435), "R": Number(31439)}), Object({"L": Number(31517), "R": Number(31521)}), Object({"L": Number(31533), "R": Number(31537)})]), "storage": Number(0)}), Object({"id": Number(4839), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(3469), "R": Number(3473)}), Object({"L": Number(3486), "R": Number(3490)}), Object({"L": Number(3511), "R": Number(3515)}), Object({"L": Number(3547), "R": Number(3551)}), Object({"L": Number(3861), "R": Number(3865)}), Object({"L": Number(4488), "R": Number(4492)}), Object({"L": Number(5432), "R": Number(5436)}), Object({"L": Number(5453), "R": Number(5457)}), Object({"L": Number(5485), "R": Number(5489)}), Object({"L": Number(5516), "R": Number(5520)}), Object({"L": Number(5566), "R": Number(5570)}), Object({"L": Number(6313), "R": Number(6317)}), Object({"L": Number(6403), "R": Number(6407)}), Object({"L": Number(6718), "R": Number(6722)}), Object({"L": Number(7395), "R": Number(7399)}), Object({"L": Number(9055), "R": Number(9059)}), Object({"L": Number(9812), "R": Number(9816)}), Object({"L": Number(10393), "R": Number(10397)}), Object({"L": Number(10442), "R": Number(10446)}), Object({"L": Number(10460), "R": Number(10464)}), Object({"L": Number(10504), "R": Number(10508)}), Object({"L": Number(10954), "R": Number(10958)}), Object({"L": Number(10999), "R": Number(11003)}), Object({"L": Number(11024), "R": Number(11028)}), Object({"L": Number(11061), "R": Number(11065)}), Object({"L": Number(11147), "R": Number(11151)}), Object({"L": Number(11174), "R": Number(11178)}), Object({"L": Number(11230), "R": Number(11234)}), Object({"L": Number(11742), "R": Number(11746)}), Object({"L": Number(11797), "R": Number(11801)}), Object({"L": Number(12112), "R": Number(12116)}), Object({"L": Number(12137), "R": Number(12141)}), Object({"L": Number(12174), "R": Number(12178)}), Object({"L": Number(12236), "R": Number(12240)}), Object({"L": Number(12396), "R": Number(12400)}), Object({"L": Number(12763), "R": Number(12767)}), Object({"L": Number(12782), "R": Number(12786)}), Object({"L": Number(13048), "R": Number(13052)}), Object({"L": Number(13105), "R": Number(13109)}), Object({"L": Number(13154), "R": Number(13158)}), Object({"L": Number(13255), "R": Number(13259)}), Object({"L": Number(13541), "R": Number(13545)}), Object({"L": Number(13595), "R": Number(13599)}), Object({"L": Number(13797), "R": Number(13801)}), Object({"L": Number(13932), "R": Number(13936)}), Object({"L": Number(13982), "R": Number(13986)}), Object({"L": Number(14690), "R": Number(14694)}), Object({"L": Number(14763), "R": Number(14767)}), Object({"L": Number(14782), "R": Number(14786)}), Object({"L": Number(14808), "R": Number(14812)}), Object({"L": Number(14968), "R": Number(14972)}), Object({"L": Number(14987), "R": Number(14991)}), Object({"L": Number(15013), "R": Number(15017)}), Object({"L": Number(15236), "R": Number(15240)}), Object({"L": Number(15292), "R": Number(15296)}), Object({"L": Number(15370), "R": Number(15374)}), Object({"L": Number(15756), "R": Number(15760)}), Object({"L": Number(15838), "R": Number(15842)}), Object({"L": Number(15882), "R": Number(15886)}), Object({"L": Number(15956), "R": Number(15960)}), Object({"L": Number(16005), "R": Number(16009)}), Object({"L": Number(16054), "R": Number(16058)}), Object({"L": Number(16117), "R": Number(16121)}), Object({"L": Number(16131), "R": Number(16135)}), Object({"L": Number(16152), "R": Number(16156)}), Object({"L": Number(16266), "R": Number(16270)}), Object({"L": Number(16311), "R": Number(16315)}), Object({"L": Number(16373), "R": Number(16377)}), Object({"L": Number(16417), "R": Number(16421)}), Object({"L": Number(16515), "R": Number(16519)}), Object({"L": Number(16566), "R": Number(16570)}), Object({"L": Number(16617), "R": Number(16621)}), Object({"L": Number(16705), "R": Number(16709)}), Object({"L": Number(16815), "R": Number(16819)}), Object({"L": Number(16866), "R": Number(16870)}), Object({"L": Number(16892), "R": Number(16896)}), Object({"L": Number(17041), "R": Number(17045)}), Object({"L": Number(17270), "R": Number(17274)}), Object({"L": Number(17344), "R": Number(17348)}), Object({"L": Number(17664), "R": Number(17668)}), Object({"L": Number(17743), "R": Number(17747)}), Object({"L": Number(17841), "R": Number(17845)}), Object({"L": Number(17916), "R": Number(17920)}), Object({"L": Number(18115), "R": Number(18119)}), Object({"L": Number(18925), "R": Number(18929)}), Object({"L": Number(18969), "R": Number(18973)}), Object({"L": Number(19098), "R": Number(19102)}), Object({"L": Number(19149), "R": Number(19153)}), Object({"L": Number(19263), "R": Number(19267)}), Object({"L": Number(19373), "R": Number(19377)}), Object({"L": Number(19424), "R": Number(19428)}), Object({"L": Number(19521), "R": Number(19525)}), Object({"L": Number(19687), "R": Number(19691)}), Object({"L": Number(19701), "R": Number(19705)}), Object({"L": Number(19772), "R": Number(19776)}), Object({"L": Number(19899), "R": Number(19903)}), Object({"L": Number(19972), "R": Number(19976)}), Object({"L": Number(20279), "R": Number(20283)}), Object({"L": Number(20357), "R": Number(20361)}), Object({"L": Number(20453), "R": Number(20457)}), Object({"L": Number(20526), "R": Number(20530)}), Object({"L": Number(20719), "R": Number(20723)}), Object({"L": Number(21531), "R": Number(21535)}), Object({"L": Number(21618), "R": Number(21622)}), Object({"L": Number(21764), "R": Number(21768)}), Object({"L": Number(21778), "R": Number(21782)}), Object({"L": Number(21987), "R": Number(21991)}), Object({"L": Number(22017), "R": Number(22021)}), Object({"L": Number(22063), "R": Number(22067)}), Object({"L": Number(22177), "R": Number(22181)}), Object({"L": Number(22554), "R": Number(22558)}), Object({"L": Number(23156), "R": Number(23160)}), Object({"L": Number(23177), "R": Number(23181)}), Object({"L": Number(23230), "R": Number(23234)}), Object({"L": Number(23251), "R": Number(23255)}), Object({"L": Number(23304), "R": Number(23308)}), Object({"L": Number(23325), "R": Number(23329)}), Object({"L": Number(23608), "R": Number(23612)}), Object({"L": Number(23629), "R": Number(23633)}), Object({"L": Number(23683), "R": Number(23687)}), Object({"L": Number(23704), "R": Number(23708)}), Object({"L": Number(23758), "R": Number(23762)}), Object({"L": Number(23779), "R": Number(23783)}), Object({"L": Number(23973), "R": Number(23977)}), Object({"L": Number(24573), "R": Number(24577)}), Object({"L": Number(24805), "R": Number(24809)}), Object({"L": Number(25101), "R": Number(25105)}), Object({"L": Number(25130), "R": Number(25134)}), Object({"L": Number(25218), "R": Number(25222)}), Object({"L": Number(25286), "R": Number(25290)}), Object({"L": Number(26096), "R": Number(26100)}), Object({"L": Number(26108), "R": Number(26112)}), Object({"L": Number(26169), "R": Number(26173)}), Object({"L": Number(26181), "R": Number(26185)}), Object({"L": Number(27474), "R": Number(27478)}), Object({"L": Number(27584), "R": Number(27588)}), Object({"L": Number(27599), "R": Number(27603)}), Object({"L": Number(29600), "R": Number(29604)}), Object({"L": Number(29643), "R": Number(29647)}), Object({"L": Number(29677), "R": Number(29681)}), Object({"L": Number(30277), "R": Number(30281)}), Object({"L": Number(30417), "R": Number(30421)}), Object({"L": Number(30485), "R": Number(30489)}), Object({"L": Number(31523), "R": Number(31527)}), Object({"L": Number(31539), "R": Number(31543)}), Object({"L": Number(32588), "R": Number(32592)}), Object({"L": Number(32900), "R": Number(32904)}), Object({"L": Number(34484), "R": Number(34488)}), Object({"L": Number(37586), "R": Number(37590)}), Object({"L": Number(37731), "R": Number(37735)}), Object({"L": Number(38328), "R": Number(38332)}), Object({"L": Number(44983), "R": Number(44987)}), Object({"L": Number(44997), "R": Number(45001)}), Object({"L": Number(45019), "R": Number(45023)}), Object({"L": Number(53644), "R": Number(53648)}), Object({"L": Number(53685), "R": Number(53689)}), Object({"L": Number(53744), "R": Number(53748)}), Object({"L": Number(53766), "R": Number(53770)}), Object({"L": Number(54029), "R": Number(54033)}), Object({"L": Number(54071), "R": Number(54075)}), Object({"L": Number(54139), "R": Number(54143)}), Object({"L": Number(54318), "R": Number(54322)}), Object({"L": Number(54402), "R": Number(54406)}), Object({"L": Number(54464), "R": Number(54468)}), Object({"L": Number(54484), "R": Number(54488)}), Object({"L": Number(54548), "R": Number(54552)}), Object({"L": Number(54594), "R": Number(54598)}), Object({"L": Number(54799), "R": Number(54803)}), Object({"L": Number(54819), "R": Number(54823)}), Object({"L": Number(54881), "R": Number(54885)}), Object({"L": Number(54926), "R": Number(54930)}), Object({"L": Number(55107), "R": Number(55111)}), Object({"L": Number(55151), "R": Number(55155)}), Object({"L": Number(55303), "R": Number(55307)}), Object({"L": Number(55348), "R": Number(55352)}), Object({"L": Number(55395), "R": Number(55399)}), Object({"L": Number(55433), "R": Number(55437)}), Object({"L": Number(55540), "R": Number(55544)}), Object({"L": Number(55668), "R": Number(55672)}), Object({"L": Number(55698), "R": Number(55702)}), Object({"L": Number(55725), "R": Number(55729)}), Object({"L": Number(55875), "R": Number(55879)}), Object({"L": Number(55905), "R": Number(55909)}), Object({"L": Number(55932), "R": Number(55936)}), Object({"L": Number(56088), "R": Number(56092)}), Object({"L": Number(56139), "R": Number(56143)}), Object({"L": Number(56306), "R": Number(56310)}), Object({"L": Number(56357), "R": Number(56361)}), Object({"L": Number(56385), "R": Number(56389)}), Object({"L": Number(56479), "R": Number(56483)}), Object({"L": Number(56514), "R": Number(56518)}), Object({"L": Number(56559), "R": Number(56563)}), Object({"L": Number(56953), "R": Number(56957)}), Object({"L": Number(56967), "R": Number(56971)}), Object({"L": Number(56988), "R": Number(56992)}), Object({"L": Number(57047), "R": Number(57051)}), Object({"L": Number(57073), "R": Number(57077)}), Object({"L": Number(57188), "R": Number(57192)}), Object({"L": Number(57329), "R": Number(57333)}), Object({"L": Number(57525), "R": Number(57529)}), Object({"L": Number(57612), "R": Number(57616)}), Object({"L": Number(57773), "R": Number(57777)}), Object({"L": Number(57834), "R": Number(57838)}), Object({"L": Number(58102), "R": Number(58106)}), Object({"L": Number(58273), "R": Number(58277)}), Object({"L": Number(58350), "R": Number(58354)}), Object({"L": Number(58472), "R": Number(58476)}), Object({"L": Number(58593), "R": Number(58597)}), Object({"L": Number(58637), "R": Number(58641)}), Object({"L": Number(59121), "R": Number(59125)}), Object({"L": Number(59212), "R": Number(59216)}), Object({"L": Number(61708), "R": Number(61712)}), Object({"L": Number(61753), "R": Number(61757)}), Object({"L": Number(61802), "R": Number(61806)}), Object({"L": Number(65490), "R": Number(65494)}), Object({"L": Number(65900), "R": Number(65904)}), Object({"L": Number(65936), "R": Number(65940)}), Object({"L": Number(65987), "R": Number(65991)}), Object({"L": Number(66084), "R": Number(66088)}), Object({"L": Number(66153), "R": Number(66157)}), Object({"L": Number(66667), "R": Number(66671)}), Object({"L": Number(66890), "R": Number(66894)}), Object({"L": Number(66904), "R": Number(66908)}), Object({"L": Number(66928), "R": Number(66932)}), Object({"L": Number(67104), "R": Number(67108)}), Object({"L": Number(67169), "R": Number(67173)}), Object({"L": Number(67817), "R": Number(67821)}), Object({"L": Number(67831), "R": Number(67835)}), Object({"L": Number(67855), "R": Number(67859)})]), "storage": Number(0)}), Object({"id": Number(4663), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(46180), "R": Number(46184)}), Object({"L": Number(46672), "R": Number(46676)}), Object({"L": Number(46729), "R": Number(46733)}), Object({"L": Number(46791), "R": Number(46795)}), Object({"L": Number(46853), "R": Number(46857)}), Object({"L": Number(47778), "R": Number(47782)}), Object({"L": Number(47831), "R": Number(47835)}), Object({"L": Number(47899), "R": Number(47903)}), Object({"L": Number(47967), "R": Number(47971)})]), "storage": Number(0)}), Object({"id": Number(4709), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(60185), "R": Number(60202)})]), "storage": Number(0)}), Object({"id": Number(4512), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(61284), "R": Number(61300)}), Object({"L": Number(62674), "R": Number(62690)}), Object({"L": Number(62814), "R": Number(62830)}), Object({"L": Number(62864), "R": Number(62880)}), Object({"L": Number(63102), "R": Number(63118)}), Object({"L": Number(63456), "R": Number(63472)}), Object({"L": Number(63590), "R": Number(63606)})]), "storage": Number(0)}), Object({"id": Number(4815), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(7515), "R": Number(7521)})]), "storage": Number(0)}), Object({"id": Number(2622), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(3200), "R": Number(3203)}), Object({"L": Number(4666), "R": Number(4669)}), Object({"L": Number(6246), "R": Number(6249)}), Object({"L": Number(6497), "R": Number(6500)}), Object({"L": Number(7532), "R": Number(7535)}), Object({"L": Number(10243), "R": Number(10246)}), Object({"L": Number(11467), "R": Number(11470)}), Object({"L": Number(11579), "R": Number(11582)}), Object({"L": Number(11994), "R": Number(11997)}), Object({"L": Number(13345), "R": Number(13348)}), Object({"L": Number(17508), "R": Number(17511)}), Object({"L": Number(17718), "R": Number(17721)}), Object({"L": Number(17816), "R": Number(17819)}), Object({"L": Number(20332), "R": Number(20335)}), Object({"L": Number(20428), "R": Number(20431)}), Object({"L": Number(26796), "R": Number(26799)}), Object({"L": Number(29873), "R": Number(29876)}), Object({"L": Number(32102), "R": Number(32105)}), Object({"L": Number(36672), "R": Number(36675)}), Object({"L": Number(36734), "R": Number(36737)}), Object({"L": Number(37826), "R": Number(37829)}), Object({"L": Number(40981), "R": Number(40984)}), Object({"L": Number(41235), "R": Number(41238)}), Object({"L": Number(67183), "R": Number(67186)}), Object({"L": Number(67199), "R": Number(67202)})]), "storage": Number(1)}), Object({"id": Number(954), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(682), "R": Number(698)}), Object({"L": Number(21885), "R": Number(21901)})]), "storage": Number(0)}), Object({"id": Number(4649), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(13111), "R": Number(13115)})]), "storage": Number(0)}), Object({"id": Number(2447), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5888), "R": Number(5899)}), Object({"L": Number(22432), "R": Number(22443)}), Object({"L": Number(25604), "R": Number(25615)}), Object({"L": Number(31750), "R": Number(31761)})]), "storage": Number(0)}), Object({"id": Number(4844), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(23424), "R": Number(23428)}), Object({"L": Number(23491), "R": Number(23495)}), Object({"L": Number(23576), "R": Number(23580)}), Object({"L": Number(23651), "R": Number(23655)}), Object({"L": Number(23726), "R": Number(23730)})]), "storage": Number(0)}), Object({"id": Number(4697), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(6688), "R": Number(6692)}), Object({"L": Number(6712), "R": Number(6716)}), Object({"L": Number(6745), "R": Number(6749)}), Object({"L": Number(6809), "R": Number(6813)}), Object({"L": Number(6849), "R": Number(6853)})]), "storage": Number(0)}), Object({"id": Number(990), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(15857), "R": Number(15866)}), Object({"L": Number(16286), "R": Number(16295)})]), "storage": Number(0)}), Object({"id": Number(950), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(3305), "R": Number(3331)}), Object({"L": Number(3988), "R": Number(4014)})]), "storage": Number(0)}), Object({"id": Number(4862), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(70441), "R": Number(70448)}), Object({"L": Number(71175), "R": Number(71182)}), Object({"L": Number(71224), "R": Number(71231)}), Object({"L": Number(71540), "R": Number(71547)}), Object({"L": Number(71554), "R": Number(71561)}), Object({"L": Number(71575), "R": Number(71582)}), Object({"L": Number(71610), "R": Number(71617)}), Object({"L": Number(72107), "R": Number(72114)}), Object({"L": Number(72436), "R": Number(72443)}), Object({"L": Number(72450), "R": Number(72457)}), Object({"L": Number(72489), "R": Number(72496)})]), "storage": Number(0)}), Object({"id": Number(4534), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(3492), "R": Number(3498)}), Object({"L": Number(3867), "R": Number(3873)}), Object({"L": Number(5529), "R": Number(5535)}), Object({"L": Number(5579), "R": Number(5585)}), Object({"L": Number(6416), "R": Number(6422)}), Object({"L": Number(13547), "R": Number(13553)}), Object({"L": Number(13803), "R": Number(13809)}), Object({"L": Number(13938), "R": Number(13944)}), Object({"L": Number(13988), "R": Number(13994)}), Object({"L": Number(15242), "R": Number(15248)}), Object({"L": Number(15298), "R": Number(15304)}), Object({"L": Number(16386), "R": Number(16392)}), Object({"L": Number(16430), "R": Number(16436)}), Object({"L": Number(16718), "R": Number(16724)}), Object({"L": Number(17054), "R": Number(17060)}), Object({"L": Number(17110), "R": Number(17116)}), Object({"L": Number(17166), "R": Number(17172)}), Object({"L": Number(17283), "R": Number(17289)}), Object({"L": Number(17357), "R": Number(17363)}), Object({"L": Number(17568), "R": Number(17574)}), Object({"L": Number(17677), "R": Number(17683)}), Object({"L": Number(17756), "R": Number(17762)}), Object({"L": Number(17854), "R": Number(17860)}), Object({"L": Number(17929), "R": Number(17935)}), Object({"L": Number(18128), "R": Number(18134)}), Object({"L": Number(18938), "R": Number(18944)}), Object({"L": Number(18982), "R": Number(18988)}), Object({"L": Number(19276), "R": Number(19282)}), Object({"L": Number(19785), "R": Number(19791)}), Object({"L": Number(19912), "R": Number(19918)}), Object({"L": Number(19985), "R": Number(19991)}), Object({"L": Number(20292), "R": Number(20298)}), Object({"L": Number(20370), "R": Number(20376)}), Object({"L": Number(20466), "R": Number(20472)}), Object({"L": Number(20539), "R": Number(20545)}), Object({"L": Number(20732), "R": Number(20738)}), Object({"L": Number(45003), "R": Number(45009)}), Object({"L": Number(45025), "R": Number(45031)}), Object({"L": Number(57280), "R": Number(57286)}), Object({"L": Number(58931), "R": Number(58937)}), Object({"L": Number(60338), "R": Number(60344)}), Object({"L": Number(60401), "R": Number(60407)}), Object({"L": Number(60532), "R": Number(60538)})]), "storage": Number(0)}), Object({"id": Number(4572), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(4509), "R": Number(4515)}), Object({"L": Number(4773), "R": Number(4779)}), Object({"L": Number(9130), "R": Number(9136)}), Object({"L": Number(9305), "R": Number(9311)}), Object({"L": Number(9494), "R": Number(9500)}), Object({"L": Number(9721), "R": Number(9727)}), Object({"L": Number(9876), "R": Number(9882)}), Object({"L": Number(10362), "R": Number(10368)}), Object({"L": Number(10512), "R": Number(10518)}), Object({"L": Number(11080), "R": Number(11086)}), Object({"L": Number(12193), "R": Number(12199)}), Object({"L": Number(12584), "R": Number(12590)}), Object({"L": Number(12628), "R": Number(12634)}), Object({"L": Number(14357), "R": Number(14363)}), Object({"L": Number(14604), "R": Number(14610)}), Object({"L": Number(14643), "R": Number(14649)}), Object({"L": Number(22526), "R": Number(22532)}), Object({"L": Number(24015), "R": Number(24021)}), Object({"L": Number(24275), "R": Number(24281)}), Object({"L": Number(26242), "R": Number(26248)}), Object({"L": Number(27508), "R": Number(27514)}), Object({"L": Number(34844), "R": Number(34850)}), Object({"L": Number(35080), "R": Number(35086)}), Object({"L": Number(35716), "R": Number(35722)}), Object({"L": Number(36911), "R": Number(36917)}), Object({"L": Number(37204), "R": Number(37210)}), Object({"L": Number(38074), "R": Number(38080)}), Object({"L": Number(38240), "R": Number(38246)}), Object({"L": Number(38392), "R": Number(38398)}), Object({"L": Number(38536), "R": Number(38542)}), Object({"L": Number(38917), "R": Number(38923)}), Object({"L": Number(49186), "R": Number(49192)})]), "storage": Number(0)}), Object({"id": Number(4785), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(41375), "R": Number(41381)}), Object({"L": Number(41628), "R": Number(41634)}), Object({"L": Number(41661), "R": Number(41667)}), Object({"L": Number(41909), "R": Number(41915)}), Object({"L": Number(42007), "R": Number(42013)}), Object({"L": Number(42105), "R": Number(42111)}), Object({"L": Number(42202), "R": Number(42208)}), Object({"L": Number(42300), "R": Number(42306)}), Object({"L": Number(42398), "R": Number(42404)}), Object({"L": Number(42455), "R": Number(42461)})]), "storage": Number(0)}), Object({"id": Number(4683), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(6672), "R": Number(6675)}), Object({"L": Number(6697), "R": Number(6700)}), Object({"L": Number(6776), "R": Number(6779)}), Object({"L": Number(6795), "R": Number(6798)}), Object({"L": Number(6867), "R": Number(6870)})]), "storage": Number(0)}), Object({"id": Number(995), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(23011), "R": Number(23027)}), Object({"L": Number(23446), "R": Number(23462)})]), "storage": Number(0)}), Object({"id": Number(3688), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(27302), "R": Number(27313)})]), "storage": Number(1)}), Object({"id": Number(4620), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(10580), "R": Number(10584)}), Object({"L": Number(25802), "R": Number(25806)}), Object({"L": Number(25855), "R": Number(25859)}), Object({"L": Number(31264), "R": Number(31268)}), Object({"L": Number(31317), "R": Number(31321)}), Object({"L": Number(35424), "R": Number(35428)}), Object({"L": Number(35477), "R": Number(35481)}), Object({"L": Number(38805), "R": Number(38809)}), Object({"L": Number(38858), "R": Number(38862)}), Object({"L": Number(44366), "R": Number(44370)}), Object({"L": Number(45599), "R": Number(45603)}), Object({"L": Number(46571), "R": Number(46575)}), Object({"L": Number(47678), "R": Number(47682)}), Object({"L": Number(48401), "R": Number(48405)}), Object({"L": Number(48556), "R": Number(48560)}), Object({"L": Number(68263), "R": Number(68267)}), Object({"L": Number(68322), "R": Number(68326)}), Object({"L": Number(68558), "R": Number(68562)}), Object({"L": Number(68698), "R": Number(68702)}), Object({"L": Number(69872), "R": Number(69876)}), Object({"L": Number(69928), "R": Number(69932)})]), "storage": Number(0)}), Object({"id": Number(4868), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(71411), "R": Number(71422)}), Object({"L": Number(71806), "R": Number(71817)})]), "storage": Number(0)}), Object({"id": Number(4633), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(36080), "R": Number(36083)}), Object({"L": Number(36174), "R": Number(36177)}), Object({"L": Number(36189), "R": Number(36192)}), Object({"L": Number(36270), "R": Number(36273)}), Object({"L": Number(36314), "R": Number(36317)}), Object({"L": Number(36363), "R": Number(36366)}), Object({"L": Number(36421), "R": Number(36424)}), Object({"L": Number(36461), "R": Number(36464)}), Object({"L": Number(36530), "R": Number(36533)}), Object({"L": Number(36659), "R": Number(36662)}), Object({"L": Number(36721), "R": Number(36724)}), Object({"L": Number(36856), "R": Number(36859)}), Object({"L": Number(37051), "R": Number(37054)}), Object({"L": Number(37299), "R": Number(37302)}), Object({"L": Number(37795), "R": Number(37798)}), Object({"L": Number(37813), "R": Number(37816)}), Object({"L": Number(38213), "R": Number(38216)}), Object({"L": Number(38310), "R": Number(38313)}), Object({"L": Number(38345), "R": Number(38348)}), Object({"L": Number(38424), "R": Number(38427)}), Object({"L": Number(38455), "R": Number(38458)}), Object({"L": Number(38499), "R": Number(38502)}), Object({"L": Number(38567), "R": Number(38570)}), Object({"L": Number(38600), "R": Number(38603)}), Object({"L": Number(38788), "R": Number(38791)}), Object({"L": Number(39008), "R": Number(39011)})]), "storage": Number(0)}), Object({"id": Number(4623), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(68149), "R": Number(68157)}), Object({"L": Number(68223), "R": Number(68231)})]), "storage": Number(0)}), Object({"id": Number(4823), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(56878), "R": Number(56882)}), Object({"L": Number(56947), "R": Number(56951)}), Object({"L": Number(56961), "R": Number(56965)}), Object({"L": Number(56982), "R": Number(56986)}), Object({"L": Number(57041), "R": Number(57045)}), Object({"L": Number(57067), "R": Number(57071)}), Object({"L": Number(57182), "R": Number(57186)}), Object({"L": Number(57323), "R": Number(57327)}), Object({"L": Number(57519), "R": Number(57523)}), Object({"L": Number(57606), "R": Number(57610)}), Object({"L": Number(57767), "R": Number(57771)}), Object({"L": Number(57828), "R": Number(57832)}), Object({"L": Number(58096), "R": Number(58100)}), Object({"L": Number(58267), "R": Number(58271)}), Object({"L": Number(58344), "R": Number(58348)}), Object({"L": Number(58466), "R": Number(58470)}), Object({"L": Number(58587), "R": Number(58591)}), Object({"L": Number(58631), "R": Number(58635)}), Object({"L": Number(59115), "R": Number(59119)}), Object({"L": Number(59206), "R": Number(59210)})]), "storage": Number(0)}), Object({"id": Number(4510), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(9696), "R": Number(9701)}), Object({"L": Number(9820), "R": Number(9825)}), Object({"L": Number(9999), "R": Number(10004)}), Object({"L": Number(26978), "R": Number(26983)}), Object({"L": Number(38336), "R": Number(38341)}), Object({"L": Number(38515), "R": Number(38520)}), Object({"L": Number(38618), "R": Number(38623)}), Object({"L": Number(43573), "R": Number(43578)})]), "storage": Number(0)}), Object({"id": Number(4679), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(33490), "R": Number(33506)}), Object({"L": Number(34524), "R": Number(34540)})]), "storage": Number(0)}), Object({"id": Number(1005), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(35357), "R": Number(35384)})]), "storage": Number(0)}), Object({"id": Number(4710), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26548), "R": Number(26552)}), Object({"L": Number(26565), "R": Number(26569)}), Object({"L": Number(26700), "R": Number(26704)}), Object({"L": Number(26758), "R": Number(26762)}), Object({"L": Number(26815), "R": Number(26819)}), Object({"L": Number(26926), "R": Number(26930)}), Object({"L": Number(26959), "R": Number(26963)}), Object({"L": Number(26992), "R": Number(26996)})]), "storage": Number(0)}), Object({"id": Number(2486), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(1406), "R": Number(1412)}), Object({"L": Number(1422), "R": Number(1428)}), Object({"L": Number(1485), "R": Number(1491)}), Object({"L": Number(1536), "R": Number(1542)}), Object({"L": Number(2453), "R": Number(2459)}), Object({"L": Number(2469), "R": Number(2475)}), Object({"L": Number(2530), "R": Number(2536)}), Object({"L": Number(2581), "R": Number(2587)}), Object({"L": Number(6140), "R": Number(6146)}), Object({"L": Number(7658), "R": Number(7664)}), Object({"L": Number(7702), "R": Number(7708)}), Object({"L": Number(7746), "R": Number(7752)}), Object({"L": Number(10172), "R": Number(10178)}), Object({"L": Number(22721), "R": Number(22727)}), Object({"L": Number(24140), "R": Number(24146)}), Object({"L": Number(27910), "R": Number(27916)}), Object({"L": Number(30074), "R": Number(30080)}), Object({"L": Number(31981), "R": Number(31987)}), Object({"L": Number(32252), "R": Number(32258)}), Object({"L": Number(34206), "R": Number(34212)}), Object({"L": Number(36274), "R": Number(36280)}), Object({"L": Number(39307), "R": Number(39313)}), Object({"L": Number(43156), "R": Number(43162)}), Object({"L": Number(65782), "R": Number(65788)})]), "storage": Number(0)}), Object({"id": Number(4556), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(32784), "R": Number(32790)}), Object({"L": Number(34622), "R": Number(34628)}), Object({"L": Number(34802), "R": Number(34808)}), Object({"L": Number(46469), "R": Number(46475)}), Object({"L": Number(47428), "R": Number(47434)}), Object({"L": Number(48318), "R": Number(48324)}), Object({"L": Number(48473), "R": Number(48479)}), Object({"L": Number(49226), "R": Number(49232)}), Object({"L": Number(56590), "R": Number(56596)})]), "storage": Number(0)}), Object({"id": Number(4647), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(15197), "R": Number(15211)}), Object({"L": Number(22831), "R": Number(22845)}), Object({"L": Number(22996), "R": Number(23010)}), Object({"L": Number(23431), "R": Number(23445)}), Object({"L": Number(23835), "R": Number(23849)}), Object({"L": Number(23912), "R": Number(23926)}), Object({"L": Number(24190), "R": Number(24204)}), Object({"L": Number(24475), "R": Number(24489)}), Object({"L": Number(72189), "R": Number(72203)}), Object({"L": Number(73610), "R": Number(73624)})]), "storage": Number(1)}), Object({"id": Number(4642), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(22698), "R": Number(22702)}), Object({"L": Number(22824), "R": Number(22828)}), Object({"L": Number(22899), "R": Number(22903)}), Object({"L": Number(23029), "R": Number(23033)}), Object({"L": Number(23464), "R": Number(23468)})]), "storage": Number(0)}), Object({"id": Number(4889), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(61173), "R": Number(61199)}), Object({"L": Number(62628), "R": Number(62654)}), Object({"L": Number(63413), "R": Number(63439)})]), "storage": Number(0)}), Object({"id": Number(4820), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(54324), "R": Number(54340)}), Object({"L": Number(54600), "R": Number(54616)}), Object({"L": Number(54932), "R": Number(54948)}), Object({"L": Number(55157), "R": Number(55173)}), Object({"L": Number(55546), "R": Number(55562)})]), "storage": Number(0)}), Object({"id": Number(4473), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(13781), "R": Number(13791)})]), "storage": Number(0)}), Object({"id": Number(2875), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(14259), "R": Number(14272)}), Object({"L": Number(14306), "R": Number(14319)})]), "storage": Number(0)}), Object({"id": Number(4651), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(3190), "R": Number(3191)}), Object({"L": Number(3196), "R": Number(3197)}), Object({"L": Number(3290), "R": Number(3291)})]), "storage": Number(0)}), Object({"id": Number(4763), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(39694), "R": Number(39697)}), Object({"L": Number(39777), "R": Number(39780)})]), "storage": Number(0)}), Object({"id": Number(115), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(8919), "R": Number(8932)}), Object({"L": Number(27159), "R": Number(27172)}), Object({"L": Number(32496), "R": Number(32509)}), Object({"L": Number(36086), "R": Number(36099)}), Object({"L": Number(39164), "R": Number(39177)}), Object({"L": Number(42822), "R": Number(42835)}), Object({"L": Number(65635), "R": Number(65648)})]), "storage": Number(0)}), Object({"id": Number(4655), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(25224), "R": Number(25240)}), Object({"L": Number(25292), "R": Number(25308)}), Object({"L": Number(54077), "R": Number(54093)}), Object({"L": Number(54554), "R": Number(54570)}), Object({"L": Number(54887), "R": Number(54903)}), Object({"L": Number(55113), "R": Number(55129)})]), "storage": Number(0)}), Object({"id": Number(4874), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(3147), "R": Number(3159)}), Object({"L": Number(36640), "R": Number(36652)}), Object({"L": Number(37137), "R": Number(37149)})]), "storage": Number(0)}), Object({"id": Number(2428), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(1296), "R": Number(1301)}), Object({"L": Number(2176), "R": Number(2181)}), Object({"L": Number(9798), "R": Number(9803)}), Object({"L": Number(9912), "R": Number(9917)}), Object({"L": Number(9987), "R": Number(9992)}), Object({"L": Number(10029), "R": Number(10034)}), Object({"L": Number(38314), "R": Number(38319)}), Object({"L": Number(38428), "R": Number(38433)}), Object({"L": Number(38503), "R": Number(38508)}), Object({"L": Number(43561), "R": Number(43566)})]), "storage": Number(0)}), Object({"id": Number(4537), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(58807), "R": Number(58830)})]), "storage": Number(0)}), Object({"id": Number(4503), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(32567), "R": Number(32572)}), Object({"L": Number(32736), "R": Number(32741)}), Object({"L": Number(33056), "R": Number(33061)}), Object({"L": Number(33127), "R": Number(33132)}), Object({"L": Number(33159), "R": Number(33164)}), Object({"L": Number(33193), "R": Number(33198)}), Object({"L": Number(33227), "R": Number(33232)}), Object({"L": Number(33668), "R": Number(33673)}), Object({"L": Number(33734), "R": Number(33739)}), Object({"L": Number(33761), "R": Number(33766)}), Object({"L": Number(33791), "R": Number(33796)}), Object({"L": Number(33821), "R": Number(33826)})]), "storage": Number(0)}), Object({"id": Number(1528), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(55370), "R": Number(55383)}), Object({"L": Number(57351), "R": Number(57364)}), Object({"L": Number(59234), "R": Number(59247)}), Object({"L": Number(61730), "R": Number(61743)})]), "storage": Number(0)}), Object({"id": Number(4722), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(32490), "R": Number(32493)}), Object({"L": Number(34149), "R": Number(34152)}), Object({"L": Number(34164), "R": Number(34167)}), Object({"L": Number(34202), "R": Number(34205)}), Object({"L": Number(34246), "R": Number(34249)}), Object({"L": Number(34307), "R": Number(34310)}), Object({"L": Number(34378), "R": Number(34381)}), Object({"L": Number(34413), "R": Number(34416)}), Object({"L": Number(34503), "R": Number(34506)}), Object({"L": Number(34550), "R": Number(34553)}), Object({"L": Number(34737), "R": Number(34740)}), Object({"L": Number(34763), "R": Number(34766)}), Object({"L": Number(34899), "R": Number(34902)}), Object({"L": Number(35009), "R": Number(35012)}), Object({"L": Number(35135), "R": Number(35138)}), Object({"L": Number(35212), "R": Number(35215)}), Object({"L": Number(35291), "R": Number(35294)}), Object({"L": Number(35387), "R": Number(35390)}), Object({"L": Number(35861), "R": Number(35864)})]), "storage": Number(0)}), Object({"id": Number(4604), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(63689), "R": Number(63696)}), Object({"L": Number(63764), "R": Number(63771)})]), "storage": Number(0)}), Object({"id": Number(4660), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(12788), "R": Number(12799)}), Object({"L": Number(14788), "R": Number(14799)}), Object({"L": Number(14993), "R": Number(15004)}), Object({"L": Number(57753), "R": Number(57764)}), Object({"L": Number(58253), "R": Number(58264)}), Object({"L": Number(58452), "R": Number(58463)})]), "storage": Number(0)}), Object({"id": Number(4499), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(35233), "R": Number(35237)}), Object({"L": Number(60063), "R": Number(60067)})]), "storage": Number(0)}), Object({"id": Number(4588), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(70420), "R": Number(70428)}), Object({"L": Number(70964), "R": Number(70972)}), Object({"L": Number(71010), "R": Number(71018)}), Object({"L": Number(72219), "R": Number(72227)}), Object({"L": Number(73750), "R": Number(73758)})]), "storage": Number(0)}), Object({"id": Number(733), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(28352), "R": Number(28355)})]), "storage": Number(0)}), Object({"id": Number(4488), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(62892), "R": Number(62915)}), Object({"L": Number(62979), "R": Number(63002)}), Object({"L": Number(63032), "R": Number(63055)}), Object({"L": Number(63057), "R": Number(63080)})]), "storage": Number(0)}), Object({"id": Number(4793), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(43996), "R": Number(44004)}), Object({"L": Number(44140), "R": Number(44148)}), Object({"L": Number(44219), "R": Number(44227)})]), "storage": Number(0)}), Object({"id": Number(3977), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10371), "R": Number(10383)}), Object({"L": Number(10523), "R": Number(10535)})]), "storage": Number(0)}), Object({"id": Number(4511), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(8935), "R": Number(8937)}), Object({"L": Number(8941), "R": Number(8943)}), Object({"L": Number(9030), "R": Number(9032)}), Object({"L": Number(9126), "R": Number(9128)}), Object({"L": Number(9490), "R": Number(9492)}), Object({"L": Number(9692), "R": Number(9694)}), Object({"L": Number(9717), "R": Number(9719)}), Object({"L": Number(9872), "R": Number(9874)}), Object({"L": Number(9995), "R": Number(9997)}), Object({"L": Number(10258), "R": Number(10260)}), Object({"L": Number(10358), "R": Number(10360)}), Object({"L": Number(10563), "R": Number(10565)}), Object({"L": Number(10736), "R": Number(10738)}), Object({"L": Number(16085), "R": Number(16087)}), Object({"L": Number(19655), "R": Number(19657)}), Object({"L": Number(22522), "R": Number(22524)}), Object({"L": Number(24011), "R": Number(24013)}), Object({"L": Number(24271), "R": Number(24273)}), Object({"L": Number(25993), "R": Number(25995)}), Object({"L": Number(26024), "R": Number(26026)}), Object({"L": Number(26056), "R": Number(26058)}), Object({"L": Number(26238), "R": Number(26240)})]), "storage": Number(0)}), Object({"id": Number(4581), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(70354), "R": Number(70368)}), Object({"L": Number(72386), "R": Number(72400)}), Object({"L": Number(72626), "R": Number(72640)}), Object({"L": Number(72685), "R": Number(72699)}), Object({"L": Number(72717), "R": Number(72731)}), Object({"L": Number(72750), "R": Number(72764)})]), "storage": Number(0)}), Object({"id": Number(640), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(25068), "R": Number(25074)}), Object({"L": Number(71252), "R": Number(71258)}), Object({"L": Number(73686), "R": Number(73692)}), Object({"L": Number(73860), "R": Number(73866)})]), "storage": Number(0)}), Object({"id": Number(4809), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(4883), "R": Number(4894)}), Object({"L": Number(17487), "R": Number(17498)}), Object({"L": Number(18665), "R": Number(18676)}), Object({"L": Number(20166), "R": Number(20177)}), Object({"L": Number(21254), "R": Number(21265)}), Object({"L": Number(33392), "R": Number(33403)}), Object({"L": Number(33978), "R": Number(33989)}), Object({"L": Number(37567), "R": Number(37578)}), Object({"L": Number(43426), "R": Number(43437)})]), "storage": Number(1)}), Object({"id": Number(4500), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(10466), "R": Number(10470)})]), "storage": Number(0)}), Object({"id": Number(4592), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(7369), "R": Number(7388)}), Object({"L": Number(13228), "R": Number(13247)})]), "storage": Number(0)}), Object({"id": Number(4849), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(63265), "R": Number(63284)}), Object({"L": Number(65047), "R": Number(65066)})]), "storage": Number(1)}), Object({"id": Number(988), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(53601), "R": Number(53615)}), Object({"L": Number(66993), "R": Number(67007)})]), "storage": Number(0)}), Object({"id": Number(3983), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9885), "R": Number(9900)}), Object({"L": Number(38401), "R": Number(38416)})]), "storage": Number(0)}), Object({"id": Number(4496), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(42816), "R": Number(42819)}), Object({"L": Number(43099), "R": Number(43102)}), Object({"L": Number(43114), "R": Number(43117)}), Object({"L": Number(43152), "R": Number(43155)}), Object({"L": Number(43192), "R": Number(43195)}), Object({"L": Number(43236), "R": Number(43239)}), Object({"L": Number(43273), "R": Number(43276)}), Object({"L": Number(43286), "R": Number(43289)}), Object({"L": Number(43439), "R": Number(43442)}), Object({"L": Number(43452), "R": Number(43455)}), Object({"L": Number(43483), "R": Number(43486)}), Object({"L": Number(43496), "R": Number(43499)}), Object({"L": Number(43509), "R": Number(43512)}), Object({"L": Number(43525), "R": Number(43528)}), Object({"L": Number(43557), "R": Number(43560)}), Object({"L": Number(43600), "R": Number(43603)}), Object({"L": Number(43709), "R": Number(43712)}), Object({"L": Number(43801), "R": Number(43804)})]), "storage": Number(0)}), Object({"id": Number(2901), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(14491), "R": Number(14507)}), Object({"L": Number(14543), "R": Number(14559)})]), "storage": Number(0)}), Object({"id": Number(924), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(59282), "R": Number(59299)})]), "storage": Number(0)}), Object({"id": Number(4753), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(36056), "R": Number(36060)}), Object({"L": Number(36114), "R": Number(36118)}), Object({"L": Number(36252), "R": Number(36256)}), Object({"L": Number(36296), "R": Number(36300)}), Object({"L": Number(36345), "R": Number(36349)}), Object({"L": Number(36426), "R": Number(36430)}), Object({"L": Number(36892), "R": Number(36896)}), Object({"L": Number(37292), "R": Number(37296)}), Object({"L": Number(37580), "R": Number(37584)}), Object({"L": Number(37707), "R": Number(37711)}), Object({"L": Number(37725), "R": Number(37729)}), Object({"L": Number(38322), "R": Number(38326)}), Object({"L": Number(38781), "R": Number(38785)}), Object({"L": Number(38880), "R": Number(38884)}), Object({"L": Number(39013), "R": Number(39017)})]), "storage": Number(0)}), Object({"id": Number(928), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(53876), "R": Number(53894)})]), "storage": Number(0)}), Object({"id": Number(4754), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(660), "R": Number(666)})]), "storage": Number(0)}), Object({"id": Number(4675), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(14131), "R": Number(14137)}), Object({"L": Number(14289), "R": Number(14295)}), Object({"L": Number(14526), "R": Number(14532)}), Object({"L": Number(15115), "R": Number(15121)}), Object({"L": Number(15224), "R": Number(15230)})]), "storage": Number(0)}), Object({"id": Number(193), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(44923), "R": Number(44949)}), Object({"L": Number(66756), "R": Number(66782)})]), "storage": Number(0)}), Object({"id": Number(4703), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(6828), "R": Number(6834)})]), "storage": Number(0)}), Object({"id": Number(4773), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(70492), "R": Number(70500)}), Object({"L": Number(71114), "R": Number(71122)}), Object({"L": Number(71291), "R": Number(71299)}), Object({"L": Number(72133), "R": Number(72141)}), Object({"L": Number(72258), "R": Number(72266)})]), "storage": Number(0)}), Object({"id": Number(984), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(8336), "R": Number(8347)}), Object({"L": Number(8502), "R": Number(8513)}), Object({"L": Number(8668), "R": Number(8679)})]), "storage": Number(0)}), Object({"id": Number(4677), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(3173), "R": Number(3179)}), Object({"L": Number(3293), "R": Number(3299)}), Object({"L": Number(3360), "R": Number(3366)}), Object({"L": Number(3383), "R": Number(3389)})]), "storage": Number(0)}), Object({"id": Number(4474), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(35963), "R": Number(35975)})]), "storage": Number(0)}), Object({"id": Number(4779), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(13529), "R": Number(13535)})]), "storage": Number(0)}), Object({"id": Number(4491), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(11005), "R": Number(11014)}), Object({"L": Number(11030), "R": Number(11039)}), Object({"L": Number(11067), "R": Number(11076)}), Object({"L": Number(12118), "R": Number(12127)}), Object({"L": Number(12143), "R": Number(12152)}), Object({"L": Number(12180), "R": Number(12189)}), Object({"L": Number(12242), "R": Number(12251)}), Object({"L": Number(12402), "R": Number(12411)})]), "storage": Number(0)}), Object({"id": Number(4646), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(7030), "R": Number(7038)}), Object({"L": Number(7086), "R": Number(7094)}), Object({"L": Number(7409), "R": Number(7417)})]), "storage": Number(0)}), Object({"id": Number(1314), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(26198), "R": Number(26229)})]), "storage": Number(0)}), Object({"id": Number(2457), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(25568), "R": Number(25581)})]), "storage": Number(0)}), Object({"id": Number(3777), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(34853), "R": Number(34869)}), Object({"L": Number(35089), "R": Number(35105)})]), "storage": Number(0)}), Object({"id": Number(3774), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9503), "R": Number(9517)}), Object({"L": Number(38545), "R": Number(38559)})]), "storage": Number(0)}), Object({"id": Number(4886), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(7072), "R": Number(7083)})]), "storage": Number(0)}), Object({"id": Number(4617), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(17094), "R": Number(17108)}), Object({"L": Number(17150), "R": Number(17164)}), Object({"L": Number(60322), "R": Number(60336)}), Object({"L": Number(60385), "R": Number(60399)}), Object({"L": Number(60516), "R": Number(60530)}), Object({"L": Number(60623), "R": Number(60637)}), Object({"L": Number(60846), "R": Number(60860)}), Object({"L": Number(60910), "R": Number(60924)}), Object({"L": Number(62306), "R": Number(62320)}), Object({"L": Number(62511), "R": Number(62525)}), Object({"L": Number(62753), "R": Number(62767)})]), "storage": Number(0)}), Object({"id": Number(4614), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(13054), "R": Number(13063)})]), "storage": Number(0)}), Object({"id": Number(926), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(53936), "R": Number(53957)})]), "storage": Number(0)}), Object({"id": Number(4837), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(7287), "R": Number(7297)}), Object({"L": Number(7429), "R": Number(7439)}), Object({"L": Number(7670), "R": Number(7680)}), Object({"L": Number(7714), "R": Number(7724)}), Object({"L": Number(7758), "R": Number(7768)}), Object({"L": Number(7804), "R": Number(7814)}), Object({"L": Number(7849), "R": Number(7859)}), Object({"L": Number(7894), "R": Number(7904)}), Object({"L": Number(7940), "R": Number(7950)}), Object({"L": Number(7985), "R": Number(7995)}), Object({"L": Number(8030), "R": Number(8040)}), Object({"L": Number(8076), "R": Number(8086)}), Object({"L": Number(8121), "R": Number(8131)}), Object({"L": Number(8166), "R": Number(8176)})]), "storage": Number(0)}), Object({"id": Number(937), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(39103), "R": Number(39110)}), Object({"L": Number(67710), "R": Number(67717)})]), "storage": Number(0)}), Object({"id": Number(4801), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(45033), "R": Number(45042)}), Object({"L": Number(58939), "R": Number(58948)}), Object({"L": Number(60540), "R": Number(60549)})]), "storage": Number(0)}), Object({"id": Number(4822), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(66490), "R": Number(66494)}), Object({"L": Number(66564), "R": Number(66568)}), Object({"L": Number(66661), "R": Number(66665)}), Object({"L": Number(66691), "R": Number(66695)}), Object({"L": Number(66784), "R": Number(66788)}), Object({"L": Number(66838), "R": Number(66842)}), Object({"L": Number(66884), "R": Number(66888)}), Object({"L": Number(66898), "R": Number(66902)}), Object({"L": Number(66922), "R": Number(66926)}), Object({"L": Number(66949), "R": Number(66953)}), Object({"L": Number(67009), "R": Number(67013)}), Object({"L": Number(67098), "R": Number(67102)}), Object({"L": Number(67163), "R": Number(67167)}), Object({"L": Number(67250), "R": Number(67254)}), Object({"L": Number(67326), "R": Number(67330)}), Object({"L": Number(67492), "R": Number(67496)}), Object({"L": Number(67539), "R": Number(67543)}), Object({"L": Number(67582), "R": Number(67586)}), Object({"L": Number(67631), "R": Number(67635)}), Object({"L": Number(67676), "R": Number(67680)}), Object({"L": Number(67719), "R": Number(67723)}), Object({"L": Number(67769), "R": Number(67773)}), Object({"L": Number(67811), "R": Number(67815)}), Object({"L": Number(67825), "R": Number(67829)}), Object({"L": Number(67849), "R": Number(67853)}), Object({"L": Number(67907), "R": Number(67911)}), Object({"L": Number(67956), "R": Number(67960)}), Object({"L": Number(67976), "R": Number(67980)}), Object({"L": Number(68030), "R": Number(68034)})]), "storage": Number(0)}), Object({"id": Number(4813), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(6764), "R": Number(6774)}), Object({"L": Number(7567), "R": Number(7577)}), Object({"L": Number(13380), "R": Number(13390)}), Object({"L": Number(15663), "R": Number(15673)})]), "storage": Number(0)}), Object({"id": Number(4696), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(5774), "R": Number(5776)}), Object({"L": Number(5903), "R": Number(5905)}), Object({"L": Number(5971), "R": Number(5973)}), Object({"L": Number(6004), "R": Number(6006)}), Object({"L": Number(6037), "R": Number(6039)}), Object({"L": Number(6220), "R": Number(6222)}), Object({"L": Number(6224), "R": Number(6226)}), Object({"L": Number(6471), "R": Number(6473)}), Object({"L": Number(6475), "R": Number(6477)})]), "storage": Number(0)}), Object({"id": Number(220), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(40867), "R": Number(40877)}), Object({"L": Number(41121), "R": Number(41131)})]), "storage": Number(0)}), Object({"id": Number(4810), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(70290), "R": Number(70294)}), Object({"L": Number(70591), "R": Number(70595)}), Object({"L": Number(72911), "R": Number(72915)}), Object({"L": Number(73040), "R": Number(73044)}), Object({"L": Number(73139), "R": Number(73143)}), Object({"L": Number(73780), "R": Number(73784)}), Object({"L": Number(73798), "R": Number(73802)})]), "storage": Number(0)}), Object({"id": Number(987), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(15769), "R": Number(15773)}), Object({"L": Number(29690), "R": Number(29694)}), Object({"L": Number(57008), "R": Number(57012)})]), "storage": Number(0)}), Object({"id": Number(4597), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(5587), "R": Number(5589)}), Object({"L": Number(16438), "R": Number(16440)}), Object({"L": Number(16726), "R": Number(16728)}), Object({"L": Number(17174), "R": Number(17176)}), Object({"L": Number(17291), "R": Number(17293)}), Object({"L": Number(17365), "R": Number(17367)}), Object({"L": Number(17576), "R": Number(17578)}), Object({"L": Number(17685), "R": Number(17687)}), Object({"L": Number(17764), "R": Number(17766)}), Object({"L": Number(17862), "R": Number(17864)}), Object({"L": Number(17937), "R": Number(17939)}), Object({"L": Number(18136), "R": Number(18138)}), Object({"L": Number(18990), "R": Number(18992)}), Object({"L": Number(19284), "R": Number(19286)}), Object({"L": Number(19920), "R": Number(19922)}), Object({"L": Number(19993), "R": Number(19995)}), Object({"L": Number(20300), "R": Number(20302)}), Object({"L": Number(20378), "R": Number(20380)}), Object({"L": Number(20474), "R": Number(20476)}), Object({"L": Number(20547), "R": Number(20549)}), Object({"L": Number(20740), "R": Number(20742)}), Object({"L": Number(60409), "R": Number(60411)})]), "storage": Number(0)}), Object({"id": Number(931), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(42770), "R": Number(42779)}), Object({"L": Number(67758), "R": Number(67767)})]), "storage": Number(0)}), Object({"id": Number(961), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(23140), "R": Number(23148)}), Object({"L": Number(23214), "R": Number(23222)}), Object({"L": Number(23288), "R": Number(23296)}), Object({"L": Number(23592), "R": Number(23600)}), Object({"L": Number(23667), "R": Number(23675)}), Object({"L": Number(23742), "R": Number(23750)})]), "storage": Number(0)}), Object({"id": Number(4712), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(13487), "R": Number(13515)}), Object({"L": Number(13739), "R": Number(13767)}), Object({"L": Number(13874), "R": Number(13902)})]), "storage": Number(0)}), Object({"id": Number(4546), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(41315), "R": Number(41319)}), Object({"L": Number(41745), "R": Number(41749)}), Object({"L": Number(41779), "R": Number(41783)}), Object({"L": Number(41812), "R": Number(41816)}), Object({"L": Number(41848), "R": Number(41852)}), Object({"L": Number(42270), "R": Number(42274)})]), "storage": Number(0)}), Object({"id": Number(4829), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(57716), "R": Number(57729)})]), "storage": Number(0)}), Object({"id": Number(2516), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(10216), "R": Number(10225)}), Object({"L": Number(30118), "R": Number(30127)}), Object({"L": Number(34250), "R": Number(34259)}), Object({"L": Number(36318), "R": Number(36327)}), Object({"L": Number(39347), "R": Number(39356)}), Object({"L": Number(43196), "R": Number(43205)})]), "storage": Number(0)}), Object({"id": Number(2879), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(33768), "R": Number(33786)}), Object({"L": Number(33798), "R": Number(33816)}), Object({"L": Number(33828), "R": Number(33846)})]), "storage": Number(0)}), Object({"id": Number(2418), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(6781), "R": Number(6791)}), Object({"L": Number(8284), "R": Number(8294)}), Object({"L": Number(8306), "R": Number(8316)}), Object({"L": Number(8368), "R": Number(8378)}), Object({"L": Number(8450), "R": Number(8460)}), Object({"L": Number(8472), "R": Number(8482)}), Object({"L": Number(8534), "R": Number(8544)}), Object({"L": Number(8616), "R": Number(8626)}), Object({"L": Number(8638), "R": Number(8648)}), Object({"L": Number(8700), "R": Number(8710)}), Object({"L": Number(15679), "R": Number(15689)})]), "storage": Number(0)}), Object({"id": Number(4781), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(5916), "R": Number(5920)}), Object({"L": Number(7526), "R": Number(7530)}), Object({"L": Number(9465), "R": Number(9469)}), Object({"L": Number(9924), "R": Number(9928)}), Object({"L": Number(12819), "R": Number(12823)}), Object({"L": Number(13335), "R": Number(13339)}), Object({"L": Number(14023), "R": Number(14027)}), Object({"L": Number(14874), "R": Number(14878)}), Object({"L": Number(15079), "R": Number(15083)}), Object({"L": Number(21803), "R": Number(21807)}), Object({"L": Number(22198), "R": Number(22202)}), Object({"L": Number(22327), "R": Number(22331)}), Object({"L": Number(25246), "R": Number(25250)}), Object({"L": Number(25314), "R": Number(25318)}), Object({"L": Number(26693), "R": Number(26697)}), Object({"L": Number(26952), "R": Number(26956)}), Object({"L": Number(28362), "R": Number(28366)}), Object({"L": Number(31778), "R": Number(31782)}), Object({"L": Number(34912), "R": Number(34916)}), Object({"L": Number(35022), "R": Number(35026)}), Object({"L": Number(36549), "R": Number(36553)}), Object({"L": Number(37071), "R": Number(37075)}), Object({"L": Number(38440), "R": Number(38444)}), Object({"L": Number(49599), "R": Number(49603)}), Object({"L": Number(49741), "R": Number(49745)}), Object({"L": Number(49883), "R": Number(49887)}), Object({"L": Number(54058), "R": Number(54062)}), Object({"L": Number(54576), "R": Number(54580)}), Object({"L": Number(54909), "R": Number(54913)}), Object({"L": Number(55135), "R": Number(55139)}), Object({"L": Number(57215), "R": Number(57219)}), Object({"L": Number(57630), "R": Number(57634)}), Object({"L": Number(57851), "R": Number(57855)}), Object({"L": Number(59148), "R": Number(59152)}), Object({"L": Number(60037), "R": Number(60041)}), Object({"L": Number(61823), "R": Number(61827)}), Object({"L": Number(66715), "R": Number(66719)}), Object({"L": Number(68688), "R": Number(68692)}), Object({"L": Number(69240), "R": Number(69244)}), Object({"L": Number(69351), "R": Number(69355)})]), "storage": Number(0)}), Object({"id": Number(700), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(44318), "R": Number(44336)}), Object({"L": Number(44482), "R": Number(44500)}), Object({"L": Number(46522), "R": Number(46540)}), Object({"L": Number(46603), "R": Number(46621)}), Object({"L": Number(47630), "R": Number(47648)}), Object({"L": Number(47710), "R": Number(47728)}), Object({"L": Number(48352), "R": Number(48370)}), Object({"L": Number(48508), "R": Number(48526)}), Object({"L": Number(49567), "R": Number(49585)}), Object({"L": Number(49692), "R": Number(49710)})]), "storage": Number(0)}), Object({"id": Number(2514), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(43538), "R": Number(43554)})]), "storage": Number(0)}), Object({"id": Number(4737), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(32537), "R": Number(32543)}), Object({"L": Number(32701), "R": Number(32707)}), Object({"L": Number(32943), "R": Number(32949)}), Object({"L": Number(32979), "R": Number(32985)}), Object({"L": Number(33015), "R": Number(33021)}), Object({"L": Number(33294), "R": Number(33300)}), Object({"L": Number(33405), "R": Number(33411)}), Object({"L": Number(33482), "R": Number(33488)}), Object({"L": Number(33563), "R": Number(33569)}), Object({"L": Number(33595), "R": Number(33601)}), Object({"L": Number(33627), "R": Number(33633)}), Object({"L": Number(33884), "R": Number(33890)}), Object({"L": Number(33991), "R": Number(33997)}), Object({"L": Number(34064), "R": Number(34070)}), Object({"L": Number(34516), "R": Number(34522)}), Object({"L": Number(34563), "R": Number(34569)})]), "storage": Number(0)}), Object({"id": Number(4515), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(4444), "R": Number(4448)}), Object({"L": Number(4541), "R": Number(4545)}), Object({"L": Number(4901), "R": Number(4905)})]), "storage": Number(0)}), Object({"id": Number(4603), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(20063), "R": Number(20074)}), Object({"L": Number(20200), "R": Number(20211)})]), "storage": Number(0)}), Object({"id": Number(3776), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(67605), "R": Number(67615)})]), "storage": Number(0)}), Object({"id": Number(4760), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(39158), "R": Number(39161)}), Object({"L": Number(39252), "R": Number(39255)}), Object({"L": Number(39267), "R": Number(39270)}), Object({"L": Number(39303), "R": Number(39306)}), Object({"L": Number(39343), "R": Number(39346)}), Object({"L": Number(39372), "R": Number(39375)}), Object({"L": Number(39385), "R": Number(39388)}), Object({"L": Number(39408), "R": Number(39411)}), Object({"L": Number(39431), "R": Number(39434)}), Object({"L": Number(39504), "R": Number(39507)}), Object({"L": Number(39596), "R": Number(39599)})]), "storage": Number(0)}), Object({"id": Number(3979), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(4518), "R": Number(4531)})]), "storage": Number(0)}), Object({"id": Number(59), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(40067), "R": Number(40073)}), Object({"L": Number(40242), "R": Number(40248)})]), "storage": Number(0)}), Object({"id": Number(971), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(1386), "R": Number(1396)}), Object({"L": Number(2245), "R": Number(2255)}), Object({"L": Number(2331), "R": Number(2341)}), Object({"L": Number(2433), "R": Number(2443)}), Object({"L": Number(3372), "R": Number(3382)}), Object({"L": Number(3844), "R": Number(3854)}), Object({"L": Number(3942), "R": Number(3952)}), Object({"L": Number(4309), "R": Number(4319)}), Object({"L": Number(6733), "R": Number(6743)}), Object({"L": Number(6837), "R": Number(6847)}), Object({"L": Number(10138), "R": Number(10148)}), Object({"L": Number(10182), "R": Number(10192)}), Object({"L": Number(15352), "R": Number(15362)}), Object({"L": Number(15632), "R": Number(15642)}), Object({"L": Number(27876), "R": Number(27886)}), Object({"L": Number(28654), "R": Number(28664)}), Object({"L": Number(29582), "R": Number(29592)}), Object({"L": Number(30040), "R": Number(30050)}), Object({"L": Number(30084), "R": Number(30094)}), Object({"L": Number(32840), "R": Number(32850)}), Object({"L": Number(34172), "R": Number(34182)}), Object({"L": Number(34216), "R": Number(34226)}), Object({"L": Number(36240), "R": Number(36250)}), Object({"L": Number(36284), "R": Number(36294)}), Object({"L": Number(39275), "R": Number(39285)}), Object({"L": Number(39318), "R": Number(39328)}), Object({"L": Number(43122), "R": Number(43132)}), Object({"L": Number(43167), "R": Number(43177)}), Object({"L": Number(44160), "R": Number(44170)}), Object({"L": Number(44280), "R": Number(44290)}), Object({"L": Number(45674), "R": Number(45684)}), Object({"L": Number(45742), "R": Number(45752)}), Object({"L": Number(49416), "R": Number(49426)}), Object({"L": Number(56624), "R": Number(56634)}), Object({"L": Number(56702), "R": Number(56712)}), Object({"L": Number(62253), "R": Number(62263)}), Object({"L": Number(65748), "R": Number(65758)}), Object({"L": Number(72777), "R": Number(72787)}), Object({"L": Number(72900), "R": Number(72910)}), Object({"L": Number(73029), "R": Number(73039)}), Object({"L": Number(73128), "R": Number(73138)})]), "storage": Number(0)}), Object({"id": Number(4483), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(18155), "R": Number(18168)}), Object({"L": Number(20759), "R": Number(20772)})]), "storage": Number(0)}), Object({"id": Number(4850), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(63887), "R": Number(63896)}), Object({"L": Number(63940), "R": Number(63949)}), Object({"L": Number(63967), "R": Number(63976)}), Object({"L": Number(64030), "R": Number(64039)})]), "storage": Number(0)}), Object({"id": Number(55), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(458), "R": Number(469)}), Object({"L": Number(783), "R": Number(794)}), Object({"L": Number(1082), "R": Number(1093)}), Object({"L": Number(1109), "R": Number(1120)}), Object({"L": Number(1643), "R": Number(1654)}), Object({"L": Number(1914), "R": Number(1925)}), Object({"L": Number(1941), "R": Number(1952)}), Object({"L": Number(2680), "R": Number(2691)}), Object({"L": Number(5304), "R": Number(5315)}), Object({"L": Number(6659), "R": Number(6670)}), Object({"L": Number(6959), "R": Number(6970)}), Object({"L": Number(8214), "R": Number(8225)}), Object({"L": Number(8899), "R": Number(8910)}), Object({"L": Number(27139), "R": Number(27150)}), Object({"L": Number(32476), "R": Number(32487)}), Object({"L": Number(36066), "R": Number(36077)}), Object({"L": Number(39144), "R": Number(39155)}), Object({"L": Number(42802), "R": Number(42813)}), Object({"L": Number(65616), "R": Number(65627)})]), "storage": Number(0)}), Object({"id": Number(4728), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(29944), "R": Number(29950)})]), "storage": Number(0)}), Object({"id": Number(4794), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(49433), "R": Number(49446)}), Object({"L": Number(56721), "R": Number(56734)})]), "storage": Number(0)}), Object({"id": Number(2449), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(1278), "R": Number(1286)}), Object({"L": Number(2158), "R": Number(2166)}), Object({"L": Number(10014), "R": Number(10022)})]), "storage": Number(0)}), Object({"id": Number(4778), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(40262), "R": Number(40265)}), Object({"L": Number(40303), "R": Number(40306)}), Object({"L": Number(40315), "R": Number(40318)}), Object({"L": Number(40327), "R": Number(40330)}), Object({"L": Number(40357), "R": Number(40360)}), Object({"L": Number(40367), "R": Number(40370)}), Object({"L": Number(40377), "R": Number(40380)}), Object({"L": Number(40431), "R": Number(40434)}), Object({"L": Number(40453), "R": Number(40456)}), Object({"L": Number(40486), "R": Number(40489)}), Object({"L": Number(40501), "R": Number(40504)}), Object({"L": Number(40521), "R": Number(40524)}), Object({"L": Number(40536), "R": Number(40539)}), Object({"L": Number(40557), "R": Number(40560)}), Object({"L": Number(40572), "R": Number(40575)}), Object({"L": Number(40592), "R": Number(40595)}), Object({"L": Number(40607), "R": Number(40610)}), Object({"L": Number(40628), "R": Number(40631)}), Object({"L": Number(40643), "R": Number(40646)}), Object({"L": Number(40663), "R": Number(40666)}), Object({"L": Number(40678), "R": Number(40681)}), Object({"L": Number(40701), "R": Number(40704)}), Object({"L": Number(40716), "R": Number(40719)}), Object({"L": Number(40736), "R": Number(40739)}), Object({"L": Number(40751), "R": Number(40754)}), Object({"L": Number(40783), "R": Number(40786)}), Object({"L": Number(40802), "R": Number(40805)}), Object({"L": Number(40821), "R": Number(40824)}), Object({"L": Number(40840), "R": Number(40843)}), Object({"L": Number(40855), "R": Number(40858)}), Object({"L": Number(41037), "R": Number(41040)}), Object({"L": Number(41056), "R": Number(41059)}), Object({"L": Number(41075), "R": Number(41078)}), Object({"L": Number(41094), "R": Number(41097)}), Object({"L": Number(41109), "R": Number(41112)})]), "storage": Number(0)}), Object({"id": Number(4678), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(34072), "R": Number(34084)}), Object({"L": Number(34571), "R": Number(34583)})]), "storage": Number(0)}), Object({"id": Number(3866), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9314), "R": Number(9336)}), Object({"L": Number(36920), "R": Number(36942)})]), "storage": Number(0)}), Object({"id": Number(2475), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(34458), "R": Number(34469)}), Object({"L": Number(36476), "R": Number(36487)}), Object({"L": Number(39446), "R": Number(39457)})]), "storage": Number(0)}), Object({"id": Number(4469), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(40276), "R": Number(40280)}), Object({"L": Number(40293), "R": Number(40297)}), Object({"L": Number(40339), "R": Number(40343)}), Object({"L": Number(40349), "R": Number(40353)})]), "storage": Number(0)}), Object({"id": Number(4765), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(434), "R": Number(438)})]), "storage": Number(0)}), Object({"id": Number(4729), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(30283), "R": Number(30293)}), Object({"L": Number(31545), "R": Number(31555)}), Object({"L": Number(54408), "R": Number(54418)}), Object({"L": Number(65993), "R": Number(66003)}), Object({"L": Number(66159), "R": Number(66169)})]), "storage": Number(0)}), Object({"id": Number(4605), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(4476), "R": Number(4479)}), Object({"L": Number(4502), "R": Number(4505)}), Object({"L": Number(4766), "R": Number(4769)})]), "storage": Number(0)}), Object({"id": Number(4808), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(46008), "R": Number(46019)})]), "storage": Number(0)}), Object({"id": Number(2688), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(11477), "R": Number(11491)}), Object({"L": Number(11589), "R": Number(11603)})]), "storage": Number(0)}), Object({"id": Number(939), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(6641), "R": Number(6657)}), Object({"L": Number(10082), "R": Number(10098)}), Object({"L": Number(29982), "R": Number(29998)}), Object({"L": Number(34289), "R": Number(34305)}), Object({"L": Number(36403), "R": Number(36419)}), Object({"L": Number(39486), "R": Number(39502)}), Object({"L": Number(43691), "R": Number(43707)})]), "storage": Number(0)}), Object({"id": Number(4769), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(40173), "R": Number(40177)}), Object({"L": Number(40602), "R": Number(40606)}), Object({"L": Number(40638), "R": Number(40642)}), Object({"L": Number(40673), "R": Number(40677)}), Object({"L": Number(40711), "R": Number(40715)}), Object({"L": Number(41104), "R": Number(41108)})]), "storage": Number(0)}), Object({"id": Number(4632), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(3278), "R": Number(3288)}), Object({"L": Number(3959), "R": Number(3969)}), Object({"L": Number(5188), "R": Number(5198)}), Object({"L": Number(10156), "R": Number(10166)}), Object({"L": Number(10200), "R": Number(10210)}), Object({"L": Number(11499), "R": Number(11509)}), Object({"L": Number(11611), "R": Number(11621)}), Object({"L": Number(12028), "R": Number(12038)}), Object({"L": Number(13320), "R": Number(13330)}), Object({"L": Number(16645), "R": Number(16655)}), Object({"L": Number(16928), "R": Number(16938)}), Object({"L": Number(17475), "R": Number(17485)}), Object({"L": Number(18645), "R": Number(18655)}), Object({"L": Number(19203), "R": Number(19213)}), Object({"L": Number(19453), "R": Number(19463)}), Object({"L": Number(20154), "R": Number(20164)}), Object({"L": Number(21235), "R": Number(21245)}), Object({"L": Number(21909), "R": Number(21919)}), Object({"L": Number(24555), "R": Number(24565)}), Object({"L": Number(27894), "R": Number(27904)}), Object({"L": Number(28323), "R": Number(28333)}), Object({"L": Number(30058), "R": Number(30068)}), Object({"L": Number(30102), "R": Number(30112)}), Object({"L": Number(33115), "R": Number(33125)}), Object({"L": Number(33380), "R": Number(33390)}), Object({"L": Number(33722), "R": Number(33732)}), Object({"L": Number(33966), "R": Number(33976)}), Object({"L": Number(34190), "R": Number(34200)}), Object({"L": Number(34234), "R": Number(34244)}), Object({"L": Number(36258), "R": Number(36268)}), Object({"L": Number(36302), "R": Number(36312)}), Object({"L": Number(43140), "R": Number(43150)}), Object({"L": Number(45726), "R": Number(45736)}), Object({"L": Number(47796), "R": Number(47806)}), Object({"L": Number(47864), "R": Number(47874)}), Object({"L": Number(47932), "R": Number(47942)}), Object({"L": Number(48580), "R": Number(48590)}), Object({"L": Number(49454), "R": Number(49464)}), Object({"L": Number(49611), "R": Number(49621)}), Object({"L": Number(49832), "R": Number(49842)}), Object({"L": Number(49895), "R": Number(49905)}), Object({"L": Number(53726), "R": Number(53736)}), Object({"L": Number(56665), "R": Number(56675)}), Object({"L": Number(62343), "R": Number(62353)}), Object({"L": Number(62527), "R": Number(62537)}), Object({"L": Number(65766), "R": Number(65776)}), Object({"L": Number(73145), "R": Number(73155)}), Object({"L": Number(73786), "R": Number(73796)})]), "storage": Number(0)}), Object({"id": Number(745), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(5908), "R": Number(5911)}), Object({"L": Number(22319), "R": Number(22322)}), Object({"L": Number(31770), "R": Number(31773)})]), "storage": Number(0)}), Object({"id": Number(4705), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(6435), "R": Number(6445)})]), "storage": Number(0)}), Object({"id": Number(4843), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(60007), "R": Number(60023)}), Object({"L": Number(60091), "R": Number(60107)}), Object({"L": Number(60130), "R": Number(60146)})]), "storage": Number(0)}), Object({"id": Number(2722), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(12004), "R": Number(12020)})]), "storage": Number(0)}), Object({"id": Number(4489), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(21784), "R": Number(21797)})]), "storage": Number(0)}), Object({"id": Number(4640), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(796), "R": Number(799)})]), "storage": Number(0)}), Object({"id": Number(4797), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(44025), "R": Number(44028)}), Object({"L": Number(44176), "R": Number(44179)}), Object({"L": Number(44296), "R": Number(44299)}), Object({"L": Number(44748), "R": Number(44751)})]), "storage": Number(0)}), Object({"id": Number(4872), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(7179), "R": Number(7187)})]), "storage": Number(0)}), Object({"id": Number(996), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(34702), "R": Number(34718)})]), "storage": Number(0)}), Object({"id": Number(2898), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(26038), "R": Number(26049)}), Object({"L": Number(35660), "R": Number(35671)})]), "storage": Number(0)}), Object({"id": Number(4485), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(12446), "R": Number(12451)}), Object({"L": Number(12504), "R": Number(12509)}), Object({"L": Number(14102), "R": Number(14107)}), Object({"L": Number(14252), "R": Number(14257)}), Object({"L": Number(14299), "R": Number(14304)}), Object({"L": Number(14484), "R": Number(14489)}), Object({"L": Number(14536), "R": Number(14541)})]), "storage": Number(0)}), Object({"id": Number(4756), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(45145), "R": Number(45146)}), Object({"L": Number(45296), "R": Number(45297)}), Object({"L": Number(45424), "R": Number(45425)}), Object({"L": Number(45552), "R": Number(45553)})]), "storage": Number(0)}), Object({"id": Number(4812), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(53628), "R": Number(53632)}), Object({"L": Number(53638), "R": Number(53642)}), Object({"L": Number(53679), "R": Number(53683)}), Object({"L": Number(53720), "R": Number(53724)}), Object({"L": Number(53738), "R": Number(53742)}), Object({"L": Number(53760), "R": Number(53764)})]), "storage": Number(0)}), Object({"id": Number(4665), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(5787), "R": Number(5790)}), Object({"L": Number(6166), "R": Number(6169)}), Object({"L": Number(6191), "R": Number(6194)})]), "storage": Number(0)}), Object({"id": Number(29), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(4465), "R": Number(4474)}), Object({"L": Number(49083), "R": Number(49092)}), Object({"L": Number(54193), "R": Number(54202)}), Object({"L": Number(57022), "R": Number(57031)}), Object({"L": Number(59301), "R": Number(59310)})]), "storage": Number(0)}), Object({"id": Number(1004), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(16450), "R": Number(16456)}), Object({"L": Number(19002), "R": Number(19008)})]), "storage": Number(0)}), Object({"id": Number(999), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(68118), "R": Number(68138)})]), "storage": Number(0)}), Object({"id": Number(4574), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(8888), "R": Number(8892)}), Object({"L": Number(8947), "R": Number(8951)}), Object({"L": Number(9049), "R": Number(9053)}), Object({"L": Number(9286), "R": Number(9290)}), Object({"L": Number(9806), "R": Number(9810)}), Object({"L": Number(10105), "R": Number(10109)}), Object({"L": Number(10150), "R": Number(10154)}), Object({"L": Number(10194), "R": Number(10198)}), Object({"L": Number(10387), "R": Number(10391)}), Object({"L": Number(10436), "R": Number(10440)}), Object({"L": Number(10454), "R": Number(10458)}), Object({"L": Number(10498), "R": Number(10502)}), Object({"L": Number(10776), "R": Number(10780)}), Object({"L": Number(10948), "R": Number(10952)}), Object({"L": Number(10993), "R": Number(10997)}), Object({"L": Number(11018), "R": Number(11022)}), Object({"L": Number(11055), "R": Number(11059)}), Object({"L": Number(11141), "R": Number(11145)}), Object({"L": Number(11168), "R": Number(11172)}), Object({"L": Number(11224), "R": Number(11228)}), Object({"L": Number(11493), "R": Number(11497)}), Object({"L": Number(11605), "R": Number(11609)}), Object({"L": Number(11736), "R": Number(11740)}), Object({"L": Number(11791), "R": Number(11795)}), Object({"L": Number(12022), "R": Number(12026)}), Object({"L": Number(12106), "R": Number(12110)}), Object({"L": Number(12131), "R": Number(12135)}), Object({"L": Number(12168), "R": Number(12172)}), Object({"L": Number(12230), "R": Number(12234)}), Object({"L": Number(12272), "R": Number(12276)}), Object({"L": Number(12390), "R": Number(12394)}), Object({"L": Number(12757), "R": Number(12761)}), Object({"L": Number(12776), "R": Number(12780)}), Object({"L": Number(13042), "R": Number(13046)}), Object({"L": Number(13148), "R": Number(13152)}), Object({"L": Number(13249), "R": Number(13253)}), Object({"L": Number(13296), "R": Number(13300)}), Object({"L": Number(13314), "R": Number(13318)}), Object({"L": Number(13361), "R": Number(13365)}), Object({"L": Number(13589), "R": Number(13593)}), Object({"L": Number(14684), "R": Number(14688)}), Object({"L": Number(14757), "R": Number(14761)}), Object({"L": Number(14776), "R": Number(14780)}), Object({"L": Number(14802), "R": Number(14806)}), Object({"L": Number(14962), "R": Number(14966)}), Object({"L": Number(14981), "R": Number(14985)}), Object({"L": Number(15007), "R": Number(15011)}), Object({"L": Number(15364), "R": Number(15368)}), Object({"L": Number(15391), "R": Number(15395)}), Object({"L": Number(15570), "R": Number(15574)}), Object({"L": Number(15644), "R": Number(15648)}), Object({"L": Number(15750), "R": Number(15754)}), Object({"L": Number(15832), "R": Number(15836)}), Object({"L": Number(15876), "R": Number(15880)}), Object({"L": Number(15950), "R": Number(15954)}), Object({"L": Number(15999), "R": Number(16003)}), Object({"L": Number(16048), "R": Number(16052)}), Object({"L": Number(16111), "R": Number(16115)}), Object({"L": Number(16125), "R": Number(16129)}), Object({"L": Number(16146), "R": Number(16150)}), Object({"L": Number(16260), "R": Number(16264)}), Object({"L": Number(16305), "R": Number(16309)}), Object({"L": Number(16367), "R": Number(16371)}), Object({"L": Number(16411), "R": Number(16415)}), Object({"L": Number(16509), "R": Number(16513)}), Object({"L": Number(16560), "R": Number(16564)}), Object({"L": Number(16611), "R": Number(16615)}), Object({"L": Number(16639), "R": Number(16643)}), Object({"L": Number(16657), "R": Number(16661)}), Object({"L": Number(16699), "R": Number(16703)}), Object({"L": Number(16809), "R": Number(16813)}), Object({"L": Number(16860), "R": Number(16864)}), Object({"L": Number(16886), "R": Number(16890)}), Object({"L": Number(16922), "R": Number(16926)}), Object({"L": Number(16940), "R": Number(16944)}), Object({"L": Number(17035), "R": Number(17039)}), Object({"L": Number(17075), "R": Number(17079)}), Object({"L": Number(17131), "R": Number(17135)}), Object({"L": Number(17264), "R": Number(17268)}), Object({"L": Number(17338), "R": Number(17342)}), Object({"L": Number(17434), "R": Number(17438)}), Object({"L": Number(17469), "R": Number(17473)}), Object({"L": Number(17538), "R": Number(17542)}), Object({"L": Number(17658), "R": Number(17662)}), Object({"L": Number(17737), "R": Number(17741)}), Object({"L": Number(17835), "R": Number(17839)}), Object({"L": Number(17910), "R": Number(17914)}), Object({"L": Number(18109), "R": Number(18113)}), Object({"L": Number(18612), "R": Number(18616)}), Object({"L": Number(18639), "R": Number(18643)}), Object({"L": Number(18919), "R": Number(18923)}), Object({"L": Number(18963), "R": Number(18967)}), Object({"L": Number(19092), "R": Number(19096)}), Object({"L": Number(19143), "R": Number(19147)}), Object({"L": Number(19197), "R": Number(19201)}), Object({"L": Number(19215), "R": Number(19219)}), Object({"L": Number(19257), "R": Number(19261)}), Object({"L": Number(19367), "R": Number(19371)}), Object({"L": Number(19418), "R": Number(19422)}), Object({"L": Number(19447), "R": Number(19451)}), Object({"L": Number(19473), "R": Number(19477)}), Object({"L": Number(19515), "R": Number(19519)}), Object({"L": Number(19681), "R": Number(19685)}), Object({"L": Number(19695), "R": Number(19699)}), Object({"L": Number(19766), "R": Number(19770)}), Object({"L": Number(19795), "R": Number(19799)}), Object({"L": Number(19893), "R": Number(19897)}), Object({"L": Number(19966), "R": Number(19970)}), Object({"L": Number(20113), "R": Number(20117)}), Object({"L": Number(20148), "R": Number(20152)}), Object({"L": Number(20273), "R": Number(20277)}), Object({"L": Number(20351), "R": Number(20355)}), Object({"L": Number(20447), "R": Number(20451)}), Object({"L": Number(20520), "R": Number(20524)}), Object({"L": Number(20713), "R": Number(20717)}), Object({"L": Number(21202), "R": Number(21206)}), Object({"L": Number(21229), "R": Number(21233)}), Object({"L": Number(21525), "R": Number(21529)}), Object({"L": Number(21612), "R": Number(21616)}), Object({"L": Number(21758), "R": Number(21762)}), Object({"L": Number(21772), "R": Number(21776)}), Object({"L": Number(21903), "R": Number(21907)}), Object({"L": Number(21960), "R": Number(21964)}), Object({"L": Number(21981), "R": Number(21985)}), Object({"L": Number(22011), "R": Number(22015)}), Object({"L": Number(22057), "R": Number(22061)}), Object({"L": Number(22171), "R": Number(22175)}), Object({"L": Number(22548), "R": Number(22552)}), Object({"L": Number(23150), "R": Number(23154)}), Object({"L": Number(23171), "R": Number(23175)}), Object({"L": Number(23224), "R": Number(23228)}), Object({"L": Number(23245), "R": Number(23249)}), Object({"L": Number(23298), "R": Number(23302)}), Object({"L": Number(23319), "R": Number(23323)}), Object({"L": Number(23602), "R": Number(23606)}), Object({"L": Number(23623), "R": Number(23627)}), Object({"L": Number(23677), "R": Number(23681)}), Object({"L": Number(23698), "R": Number(23702)}), Object({"L": Number(23752), "R": Number(23756)}), Object({"L": Number(23773), "R": Number(23777)}), Object({"L": Number(23967), "R": Number(23971)}), Object({"L": Number(24376), "R": Number(24380)}), Object({"L": Number(24549), "R": Number(24553)}), Object({"L": Number(24567), "R": Number(24571)}), Object({"L": Number(24799), "R": Number(24803)}), Object({"L": Number(25095), "R": Number(25099)}), Object({"L": Number(25124), "R": Number(25128)}), Object({"L": Number(25212), "R": Number(25216)}), Object({"L": Number(25280), "R": Number(25284)}), Object({"L": Number(25877), "R": Number(25881)}), Object({"L": Number(25930), "R": Number(25934)}), Object({"L": Number(26090), "R": Number(26094)}), Object({"L": Number(26102), "R": Number(26106)}), Object({"L": Number(26163), "R": Number(26167)}), Object({"L": Number(26175), "R": Number(26179)}), Object({"L": Number(26392), "R": Number(26396)})]), "storage": Number(0)}), Object({"id": Number(4826), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(57396), "R": Number(57411)})]), "storage": Number(1)}), Object({"id": Number(4830), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(58108), "R": Number(58115)}), Object({"L": Number(58279), "R": Number(58286)})]), "storage": Number(0)}), Object({"id": Number(4594), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(3245), "R": Number(3255)}), Object({"L": Number(9034), "R": Number(9044)}), Object({"L": Number(10262), "R": Number(10272)}), Object({"L": Number(27288), "R": Number(27298)}), Object({"L": Number(27367), "R": Number(27377)}), Object({"L": Number(27453), "R": Number(27463)}), Object({"L": Number(27762), "R": Number(27772)}), Object({"L": Number(27973), "R": Number(27983)}), Object({"L": Number(29932), "R": Number(29942)}), Object({"L": Number(36696), "R": Number(36706)}), Object({"L": Number(36753), "R": Number(36763)})]), "storage": Number(0)}), Object({"id": Number(4596), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(1095), "R": Number(1101)}), Object({"L": Number(1414), "R": Number(1420)}), Object({"L": Number(1477), "R": Number(1483)}), Object({"L": Number(1528), "R": Number(1534)}), Object({"L": Number(1672), "R": Number(1678)}), Object({"L": Number(1689), "R": Number(1695)})]), "storage": Number(0)}), Object({"id": Number(1927), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(60674), "R": Number(60683)})]), "storage": Number(0)}), Object({"id": Number(982), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(43210), "R": Number(43219)})]), "storage": Number(0)}), Object({"id": Number(4702), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(5438), "R": Number(5443)}), Object({"L": Number(5459), "R": Number(5464)}), Object({"L": Number(5491), "R": Number(5496)}), Object({"L": Number(5522), "R": Number(5527)}), Object({"L": Number(5572), "R": Number(5577)}), Object({"L": Number(6319), "R": Number(6324)}), Object({"L": Number(6409), "R": Number(6414)}), Object({"L": Number(11041), "R": Number(11046)}), Object({"L": Number(12154), "R": Number(12159)}), Object({"L": Number(12253), "R": Number(12258)}), Object({"L": Number(16137), "R": Number(16142)}), Object({"L": Number(16158), "R": Number(16163)}), Object({"L": Number(16379), "R": Number(16384)}), Object({"L": Number(16423), "R": Number(16428)}), Object({"L": Number(16521), "R": Number(16526)}), Object({"L": Number(16711), "R": Number(16716)}), Object({"L": Number(16821), "R": Number(16826)}), Object({"L": Number(17047), "R": Number(17052)}), Object({"L": Number(17276), "R": Number(17281)}), Object({"L": Number(17350), "R": Number(17355)}), Object({"L": Number(17670), "R": Number(17675)}), Object({"L": Number(17749), "R": Number(17754)}), Object({"L": Number(17847), "R": Number(17852)}), Object({"L": Number(17922), "R": Number(17927)}), Object({"L": Number(18121), "R": Number(18126)}), Object({"L": Number(18931), "R": Number(18936)}), Object({"L": Number(18975), "R": Number(18980)}), Object({"L": Number(19104), "R": Number(19109)}), Object({"L": Number(19269), "R": Number(19274)}), Object({"L": Number(19379), "R": Number(19384)}), Object({"L": Number(19527), "R": Number(19532)}), Object({"L": Number(19707), "R": Number(19712)}), Object({"L": Number(19778), "R": Number(19783)}), Object({"L": Number(19905), "R": Number(19910)}), Object({"L": Number(19978), "R": Number(19983)}), Object({"L": Number(20285), "R": Number(20290)}), Object({"L": Number(20363), "R": Number(20368)}), Object({"L": Number(20459), "R": Number(20464)}), Object({"L": Number(20532), "R": Number(20537)}), Object({"L": Number(20725), "R": Number(20730)}), Object({"L": Number(21537), "R": Number(21542)}), Object({"L": Number(21624), "R": Number(21629)}), Object({"L": Number(56485), "R": Number(56490)}), Object({"L": Number(56520), "R": Number(56525)}), Object({"L": Number(56973), "R": Number(56978)}), Object({"L": Number(56994), "R": Number(56999)}), Object({"L": Number(57053), "R": Number(57058)})]), "storage": Number(0)}), Object({"id": Number(976), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(36035), "R": Number(36043)}), Object({"L": Number(67666), "R": Number(67674)})]), "storage": Number(0)}), Object({"id": Number(4744), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(33571), "R": Number(33587)}), Object({"L": Number(33603), "R": Number(33619)})]), "storage": Number(0)}), Object({"id": Number(4749), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(34728), "R": Number(34735)})]), "storage": Number(0)}), Object({"id": Number(4569), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(54103), "R": Number(54113)}), Object({"L": Number(54238), "R": Number(54248)}), Object({"L": Number(54282), "R": Number(54292)}), Object({"L": Number(54628), "R": Number(54638)}), Object({"L": Number(54700), "R": Number(54710)}), Object({"L": Number(54959), "R": Number(54969)}), Object({"L": Number(55183), "R": Number(55193)}), Object({"L": Number(55747), "R": Number(55757)}), Object({"L": Number(55954), "R": Number(55964)}), Object({"L": Number(56160), "R": Number(56170)}), Object({"L": Number(56406), "R": Number(56416)})]), "storage": Number(0)}), Object({"id": Number(4531), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(53650), "R": Number(53657)}), Object({"L": Number(53772), "R": Number(53779)})]), "storage": Number(0)}), Object({"id": Number(4608), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(46195), "R": Number(46196)}), Object({"L": Number(46410), "R": Number(46411)}), Object({"L": Number(46738), "R": Number(46739)}), Object({"L": Number(46800), "R": Number(46801)}), Object({"L": Number(46862), "R": Number(46863)}), Object({"L": Number(47825), "R": Number(47826)}), Object({"L": Number(47893), "R": Number(47894)}), Object({"L": Number(47961), "R": Number(47962)})]), "storage": Number(0)}), Object({"id": Number(938), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8865), "R": Number(8875)}), Object({"L": Number(67480), "R": Number(67490)}), Object({"L": Number(67944), "R": Number(67954)})]), "storage": Number(0)}), Object({"id": Number(4842), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(59557), "R": Number(59562)}), Object({"L": Number(59655), "R": Number(59660)})]), "storage": Number(0)}), Object({"id": Number(2487), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10622), "R": Number(10637)})]), "storage": Number(0)}), Object({"id": Number(474), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(65514), "R": Number(65531)})]), "storage": Number(0)}), Object({"id": Number(4460), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(24579), "R": Number(24585)}), Object({"L": Number(54825), "R": Number(54831)}), Object({"L": Number(65906), "R": Number(65912)})]), "storage": Number(0)}), Object({"id": Number(4501), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(13160), "R": Number(13169)})]), "storage": Number(0)}), Object({"id": Number(4807), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(45780), "R": Number(45790)})]), "storage": Number(0)}), Object({"id": Number(4586), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(41302), "R": Number(41306)}), Object({"L": Number(41645), "R": Number(41649)}), Object({"L": Number(41678), "R": Number(41682)}), Object({"L": Number(41712), "R": Number(41716)}), Object({"L": Number(41881), "R": Number(41885)}), Object({"L": Number(41977), "R": Number(41981)})]), "storage": Number(0)}), Object({"id": Number(2623), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(6250), "R": Number(6255)}), Object({"L": Number(6501), "R": Number(6506)}), Object({"L": Number(11471), "R": Number(11476)}), Object({"L": Number(11583), "R": Number(11588)}), Object({"L": Number(11998), "R": Number(12003)}), Object({"L": Number(32106), "R": Number(32111)}), Object({"L": Number(40985), "R": Number(40990)}), Object({"L": Number(41239), "R": Number(41244)})]), "storage": Number(0)}), Object({"id": Number(4825), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(57288), "R": Number(57299)})]), "storage": Number(0)}), Object({"id": Number(4504), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(41427), "R": Number(41431)}), Object({"L": Number(41444), "R": Number(41448)}), Object({"L": Number(41490), "R": Number(41494)}), Object({"L": Number(41500), "R": Number(41504)})]), "storage": Number(0)}), Object({"id": Number(2899), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(26070), "R": Number(26082)}), Object({"L": Number(35692), "R": Number(35704)})]), "storage": Number(0)}), Object({"id": Number(4578), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(55309), "R": Number(55327)})]), "storage": Number(0)}), Object({"id": Number(948), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5253), "R": Number(5284)}), Object({"L": Number(21927), "R": Number(21958)}), Object({"L": Number(37259), "R": Number(37290)}), Object({"L": Number(38748), "R": Number(38779)})]), "storage": Number(0)}), Object({"id": Number(3766), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9730), "R": Number(9742)}), Object({"L": Number(38249), "R": Number(38261)})]), "storage": Number(0)}), Object({"id": Number(4762), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(68190), "R": Number(68194)}), Object({"L": Number(68298), "R": Number(68302)}), Object({"L": Number(68362), "R": Number(68366)}), Object({"L": Number(68418), "R": Number(68422)}), Object({"L": Number(69904), "R": Number(69908)}), Object({"L": Number(69978), "R": Number(69982)}), Object({"L": Number(70034), "R": Number(70038)}), Object({"L": Number(70067), "R": Number(70071)}), Object({"L": Number(70109), "R": Number(70113)})]), "storage": Number(0)}), Object({"id": Number(983), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(11452), "R": Number(11465)}), Object({"L": Number(11564), "R": Number(11577)}), Object({"L": Number(11979), "R": Number(11992)})]), "storage": Number(0)}), Object({"id": Number(4732), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(54178), "R": Number(54189)}), Object({"L": Number(55645), "R": Number(55656)}), Object({"L": Number(55852), "R": Number(55863)}), Object({"L": Number(56065), "R": Number(56076)}), Object({"L": Number(56116), "R": Number(56127)}), Object({"L": Number(56283), "R": Number(56294)}), Object({"L": Number(56334), "R": Number(56345)}), Object({"L": Number(56777), "R": Number(56788)}), Object({"L": Number(56796), "R": Number(56807)}), Object({"L": Number(56812), "R": Number(56823)}), Object({"L": Number(56828), "R": Number(56839)})]), "storage": Number(0)}), Object({"id": Number(993), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(18003), "R": Number(18022)}), Object({"L": Number(18228), "R": Number(18247)}), Object({"L": Number(18351), "R": Number(18370)}), Object({"L": Number(18490), "R": Number(18509)}), Object({"L": Number(20611), "R": Number(20630)}), Object({"L": Number(20829), "R": Number(20848)}), Object({"L": Number(20949), "R": Number(20968)}), Object({"L": Number(21084), "R": Number(21103)}), Object({"L": Number(73730), "R": Number(73749)})]), "storage": Number(0)}), Object({"id": Number(968), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(3524), "R": Number(3531)}), Object({"L": Number(9068), "R": Number(9075)}), Object({"L": Number(27487), "R": Number(27494)}), Object({"L": Number(29656), "R": Number(29663)}), Object({"L": Number(67117), "R": Number(67124)})]), "storage": Number(0)}), Object({"id": Number(4477), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(23278), "R": Number(23287)}), Object({"L": Number(23732), "R": Number(23741)})]), "storage": Number(0)}), Object({"id": Number(3842), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(4622), "R": Number(4630)}), Object({"L": Number(44265), "R": Number(44273)}), Object({"L": Number(66977), "R": Number(66985)}), Object({"L": Number(67654), "R": Number(67662)})]), "storage": Number(0)}), Object({"id": Number(4548), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(53704), "R": Number(53710)})]), "storage": Number(0)}), Object({"id": Number(944), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(5159), "R": Number(5180)}), Object({"L": Number(24673), "R": Number(24694)}), Object({"L": Number(32225), "R": Number(32246)}), Object({"L": Number(33087), "R": Number(33108)}), Object({"L": Number(33694), "R": Number(33715)}), Object({"L": Number(56750), "R": Number(56771)})]), "storage": Number(0)}), Object({"id": Number(2924), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(32660), "R": Number(32674)})]), "storage": Number(0)}), Object({"id": Number(165), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(12431), "R": Number(12443)}), Object({"L": Number(32552), "R": Number(32564)})]), "storage": Number(0)}), Object({"id": Number(4860), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(70340), "R": Number(70348)}), Object({"L": Number(72178), "R": Number(72186)}), Object({"L": Number(72237), "R": Number(72245)}), Object({"L": Number(73636), "R": Number(73644)}), Object({"L": Number(73719), "R": Number(73727)}), Object({"L": Number(73836), "R": Number(73844)})]), "storage": Number(0)}), Object({"id": Number(4695), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(69492), "R": Number(69504)})]), "storage": Number(0)}), Object({"id": Number(4873), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(61146), "R": Number(61172)}), Object({"L": Number(64985), "R": Number(65011)})]), "storage": Number(0)}), Object({"id": Number(4468), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(58599), "R": Number(58604)}), Object({"L": Number(58643), "R": Number(58648)})]), "storage": Number(0)}), Object({"id": Number(2419), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(6872), "R": Number(6878)})]), "storage": Number(0)}), Object({"id": Number(4681), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(25268), "R": Number(25269)}), Object({"L": Number(25382), "R": Number(25383)}), Object({"L": Number(25395), "R": Number(25396)}), Object({"L": Number(25419), "R": Number(25420)}), Object({"L": Number(25513), "R": Number(25514)})]), "storage": Number(0)}), Object({"id": Number(919), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(66464), "R": Number(66477)}), Object({"L": Number(68403), "R": Number(68416)}), Object({"L": Number(69963), "R": Number(69976)}), Object({"L": Number(70094), "R": Number(70107)})]), "storage": Number(0)}), Object({"id": Number(978), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(1467), "R": Number(1475)}), Object({"L": Number(2512), "R": Number(2520)}), Object({"L": Number(6125), "R": Number(6133)}), Object({"L": Number(22707), "R": Number(22715)}), Object({"L": Number(24126), "R": Number(24134)}), Object({"L": Number(24539), "R": Number(24547)}), Object({"L": Number(31967), "R": Number(31975)})]), "storage": Number(0)}), Object({"id": Number(4539), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(868), "R": Number(872)})]), "storage": Number(0)}), Object({"id": Number(3627), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(66592), "R": Number(66601)})]), "storage": Number(0)}), Object({"id": Number(4551), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(20252), "R": Number(20261)}), Object({"L": Number(20416), "R": Number(20425)}), Object({"L": Number(20599), "R": Number(20608)}), Object({"L": Number(20817), "R": Number(20826)}), Object({"L": Number(20937), "R": Number(20946)}), Object({"L": Number(21072), "R": Number(21081)}), Object({"L": Number(21267), "R": Number(21276)})]), "storage": Number(0)}), Object({"id": Number(3654), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(30356), "R": Number(30365)}), Object({"L": Number(31469), "R": Number(31478)})]), "storage": Number(0)}), Object({"id": Number(1001), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(72204), "R": Number(72218)})]), "storage": Number(0)}), Object({"id": Number(4724), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(40282), "R": Number(40283)}), Object({"L": Number(40399), "R": Number(40400)}), Object({"L": Number(40406), "R": Number(40407)}), Object({"L": Number(40413), "R": Number(40414)}), Object({"L": Number(40435), "R": Number(40436)}), Object({"L": Number(40457), "R": Number(40458)})]), "storage": Number(0)}), Object({"id": Number(981), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(10405), "R": Number(10422)})]), "storage": Number(0)}), Object({"id": Number(4558), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(2081), "R": Number(2089)}), Object({"L": Number(2639), "R": Number(2647)}), Object({"L": Number(2668), "R": Number(2676)})]), "storage": Number(0)}), Object({"id": Number(4498), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24354), "R": Number(24357)}), Object({"L": Number(24394), "R": Number(24397)}), Object({"L": Number(24591), "R": Number(24594)})]), "storage": Number(0)}), Object({"id": Number(2628), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(7536), "R": Number(7546)}), Object({"L": Number(10247), "R": Number(10257)}), Object({"L": Number(13349), "R": Number(13359)}), Object({"L": Number(29877), "R": Number(29887)}), Object({"L": Number(36738), "R": Number(36748)}), Object({"L": Number(37830), "R": Number(37840)}), Object({"L": Number(67187), "R": Number(67197)})]), "storage": Number(0)}), Object({"id": Number(1002), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(28703), "R": Number(28711)})]), "storage": Number(0)}), Object({"id": Number(933), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(41279), "R": Number(41293)})]), "storage": Number(0)}), Object({"id": Number(4571), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(626), "R": Number(636)})]), "storage": Number(0)}), Object({"id": Number(932), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(41994), "R": Number(42005)}), Object({"L": Number(42043), "R": Number(42054)}), Object({"L": Number(42092), "R": Number(42103)}), Object({"L": Number(42141), "R": Number(42152)}), Object({"L": Number(42287), "R": Number(42298)}), Object({"L": Number(42336), "R": Number(42347)}), Object({"L": Number(42385), "R": Number(42396)}), Object({"L": Number(42434), "R": Number(42445)})]), "storage": Number(0)}), Object({"id": Number(4577), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(1927), "R": Number(1933)}), Object({"L": Number(2461), "R": Number(2467)}), Object({"L": Number(2522), "R": Number(2528)}), Object({"L": Number(2573), "R": Number(2579)}), Object({"L": Number(2612), "R": Number(2618)}), Object({"L": Number(2709), "R": Number(2715)})]), "storage": Number(0)}), Object({"id": Number(4817), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(54046), "R": Number(54052)}), Object({"L": Number(54118), "R": Number(54124)}), Object({"L": Number(54449), "R": Number(54455)}), Object({"L": Number(54784), "R": Number(54790)})]), "storage": Number(0)}), Object({"id": Number(4727), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(57428), "R": Number(57450)}), Object({"L": Number(59009), "R": Number(59031)})]), "storage": Number(1)}), Object({"id": Number(4743), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(33302), "R": Number(33318)}), Object({"L": Number(33413), "R": Number(33429)})]), "storage": Number(0)}), Object({"id": Number(4480), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(13035), "R": Number(13039)}), Object({"L": Number(13119), "R": Number(13123)}), Object({"L": Number(13141), "R": Number(13145)}), Object({"L": Number(13185), "R": Number(13189)}), Object({"L": Number(13207), "R": Number(13211)}), Object({"L": Number(13272), "R": Number(13276)})]), "storage": Number(0)}), Object({"id": Number(4752), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(22667), "R": Number(22673)}), Object({"L": Number(22880), "R": Number(22886)}), Object({"L": Number(23862), "R": Number(23868)})]), "storage": Number(0)}), Object({"id": Number(4570), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(645), "R": Number(651)})]), "storage": Number(0)}), Object({"id": Number(2625), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(3204), "R": Number(3224)})]), "storage": Number(0)}), Object({"id": Number(4816), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(54010), "R": Number(54014)}), Object({"L": Number(54023), "R": Number(54027)}), Object({"L": Number(54065), "R": Number(54069)}), Object({"L": Number(54133), "R": Number(54137)}), Object({"L": Number(54312), "R": Number(54316)}), Object({"L": Number(54396), "R": Number(54400)}), Object({"L": Number(54458), "R": Number(54462)}), Object({"L": Number(54478), "R": Number(54482)}), Object({"L": Number(54542), "R": Number(54546)}), Object({"L": Number(54588), "R": Number(54592)}), Object({"L": Number(54793), "R": Number(54797)}), Object({"L": Number(54813), "R": Number(54817)}), Object({"L": Number(54875), "R": Number(54879)}), Object({"L": Number(54920), "R": Number(54924)}), Object({"L": Number(55101), "R": Number(55105)}), Object({"L": Number(55145), "R": Number(55149)}), Object({"L": Number(55297), "R": Number(55301)}), Object({"L": Number(55342), "R": Number(55346)}), Object({"L": Number(55389), "R": Number(55393)}), Object({"L": Number(55427), "R": Number(55431)}), Object({"L": Number(55534), "R": Number(55538)}), Object({"L": Number(55662), "R": Number(55666)}), Object({"L": Number(55692), "R": Number(55696)}), Object({"L": Number(55719), "R": Number(55723)}), Object({"L": Number(55869), "R": Number(55873)}), Object({"L": Number(55899), "R": Number(55903)}), Object({"L": Number(55926), "R": Number(55930)}), Object({"L": Number(56082), "R": Number(56086)}), Object({"L": Number(56133), "R": Number(56137)}), Object({"L": Number(56300), "R": Number(56304)}), Object({"L": Number(56351), "R": Number(56355)}), Object({"L": Number(56379), "R": Number(56383)}), Object({"L": Number(56473), "R": Number(56477)}), Object({"L": Number(56508), "R": Number(56512)}), Object({"L": Number(56553), "R": Number(56557)})]), "storage": Number(0)}), Object({"id": Number(4580), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(61364), "R": Number(61380)}), Object({"L": Number(63244), "R": Number(63260)}), Object({"L": Number(65028), "R": Number(65044)}), Object({"L": Number(65141), "R": Number(65157)}), Object({"L": Number(65282), "R": Number(65298)}), Object({"L": Number(65399), "R": Number(65415)})]), "storage": Number(0)}), Object({"id": Number(4804), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(45152), "R": Number(45170)}), Object({"L": Number(46417), "R": Number(46435)}), Object({"L": Number(68608), "R": Number(68626)}), Object({"L": Number(68655), "R": Number(68673)}), Object({"L": Number(68887), "R": Number(68905)})]), "storage": Number(0)}), Object({"id": Number(2512), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(27863), "R": Number(27872)})]), "storage": Number(0)}), Object({"id": Number(970), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(551), "R": Number(571)}), Object({"L": Number(16774), "R": Number(16794)}), Object({"L": Number(19332), "R": Number(19352)})]), "storage": Number(0)}), Object({"id": Number(4606), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(42508), "R": Number(42513)})]), "storage": Number(0)}), Object({"id": Number(4803), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(45069), "R": Number(45078)}), Object({"L": Number(45267), "R": Number(45276)}), Object({"L": Number(45395), "R": Number(45404)}), Object({"L": Number(45523), "R": Number(45532)}), Object({"L": Number(46503), "R": Number(46512)}), Object({"L": Number(46630), "R": Number(46639)}), Object({"L": Number(47462), "R": Number(47471)}), Object({"L": Number(47737), "R": Number(47746)})]), "storage": Number(0)}), Object({"id": Number(4791), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(42792), "R": Number(42796)}), Object({"L": Number(42850), "R": Number(42854)}), Object({"L": Number(43134), "R": Number(43138)}), Object({"L": Number(43714), "R": Number(43718)})]), "storage": Number(0)}), Object({"id": Number(2452), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(5800), "R": Number(5812)}), Object({"L": Number(11278), "R": Number(11290)}), Object({"L": Number(11847), "R": Number(11859)}), Object({"L": Number(22231), "R": Number(22243)}), Object({"L": Number(25626), "R": Number(25638)}), Object({"L": Number(27945), "R": Number(27957)}), Object({"L": Number(31663), "R": Number(31675)}), Object({"L": Number(66222), "R": Number(66234)}), Object({"L": Number(66298), "R": Number(66310)})]), "storage": Number(0)}), Object({"id": Number(949), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(27322), "R": Number(27330)}), Object({"L": Number(46353), "R": Number(46361)}), Object({"L": Number(67291), "R": Number(67299)})]), "storage": Number(0)}), Object({"id": Number(4775), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(40228), "R": Number(40231)}), Object({"L": Number(40952), "R": Number(40955)}), Object({"L": Number(41206), "R": Number(41209)})]), "storage": Number(0)}), Object({"id": Number(702), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(69597), "R": Number(69621)})]), "storage": Number(0)}), Object({"id": Number(2859), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(40991), "R": Number(41007)}), Object({"L": Number(41245), "R": Number(41261)})]), "storage": Number(0)}), Object({"id": Number(4584), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(70308), "R": Number(70317)}), Object({"L": Number(70600), "R": Number(70609)}), Object({"L": Number(70698), "R": Number(70707)}), Object({"L": Number(70714), "R": Number(70723)}), Object({"L": Number(70750), "R": Number(70759)}), Object({"L": Number(70798), "R": Number(70807)}), Object({"L": Number(70922), "R": Number(70931)}), Object({"L": Number(70938), "R": Number(70947)}), Object({"L": Number(70978), "R": Number(70987)}), Object({"L": Number(71062), "R": Number(71071)}), Object({"L": Number(71154), "R": Number(71163)}), Object({"L": Number(71188), "R": Number(71197)})]), "storage": Number(0)}), Object({"id": Number(2321), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(10586), "R": Number(10588)}), Object({"L": Number(25808), "R": Number(25810)}), Object({"L": Number(25861), "R": Number(25863)}), Object({"L": Number(31270), "R": Number(31272)}), Object({"L": Number(31323), "R": Number(31325)}), Object({"L": Number(35430), "R": Number(35432)}), Object({"L": Number(35483), "R": Number(35485)}), Object({"L": Number(38811), "R": Number(38813)}), Object({"L": Number(38864), "R": Number(38866)}), Object({"L": Number(45605), "R": Number(45607)})]), "storage": Number(0)}), Object({"id": Number(4672), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(4586), "R": Number(4589)}), Object({"L": Number(4896), "R": Number(4899)})]), "storage": Number(0)}), Object({"id": Number(3764), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(11089), "R": Number(11108)}), Object({"L": Number(12202), "R": Number(12221)})]), "storage": Number(0)}), Object({"id": Number(4470), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(15383), "R": Number(15389)}), Object({"L": Number(39295), "R": Number(39301)})]), "storage": Number(0)}), Object({"id": Number(965), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(43252), "R": Number(43271)})]), "storage": Number(0)}), Object({"id": Number(4635), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(2063), "R": Number(2069)}), Object({"L": Number(2129), "R": Number(2135)}), Object({"L": Number(2257), "R": Number(2263)}), Object({"L": Number(2343), "R": Number(2349)}), Object({"L": Number(2538), "R": Number(2544)}), Object({"L": Number(2626), "R": Number(2632)})]), "storage": Number(0)}), Object({"id": Number(4864), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(70480), "R": Number(70481)}), Object({"L": Number(71603), "R": Number(71604)}), Object({"L": Number(71648), "R": Number(71649)}), Object({"L": Number(71923), "R": Number(71924)}), Object({"L": Number(72482), "R": Number(72483)}), Object({"L": Number(72535), "R": Number(72536)}), Object({"L": Number(72708), "R": Number(72709)})]), "storage": Number(0)}), Object({"id": Number(2627), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(67203), "R": Number(67208)})]), "storage": Number(0)}), Object({"id": Number(4524), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(44045), "R": Number(44049)}), Object({"L": Number(44198), "R": Number(44202)}), Object({"L": Number(44237), "R": Number(44241)}), Object({"L": Number(44339), "R": Number(44343)}), Object({"L": Number(44503), "R": Number(44507)})]), "storage": Number(0)}), Object({"id": Number(2288), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(68269), "R": Number(68280)}), Object({"L": Number(69878), "R": Number(69889)})]), "storage": Number(0)}), Object({"id": Number(4856), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(31638), "R": Number(31640)}), Object({"L": Number(31765), "R": Number(31767)}), Object({"L": Number(31852), "R": Number(31854)}), Object({"L": Number(32062), "R": Number(32064)}), Object({"L": Number(32073), "R": Number(32075)}), Object({"L": Number(32260), "R": Number(32262)})]), "storage": Number(0)}), Object({"id": Number(956), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(4803), "R": Number(4824)}), Object({"L": Number(17411), "R": Number(17432)}), Object({"L": Number(18589), "R": Number(18610)}), Object({"L": Number(20090), "R": Number(20111)}), Object({"L": Number(21179), "R": Number(21200)}), Object({"L": Number(33324), "R": Number(33345)}), Object({"L": Number(33910), "R": Number(33931)})]), "storage": Number(0)}), Object({"id": Number(4841), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(60115), "R": Number(60125)}), Object({"L": Number(60225), "R": Number(60235)}), Object({"L": Number(60452), "R": Number(60462)}), Object({"L": Number(60706), "R": Number(60716)}), Object({"L": Number(60743), "R": Number(60753)}), Object({"L": Number(60951), "R": Number(60961)}), Object({"L": Number(60983), "R": Number(60993)})]), "storage": Number(0)}), Object({"id": Number(2877), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(33166), "R": Number(33188)}), Object({"L": Number(33200), "R": Number(33222)}), Object({"L": Number(33234), "R": Number(33256)})]), "storage": Number(0)}), Object({"id": Number(4463), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(22989), "R": Number(22993)}), Object({"L": Number(23055), "R": Number(23059)}), Object({"L": Number(23124), "R": Number(23128)}), Object({"L": Number(23198), "R": Number(23202)}), Object({"L": Number(23272), "R": Number(23276)})]), "storage": Number(0)}), Object({"id": Number(4506), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(17377), "R": Number(17381)}), Object({"L": Number(17949), "R": Number(17953)}), Object({"L": Number(20005), "R": Number(20009)}), Object({"L": Number(20559), "R": Number(20563)})]), "storage": Number(0)}), Object({"id": Number(4554), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(13916), "R": Number(13926)})]), "storage": Number(0)}), Object({"id": Number(2427), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(1320), "R": Number(1328)}), Object({"L": Number(1697), "R": Number(1705)}), Object({"L": Number(1716), "R": Number(1724)}), Object({"L": Number(2200), "R": Number(2208)}), Object({"L": Number(10041), "R": Number(10049)}), Object({"L": Number(65919), "R": Number(65927)})]), "storage": Number(0)}), Object({"id": Number(4771), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(58356), "R": Number(58363)}), Object({"L": Number(58478), "R": Number(58485)})]), "storage": Number(0)}), Object({"id": Number(2839), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(6256), "R": Number(6280)}), Object({"L": Number(6507), "R": Number(6531)}), Object({"L": Number(32112), "R": Number(32136)})]), "storage": Number(0)}), Object({"id": Number(4768), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(40160), "R": Number(40164)}), Object({"L": Number(40496), "R": Number(40500)}), Object({"L": Number(40531), "R": Number(40535)}), Object({"L": Number(40567), "R": Number(40571)}), Object({"L": Number(40746), "R": Number(40750)}), Object({"L": Number(40850), "R": Number(40854)})]), "storage": Number(0)}), Object({"id": Number(2807), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(4670), "R": Number(4684)}), Object({"L": Number(17512), "R": Number(17526)}), Object({"L": Number(17722), "R": Number(17736)}), Object({"L": Number(17820), "R": Number(17834)}), Object({"L": Number(20336), "R": Number(20350)}), Object({"L": Number(20432), "R": Number(20446)}), Object({"L": Number(26800), "R": Number(26814)})]), "storage": Number(0)}), Object({"id": Number(4564), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(22149), "R": Number(22152)}), Object({"L": Number(22344), "R": Number(22347)}), Object({"L": Number(22357), "R": Number(22360)})]), "storage": Number(0)}), Object({"id": Number(4700), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(7474), "R": Number(7480)}), Object({"L": Number(29608), "R": Number(29614)}), Object({"L": Number(32856), "R": Number(32862)})]), "storage": Number(0)}), Object({"id": Number(4619), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(25811), "R": Number(25828)}), Object({"L": Number(31273), "R": Number(31290)}), Object({"L": Number(35433), "R": Number(35450)}), Object({"L": Number(38814), "R": Number(38831)})]), "storage": Number(0)}), Object({"id": Number(4464), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(1999), "R": Number(2006)}), Object({"L": Number(2210), "R": Number(2217)})]), "storage": Number(0)}), Object({"id": Number(4742), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(32951), "R": Number(32971)}), Object({"L": Number(32987), "R": Number(33007)})]), "storage": Number(0)}), Object({"id": Number(4704), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(54164), "R": Number(54167)}), Object({"L": Number(56677), "R": Number(56680)}), Object({"L": Number(56736), "R": Number(56739)}), Object({"L": Number(56772), "R": Number(56775)})]), "storage": Number(0)}), Object({"id": Number(4800), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(70514), "R": Number(70526)}), Object({"L": Number(72672), "R": Number(72684)}), Object({"L": Number(72788), "R": Number(72800)})]), "storage": Number(0)}), Object({"id": Number(979), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(3041), "R": Number(3066)}), Object({"L": Number(4321), "R": Number(4346)})]), "storage": Number(0)}), Object({"id": Number(4885), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(59494), "R": Number(59508)})]), "storage": Number(0)}), Object({"id": Number(4525), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(57618), "R": Number(57623)}), Object({"L": Number(57840), "R": Number(57845)})]), "storage": Number(0)}), Object({"id": Number(4716), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27192), "R": Number(27196)}), Object({"L": Number(27737), "R": Number(27741)}), Object({"L": Number(28225), "R": Number(28229)}), Object({"L": Number(28619), "R": Number(28623)}), Object({"L": Number(30340), "R": Number(30344)}), Object({"L": Number(30373), "R": Number(30377)}), Object({"L": Number(30608), "R": Number(30612)}), Object({"L": Number(31453), "R": Number(31457)}), Object({"L": Number(31485), "R": Number(31489)})]), "storage": Number(0)}), Object({"id": Number(4690), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27175), "R": Number(27177)}), Object({"L": Number(27252), "R": Number(27254)}), Object({"L": Number(27284), "R": Number(27286)}), Object({"L": Number(27363), "R": Number(27365)}), Object({"L": Number(27449), "R": Number(27451)}), Object({"L": Number(27504), "R": Number(27506)}), Object({"L": Number(27758), "R": Number(27760)}), Object({"L": Number(27969), "R": Number(27971)}), Object({"L": Number(29928), "R": Number(29930)})]), "storage": Number(0)}), Object({"id": Number(4598), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(15378), "R": Number(15382)}), Object({"L": Number(34617), "R": Number(34621)}), Object({"L": Number(46464), "R": Number(46468)}), Object({"L": Number(46562), "R": Number(46566)}), Object({"L": Number(46641), "R": Number(46645)}), Object({"L": Number(48313), "R": Number(48317)}), Object({"L": Number(48392), "R": Number(48396)}), Object({"L": Number(49732), "R": Number(49736)})]), "storage": Number(0)}), Object({"id": Number(334), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(32523), "R": Number(32535)})]), "storage": Number(0)}), Object({"id": Number(4718), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(27783), "R": Number(27797)})]), "storage": Number(1)}), Object({"id": Number(4858), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(70326), "R": Number(70327)}), Object({"L": Number(70708), "R": Number(70709)}), Object({"L": Number(70724), "R": Number(70725)}), Object({"L": Number(70745), "R": Number(70746)}), Object({"L": Number(70760), "R": Number(70761)}), Object({"L": Number(70766), "R": Number(70767)}), Object({"L": Number(70781), "R": Number(70782)}), Object({"L": Number(70808), "R": Number(70809)}), Object({"L": Number(70908), "R": Number(70909)}), Object({"L": Number(70932), "R": Number(70933)}), Object({"L": Number(70948), "R": Number(70949)}), Object({"L": Number(70988), "R": Number(70989)}), Object({"L": Number(71001), "R": Number(71002)}), Object({"L": Number(71072), "R": Number(71073)}), Object({"L": Number(71131), "R": Number(71132)}), Object({"L": Number(71164), "R": Number(71165)}), Object({"L": Number(71198), "R": Number(71199)}), Object({"L": Number(71213), "R": Number(71214)}), Object({"L": Number(71476), "R": Number(71477)}), Object({"L": Number(71548), "R": Number(71549)}), Object({"L": Number(71562), "R": Number(71563)}), Object({"L": Number(71583), "R": Number(71584)}), Object({"L": Number(71618), "R": Number(71619)}), Object({"L": Number(71635), "R": Number(71636)}), Object({"L": Number(71664), "R": Number(71665)}), Object({"L": Number(71837), "R": Number(71838)}), Object({"L": Number(72095), "R": Number(72096)}), Object({"L": Number(72115), "R": Number(72116)}), Object({"L": Number(72370), "R": Number(72371)}), Object({"L": Number(72444), "R": Number(72445)}), Object({"L": Number(72458), "R": Number(72459)}), Object({"L": Number(72497), "R": Number(72498)}), Object({"L": Number(72518), "R": Number(72519)}), Object({"L": Number(72553), "R": Number(72554)})]), "storage": Number(0)}), Object({"id": Number(4462), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(23130), "R": Number(23139)}), Object({"L": Number(23582), "R": Number(23591)})]), "storage": Number(0)}), Object({"id": Number(4492), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(46329), "R": Number(46337)}), Object({"L": Number(46650), "R": Number(46658)}), Object({"L": Number(47756), "R": Number(47764)}), Object({"L": Number(68488), "R": Number(68496)}), Object({"L": Number(68532), "R": Number(68540)})]), "storage": Number(0)}), Object({"id": Number(4486), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(17957), "R": Number(17973)}), Object({"L": Number(20567), "R": Number(20583)})]), "storage": Number(0)}), Object({"id": Number(4731), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(27798), "R": Number(27805)})]), "storage": Number(0)}), Object({"id": Number(4875), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(64280), "R": Number(64294)})]), "storage": Number(0)}), Object({"id": Number(963), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(27108), "R": Number(27115)}), Object({"L": Number(67573), "R": Number(67580)})]), "storage": Number(0)}), Object({"id": Number(4507), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(39739), "R": Number(39742)}), Object({"L": Number(39789), "R": Number(39792)}), Object({"L": Number(39823), "R": Number(39826)})]), "storage": Number(0)}), Object({"id": Number(4881), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(30469), "R": Number(30474)}), Object({"L": Number(30532), "R": Number(30537)}), Object({"L": Number(30580), "R": Number(30585)})]), "storage": Number(0)}), Object({"id": Number(2934), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10972), "R": Number(10987)}), Object({"L": Number(22035), "R": Number(22050)})]), "storage": Number(0)}), Object({"id": Number(4748), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(58208), "R": Number(58229)}), Object({"L": Number(58407), "R": Number(58428)})]), "storage": Number(0)}), Object({"id": Number(4540), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(7366), "R": Number(7368)}), Object({"L": Number(12732), "R": Number(12734)}), Object({"L": Number(13225), "R": Number(13227)}), Object({"L": Number(13484), "R": Number(13486)}), Object({"L": Number(13736), "R": Number(13738)}), Object({"L": Number(13871), "R": Number(13873)}), Object({"L": Number(14729), "R": Number(14731)}), Object({"L": Number(14934), "R": Number(14936)}), Object({"L": Number(57713), "R": Number(57715)}), Object({"L": Number(58205), "R": Number(58207)}), Object({"L": Number(58404), "R": Number(58406)}), Object({"L": Number(58804), "R": Number(58806)})]), "storage": Number(1)}), Object({"id": Number(4772), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(40199), "R": Number(40204)}), Object({"L": Number(40905), "R": Number(40910)}), Object({"L": Number(40912), "R": Number(40917)}), Object({"L": Number(41159), "R": Number(41164)}), Object({"L": Number(41166), "R": Number(41171)})]), "storage": Number(0)}), Object({"id": Number(4654), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(4507), "R": Number(4508)}), Object({"L": Number(4771), "R": Number(4772)}), Object({"L": Number(5498), "R": Number(5499)}), Object({"L": Number(6326), "R": Number(6327)}), Object({"L": Number(9818), "R": Number(9819)}), Object({"L": Number(10510), "R": Number(10511)}), Object({"L": Number(10960), "R": Number(10961)}), Object({"L": Number(11078), "R": Number(11079)}), Object({"L": Number(12191), "R": Number(12192)}), Object({"L": Number(12260), "R": Number(12261)}), Object({"L": Number(12413), "R": Number(12414)}), Object({"L": Number(15376), "R": Number(15377)}), Object({"L": Number(16528), "R": Number(16529)}), Object({"L": Number(16572), "R": Number(16573)}), Object({"L": Number(16828), "R": Number(16829)}), Object({"L": Number(16872), "R": Number(16873)}), Object({"L": Number(19111), "R": Number(19112)}), Object({"L": Number(19155), "R": Number(19156)}), Object({"L": Number(19386), "R": Number(19387)}), Object({"L": Number(19430), "R": Number(19431)}), Object({"L": Number(21544), "R": Number(21545)}), Object({"L": Number(22023), "R": Number(22024)}), Object({"L": Number(29606), "R": Number(29607)}), Object({"L": Number(38334), "R": Number(38335)}), Object({"L": Number(49184), "R": Number(49185)}), Object({"L": Number(49220), "R": Number(49221)}), Object({"L": Number(49526), "R": Number(49527)}), Object({"L": Number(53750), "R": Number(53751)}), Object({"L": Number(55401), "R": Number(55402)}), Object({"L": Number(56584), "R": Number(56585)}), Object({"L": Number(56655), "R": Number(56656)}), Object({"L": Number(62333), "R": Number(62334)})]), "storage": Number(0)}), Object({"id": Number(4585), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(17588), "R": Number(17597)})]), "storage": Number(0)}), Object({"id": Number(1732), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(26125), "R": Number(26154)})]), "storage": Number(0)}), Object({"id": Number(4523), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(26834), "R": Number(26843)}), Object({"L": Number(43225), "R": Number(43234)}), Object({"L": Number(59704), "R": Number(59713)}), Object({"L": Number(59740), "R": Number(59749)}), Object({"L": Number(59928), "R": Number(59937)}), Object({"L": Number(60168), "R": Number(60177)})]), "storage": Number(0)}), Object({"id": Number(10), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(883), "R": Number(889)}), Object({"L": Number(57388), "R": Number(57394)}), Object({"L": Number(57420), "R": Number(57426)}), Object({"L": Number(59356), "R": Number(59362)})]), "storage": Number(0)}), Object({"id": Number(3975), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(26249), "R": Number(26265)}), Object({"L": Number(35723), "R": Number(35739)}), Object({"L": Number(38924), "R": Number(38940)})]), "storage": Number(0)}), Object({"id": Number(53), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(44888), "R": Number(44892)})]), "storage": Number(0)}), Object({"id": Number(318), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(24848), "R": Number(24859)}), Object({"L": Number(25144), "R": Number(25155)})]), "storage": Number(0)}), Object({"id": Number(973), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(63734), "R": Number(63736)}), Object({"L": Number(64019), "R": Number(64021)})]), "storage": Number(0)}), Object({"id": Number(4573), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(18139), "R": Number(18154)}), Object({"L": Number(20743), "R": Number(20758)})]), "storage": Number(0)}), Object({"id": Number(4870), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(7259), "R": Number(7269)})]), "storage": Number(0)}), Object({"id": Number(3635), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(55411), "R": Number(55421)}), Object({"L": Number(67466), "R": Number(67476)})]), "storage": Number(0)}), Object({"id": Number(4770), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(40186), "R": Number(40191)}), Object({"L": Number(40932), "R": Number(40937)}), Object({"L": Number(40939), "R": Number(40944)}), Object({"L": Number(41186), "R": Number(41191)}), Object({"L": Number(41193), "R": Number(41198)})]), "storage": Number(0)}), Object({"id": Number(4616), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(5005), "R": Number(5006)}), Object({"L": Number(5058), "R": Number(5059)}), Object({"L": Number(5217), "R": Number(5218)})]), "storage": Number(0)}), Object({"id": Number(4664), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(5008), "R": Number(5009)}), Object({"L": Number(5074), "R": Number(5075)}), Object({"L": Number(5227), "R": Number(5228)})]), "storage": Number(0)}), Object({"id": Number(4639), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(4966), "R": Number(4979)}), Object({"L": Number(5041), "R": Number(5054)})]), "storage": Number(0)}), Object({"id": Number(927), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(67528), "R": Number(67537)})]), "storage": Number(0)}), Object({"id": Number(977), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(836), "R": Number(855)}), Object({"L": Number(25909), "R": Number(25928)}), Object({"L": Number(31371), "R": Number(31390)}), Object({"L": Number(35531), "R": Number(35550)})]), "storage": Number(0)}), Object({"id": Number(4478), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(16441), "R": Number(16446)}), Object({"L": Number(17177), "R": Number(17182)}), Object({"L": Number(17368), "R": Number(17373)}), Object({"L": Number(17579), "R": Number(17584)}), Object({"L": Number(17688), "R": Number(17693)}), Object({"L": Number(17767), "R": Number(17772)}), Object({"L": Number(17865), "R": Number(17870)}), Object({"L": Number(17940), "R": Number(17945)}), Object({"L": Number(18993), "R": Number(18998)}), Object({"L": Number(19996), "R": Number(20001)}), Object({"L": Number(20303), "R": Number(20308)}), Object({"L": Number(20381), "R": Number(20386)}), Object({"L": Number(20477), "R": Number(20482)}), Object({"L": Number(20550), "R": Number(20555)})]), "storage": Number(0)}), Object({"id": Number(4783), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(41357), "R": Number(41362)})]), "storage": Number(0)}), Object({"id": Number(4883), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(14838), "R": Number(14863)}), Object({"L": Number(15043), "R": Number(15068)})]), "storage": Number(0)}), Object({"id": Number(4827), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(57531), "R": Number(57537)}), Object({"L": Number(57779), "R": Number(57785)})]), "storage": Number(0)}), Object({"id": Number(940), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(6921), "R": Number(6941)}), Object({"L": Number(10755), "R": Number(10775)})]), "storage": Number(0)}), Object({"id": Number(3646), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(28231), "R": Number(28237)}), Object({"L": Number(28625), "R": Number(28631)}), Object({"L": Number(30346), "R": Number(30352)}), Object({"L": Number(30614), "R": Number(30620)}), Object({"L": Number(31459), "R": Number(31465)})]), "storage": Number(0)}), Object({"id": Number(4566), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(530), "R": Number(536)})]), "storage": Number(0)}), Object({"id": Number(4553), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(451), "R": Number(456)})]), "storage": Number(0)}), Object({"id": Number(4634), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(54204), "R": Number(54209)}), Object({"L": Number(56500), "R": Number(56505)}), Object({"L": Number(56545), "R": Number(56550)}), Object({"L": Number(56577), "R": Number(56582)}), Object({"L": Number(56648), "R": Number(56653)}), Object({"L": Number(56714), "R": Number(56719)})]), "storage": Number(0)}), Object({"id": Number(4676), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(18316), "R": Number(18329)}), Object({"L": Number(20915), "R": Number(20928)})]), "storage": Number(0)}), Object({"id": Number(980), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(25424), "R": Number(25434)})]), "storage": Number(0)}), Object({"id": Number(998), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(24416), "R": Number(24438)})]), "storage": Number(0)}), Object({"id": Number(2474), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(9449), "R": Number(9459)}), Object({"L": Number(37055), "R": Number(37065)})]), "storage": Number(0)}), Object({"id": Number(4518), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(16729), "R": Number(16744)}), Object({"L": Number(19287), "R": Number(19302)})]), "storage": Number(0)}), Object({"id": Number(4851), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(44070), "R": Number(44076)}), Object({"L": Number(44535), "R": Number(44541)}), Object({"L": Number(44630), "R": Number(44636)})]), "storage": Number(0)}), Object({"id": Number(4626), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(601), "R": Number(606)})]), "storage": Number(0)}), Object({"id": Number(935), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(67133), "R": Number(67162)})]), "storage": Number(0)}), Object({"id": Number(4602), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(20042), "R": Number(20052)}), Object({"L": Number(20179), "R": Number(20189)}), Object({"L": Number(32711), "R": Number(32721)})]), "storage": Number(1)}), Object({"id": Number(4782), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(41344), "R": Number(41349)}), Object({"L": Number(42029), "R": Number(42034)}), Object({"L": Number(42078), "R": Number(42083)}), Object({"L": Number(42127), "R": Number(42132)}), Object({"L": Number(42176), "R": Number(42181)}), Object({"L": Number(42322), "R": Number(42327)}), Object({"L": Number(42371), "R": Number(42376)}), Object({"L": Number(42420), "R": Number(42425)}), Object({"L": Number(42469), "R": Number(42474)})]), "storage": Number(0)}), Object({"id": Number(4764), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(39720), "R": Number(39725)})]), "storage": Number(0)}), Object({"id": Number(4513), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(13822), "R": Number(13831)}), Object({"L": Number(13957), "R": Number(13966)}), Object({"L": Number(15317), "R": Number(15326)})]), "storage": Number(0)}), Object({"id": Number(4692), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(5650), "R": Number(5661)}), Object({"L": Number(19814), "R": Number(19825)})]), "storage": Number(0)}), Object({"id": Number(4721), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(27960), "R": Number(27968)}), Object({"L": Number(29919), "R": Number(29927)})]), "storage": Number(1)}), Object({"id": Number(922), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(62560), "R": Number(62571)})]), "storage": Number(0)}), Object({"id": Number(4758), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(37157), "R": Number(37168)}), Object({"L": Number(37845), "R": Number(37856)})]), "storage": Number(0)}), Object({"id": Number(4482), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(26114), "R": Number(26123)}), Object({"L": Number(26187), "R": Number(26196)})]), "storage": Number(0)}), Object({"id": Number(4892), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(63823), "R": Number(63839)})]), "storage": Number(0)}), Object({"id": Number(943), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(37552), "R": Number(37565)})]), "storage": Number(0)}), Object({"id": Number(3650), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(28241), "R": Number(28252)}), Object({"L": Number(28635), "R": Number(28646)}), Object({"L": Number(30624), "R": Number(30635)})]), "storage": Number(0)}), Object({"id": Number(4559), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(584), "R": Number(588)})]), "storage": Number(0)}), Object({"id": Number(4832), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(1167), "R": Number(1174)}), Object({"L": Number(1330), "R": Number(1337)})]), "storage": Number(0)}), Object({"id": Number(4854), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(66697), "R": Number(66709)})]), "storage": Number(0)}), Object({"id": Number(4719), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(27985), "R": Number(27989)})]), "storage": Number(0)}), Object({"id": Number(3927), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(67792), "R": Number(67802)})]), "storage": Number(0)}), Object({"id": Number(4699), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24340), "R": Number(24343)}), Object({"L": Number(24459), "R": Number(24462)}), Object({"L": Number(24520), "R": Number(24523)}), Object({"L": Number(24596), "R": Number(24599)}), Object({"L": Number(24696), "R": Number(24699)})]), "storage": Number(0)}), Object({"id": Number(4628), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(53691), "R": Number(53699)}), Object({"L": Number(66910), "R": Number(66918)}), Object({"L": Number(66934), "R": Number(66942)}), Object({"L": Number(67837), "R": Number(67845)}), Object({"L": Number(67861), "R": Number(67869)})]), "storage": Number(0)}), Object({"id": Number(4821), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(55704), "R": Number(55713)}), Object({"L": Number(55881), "R": Number(55890)}), Object({"L": Number(55938), "R": Number(55947)})]), "storage": Number(0)}), Object({"id": Number(2910), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(6338), "R": Number(6346)}), Object({"L": Number(16099), "R": Number(16107)}), Object({"L": Number(19669), "R": Number(19677)}), Object({"L": Number(20053), "R": Number(20061)}), Object({"L": Number(20190), "R": Number(20198)}), Object({"L": Number(30388), "R": Number(30396)}), Object({"L": Number(31500), "R": Number(31508)})]), "storage": Number(0)}), Object({"id": Number(934), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(39761), "R": Number(39775)}), Object({"L": Number(43410), "R": Number(43424)}), Object({"L": Number(44614), "R": Number(44628)}), Object({"L": Number(62465), "R": Number(62479)})]), "storage": Number(0)}), Object({"id": Number(1297), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(61773), "R": Number(61792)})]), "storage": Number(0)}), Object({"id": Number(4882), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(60786), "R": Number(60803)}), Object({"L": Number(62186), "R": Number(62203)})]), "storage": Number(0)}), Object({"id": Number(3629), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(67930), "R": Number(67940)})]), "storage": Number(0)}), Object({"id": Number(4788), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(41399), "R": Number(41405)}), Object({"L": Number(41831), "R": Number(41837)}), Object({"L": Number(41864), "R": Number(41870)}), Object({"L": Number(41960), "R": Number(41966)}), Object({"L": Number(42113), "R": Number(42119)}), Object({"L": Number(42154), "R": Number(42160)}), Object({"L": Number(42253), "R": Number(42259)}), Object({"L": Number(42406), "R": Number(42412)}), Object({"L": Number(42447), "R": Number(42453)})]), "storage": Number(0)}), Object({"id": Number(4755), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(39705), "R": Number(39711)})]), "storage": Number(0)}), Object({"id": Number(4784), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(65470), "R": Number(65474)}), Object({"L": Number(65484), "R": Number(65488)}), Object({"L": Number(65532), "R": Number(65536)})]), "storage": Number(0)}), Object({"id": Number(2420), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(5), "ranges": Array([Object({"L": Number(66067), "R": Number(66075)})]), "storage": Number(0)}), Object({"id": Number(4706), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(812), "R": Number(816)})]), "storage": Number(0)}), Object({"id": Number(4528), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(54490), "R": Number(54494)}), Object({"L": Number(65942), "R": Number(65946)})]), "storage": Number(0)}), Object({"id": Number(3765), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(24024), "R": Number(24036)})]), "storage": Number(0)}), Object({"id": Number(4836), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(44907), "R": Number(44908)})]), "storage": Number(0)}), Object({"id": Number(4725), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(28716), "R": Number(28724)}), Object({"L": Number(69443), "R": Number(69451)})]), "storage": Number(0)}), Object({"id": Number(4796), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(44059), "R": Number(44068)}), Object({"L": Number(44384), "R": Number(44393)}), Object({"L": Number(44638), "R": Number(44647)})]), "storage": Number(0)}), Object({"id": Number(4877), "kind": Number(0), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(5610), "R": Number(5623)}), Object({"L": Number(17314), "R": Number(17327)}), Object({"L": Number(19943), "R": Number(19956)})]), "storage": Number(0)})]), "uri": String("file:///home/ys/Code/project/project-jka/src/code/cgame/cg_ents.cpp")}) }
11:11:44 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(1), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/cgame/cg_ents.cpp"), "languageId": String("cpp"), "position": Object({"character": Number(0), "line": Number(1)}), "viewport": Object({"end": Number(65), "start": Number(0)})}) force_redraw=false
11:11:44 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(1), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/cgame/cg_ents.cpp"), "languageId": String("cpp"), "position": Object({"character": Number(0), "line": Number(2)}), "viewport": Object({"end": Number(65), "start": Number(0)})}) force_redraw=false
11:11:44 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(1), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/cgame/cg_ents.cpp"), "languageId": String("cpp"), "position": Object({"character": Number(0), "line": Number(3)}), "viewport": Object({"end": Number(65), "start": Number(0)})}) force_redraw=false
11:11:44 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(1), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/cgame/cg_ents.cpp"), "languageId": String("cpp"), "position": Object({"character": Number(0), "line": Number(4)}), "viewport": Object({"end": Number(65), "start": Number(0)})}) force_redraw=false
11:11:46 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(1), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/cgame/cg_ents.cpp"), "languageId": String("cpp"), "position": Object({"character": Number(0), "line": Number(33)}), "viewport": Object({"end": Number(65), "start": Number(0)})}) force_redraw=false
11:11:48 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(1), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/cgame/cg_ents.cpp"), "languageId": String("cpp"), "position": Object({"character": Number(10), "line": Number(818)}), "viewport": Object({"end": Number(851), "start": Number(786)})}) force_redraw=false
11:11:48 INFO unnamed src/language_server_protocol.rs:2847 get_signs_to_display; filename="/home/ys/Code/project/project-jka/src/code/cgame/cg_ents.cpp" viewport=Viewport { start: 786, end: 851 }
11:11:49 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(1), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/cgame/cg_ents.cpp"), "languageId": String("cpp"), "position": Object({"character": Number(0), "line": Number(819)}), "viewport": Object({"end": Number(851), "start": Number(786)})}) force_redraw=false
11:11:49 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(1), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/cgame/cg_ents.cpp"), "languageId": String("cpp"), "position": Object({"character": Number(10), "line": Number(818)}), "viewport": Object({"end": Number(851), "start": Number(786)})}) force_redraw=false
11:11:50 INFO unnamed src/language_server_protocol.rs:1473 text_document_definition; params=Object({"bufnr": Number(1), "character": Number(11), "filename": String("/home/ys/Code/project/project-jka/src/code/cgame/cg_ents.cpp"), "gotoCmd": Null, "handle": Bool(true), "languageId": String("cpp"), "line": Number(818), "text": Array([String("<<<<<<< HEAD"), String("// cg_ents.c -- present snapshot entities, happens every single frame"), String(""), String("// this line must stay at top so the whole PCH thing works..."), String("#include \"cg_headers.h\""), String(""), String("//#include \"cg_local.h\""), String("#include \"cg_media.h\""), String("#include \"../game/g_functions.h\""), String("#include \"../ghoul2/G2.h\""), String("#include \"FxScheduler.h\""), String("#include \"../game/wp_saber.h\""), String("#include \"../game/g_vehicles.h\""), String("#include \"../game/g_local.h\""), String(""), String("extern void CG_AddSaberBlade( centity_t *cent, centity_t *scent, refEntity_t *saber, int renderfx, int modelIndex, vec3_t origin, vec3_t angles);"), String("extern void CG_CheckSaberInWater( centity_t *cent, centity_t *scent, int saberNum, int modelIndex, vec3_t origin, vec3_t angles );"), String("extern void CG_ForcePushBlur( const vec3_t org, qboolean darkSide = qfalse );"), String("extern void CG_AddForceSightShell( refEntity_t *ent, centity_t *cent );"), String("extern qboolean CG_PlayerCanSeeCent( centity_t *cent );"), String("extern cvar_t\t*debug_subdivision;"), String(""), String("/*"), String("======================"), String("CG_PositionEntityOnTag"), String(""), String("Modifies the entities position and axis by the given"), String("tag location"), String("======================"), String("*/"), String("void CG_PositionEntityOnTag( refEntity_t *entity, const refEntity_t *parent, "), String("\t\t\t\t\t\t\tqhandle_t parentModel, char *tagName ) {"), String("\tint\t\t\t\ti;"), String("\torientation_t\tlerped;"), String("\t"), String("\t// lerp the tag"), String("\tcgi_R_LerpTag( &lerped, parentModel, parent->oldframe, parent->frame,"), String("\t\t1.0f - parent->backlerp, tagName );"), String(""), String("\t// FIXME: allow origin offsets along tag?"), String("\tVectorCopy( parent->origin, entity->origin );"), String("\tfor ( i = 0 ; i < 3 ; i++ ) "), String("\t{"), String("\t\tVectorMA( entity->origin, lerped.origin[i], parent->axis[i], entity->origin );"), String("\t}"), String(""), String("\t// had to cast away the const to avoid compiler problems..."), String("\tMatrixMultiply( lerped.axis, ((refEntity_t *)parent)->axis, entity->axis );"), String("\tentity->backlerp = parent->backlerp;"), String("}"), String(""), String("/*"), String("======================"), String("CG_PositionRotatedEntityOnTag"), String(""), String("Modifies the entities position and axis by the given"), String("tag location"), String("======================"), String("*/"), String("void CG_PositionRotatedEntityOnTag( refEntity_t *entity, const refEntity_t *parent, "), String("\t\t\t\t\t\t\tqhandle_t parentModel, char *tagName, orientation_t *tagOrient ) {"), String("\tint\t\t\t\ti;"), String("\torientation_t\tlerped;"), String("\tvec3_t\t\t\ttempAxis[3];"), String(""), String("\t// lerp the tag"), String("\tcgi_R_LerpTag( &lerped, parentModel, parent->oldframe, parent->frame,"), String("\t\t1.0f - parent->backlerp, tagName );"), String(""), String("\tif ( tagOrient )"), String("\t{"), String("\t\tVectorCopy( lerped.origin, tagOrient->origin );"), String("\t\tfor ( i = 0 ; i < 3 ; i++ ) "), String("\t\t{"), String("\t\t\tVectorCopy( lerped.axis[i], tagOrient->axis[i] );"), String("\t\t}"), String("\t}"), String(""), String("\t// FIXME: allow origin offsets along tag?"), String("\tVectorCopy( parent->origin, entity->origin );"), String("\tfor ( i = 0 ; i < 3 ; i++ ) {"), String("\t\tVectorMA( entity->origin, lerped.origin[i], parent->axis[i], entity->origin );"), String("\t}"), String(""), String("\tMatrixMultiply( entity->axis, lerped.axis, tempAxis );"), String("\tMatrixMultiply( tempAxis, ((refEntity_t *)parent)->axis, entity->axis );"), String("}"), String(""), String(""), String(""), String("/*"), String("=========================================================================="), String(""), String("FUNCTIONS CALLED EACH FRAME"), String(""), String("=========================================================================="), String("*/"), String(""), String("/*"), String("======================"), String("CG_SetEntitySoundPosition"), String(""), String("Also called by event processing code"), String("======================"), String("*/"), String("vec3_t *CG_SetEntitySoundPosition( centity_t *cent ) {"), String("\tstatic vec3_t v3Return;"), String("\tif ( cent->currentState.solid == SOLID_BMODEL ) {"), String("\t\tvec3_t\torigin;"), String("\t\tfloat\t*v;"), String(""), String("\t\tv = cgs.inlineModelMidpoints[ cent->currentState.modelindex ];"), String("\t\tVectorAdd( cent->lerpOrigin, v, origin );"), String("\t\tcgi_S_UpdateEntityPosition( cent->currentState.number, origin );"), String("\t\tVectorCopy(origin, v3Return);"), String("\t} else {"), String("\t\tif ( cent->currentState.eType == ET_PLAYER"), String("\t\t\t&& cent->gent"), String("\t\t\t&& cent->gent->client"), String("\t\t\t&& cent->gent->ghoul2.IsValid() "), String("\t\t\t&& cent->gent->ghoul2[0].animModelIndexOffset )//If it has an animOffset it\'s a cinematic anim"), String("\t\t{//I might be running out of my bounding box, so use my headPoint from the last render frame...?"), String("\t\t\t//NOTE: if I\'m not rendered, will this not update correctly?  Would cent->lerpOrigin be any more updated?"), String("\t\t\tVectorCopy(cent->gent->client->renderInfo.eyePoint, v3Return);"), String("\t\t}"), String("\t\telse"), String("\t\t{//just use my org"), String("\t\t\tVectorCopy(cent->lerpOrigin, v3Return);"), String("\t\t}"), String("\t\tcgi_S_UpdateEntityPosition( cent->currentState.number, v3Return );"), String("\t}"), String(""), String("\treturn &v3Return;"), String("}"), String(""), String("/*"), String("=================="), String("CG_EntityEffects"), String(""), String("Add continuous entity effects, like local entity emission and lighting"), String("=================="), String("*/"), String("static void CG_EntityEffects( centity_t *cent ) {"), String(""), String("\t// update sound origins"), String("\tvec3_t v3Origin;"), String("\tVectorCopy(*CG_SetEntitySoundPosition( cent ),v3Origin);"), String(""), String("\t// add loop sound"), String("\tif ( cent->currentState.loopSound ) "), String("\t{"), String("\t\tsoundChannel_t chan = CHAN_AUTO;"), String(""), String("\t\tgentity_t *ent = cent->gent;"), String(""), String("\t\tif ( ent->s.eFlags & EF_LESS_ATTEN )"), String("\t\t{"), String("\t\t\tchan = CHAN_LESS_ATTEN;"), String("\t\t}"), String("\t\t"), String("\t\tsfxHandle_t\tsfx = ( cent->currentState.eType == ET_MOVER ) ? cent->currentState.loopSound : cgs.sound_precache[ cent->currentState.loopSound ];"), String(""), String("\t\t// Only play sound if being drawn."), String("\t\tif ( !( ent->s.eFlags & EF_NODRAW ) )"), String("\t\t{"), String("\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, v3Origin/*cent->lerpOrigin*/, vec3_origin, sfx, chan );"), String("\t\t}"), String("\t}"), String(""), String("\t// constant light glow"), String("\tif ( cent->currentState.constantLight ) {"), String("\t\tint\t\tcl;"), String("\t\tint\t\ti, r, g, b;"), String(""), String("\t\tcl = cent->currentState.constantLight;"), String("\t\tr = cl & 255;"), String("\t\tg = ( cl >> 8 ) & 255;"), String("\t\tb = ( cl >> 16 ) & 255;"), String("\t\ti = ( ( cl >> 24 ) & 255 ) * 4;"), String("\t\tcgi_R_AddLightToScene( cent->lerpOrigin, (float)i, (float)r, (float)g, (float)b );"), String("\t}"), String("}"), String(""), String("void CG_AddRefEntWithTransportEffect ( centity_t *cent, refEntity_t *ent )"), String("{"), String("\t// We are a normal thing...."), String("\tcgi_R_AddRefEntityToScene (ent);"), String(""), String("\tif ( ent->renderfx & RF_PULSATE && cent->gent->owner && cent->gent->owner->health &&"), String("\t\t!cent->gent->owner->s.number && cent->gent->owner->client && //only for player"), String("\t\t\tcent->gent->owner->client->ps.saberEntityState == SES_RETURNING && "), String("\t\t\tcent->currentState.saberActive == qfalse )"), String("\t{"), String("\t\t// if we are the saber and we have been dropped, do a glow so it can be spotted easier"), String("\t\tfloat\twv;"), String("\t\tvec3_t\torg;"), String(""), String("\t\tent->customShader = cgi_R_RegisterShader( \"gfx/effects/solidWhite_cull\" );"), String("\t\tent->renderfx = RF_RGB_TINT;"), String("\t\twv = sin( cg.time * 0.003f ) * 0.08f + 0.1f;"), String("\t\tent->shaderRGBA[0] = wv * 255;"), String("\t\tent->shaderRGBA[1] = wv * 255;"), String("\t\tent->shaderRGBA[2] = wv * 0;"), String("\t\tcgi_R_AddRefEntityToScene (ent);"), String(""), String("\t\tfor ( int i = -4; i < 10; i += 1 )"), String("\t\t{"), String("\t\t\tVectorMA( ent->origin, -i, ent->axis[2], org );"), String(""), String("\t\t\tFX_AddSprite( org, NULL, NULL, 5.5f, 5.5f, wv, wv, 0.0f, 0.0f, 1.0f, cgs.media.yellowDroppedSaberShader, 0x08000000 );"), String("\t\t}"), String("\t\tif ( cent->gent->owner->s.weapon == WP_SABER )"), String("\t\t{//he\'s still controlling me"), String("\t\t\tFX_AddSprite( cent->gent->owner->client->renderInfo.handRPoint, NULL, NULL, 8.0f, 8.0f, wv, wv, 0.0f, 0.0f, 1.0f, cgs.media.yellowDroppedSaberShader, 0x08000000 );"), String("\t\t}"), String("\t}"), String("}"), String(""), String(""), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String(""), String("// Copy the ghoul2 data into the ref ent correctly"), String("void CG_SetGhoul2Info( refEntity_t *ent, centity_t *cent)"), String("{"), String("\tent->ghoul2 = &cent->gent->ghoul2;"), String("\tVectorCopy( cent->currentState.modelScale, ent->modelScale);"), String("\tent->radius = cent->currentState.radius;"), String("\tVectorCopy (cent->lerpAngles, ent->angles);"), String("}"), String(""), String(""), String("// write in the axis and stuff"), String("void G2_BoltToGhoul2Model(centity_t *cent, refEntity_t *ent)"), String("{"), String("\t\t// extract the wraith ID from the bolt info"), String("\tint modelNum = cent->currentState.boltInfo >> MODEL_SHIFT;"), String("\tmodelNum &= MODEL_AND;"), String("\tint boltNum\t= cent->currentState.boltInfo >> BOLT_SHIFT;"), String("\tboltNum &= BOLT_AND;"), String("\tint\tentNum = cent->currentState.boltInfo >> ENTITY_SHIFT;"), String("\tentNum &= ENTITY_AND;"), String(""), String(" \tmdxaBone_t \t\tboltMatrix;"), String(""), String(" \t// go away and get me the bolt position for this frame please"), String(" \tgi.G2API_GetBoltMatrix(cent->gent->ghoul2, modelNum, boltNum, &boltMatrix, cg_entities[entNum].currentState.angles, cg_entities[entNum].currentState.origin, cg.time, cgs.model_draw, cent->currentState.modelScale);"), String(""), String("\t// set up the axis and origin we need for the actual effect spawning"), String(" \tent->origin[0] = boltMatrix.matrix[0][3];"), String(" \tent->origin[1] = boltMatrix.matrix[1][3];"), String(" \tent->origin[2] = boltMatrix.matrix[2][3];"), String(""), String(" \tent->axis[0][0] = boltMatrix.matrix[0][0];"), String(" \tent->axis[0][1] = boltMatrix.matrix[1][0];"), String(" \tent->axis[0][2] = boltMatrix.matrix[2][0];"), String(""), String(" \tent->axis[1][0] = boltMatrix.matrix[0][1];"), String(" \tent->axis[1][1] = boltMatrix.matrix[1][1];"), String(" \tent->axis[1][2] = boltMatrix.matrix[2][1];"), String(""), String(" \tent->axis[2][0] = boltMatrix.matrix[0][2];"), String(" \tent->axis[2][1] = boltMatrix.matrix[1][2];"), String(" \tent->axis[2][2] = boltMatrix.matrix[2][2];"), String("}"), String(""), String("void ScaleModelAxis(refEntity_t\t*ent)"), String(""), String("{\t\t// scale the model should we need to"), String("\t\tif (ent->modelScale[0] && ent->modelScale[0] != 1.0f)"), String("\t\t{"), String("\t\t\tVectorScale( ent->axis[0], ent->modelScale[0] , ent->axis[0] );"), String("\t\t\tent->nonNormalizedAxes = qtrue;"), String("\t\t}"), String("\t\tif (ent->modelScale[1] && ent->modelScale[1] != 1.0f)"), String("\t\t{"), String("\t\t\tVectorScale( ent->axis[1], ent->modelScale[1] , ent->axis[1] );"), String("\t\t\tent->nonNormalizedAxes = qtrue;"), String("\t\t}"), String("\t\tif (ent->modelScale[2] && ent->modelScale[2] != 1.0f)"), String("\t\t{"), String("\t\t\tVectorScale( ent->axis[2], ent->modelScale[2] , ent->axis[2] );"), String("\t\t\tent->nonNormalizedAxes = qtrue;"), String("\t\t}"), String("}"), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("/*"), String("=================="), String("CG_General"), String("=================="), String("*/"), String("static void CG_General( centity_t *cent ) "), String("{"), String("\trefEntity_t\t\t\tent;"), String("\tentityState_t\t\t*s1;"), String(""), String("\ts1 = &cent->currentState;"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String(""), String("\t// if set to invisible, skip"), String("\tif (!s1->modelindex && !cent->gent->ghoul2.IsValid() ) {"), String("\t\treturn;"), String("\t}"), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("\tif ( s1->eFlags & EF_NODRAW )"), String("\t{"), String("\t\t// If you don\'t like it doing NODRAW, then don\'t set the flag"), String("\t\treturn;"), String("\t}"), String(""), String("\tmemset (&ent, 0, sizeof(ent));"), String(""), String("\t// set frame"), String(""), String("\tif ( cent->currentState.eFlags & EF_DISABLE_SHADER_ANIM )"), String("\t{"), String("\t\t// by setting the shader time to the current time, we can force an animating shader to not animate"), String("\t\tent.shaderTime = cg.time * 0.001f;"), String("\t}"), String(""), String("\tif ( s1->eFlags & EF_SHADER_ANIM )"), String("\t{"), String("\t\t// Deliberately setting it up so that shader anim will completely override any kind of model animation frame setting."), String("\t\tent.renderfx|=RF_SETANIMINDEX;"), String("\t\tent.skinNum = s1->frame;"), String("\t}"), String("\telse if ( s1->eFlags & EF_ANIM_ONCE )"), String("\t{"), String("\t\t//s1->frame++;"), String("\t\t//ent.frame = s1->frame;"), String("\t\tent.frame = cent->gent->s.frame;"), String("\t\tent.renderfx|=RF_CAP_FRAMES;"), String("\t}"), String("\telse if ( s1->eFlags & EF_ANIM_ALLFAST )"), String("\t{"), String("\t\tent.frame = (cg.time / 100);"), String("\t\tent.renderfx|=RF_WRAP_FRAMES;"), String("\t}"), String("\telse"), String("\t{"), String("\t\tent.frame = s1->frame;"), String("\t}"), String("\tent.oldframe = ent.frame;"), String("\tent.backlerp = 0;"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("\tCG_SetGhoul2Info(&ent, cent);"), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("\tVectorCopy( cent->lerpOrigin, ent.origin);"), String("\tVectorCopy( cent->lerpOrigin, ent.oldorigin);"), String(""), String("\tent.hModel = cgs.model_draw[s1->modelindex];"), String(""), String("\tif ( !ent.radius )"), String("\t{// Set default g2 cull radius."), String("\t\tent.radius = 60;"), String("\t}"), String(""), String("\tif ( s1->eFlags & EF_AUTO_SIZE && cent->gent )"), String("\t{"), String("\t\tcgi_R_ModelBounds( ent.hModel, cent->gent->mins, cent->gent->maxs );"), String("\t\t//Only do this once"), String("\t\tcent->gent->s.eFlags &= ~EF_AUTO_SIZE;"), String("\t}"), String(""), String("\t// player model"), String("\tif (s1->number == cg.snap->ps.clientNum) "), String("\t{"), String("\t\tent.renderfx |= RF_THIRD_PERSON;\t// only draw from mirrors"), String("\t}"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("\t// are we bolted to a Ghoul2 model?"), String("\tif (s1->boltInfo)"), String("\t{"), String("\t\tG2_BoltToGhoul2Model(cent, &ent);"), String("\t}"), String("\telse"), String("\t{"), String("\t\t//-------------------------------------------------------"), String("\t\t// Start of chair"), String("\t\t//-------------------------------------------------------"), String("\t\tif ( cent->gent->s.weapon == WP_EMPLACED_GUN || ( cent->gent->activator && cent->gent->activator->owner && "), String("\t\t\t\tcent->gent->activator->s.eFlags & EF_LOCKED_TO_WEAPON ))"), String("\t\t{"), String("\t\t\tvec3_t\ttemp;"), String(""), String("\t\t\tif ( cent->gent->health <= 0 && cent->gent->e_ThinkFunc == thinkF_NULL )"), String("\t\t\t{"), String("\t\t\t\tif ( !cent->gent->bounceCount )"), String("\t\t\t\t{//not an EWeb"), String("\t\t\t\t\tent.customShader = cgi_R_RegisterShader( \"models/map_objects/imp_mine/turret_chair_dmg\" );"), String("\t\t\t\t}"), String(""), String("\t\t\t\tVectorSet( temp, 0, 0, 1 );"), String(""), String("\t\t\t\t// add a big scorch mark under the gun"), String("\t\t\t\tCG_ImpactMark( cgs.media.scavMarkShader, cent->lerpOrigin, temp, "), String("\t\t\t\t\t0, 1,1,1, 1.0f, qfalse, 92, qtrue );"), String("\t\t\t\tCG_ImpactMark( cgs.media.scavMarkShader, cent->lerpOrigin, temp, "), String("\t\t\t\t\t90, 1,1,1, 1.0f, qfalse, 48, qtrue );"), String("\t\t\t}"), String("\t\t\telse"), String("\t\t\t{"), String("\t\t\t\tVectorSet( temp, 0, 0, 1 );"), String(""), String("\t\t\t\tif ( !( cent->gent->svFlags & SVF_INACTIVE ))"), String("\t\t\t\t{"), String("\t\t\t\t\tif ( !cent->gent->bounceCount )"), String("\t\t\t\t\t{//not an EWeb"), String("\t\t\t\t\t\tent.customShader = cgi_R_RegisterShader( \"models/map_objects/imp_mine/turret_chair_on\" );"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String(""), String("\t\t\t\t// shadow under the gun"), String("\t\t\t\tCG_ImpactMark( cgs.media.shadowMarkShader, cent->lerpOrigin, temp, "), String("\t\t\t\t\t0, 1,1,1, 1.0f, qfalse, 32, qtrue );"), String("\t\t\t}"), String("\t\t}"), String(""), String("\t\tif ( cent->gent->activator && cent->gent->activator->owner && "), String("\t\t\t\tcent->gent->activator->s.eFlags & EF_LOCKED_TO_WEAPON && "), String("\t\t\t\tcent->gent->activator->owner->s.number == cent->currentState.number ) // gun number must be same as current entities number"), String("\t\t{"), String("\t\t\tcentity_t *cc = &cg_entities[cent->gent->activator->s.number];"), String(""), String("const weaponData_t  *wData = NULL;"), String(""), String("\t\t\tif ( cc->currentState.weapon )"), String("\t\t\t{"), String("\t\t\t\twData = &weaponData[cc->currentState.weapon];"), String("\t\t\t}"), String(""), String("\t\t\tif ( !( cc->currentState.eFlags & EF_FIRING ) && !( cc->currentState.eFlags & EF_ALT_FIRING ))"), String("\t\t\t{"), String("\t\t\t\t// not animating..pausing was leaving the barrels in a bad state"), String("\t\t\t\tgi.G2API_PauseBoneAnim( &cent->gent->ghoul2[cent->gent->playerModel], \"model_root\", cg.time );"), String(""), String("//\t\t\t\tgi.G2API_SetBoneAnimIndex( &cent->gent->ghoul2[cent->gent->playerModel], cent->gent->rootBone, "), String("//\t\t\t\t\t\t0, 0, BONE_ANIM_OVERRIDE, 1.0f, cg.time );"), String("\t\t\t}"), String(""), String("\t\t\t// get alternating muzzle end bolts"), String("\t\t\tint\t\t\tbolt = cent->gent->handRBolt;"), String("\t\t\tmdxaBone_t\tboltMatrix;"), String(""), String("\t\t\tif ( !cc->gent->fxID || bolt == -1 )"), String("\t\t\t{"), String("\t\t\t\tbolt = cent->gent->handLBolt;"), String("\t\t\t}"), String(""), String("\t\t\tif ( bolt == -1 )"), String("\t\t\t{"), String("\t\t\t\tbolt = 0;"), String("\t\t\t}"), String("\t\t\tgi.G2API_GetBoltMatrix( cent->gent->ghoul2, 0, bolt, "), String("\t\t\t\t&boltMatrix, cent->lerpAngles, cent->lerpOrigin, cg.time,"), String("\t\t\t\tcgs.model_draw, cent->currentState.modelScale );"), String(""), String("\t\t\t// store the muzzle point and direction so that we can fire in the right direction"), String("\t\t\tgi.G2API_GiveMeVectorFromMatrix( boltMatrix, ORIGIN, cc->gent->client->renderInfo.muzzlePoint );"), String("\t\t\tif ( cent->gent->bounceCount )"), String("\t\t\t{//EWeb - *sigh* the muzzle tag on this is not aligned like th eone on the emplaced gun... consistency anyone...?"), String("\t\t\t\tgi.G2API_GiveMeVectorFromMatrix( boltMatrix, NEGATIVE_X, cc->gent->client->renderInfo.muzzleDir );"), String("\t\t\t}"), String("\t\t\telse"), String("\t\t\t{//Emplaced gun"), String("\t\t\t\tgi.G2API_GiveMeVectorFromMatrix( boltMatrix, POSITIVE_Y, cc->gent->client->renderInfo.muzzleDir );"), String("\t\t\t}"), String("\t\t\tcc->gent->client->renderInfo.mPCalcTime = cg.time;"), String(""), String("\t\t\t// HACK: adding in muzzle flashes"), String("\t\t\tif ( cc->muzzleFlashTime > 0 && wData )"), String("\t\t\t{"), String("\t\t\t\tconst char *effect = NULL;"), String("\t\t\t\tcc->muzzleFlashTime = 0;"), String(""), String("\t\t\t\t// Try and get a default muzzle so we have one to fall back on"), String("\t\t\t\tif ( wData->mMuzzleEffect[0] )"), String("\t\t\t\t{"), String("\t\t\t\t\teffect = &wData->mMuzzleEffect[0];"), String("\t\t\t\t}"), String(""), String("\t\t\t\tif ( cc->currentState.eFlags & EF_ALT_FIRING )"), String("\t\t\t\t{"), String("\t\t\t\t\t// We\'re alt-firing, so see if we need to override with a custom alt-fire effect"), String("\t\t\t\t\tif ( wData->mAltMuzzleEffect[0] )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\teffect = &wData->mAltMuzzleEffect[0];"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String(""), String("\t\t\t\tif ( cc->currentState.eFlags & EF_FIRING || cc->currentState.eFlags & EF_ALT_FIRING )"), String("\t\t\t\t{"), String("\t\t\t\t\tif ( cent->gent->bounceCount )"), String("\t\t\t\t\t{//EWeb"), String("\t\t\t\t\t\tgi.G2API_SetBoneAnimIndex( &cent->gent->ghoul2[cent->gent->playerModel], cent->gent->rootBone, "), String("\t\t\t\t\t\t\t2, 4, BONE_ANIM_OVERRIDE_FREEZE, 0.6f, cg.time, -1, -1 );"), String("\t\t\t\t\t}"), String("\t\t\t\t\telse"), String("\t\t\t\t\t{//Emplaced Gun"), String("\t\t\t\t\t\tgi.G2API_SetBoneAnimIndex( &cent->gent->ghoul2[cent->gent->playerModel], cent->gent->rootBone, "), String("\t\t\t\t\t\t\t0, 3, BONE_ANIM_OVERRIDE_FREEZE, 0.6f, cg.time, -1, -1 );"), String("\t\t\t\t\t}"), String("\t\t"), String("\t\t\t\t\tif ( effect )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\t// We got an effect and we\'re firing, so let \'er rip."), String("\t\t\t\t\t\ttheFxScheduler.PlayEffect( effect, cc->gent->client->renderInfo.muzzlePoint, "), String("\t\t\t\t\t\t\t\t\t\t\t\t\tcc->gent->client->renderInfo.muzzleDir );"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String("\t\t\t}"), String(""), String("\t\t\tVectorCopy( cent->gent->s.apos.trBase, cent->lerpAngles );"), String("\t\t}"), String("\t\t//-------------------------------------------------------"), String("\t\t// End of chair"), String("\t\t//-------------------------------------------------------"), String(""), String("\t\tAnglesToAxis( cent->lerpAngles, ent.axis );"), String("\t}"), String(""), String("\t//copy modelscale, if any"), String("\tVectorCopy( cent->currentState.modelScale, ent.modelScale );"), String("\t//apply modelscale, if any"), String("\tScaleModelAxis(&ent);"), String(""), String("\tif (cent->gent->ghoul2.size())"), String("\t{"), String("\t\t//FIXME: use a flag for this, not a strcmp"), String("\t\tif ( cent->gent->classname && Q_stricmp( \"limb\", cent->gent->classname ) == 0 )"), String("\t\t{//limb, copy RGB"), String("\t\t\tent.shaderRGBA[0] = cent->gent->startRGBA[0];"), String("\t\t\tent.shaderRGBA[1] = cent->gent->startRGBA[1];"), String("\t\t\tent.shaderRGBA[2] = cent->gent->startRGBA[2];"), String("\t\t}"), String("\t\tif ( s1->weapon == WP_SABER && cent->gent && cent->gent->owner && cent->gent->owner->inuse )"), String("\t\t{//flying lightsaber"), String("\t\t\t//FIXME: better way to tell what it is would be nice"), String("\t\t\tif ( cent->gent->classname && !Q_stricmp( \"limb\", cent->gent->classname ) )"), String("\t\t\t{//limb, just add blade"), String("\t\t\t\tif ( cent->gent->owner->client )"), String("\t\t\t\t{"), String("\t\t\t\t\tif ( cent->gent->owner->client->ps.saber[0].Length() > 0 )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tCG_AddSaberBlade( &cg_entities[cent->gent->owner->s.number], "), String("\t\t\t\t\t\t\t&cg_entities[cent->gent->s.number], NULL, ent.renderfx, "), String("\t\t\t\t\t\t\tcent->gent->weaponModel[0], cent->lerpOrigin, cent->lerpAngles );"), String("\t\t\t\t\t}"), String("\t\t\t\t\telse if ( cent->gent->owner->client->ps.saberEventFlags & SEF_INWATER )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tCG_CheckSaberInWater( &cg_entities[cent->gent->owner->s.number], "), String("\t\t\t\t\t\t\t&cg_entities[cent->gent->s.number], 0, cent->gent->weaponModel[0], "), String("\t\t\t\t\t\t\tcent->lerpOrigin, cent->lerpAngles );"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String("\t\t\t}"), String("\t\t\telse"), String("\t\t\t{//thrown saber"), String("\t\t\t\t//light?  sound?"), String("\t\t\t\tif ( cent->gent->owner->client && g_entities[cent->currentState.otherEntityNum].client && g_entities[cent->currentState.otherEntityNum].client->ps.saber[0].Active() )"), String("\t\t\t\t{//saber is in-flight and active, play a sound on it"), String("\t\t\t\t\tif ( cent->gent->owner->client->ps.saberEntityState == SES_RETURNING "), String("\t\t\t\t\t\t&& cent->gent->owner->client->ps.saber[0].type != SABER_STAR )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, "), String("\t\t\t\t\t\t\tcent->lerpOrigin, vec3_origin, "), String("\t\t\t\t\t\t\tcgs.sound_precache[g_entities[cent->currentState.clientNum].client->ps.saber[0].soundLoop] );"), String("\t\t\t\t\t}"), String("\t\t\t\t\telse"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tint spinSound;"), String("\t\t\t\t\t\tif ( cent->gent->owner->client->ps.saber[0].spinSound "), String("\t\t\t\t\t\t\t&& cgs.sound_precache[cent->gent->owner->client->ps.saber[0].spinSound] )"), String("\t\t\t\t\t\t{"), String("\t\t\t\t\t\t\tspinSound = cgs.sound_precache[cent->gent->owner->client->ps.saber[0].spinSound];"), String("\t\t\t\t\t\t}"), String("\t\t\t\t\t\telse if ( cent->gent->owner->client->ps.saber[0].type == SABER_SITH_SWORD )"), String("\t\t\t\t\t\t{"), String("\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspinoff.wav\" );"), String("\t\t\t\t\t\t}"), String("\t\t\t\t\t\telse"), String("\t\t\t\t\t\t{"), String("\t\t\t\t\t\t\tswitch ( cent->gent->owner->client->ps.forcePowerLevel[FP_SABERTHROW] )"), String("\t\t\t\t\t\t\t{"), String("\t\t\t\t\t\t\tcase FORCE_LEVEL_1:"), String("\t\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin3.wav\" );"), String("\t\t\t\t\t\t\t\tbreak;"), String("\t\t\t\t\t\t\tcase FORCE_LEVEL_2:"), String("\t\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin2.wav\" );"), String("\t\t\t\t\t\t\t\tbreak;"), String("\t\t\t\t\t\t\tdefault:"), String("\t\t\t\t\t\t\tcase FORCE_LEVEL_3:"), String("\t\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin1.wav\" );"), String("\t\t\t\t\t\t\t\tbreak;"), String("\t\t\t\t\t\t\t}"), String("\t\t\t\t\t\t}"), String("\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, "), String("\t\t\t\t\t\t\tvec3_origin, spinSound );"), String("\t\t\t\t\t\t/*"), String("\t\t\t\t\t\tif ( cg_weapons[WP_SABER].missileSound )"), String("\t\t\t\t\t\t{"), String("\t\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, cg_weapons[WP_SABER].missileSound );"), String("\t\t\t\t\t\t}"), String("\t\t\t\t\t\t*/"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String("\t\t\t\tif ( cent->gent->owner->client )"), String("\t\t\t\t{"), String("\t\t\t\t\tif ( cent->gent->owner->client->ps.saber[0].Length() > 0 )"), String("\t\t\t\t\t{//only add the blade if it\'s on"), String("\t\t\t\t\t\tCG_AddSaberBlade( &cg_entities[cent->gent->owner->s.number], "), String("\t\t\t\t\t\t\t&cg_entities[cent->gent->s.number], NULL, ent.renderfx, "), String("\t\t\t\t\t\t\t0, cent->lerpOrigin, cent->lerpAngles );"), String("\t\t\t\t\t}"), String("\t\t\t\t\telse if ( cent->gent->owner->client->ps.saberEventFlags & SEF_INWATER )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tCG_CheckSaberInWater( &cg_entities[cent->gent->owner->s.number], "), String("\t\t\t\t\t\t\t&cg_entities[cent->gent->s.number], 0, 0, cent->lerpOrigin, "), String("\t\t\t\t\t\t\tcent->lerpAngles );"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String("\t\t\t\tif ( cent->gent->owner->health )"), String("\t\t\t\t{"), String("\t\t\t\t\t//make sure we can always be seen"), String("\t\t\t\t\tent.renderfx |= RF_PULSATE;"), String("\t\t\t\t}"), String("\t\t\t}"), String("\t\t}"), String("\t}"), String("\telse"), String("\t{"), String("\t\tif ( s1->weapon == WP_SABER && cent->gent && cent->gent->owner )"), String("\t\t{//flying lightsaber"), String("\t\t\t//light?  sound?"), String("\t\t\tif ( cent->gent->owner->client && cent->currentState.saberActive )"), String("\t\t\t{//saber is in-flight and active, play a sound on it"), String("\t\t\t\tif ( cent->gent->owner->client->ps.saberEntityState == SES_RETURNING "), String("\t\t\t\t\t&& cent->gent->owner->client->ps.saber[0].type != SABER_STAR )"), String("\t\t\t\t{"), String("\t\t\t\t\tif ( cg_weapons[WP_SABER].firingSound )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, "), String("\t\t\t\t\t\t\tcent->lerpOrigin, vec3_origin, cg_weapons[WP_SABER].firingSound );"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String("\t\t\t\telse"), String("\t\t\t\t{"), String("\t\t\t\t\tint spinSound;"), String("\t\t\t\t\tif ( cent->gent->owner->client->ps.saber[0].spinSound "), String("\t\t\t\t\t\t&& cgs.sound_precache[cent->gent->owner->client->ps.saber[0].spinSound] )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tspinSound = cgs.sound_precache[cent->gent->owner->client->ps.saber[0].spinSound];"), String("\t\t\t\t\t}"), String("\t\t\t\t\telse if ( cent->gent->owner->client->ps.saber[0].type == SABER_SITH_SWORD )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspinoff.wav\" );"), String("\t\t\t\t\t}"), String("\t\t\t\t\telse"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tswitch ( cent->gent->owner->client->ps.forcePowerLevel[FP_SABERTHROW] )"), String("\t\t\t\t\t\t{"), String("\t\t\t\t\t\tcase FORCE_LEVEL_1:"), String("\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin3.wav\" );"), String("\t\t\t\t\t\t\tbreak;"), String("\t\t\t\t\t\tcase FORCE_LEVEL_2:"), String("\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin2.wav\" );"), String("\t\t\t\t\t\t\tbreak;"), String("\t\t\t\t\t\tdefault:"), String("\t\t\t\t\t\tcase FORCE_LEVEL_3:"), String("\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin1.wav\" );"), String("\t\t\t\t\t\t\tbreak;"), String("\t\t\t\t\t\t}"), String("\t\t\t\t\t}"), String("\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, "), String("\t\t\t\t\t\tvec3_origin, spinSound );"), String("\t\t\t\t\t/*"), String("\t\t\t\t\tif ( cg_weapons[WP_SABER].missileSound )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, cg_weapons[WP_SABER].missileSound );"), String("\t\t\t\t\t}"), String("\t\t\t\t\t*/"), String("\t\t\t\t}"), String("\t\t\t}"), String("\t\t\tCG_AddSaberBlade( &cg_entities[cent->gent->owner->s.number], "), String("\t\t\t\tNULL, &ent, ent.renderfx, 0, NULL, NULL );"), String(""), String("\t\t\tif ( cent->gent->owner->health )"), String("\t\t\t{"), String("\t\t\t\t//make sure we can always be seen"), String("\t\t\t\tent.renderfx |= RF_PULSATE;"), String("\t\t\t}"), String("\t\t}"), String("\t}"), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("\tif ( cent->gent && cent->gent->forcePushTime > cg.time )"), String("\t{//FIXME: if I\'m a rather large model, this will look kind of stupid..."), String("\t\tCG_ForcePushBlur( cent->lerpOrigin );"), String("\t}"), String("\tCG_AddRefEntWithTransportEffect( cent, &ent );"), String(""), String("\tif ( cent->gent->health <= 0 "), String("\t\t&& cent->gent->s.weapon == WP_EMPLACED_GUN "), String("\t\t&& cent->gent->e_ThinkFunc )"), String("\t{"), String("\t\t// make the gun pulse red to warn about it exploding"), String("\t\tfloat val = (1.0f - (float)(cent->gent->nextthink - cg.time) / 3200.0f ) * 0.3f;"), String(""), String("\t\tent.customShader = cgi_R_RegisterShader( \"gfx/effects/solidWhite\" );"), String("\t\tent.shaderRGBA[0] = (sin( cg.time * 0.04f ) * val * 0.4f + val) * 255;"), String("\t\tent.shaderRGBA[1] = ent.shaderRGBA[2] = 0;"), String("\t\tent.renderfx |= RF_RGB_TINT;"), String("\t\tcgi_R_AddRefEntityToScene( &ent );"), String("\t}"), String(""), String("\t//--------------------------"), String("\tif ( s1->eFlags & EF_FIRING && cent->gent->inuse )"), String("\t{"), String("\t\t//special code for adding the beam to the attached tripwire mine"), String("\t\tvec3_t\t\t\tbeamOrg;"), String("\t\tint\t\t\t\thandle = 0;"), String("\t\tSEffectTemplate\t*temp;"), String(""), String("\t\tVectorMA( ent.origin, 6.6f, ent.axis[0], beamOrg );// forward"), String(""), String("\t\t// overriding the effect, so give us a copy first"), String("\t\ttemp = theFxScheduler.GetEffectCopy( \"tripMine/laser\", &handle );\t"), String(""), String("\t\tif ( temp )"), String("\t\t{"), String("\t\t\t// have a copy, so get the line element out of there"), String("\t\t\tCPrimitiveTemplate *prim = theFxScheduler.GetPrimitiveCopy( temp, \"line1\" );"), String(""), String("\t\t\tif ( prim )"), String("\t\t\t{"), String("\t\t\t\t// we have the primitive, so modify the endpoint"), String("\t\t\t\tprim->mOrigin2X.SetRange( cent->gent->pos4[0], cent->gent->pos4[0] );"), String("\t\t\t\tprim->mOrigin2Y.SetRange( cent->gent->pos4[1], cent->gent->pos4[1] );"), String("\t\t\t\tprim->mOrigin2Z.SetRange( cent->gent->pos4[2], cent->gent->pos4[2] );"), String(""), String("\t\t\t\t// have a copy, so get the line element out of there"), String("\t\t\t\tCPrimitiveTemplate *prim = theFxScheduler.GetPrimitiveCopy( temp, \"line2\" );"), String(""), String("\t\t\t\tif ( prim )"), String("\t\t\t\t{"), String("\t\t\t\t\t// we have the primitive, so modify the cent->gent->pos3point"), String("\t\t\t\t\tprim->mOrigin2X.SetRange( cent->gent->pos4[0], cent->gent->pos4[0] );"), String("\t\t\t\t\tprim->mOrigin2Y.SetRange( cent->gent->pos4[1], cent->gent->pos4[1] );"), String("\t\t\t\t\tprim->mOrigin2Z.SetRange( cent->gent->pos4[2], cent->gent->pos4[2] );"), String(""), String("\t\t\t\t\t// play the modified effect"), String("\t\t\t\t\ttheFxScheduler.PlayEffect( handle, beamOrg, ent.axis[0] );"), String("\t\t\t\t}"), String("\t\t\t}"), String("\t\t}"), String(""), String("\t\ttheFxScheduler.PlayEffect( \"tripMine/laserImpactGlow\", cent->gent->pos4, ent.axis[0] );"), String("\t}"), String(""), String(""), String("\tif ( s1->eFlags & EF_PROX_TRIP )"), String("\t{"), String("\t\t//special code for adding the glow end to proximity tripmine"), String("\t\tvec3_t\tbeamOrg;"), String(""), String("\t\tVectorMA( ent.origin, 6.6f, ent.axis[0], beamOrg );// forward"), String("\t\ttheFxScheduler.PlayEffect( \"tripMine/glowBit\", beamOrg, ent.axis[0] );"), String("\t}"), String(""), String("\tif ( s1->eFlags & EF_ALT_FIRING )"), String("\t{"), String("\t\t// hack for the spotlight"), String("\t\tvec3_t\torg, axis[3], dir;"), String(""), String("\t\tAngleVectors( cent->lerpAngles, dir, NULL, NULL );"), String(""), String("\t\tCG_GetTagWorldPosition( &ent, \"tag_flash\", org, axis );"), String(""), String("\t\ttheFxScheduler.PlayEffect( \"env/light_cone\", org, axis[0] );"), String(""), String("\t\tVectorMA( cent->lerpOrigin, cent->gent->radius - 5, dir, org ); // stay a bit back from the impact point...this may not be enough?"), String(""), String("\t\tcgi_R_AddLightToScene( org, 225, 1.0f, 1.0f, 1.0f );"), String("\t}"), String(""), String("\t//-----------------------------------------------------------"), String("\tif ( cent->gent->flags & (FL_DMG_BY_HEAVY_WEAP_ONLY | FL_SHIELDED ))"), String("\t{"), String("\t\t// Dumb assumption, but I guess we must be a shielded ion_cannon??  We should probably verify"), String("\t\t// if it\'s an ion_cannon that\'s Heavy Weapon only, we don\'t want to make it shielded do we...?"), String("\t\tif ( (!strcmp( \"misc_ion_cannon\", cent->gent->classname )) && (cent->gent->flags & FL_SHIELDED ))"), String("\t\t{"), String("\t\t\t// must be doing \"pain\"....er, impact"), String("\t\t\tif ( cent->gent->painDebounceTime > cg.time )"), String("\t\t\t{"), String("\t\t\t\tfloat t = (float)(cent->gent->painDebounceTime - cg.time ) / 1000.0f;"), String(""), String("\t\t\t\t// Only display when we have damage"), String("\t\t\t\tif ( t >= 0.0f && t <= 1.0f ) "), String("\t\t\t\t{"), String("\t\t\t\t\tt *= randomLava();"), String(""), String("\t\t\t\t\tent.shaderRGBA[0] = ent.shaderRGBA[1] = ent.shaderRGBA[2] = 255.0f * t;"), String("\t\t\t\t\tent.shaderRGBA[3] = 255;"), String("\t\t\t\t\tent.renderfx &= ~RF_ALPHA_FADE;"), String("\t\t\t\t\tent.renderfx |= RF_RGB_TINT;"), String("\t\t\t\t\tent.customShader = cgi_R_RegisterShader( \"gfx/misc/ion_shield\" );"), String("\t\t\t\t"), String("\t\t\t\t\tcgi_R_AddRefEntityToScene( &ent );"), String("\t\t\t\t}"), String("\t\t\t}"), String("\t\t}"), String("\t}"), String(""), String("\t//draw force sight shell around it, too"), String("\tif ((cg.snap->ps.forcePowersActive & (1 << FP_SEE)) "), String("\t\t&& cg.snap->ps.clientNum != cent->currentState.number "), String("\t\t&& CG_PlayerCanSeeCent( cent ) )"), String("\t{//so player can see dark missiles/explosives"), String("\t\tif ( s1->weapon == WP_THERMAL"), String("\t\t\t|| s1->weapon == WP_DET_PACK"), String("\t\t\t|| s1->weapon == WP_TRIP_MINE"), String("\t\t\t|| (cent->gent&&cent->gent->e_UseFunc==useF_ammo_power_converter_use)"), String("\t\t\t|| (cent->gent&&cent->gent->e_UseFunc==useF_shield_power_converter_use)"), String("\t\t\t|| (s1->eFlags&EF_FORCE_VISIBLE) )"), String("\t\t{//really, we only need to do this for things like thermals, detpacks and tripmines, no?"), String("\t\t\tCG_AddForceSightShell( &ent, cent );"), String("\t\t}"), String("\t}"), String("}"), String(""), String("/*"), String("=================="), String("CG_Speaker"), String(""), String("Speaker entities can automatically play sounds"), String("=================="), String("*/"), String("static void CG_Speaker( centity_t *cent ) {"), String("\tif ( ! cent->currentState.clientNum ) {\t// FIXME: use something other than clientNum..."), String("\t\treturn;\t\t// not auto triggering"), String("\t}"), String(""), String("\tif ( cg.time < cent->miscTime ) {"), String("\t\treturn;"), String("\t}"), String(""), String("\tcgi_S_StartSound (NULL, cent->currentState.number, CHAN_ITEM, cgs.sound_precache[cent->currentState.eventParm] );"), String(""), String("\t//\tent->s.frame = ent->wait * 10;"), String("\t//\tent->s.clientNum = ent->random * 10;"), String("\tcent->miscTime = (int)(cg.time + cent->currentState.frame * 100 + cent->currentState.clientNum * 100 * crandom());"), String("}"), String(""), String("/*"), String("=================="), String("CG_Item"), String("=================="), String("*/"), String("static void CG_Item( centity_t *cent ) "), String("{"), String("\trefEntity_t\t\t\tent;"), String("\tentityState_t\t\t*es;"), String("\tgitem_t\t\t\t\t*item;"), String("//\tint\t\t\t\t\tmsec;"), String("//\tfloat\t\t\t\tfrac;"), String("\tfloat\t\t\t\tscale;"), String(""), String("\tes = &cent->currentState;"), String("\tif ( es->modelindex >= bg_numItems ) "), String("\t{"), String("\t\tCG_Error( \"Bad item index %i on entity\", es->modelindex );"), String("\t}"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String(""), String("\t// if set to invisible, skip"), String("\tif ( (!es->modelindex && !cent->gent->ghoul2.IsValid() ) || ( es->eFlags & EF_NODRAW ) ) "), String("\t{"), String("\t\treturn;"), String("\t}"), String("/*"), String("Ghoul2 Insert End"), String("*/"), String("\tif ( cent->gent && !cent->gent->inuse )"), String("\t{"), String("\t\t// Yeah, I know....items were being freed on touch, but it could still get here and draw incorrectly..."), String("\t\treturn;"), String("\t}"), String(""), String("\titem = &bg_itemlist[ es->modelindex ];"), String(""), String("\tif ( cg_simpleItems.integer ) "), String("\t{"), String("\t\tmemset( &ent, 0, sizeof( ent ) );"), String("\t\tent.reType = RT_SPRITE;"), String("\t\tVectorCopy( cent->lerpOrigin, ent.origin );"), String("\t\tent.radius = 14;"), String("\t\tent.customShader = cg_items[es->modelindex].icon;"), String("\t\tent.shaderRGBA[0] = 255;"), String("\t\tent.shaderRGBA[1] = 255;"), String("\t\tent.shaderRGBA[2] = 255;"), String("\t\tent.shaderRGBA[3] = 255;"), String("\t\tcgi_R_AddRefEntityToScene(&ent);"), String("\t\treturn;"), String("\t}"), String(""), String("\tmemset (&ent, 0, sizeof(ent));"), String(""), String("\t// items bob up and down continuously"), String("\tif( item->giType == IT_HOLOCRON )"), String("\t{"), String("\t\tscale = 0.005f + cent->currentState.number * 0.00001f;"), String("\t\tcent->lerpOrigin[2] += (float)(4 + cos( ( cg.time + 1000 ) *  scale ) * 3)+8; // just raised them up a bit"), String("\t}"), String(""), String(""), String(""), String("\t// autorotate at one of two speeds"), String("//\tif ( item->giType == IT_HEALTH ) {"), String("//\t\tVectorCopy( cg.autoAnglesFast, cent->lerpAngles );"), String("//\t\tAxisCopy( cg.autoAxisFast, ent.axis );"), String("//\t} else {"), String("\tif( item->giType == IT_HOLOCRON )"), String("\t{"), String("\t\tVectorCopy( cg.autoAngles, cent->lerpAngles );"), String("\t\tAxisCopy( cg.autoAxis, ent.axis );"), String("\t}"), String(""), String(""), String("\t// the weapons have their origin where they attatch to player"), String("\t// models, so we need to offset them or they will rotate"), String("\t// eccentricly"), String("//\tif ( item->giType == IT_WEAPON ) {"), String("//\t\tweaponInfo_t\t*wi;"), String("//"), String("//\t\twi = &cg_weapons[item->giTag];"), String("//\t\tcent->lerpOrigin[0] -= "), String("//\t\t\twi->weaponMidpoint[0] * ent.axis[0][0] +"), String("//\t\t\twi->weaponMidpoint[1] * ent.axis[1][0] +"), String("//\t\t\twi->weaponMidpoint[2] * ent.axis[2][0];"), String("//\t\tcent->lerpOrigin[1] -= "), String("//\t\t\twi->weaponMidpoint[0] * ent.axis[0][1] +"), String("//\t\t\twi->weaponMidpoint[1] * ent.axis[1][1] +"), String("//\t\t\twi->weaponMidpoint[2] * ent.axis[2][1];"), String("//\t\tcent->lerpOrigin[2] -= "), String("//\t\t\twi->weaponMidpoint[0] * ent.axis[0][2] +"), String("//\t\t\twi->weaponMidpoint[1] * ent.axis[1][2] +"), String("//\t\t\twi->weaponMidpoint[2] * ent.axis[2][2];"), String(""), String("//\t\tcent->lerpOrigin[2] += 8;\t// an extra height boost"), String("//\t}"), String("\tvec3_t spinAngles;"), String(""), String("\t//AxisClear( ent.axis );"), String("\tVectorCopy( cent->gent->s.angles, spinAngles );"), String(""), String("\tif ( cent->gent->ghoul2.IsValid()"), String("\t\t&& cent->gent->ghoul2.size() )"), String("\t{//since modelindex is used by items as an index into items(not models), we need to ignore the hModel here to force it to use the ghoul2 model if we have one"), String("\t\tent.hModel = cgs.model_draw[0];"), String("\t}"), String("\telse"), String("\t{"), String("\t\tent.hModel = cg_items[es->modelindex].models;"), String("\t}"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("\tCG_SetGhoul2Info(&ent, cent);  "), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("\tVectorCopy( cent->lerpOrigin, ent.origin);"), String("\tVectorCopy( cent->lerpOrigin, ent.oldorigin);"), String(""), String("\tent.nonNormalizedAxes = qfalse;"), String(""), String("\t// lovely...this is for weapons that should be oriented vertically.  For weapons lockers and such."), String("\tif ( cent->gent->spawnflags & 16 )"), String("\t{\t//VectorClear( spinAngles );"), String("\t\tif ( item->giType == IT_WEAPON "), String("\t\t\t&& item->giTag == WP_SABER )"), String("\t\t{"), String("\t\t\tif ( cent->gent->random )"), String("\t\t\t{//pitch specified"), String("\t\t\t\tspinAngles[PITCH] += cent->gent->random;"), String("\t\t\t}"), String("\t\t\telse"), String("\t\t\t{"), String("\t\t\t\tspinAngles[PITCH] -= 20;"), String("\t\t\t}"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("\t\t\tspinAngles[PITCH] -= 75;"), String("\t\t}"), String("\t}"), String("\t"), String("\tif( item->giType != IT_HOLOCRON )"), String("\t{"), String("\t\tAnglesToAxis( spinAngles, ent.axis );"), String("\t}"), String(""), String("\t// items without glow textures need to keep a minimum light value"), String("\t// so they are always visible"), String("/*\tif (( item->giType == IT_WEAPON ) || ( item->giType == IT_ARMOR )) "), String("\t{"), String("\t\tent.renderfx |= RF_MINLIGHT;"), String("\t}"), String("*/"), String("\t// increase the size of the weapons when they are presented as items"), String("//\tif ( item->giType == IT_WEAPON ) {"), String("//\t\tVectorScale( ent.axis[0], 1.5f, ent.axis[0] );"), String("//\t\tVectorScale( ent.axis[1], 1.5f, ent.axis[1] );"), String("//\t\tVectorScale( ent.axis[2], 1.5f, ent.axis[2] );"), String("//\t\tent.nonNormalizedAxes = qtrue;"), String("//\t}"), String(""), String("\t// add to refresh list"), String("\tcgi_R_AddRefEntityToScene(&ent);"), String(""), String("\tif ((cg.snap->ps.forcePowersActive & (1 << FP_SEE)) "), String("\t\t&& cg.snap->ps.clientNum != cent->currentState.number "), String("\t\t&& CG_PlayerCanSeeCent( cent ) )"), String("\t{"), String("\t\tCG_AddForceSightShell( &ent, cent );"), String("\t}"), String(""), String("\tif ( item->giType == IT_WEAPON "), String("\t\t&& item->giTag == WP_SABER "), String("\t\t&& (!cent->gent || !(cent->gent->spawnflags&64/*ITMSF_NOGLOW*/)) )"), String("\t{"), String("\t\t// saber pickup item needs to be more visible"), String("\t\tfloat\twv;"), String("\t\tvec3_t\torg;"), String(""), String("\t\tent.customShader = cgi_R_RegisterShader( \"gfx/effects/solidWhite_cull\" );"), String("\t\tent.renderfx = RF_RGB_TINT;"), String("\t\twv = sin( cg.time * 0.002f ) * 0.08f + 0.2f;"), String("\t\tent.shaderRGBA[0] = ent.shaderRGBA[1] = wv * 255;"), String("\t\tent.shaderRGBA[2] = 0;"), String("\t\tcgi_R_AddRefEntityToScene(&ent);"), String(""), String("\t\tfor ( int i = -4; i < 10; i += 1 )"), String("\t\t{"), String("\t\t\tVectorMA( ent.origin, -i, ent.axis[2], org );"), String(""), String("\t\t\tFX_AddSprite( org, NULL, NULL, 10.0f, 10.0f, wv * 0.5f, wv * 0.5f, 0.0f, 0.0f, 1.0f, cgs.media.yellowDroppedSaberShader, 0x08000000 );"), String("\t\t}"), String(""), String("\t\t// THIS light looks crappy...maybe it should just be removed..."), String("\t\tcgi_R_AddLightToScene( ent.origin, wv * 350 + 180, 1.0f, 1.0f, 0.0f );"), String("\t}"), String("}"), String(""), String("//============================================================================"), String(""), String("/*"), String("==============="), String("CG_Missile"), String("==============="), String("*/"), String("static void CG_Missile( centity_t *cent ) {"), String("\trefEntity_t\t\t\tent;"), String("\tentityState_t\t\t*s1;"), String("\tconst weaponInfo_t\t*weapon;"), String("\tconst weaponData_t  *wData;"), String(""), String("\tif ( !cent->gent->inuse )"), String("\t\treturn;"), String(""), String("\ts1 = &cent->currentState;"), String("\tif ( s1->weapon >= WP_NUM_WEAPONS ) {"), String("\t\ts1->weapon = 0;"), String("\t}"), String("\tweapon = &cg_weapons[s1->weapon];"), String("\twData = &weaponData[s1->weapon];"), String(""), String("\tif ( s1->pos.trType != TR_INTERPOLATE )"), String("\t{"), String("\t\t// calculate the axis"), String("\t\tVectorCopy( s1->angles, cent->lerpAngles );"), String("\t}"), String(""), String("\tif ( cent->gent->alt_fire )"), String("\t{"), String("\t\t// add trails"), String("\t\tif ( weapon->alt_missileTrailFunc )  "), String("\t\t\tweapon->alt_missileTrailFunc( cent, weapon );"), String(""), String("\t\t// add dynamic light"), String("\t\tif ( wData->alt_missileDlight )"), String("\t\t\t\tcgi_R_AddLightToScene(cent->lerpOrigin, wData->alt_missileDlight, "), String("\t\t\t\t\twData->alt_missileDlightColor[0], wData->alt_missileDlightColor[1], wData->alt_missileDlightColor[2] );"), String(""), String("\t\t// add missile sound"), String("\t\tif ( weapon->alt_missileSound )"), String("\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->alt_missileSound );"), String(""), String("\t\t//Don\'t draw something without a model"), String("\t\tif ( weapon->alt_missileModel == NULL )"), String("\t\t\treturn;"), String("\t}"), String("\telse"), String("\t{"), String("\t\t// add trails"), String("\t\tif ( weapon->missileTrailFunc )  "), String("\t\t\tweapon->missileTrailFunc( cent, weapon );"), String(""), String("\t\t// add dynamic light"), String("\t\tif ( wData->missileDlight )"), String("\t\t\tcgi_R_AddLightToScene(cent->lerpOrigin, wData->missileDlight, "), String("\t\t\t\twData->missileDlightColor[0], wData->missileDlightColor[1], wData->missileDlightColor[2] );"), String(""), String("\t\t// add missile sound"), String("\t\tif ( weapon->missileSound )"), String("\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->missileSound );"), String(""), String("\t\t//Don\'t draw something without a model"), String("\t\tif ( weapon->missileModel == NULL )"), String("\t\t\treturn;"), String("\t}"), String(""), String("\t// create the render entity"), String("\tmemset (&ent, 0, sizeof(ent));"), String("\tVectorCopy( cent->lerpOrigin, ent.origin);"), String("\tVectorCopy( cent->lerpOrigin, ent.oldorigin);"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("\tCG_SetGhoul2Info(&ent, cent);  "), String(""), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("\t// flicker between two skins"), String("\tent.skinNum = cg.clientFrame & 1;"), String("\tent.renderfx = /*weapon->missileRenderfx | */RF_NOSHADOW;"), String(""), String("\tif ( cent->gent->alt_fire )"), String("\t\tent.hModel = weapon->alt_missileModel;"), String("\telse"), String("\t\tent.hModel = weapon->missileModel;"), String(""), String("\t// spin as it moves"), String("\tif ( s1->apos.trType != TR_INTERPOLATE)"), String("\t{"), String(""), String("\t\t// convert direction of travel into axis"), String("\t\tif ( VectorNormalize2( s1->pos.trDelta, ent.axis[0] ) == 0 ) {"), String("\t\t\tent.axis[0][2] = 1;"), String("\t\t}"), String("\t\tif ( s1->pos.trType != TR_STATIONARY )"), String("\t\t{"), String("\t\t\tif ( s1->eFlags & EF_MISSILE_STICK )"), String("\t\t\t\tRotateAroundDirection( ent.axis, cg.time * 0.5f );//Did this so regular missiles don\'t get broken"), String("\t\t\telse"), String("\t\t\t\tRotateAroundDirection( ent.axis, cg.time * 0.25f );//JFM:FLOAT FIX"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("\t\t\tif ( s1->eFlags & EF_MISSILE_STICK )"), String("\t\t\t\tRotateAroundDirection( ent.axis, (float)s1->pos.trTime * 0.5f );"), String("\t\t\telse"), String("\t\t\t\tRotateAroundDirection( ent.axis, (float)s1->time );"), String("\t\t}"), String("\t}"), String("\telse"), String("\t{"), String("\t\tAnglesToAxis( cent->lerpAngles, ent.axis );"), String("\t}"), String(""), String("\t// add to refresh list, possibly with quad glow"), String("\tCG_AddRefEntityWithPowerups( &ent, s1->powerups, NULL );"), String(""), String("\tif ((cg.snap->ps.forcePowersActive & (1 << FP_SEE)) "), String("\t\t&& cg.snap->ps.clientNum != cent->currentState.number "), String("\t\t&& CG_PlayerCanSeeCent( cent ) )"), String("\t{//so player can see dark missiles/explosives"), String("\t\tif ( s1->weapon == WP_THERMAL"), String("\t\t\t|| s1->weapon == WP_DET_PACK"), String("\t\t\t|| s1->weapon == WP_TRIP_MINE"), String("\t\t\t|| (s1->eFlags&EF_FORCE_VISIBLE) )"), String("\t\t{//really, we only need to do this for things like thermals, detpacks and tripmines, no?"), String("\t\t\tCG_AddForceSightShell( &ent, cent );"), String("\t\t}"), String("\t}"), String("}"), String(""), String("/*"), String("==============="), String("CG_Mover"), String("==============="), String("*/"), String(""), String("#define DOOR_OPENING\t1"), String("#define DOOR_CLOSING\t2"), String("#define DOOR_OPEN\t\t3"), String("#define DOOR_CLOSED\t\t4"), String(""), String("static void CG_Mover( centity_t *cent ) {"), String("\trefEntity_t\t\t\tent;"), String("\tentityState_t\t\t*s1;"), String(""), String("\ts1 = &cent->currentState;"), String(""), String("\t// create the render entity"), String("\tmemset (&ent, 0, sizeof(ent));"), String("\t//FIXME: why are these always 0, 0, 0???!"), String("\tVectorCopy( cent->lerpOrigin, ent.origin);"), String("\tVectorCopy( cent->lerpOrigin, ent.oldorigin);"), String("\tAnglesToAxis( cent->lerpAngles, ent.axis );"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String(""), String("\tCG_SetGhoul2Info(&ent, cent);  "), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("\tent.renderfx = RF_NOSHADOW;"), String(""), String("\t// flicker between two skins (FIXME?)"), String("\tent.skinNum = ( cg.time >> 6 ) & 1;"), String(""), String("\t// get the model, either as a bmodel or a modelindex"), String("\tif ( s1->solid == SOLID_BMODEL ) {"), String("\t\tent.hModel = cgs.inlineDrawModel[s1->modelindex];"), String("\t} else {"), String("\t\tent.hModel = cgs.model_draw[s1->modelindex];"), String("\t}"), String(""), String("\t// If there isn\'t an hModel for this mover, an RGB axis model will get drawn."), String("\tif ( !ent.hModel )"), String("\t{"), String("\t\treturn;"), String("\t}"), String(""), String("\tif ( cent->currentState.eFlags & EF_DISABLE_SHADER_ANIM )"), String("\t{"), String("\t\t// by setting the shader time to the current time, we can force an animating shader to not animate"), String("\t\tent.shaderTime = cg.time * 0.001f;"), String("\t}"), String(""), String("\t// add the secondary model"), String("\tif ( s1->solid == SOLID_BMODEL && s1->modelindex2 ) "), String("\t{"), String("//\t\tvec3_t\torg;"), String("\t\tif ( !(s1->eFlags & EF_NODRAW) )"), String("\t\t{"), String("\t\t\t// add to refresh list"), String("\t\t\tCG_AddRefEntWithTransportEffect( cent, &ent );"), String("\t\t}"), String(""), String("/*\t\t// Um, this does not interpolate nicely?  Not sure why it was here...."), String("\t\tVectorAdd(cent->gent->absmin, cent->gent->absmax, org);"), String("\t\tVectorScale(org, 0.5, org);"), String("\t\tVectorCopy( org, ent.origin);"), String("\t\tVectorCopy( org, ent.oldorigin);"), String("*/"), String("\t\tif ( !VectorCompare( vec3_origin, cent->gent->modelAngles ) )"), String("\t\t{//we have a rotational offset for the model for this brush"), String("\t\t\tvec3_t modelAngles;"), String("\t\t\tVectorAdd( cent->lerpAngles, cent->gent->modelAngles, modelAngles );"), String("\t\t\tAnglesToAxis( modelAngles, ent.axis );"), String("\t\t}"), String("\t\tent.hModel = cgs.model_draw[s1->modelindex2];"), String("\t}"), String(""), String("\t// I changed it to always do it because nodraw seemed like it should actually do what it says. Be aware that if you change this,"), String("\t//\tthe movers for the shooting gallery on doom_detention will break."), String("\tif ( (s1->eFlags & EF_NODRAW) )"), String("\t{"), String("\t\treturn;"), String("\t}"), String("\t//fall through and render the hModel or..."), String(""), String("\t//We\'re a normal model being moved, animate our model"), String("\tent.skinNum = 0;"), String("\tif ( s1->eFlags & EF_ANIM_ONCE )"), String("\t{//FIXME: needs to anim at once per 100 ms"), String("\t\tent.frame = cent->gent->s.frame;"), String("\t\tent.renderfx|=RF_CAP_FRAMES;"), String("\t}"), String("\telse if ( s1->eFlags & EF_ANIM_ALLFAST )"), String("\t{"), String("\t\tent.frame = (cg.time / 100);"), String("\t\tent.renderfx|=RF_WRAP_FRAMES;"), String("\t}"), String("\telse"), String("\t{"), String("\t\tent.frame = s1->frame;"), String("\t}"), String(""), String("\tif ( s1->eFlags & EF_SHADER_ANIM )"), String("\t{"), String("\t\tent.renderfx|=RF_SETANIMINDEX;"), String("\t\tent.skinNum = s1->frame;"), String("\t\t//ent.shaderTime = cg.time*0.001f - s1->frame/s1->time;//NOTE: s1->time is number of frames"), String("\t}"), String(""), String("\t// add to refresh list"), String("\tCG_AddRefEntWithTransportEffect( cent, &ent );"), String(""), String("\tif ((cg.snap->ps.forcePowersActive & (1 << FP_SEE)) "), String("\t\t&& cg.snap->ps.clientNum != cent->currentState.number "), String("\t\t&& (s1->eFlags&EF_FORCE_VISIBLE) )"), String("\t{//so player can see func_breakables"), String("\t\tCG_AddForceSightShell( &ent, cent );"), String("\t}"), String("}"), String(""), String("/*"), String("==============="), String("CG_Beam"), String(""), String("Also called as an event"), String("==============="), String("*/"), String("void CG_Beam( centity_t *cent, int color ) {"), String("\trefEntity_t\t\t\tent;"), String("\tentityState_t\t\t*s1;"), String(""), String("\ts1 = &cent->currentState;"), String(""), String("\t// create the render entity"), String("\tmemset (&ent, 0, sizeof(ent));"), String("\tVectorCopy( s1->pos.trBase, ent.origin );"), String("\tVectorCopy( s1->origin2, ent.oldorigin );"), String("\tAxisClear( ent.axis );"), String("\tent.reType = RT_BEAM;"), String("\tent.skinNum = color;"), String(""), String("\tent.renderfx = RF_NOSHADOW;"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("\tCG_SetGhoul2Info(&ent, cent);  "), String(""), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("\t// add to refresh list"), String("\tcgi_R_AddRefEntityToScene(&ent);"), String("}"), String(""), String("/*"), String("==============="), String("CG_Cylinder"), String("==============="), String("*/"), String("void CG_Cylinder( vec3_t start, vec3_t end, float radius, vec3_t color ) "), String("{"), String("\tvec3_t\tdir;"), String("\tfloat\tlength;"), String(""), String("\tVectorSubtract( end, start, dir );"), String("\tlength = VectorNormalize( dir );"), String(""), String("/*\tFX_AddCylinder( -1, start, "), String("\t\t\t\t\tdir, "), String("\t\t\t\t\tlength, "), String("\t\t\t\t\t0.0f, "), String("\t\t\t\t\tradius,"), String("\t\t\t\t\t0.0f,"), String("\t\t\t\t\tradius,"), String("\t\t\t\t\t0.0f,"), String("\t\t\t\t\t1.0f,"), String("\t\t\t\t\t1.0f,"), String("\t\t\t\t\tcolor,"), String("\t\t\t\t\tcolor,"), String("\t\t\t\t\t100.0f,"), String("\t\t\t\t\tcgs.media.waterDropShader"), String("\t\t\t\t\t0, -1, -1 );*/"), String("}"), String(""), String("static vec2_t st[] = "), String("{"), String("\t0.0f, 0.0f,"), String("\t1.0f, 0.0f,"), String("\t1.0f, 1.0f,"), String("\t0.0f, 1.0f"), String("};"), String(""), String("void CG_Cube( vec3_t mins, vec3_t maxs, vec3_t color, float alpha ) "), String("{"), String("\tvec3_t\tpoint[4], rot={0,0,0};"), String("\tvec2_t\tst[4];"), String("\tint\t\tvec[3];"), String("\tint\t\taxis, i;"), String(""), String("\tfor ( axis = 0, vec[0] = 0, vec[1] = 1, vec[2] = 2; axis < 3; axis++, vec[0]++, vec[1]++, vec[2]++ )"), String("\t{"), String("\t\tfor ( i = 0; i < 3; i++ )"), String("\t\t{"), String("\t\t\tif ( vec[i] > 2 )"), String("\t\t\t{"), String("\t\t\t\tvec[i] = 0;"), String("\t\t\t}"), String("\t\t}"), String(""), String("\t\tpoint[0][vec[1]] = mins[vec[1]];"), String("\t\tpoint[0][vec[2]] = mins[vec[2]];"), String(""), String("\t\tpoint[1][vec[1]] = mins[vec[1]];"), String("\t\tpoint[1][vec[2]] = maxs[vec[2]];"), String(""), String("\t\tpoint[2][vec[1]] = maxs[vec[1]];"), String("\t\tpoint[2][vec[2]] = maxs[vec[2]];"), String("\t\t"), String("\t\tpoint[3][vec[1]] = maxs[vec[1]];"), String("\t\tpoint[3][vec[2]] = mins[vec[2]];"), String(""), String("\t\t//- face"), String("\t\tpoint[0][vec[0]] = point[1][vec[0]] = point[2][vec[0]] = point[3][vec[0]] = mins[vec[0]];"), String(""), String("\t\tFX_AddPoly( point, st, 4, NULL, NULL, alpha, alpha, 0.0f, "), String("\t\t\t\t\t\tcolor, color, 0.0f, rot, 0.0f, 0.0f, "), String("\t\t\t\t\t\t100, cgs.media.solidWhiteShader, 0 );"), String(""), String("\t\t//+ face"), String("\t\tpoint[0][vec[0]] = point[1][vec[0]] = point[2][vec[0]] = point[3][vec[0]] = maxs[vec[0]];"), String(""), String("\t\tFX_AddPoly( point, st, 4, NULL, NULL, alpha, alpha, 0.0f, "), String("\t\t\t\t\t\tcolor, color, 0.0f, rot, 0.0f, 0.0f, "), String("\t\t\t\t\t\t100, cgs.media.solidWhiteShader, 0 );"), String("\t}"), String("}"), String(""), String("void CG_CubeOutline( vec3_t mins, vec3_t maxs, int time, unsigned int color, float alpha )"), String("{"), String("\tvec3_t\tpoint1, point2, point3, point4;"), String("\tint\t\tvec[3];"), String("\tint\t\taxis, i;"), String(""), String("\tfor ( axis = 0, vec[0] = 0, vec[1] = 1, vec[2] = 2; axis < 3; axis++, vec[0]++, vec[1]++, vec[2]++ )"), String("\t{"), String("\t\tfor ( i = 0; i < 3; i++ )"), String("\t\t{"), String("\t\t\tif ( vec[i] > 2 )"), String("\t\t\t{"), String("\t\t\t\tvec[i] = 0;"), String("\t\t\t}"), String("\t\t}"), String(""), String("\t\tpoint1[vec[1]] = mins[vec[1]];"), String("\t\tpoint1[vec[2]] = mins[vec[2]];"), String(""), String("\t\tpoint2[vec[1]] = mins[vec[1]];"), String("\t\tpoint2[vec[2]] = maxs[vec[2]];"), String(""), String("\t\tpoint3[vec[1]] = maxs[vec[1]];"), String("\t\tpoint3[vec[2]] = maxs[vec[2]];"), String("\t\t"), String("\t\tpoint4[vec[1]] = maxs[vec[1]];"), String("\t\tpoint4[vec[2]] = mins[vec[2]];"), String(""), String("\t\t//- face"), String("\t\tpoint1[vec[0]] = point2[vec[0]] = point3[vec[0]] = point4[vec[0]] = mins[vec[0]];"), String(""), String("\t\tCG_TestLine( point1, point2, time, color, 1 );"), String("\t\tCG_TestLine( point2, point3, time, color, 1 );"), String("\t\tCG_TestLine( point1, point4, time, color, 1 );"), String("\t\tCG_TestLine( point4, point3, time, color, 1 );"), String(""), String("\t\t//+ face"), String("\t\tpoint1[vec[0]] = point2[vec[0]] = point3[vec[0]] = point4[vec[0]] = maxs[vec[0]];"), String(""), String("\t\tCG_TestLine( point1, point2, time, color, 1 );"), String("\t\tCG_TestLine( point2, point3, time, color, 1 );"), String("\t\tCG_TestLine( point1, point4, time, color, 1 );"), String("\t\tCG_TestLine( point4, point1, time, color, 1 );"), String("\t}"), String("}"), String(""), String("void CG_Line( vec3_t start, vec3_t end, vec3_t color, float alpha ) "), String("{"), String("\t/*FX_AddLine( start,"), String("\t\t\t\tend,"), String("\t\t\t\t1.0f,"), String("\t\t\t\t1.0,"), String("\t\t\t\t1.0f,"), String("\t\t\t\talpha,"), String("\t\t\t\talpha,"), String("\t\t\t\tcolor, "), String("\t\t\t\tcolor, "), String("\t\t\t\t100.0f,"), String("\t\t\t\tcgs.media.whiteShader );*/"), String("}"), String(""), String("/*"), String("==============="), String("CG_Portal"), String("==============="), String("*/"), String("static void CG_Portal( centity_t *cent ) {"), String("\trefEntity_t\t\t\tent;"), String("\tentityState_t\t\t*s1;"), String(""), String("\ts1 = &cent->currentState;"), String(""), String("\t//FIXME: this tends to give a bad axis[1], perhaps we"), String("\t//should just do the VectorSubtraction here rather than"), String("\t//on the game side.  Would also allow camera to follow"), String("\t//a moving target."), String(""), String("\t// create the render entity"), String("\tmemset (&ent, 0, sizeof(ent));"), String("\tVectorCopy( cent->lerpOrigin, ent.origin );"), String("\tVectorCopy( s1->origin2, ent.oldorigin );"), String("\tByteToDir( s1->eventParm, ent.axis[0] );"), String("\tPerpendicularVector( ent.axis[1], ent.axis[0] );"), String(""), String("\t// negating this tends to get the directions like they want"), String("\t// we really should have a camera roll value"), String("\tVectorSubtract( vec3_origin, ent.axis[1], ent.axis[1] );"), String(""), String("\tCrossProduct( ent.axis[0], ent.axis[1], ent.axis[2] );"), String("\tent.reType = RT_PORTALSURFACE;"), String("\tent.frame = s1->frame;\t\t// rotation speed"), String("\tent.skinNum = (int)(s1->clientNum/256.0 * 360);\t// roll offset"), String(""), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("\tCG_SetGhoul2Info(&ent, cent);  "), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String(""), String("\t// add to refresh list"), String("\tcgi_R_AddRefEntityToScene(&ent);"), String("}"), String(""), String(""), String("/*"), String("========================="), String("CG_AdjustPositionForMover"), String(""), String("Also called by client movement prediction code"), String("========================="), String("*/"), String("void CG_AdjustPositionForMover( const vec3_t in, int moverNum, int atTime, vec3_t out ) {"), String("\tcentity_t\t*cent;"), String("\tvec3_t\toldOrigin, origin, deltaOrigin;"), String("//\tvec3_t\toldAngles, angles, deltaAngles;"), String(""), String("\tif ( moverNum <= 0 ) {"), String("\t\tVectorCopy( in, out );"), String("\t\treturn;"), String("\t}"), String(""), String("\tcent = &cg_entities[ moverNum ];"), String("\tif ( cent->currentState.eType != ET_MOVER ) {"), String("\t\tVectorCopy( in, out );"), String("\t\treturn;"), String("\t}"), String(""), String("\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, oldOrigin );"), String("//\tEvaluateTrajectory( &cent->currentState.apos, cg.snap->serverTime, oldAngles );"), String(""), String("\tEvaluateTrajectory( &cent->currentState.pos, atTime, origin );"), String("//\tEvaluateTrajectory( &cent->currentState.apos, atTime, angles );"), String(""), String("\tVectorSubtract( origin, oldOrigin, deltaOrigin );"), String("//\tVectorSubtract( angles, oldAngles, deltaAngles );"), String(""), String(""), String("\tVectorAdd( in, deltaOrigin, out );"), String(""), String("\t// FIXME: origin change when on a rotating object"), String("}"), String("/*"), String("==============="), String("CG_CalcEntityLerpPositions"), String(""), String("==============="), String("*/"), String("extern char\t*vtos( const vec3_t v );"), String("#if 1"), String("void CG_CalcEntityLerpPositions( centity_t *cent ) {"), String("\tif ( cent->gent && cent->gent->client && cent->gent->client->NPC_class == CLASS_VEHICLE && cent->nextState ) //cent->currentState.vehicleIndex != VEHICLE_NONE )"), String("\t{"), String("\t\tfloat\t\tf = cg.frameInterpolation;"), String(""), String("\t\tcent->currentState.vehicleAngles[0] = LerpAngle( cent->currentState.vehicleAngles[0], cent->nextState->vehicleAngles[0], f );"), String("\t\tcent->currentState.vehicleAngles[1] = LerpAngle( cent->currentState.vehicleAngles[1], cent->nextState->vehicleAngles[1], f );"), String("\t\tcent->currentState.vehicleAngles[2] = LerpAngle( cent->currentState.vehicleAngles[2], cent->nextState->vehicleAngles[2], f );"), String("\t}"), String(""), String("\tif ( cent->currentState.number == cg.snap->ps.clientNum)"), String("\t{"), String("\t\t// if the player, take position from prediction"), String("\t\tVectorCopy( cg.predicted_player_state.origin, cent->lerpOrigin );"), String("\t\tVectorCopy( cg.predicted_player_state.viewangles, cent->lerpAngles );"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("//\t\tLerpBoneAngleOverrides(cent);"), String("/*"), String("Ghoul2 Insert End"), String("*/"), String("\t\treturn;"), String("\t}"), String("\t"), String("\t//FIXME: prediction on clients in timescale results in jerky positional translation"), String("\tif ( cent->interpolate )"), String("\t{"), String("\t\t// if the entity has a valid next state, interpolate a value between the frames"), String("\t\t// unless it is a mover with a known start and stop"), String("\t\tvec3_t\t\tcurrent, next;"), String("\t\tfloat\t\tf;"), String(""), String("\t\t// it would be an internal error to find an entity that interpolates without"), String("\t\t// a snapshot ahead of the current one"), String("\t\tif ( cg.nextSnap == NULL ) {"), String("\t\t\tCG_Error( \"CG_AddCEntity: cg.nextSnap == NULL\" );"), String("\t\t}"), String(""), String("\t\tf = cg.frameInterpolation;"), String(""), String("\t\tif ( cent->currentState.apos.trType == TR_INTERPOLATE && cent->nextState )"), String("\t\t{"), String("\t\t\tEvaluateTrajectory( &cent->currentState.apos, cg.snap->serverTime, current );"), String("\t\t\tEvaluateTrajectory( &cent->nextState->apos, cg.nextSnap->serverTime, next );"), String(""), String("\t\t\tcent->lerpAngles[0] = LerpAngle( current[0], next[0], f );"), String("\t\t\tcent->lerpAngles[1] = LerpAngle( current[1], next[1], f );"), String("\t\t\tcent->lerpAngles[2] = LerpAngle( current[2], next[2], f );"), String(""), String("\t\t\t/*"), String("\t\t\tif(cent->gent && cent->currentState.clientNum != 0 && !VectorCompare(current, next))"), String("\t\t\t{"), String("\t\t\t\tCom_Printf(\"%s last/next/lerp apos %s/%s/%s, f = %4.2f\\n\", cent->gent->script_targetname, vtos(current), vtos(next), vtos(cent->lerpAngles), f);"), String("\t\t\t}"), String("\t\t\t*/"), String("\t/*"), String("\tGhoul2 Insert Start"), String("\t*/"), String("\t\t\t// now the nasty stuff - this will interpolate all ghoul2 models bone angle overrides per model attached to this cent"), String("\t\t\t/*"), String("\t\t\tif (cent->gent->ghoul2.size())"), String("\t\t\t{"), String("\t\t\t\tLerpBoneAngleOverrides(cent);"), String("\t\t\t}"), String("\t\t\t*/"), String("\t/*"), String("\tGhoul2 Insert End"), String("\t*/"), String("\t\t}"), String("\t\tif ( cent->currentState.pos.trType == TR_INTERPOLATE && cent->nextState ) "), String("\t\t{"), String("\t\t\t// this will linearize a sine or parabolic curve, but it is important"), String("\t\t\t// to not extrapolate player positions if more recent data is available"), String("\t\t\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, current );"), String("\t\t\tEvaluateTrajectory( &cent->nextState->pos, cg.nextSnap->serverTime, next );"), String(""), String("\t\t\tcent->lerpOrigin[0] = current[0] + f * ( next[0] - current[0] );"), String("\t\t\tcent->lerpOrigin[1] = current[1] + f * ( next[1] - current[1] );"), String("\t\t\tcent->lerpOrigin[2] = current[2] + f * ( next[2] - current[2] );"), String(""), String("\t\t\t/*"), String("\t\t\tif ( cent->gent && cent->currentState.clientNum != 0 )"), String("\t\t\t{"), String("\t\t\t\tCom_Printf(\"%s last/next/lerp pos %s/%s/%s, f = %4.2f\\n\", cent->gent->script_targetname, vtos(current), vtos(next), vtos(cent->lerpOrigin), f);"), String("\t\t\t}"), String("\t\t\t*/"), String("\t\t\treturn;//FIXME: should this be outside this if?"), String("\t\t}"), String("\t}"), String("\telse"), String("\t{"), String("\t\tif ( cent->currentState.apos.trType == TR_INTERPOLATE )"), String("\t\t{"), String("\t\t\tEvaluateTrajectory( &cent->currentState.apos, cg.snap->serverTime, cent->lerpAngles );"), String("\t\t}"), String("\t\tif ( cent->currentState.pos.trType == TR_INTERPOLATE ) "), String("\t\t{"), String("\t\t\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, cent->lerpOrigin );"), String("\t\t\t/*"), String("\t\t\tif(cent->gent && cent->currentState.clientNum != 0 )"), String("\t\t\t{"), String("\t\t\t\tCom_Printf(\"%s last/next/lerp pos %s, f = 1.0\\n\", cent->gent->script_targetname, vtos(cent->lerpOrigin) );"), String("\t\t\t}"), String("\t\t\t*/"), String("\t\t\treturn;"), String("\t\t}"), String("\t}"), String("\t"), String("\t// FIXME: if it\'s blocked, it wigs out, draws it in a predicted spot, but never"), String("\t// makes it there - we need to predict it in the right place if this is happens..."), String(""), String("\t// just use the current frame and evaluate as best we can"), String("\ttrajectory_t *posData = &cent->currentState.pos;"), String("\t{"), String("\t\tgentity_t *ent = &g_entities[cent->currentState.number];"), String(""), String("\t\tif ( ent && ent->inuse)"), String("\t\t{"), String("\t\t\tif ( ent->s.eFlags & EF_BLOCKED_MOVER || ent->s.pos.trType == TR_STATIONARY )"), String("\t\t\t{//this mover has stopped moving and is going to wig out if we predict it"), String("\t\t\t\t//based on last frame\'s info- cut across the network and use the currentOrigin"), String("\t\t\t\tVectorCopy( ent->currentOrigin, cent->lerpOrigin );"), String("\t\t\t\tposData = NULL;"), String("\t\t\t}"), String("\t\t\telse"), String("\t\t\t{"), String("\t\t\t\tposData = &ent->s.pos;"), String("\t\t\t}"), String("\t\t}"), String("\t}"), String(""), String("\tif ( posData )"), String("\t{"), String("\t\tEvaluateTrajectory( posData, cg.time, cent->lerpOrigin );"), String("\t}"), String(""), String("\t// FIXME: this will stomp an apos trType of TR_INTERPOLATE!!"), String("\tEvaluateTrajectory( &cent->currentState.apos, cg.time, cent->lerpAngles );"), String(""), String("\t// adjust for riding a mover"), String("\tCG_AdjustPositionForMover( cent->lerpOrigin, cent->currentState.groundEntityNum, cg.time, cent->lerpOrigin );"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("\t\t// now the nasty stuff - this will interpolate all ghoul2 models bone angle overrides per model attached to this cent"), String("\t/*"), String("\tif (cent->gent->ghoul2.size())"), String("\t{"), String("\t\tLerpBoneAngleOverrides(cent);"), String("\t}"), String("\t*/"), String("/*"), String("Ghoul2 Insert End"), String("*/"), String("\t// FIXME: perform general error decay?"), String("}"), String("#else"), String("void CG_CalcEntityLerpPositions( centity_t *cent ) "), String("{"), String("\tif ( cent->currentState.number == cg.snap->ps.clientNum)"), String("\t{"), String("\t\t// if the player, take position from prediction"), String("\t\tVectorCopy( cg.predicted_player_state.origin, cent->lerpOrigin );"), String("\t\tVectorCopy( cg.predicted_player_state.viewangles, cent->lerpAngles );"), String("OutputDebugString(va(\"b=(%6.2f,%6.2f,%6.2f)\\n\",cent->lerpOrigin[0],cent->lerpOrigin[1],cent->lerpOrigin[2]));"), String("\t\treturn;"), String("\t}"), String(""), String(""), String("if (cent->currentState.number != cg.snap->ps.clientNum&&cent->interpolate && cent->currentState.pos.trType == TR_INTERPOLATE)"), String("{"), String("\tif (cent->interpolate)"), String("\t{"), String("OutputDebugString(va(\"[%3d] interp %4.2f t=%6d  st = %6d  nst = %6d     b=%6.2f   nb=%6.2f\\n\","), String("\t\tcent->currentState.number,"), String("\t\tcg.frameInterpolation,"), String("\t\tcg.time,"), String("\t\tcg.snap->serverTime,"), String("\t\tcg.nextSnap->serverTime,"), String("\t\tcent->currentState.pos.trBase[0],"), String("\t\tcent->nextState.pos.trBase[0]));"), String("\t}"), String("\telse"), String("\t{"), String("OutputDebugString(va(\"[%3d] nonext %4.2f t=%6d  st = %6d  nst = %6d     b=%6.2f   nb=%6.2f\\n\","), String("\t\tcent->currentState.number,"), String("\t\tcg.frameInterpolation,"), String("\t\tcg.time,"), String("\t\tcg.snap->serverTime,"), String("\t\t0,"), String("\t\tcent->currentState.pos.trBase[0],"), String("\t\t0.0f));"), String("\t}"), String("}"), String(""), String("\t//FIXME: prediction on clients in timescale results in jerky positional translation"), String("\tif (cent->interpolate && "), String("\t\t(cent->currentState.number == cg.snap->ps.clientNum ||"), String("\t\tcent->interpolate && cent->currentState.pos.trType == TR_INTERPOLATE ) )"), String("\t{"), String("\t\tvec3_t\t\tcurrent, next;"), String("\t\tfloat\t\tf;"), String(""), String("\t\t// it would be an internal error to find an entity that interpolates without"), String("\t\t// a snapshot ahead of the current one"), String("\t\tif ( cg.nextSnap == NULL ) "), String("\t\t{"), String("\t\t\tCG_Error( \"CG_AddCEntity: cg.nextSnap == NULL\" );"), String("\t\t}"), String(""), String("\t\tf = cg.frameInterpolation;"), String(""), String("\t\tEvaluateTrajectory( &cent->currentState.apos, cg.snap->serverTime, current );"), String("\t\tEvaluateTrajectory( &cent->nextState.apos, cg.nextSnap->serverTime, next );"), String(""), String("\t\tcent->lerpAngles[0] = LerpAngle( current[0], next[0], f );"), String("\t\tcent->lerpAngles[1] = LerpAngle( current[1], next[1], f );"), String("\t\tcent->lerpAngles[2] = LerpAngle( current[2], next[2], f );"), String(""), String("\t\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, current );"), String("\t\tEvaluateTrajectory( &cent->nextState.pos, cg.nextSnap->serverTime, next );"), String(""), String("\t\tcent->lerpOrigin[0] = current[0] + f * ( next[0] - current[0] );"), String("\t\tcent->lerpOrigin[1] = current[1] + f * ( next[1] - current[1] );"), String("\t\tcent->lerpOrigin[2] = current[2] + f * ( next[2] - current[2] );"), String("\t\treturn;"), String("\t}"), String("\t// just use the current frame and evaluate as best we can"), String("\ttrajectory_t *posData = &cent->currentState.pos;"), String("\t{"), String("\t\tgentity_t *ent = &g_entities[cent->currentState.number];"), String(""), String("\t\tif ( ent && ent->inuse)"), String("\t\t{"), String("\t\t\tif ( ent->s.eFlags & EF_BLOCKED_MOVER || ent->s.pos.trType == TR_STATIONARY )"), String("\t\t\t{//this mover has stopped moving and is going to wig out if we predict it"), String("\t\t\t\t//based on last frame\'s info- cut across the network and use the currentOrigin"), String("\t\t\t\tVectorCopy( ent->currentOrigin, cent->lerpOrigin );"), String("\t\t\t\tposData = NULL;"), String("\t\t\t}"), String("\t\t\telse"), String("\t\t\t{"), String("\t\t\t\tposData = &ent->s.pos;"), String("\t\t\t\tEvaluateTrajectory(&ent->s.pos,cg.time, cent->lerpOrigin );"), String("\t\t\t}"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("\t\t\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, cent->lerpOrigin );"), String("\t\t}"), String("\t}"), String("\tEvaluateTrajectory( &cent->currentState.apos, cg.time, cent->lerpAngles );"), String(""), String("\t// adjust for riding a mover"), String("\tCG_AdjustPositionForMover( cent->lerpOrigin, cent->currentState.groundEntityNum, cg.time, cent->lerpOrigin );"), String("}"), String("#endif"), String("/*"), String("==============="), String("CG_AddLocalSet"), String("==============="), String("*/"), String(""), String("static void CG_AddLocalSet( centity_t *cent )"), String("{"), String("\tcent->gent->setTime = cgi_S_AddLocalSet( cent->gent->soundSet, cg.refdef.vieworg, cent->lerpOrigin, cent->gent->s.number, cent->gent->setTime );"), String("}"), String(""), String("/*"), String("-------------------------"), String("CAS_GetBModelSound"), String("-------------------------"), String("*/"), String(""), String("sfxHandle_t CAS_GetBModelSound( const char *name, int stage )"), String("{"), String("\treturn cgi_AS_GetBModelSound( name, stage );"), String("}"), String(""), String("void CG_DLightThink ( centity_t *cent )"), String("{"), String("\tif(cent->gent)"), String("\t{"), String("\t\tfloat\ttDelta = cg.time - cent->gent->painDebounceTime;"), String("\t\tfloat\tpercentage = ( tDelta/((float)cent->gent->speed) );"), String("\t\tvec3_t\torg;"), String("\t\tvec4_t\tcurrentRGBA;"), String("\t\tgentity_t\t*owner = NULL;"), String("\t\tint\t\ti;"), String("\t\t"), String("\t\tif ( percentage >= 1.0f )"), String("\t\t{//We hit the end"), String("\t\t\tpercentage = 1.0f;"), String("\t\t\tswitch( cent->gent->pushDebounceTime )"), String("\t\t\t{"), String("\t\t\tcase 0://Fading from start to final"), String("\t\t\t\tif ( cent->gent->spawnflags & 8 )"), String("\t\t\t\t{//PULSER"), String("\t\t\t\t\tif ( tDelta - cent->gent->speed - cent->gent->wait >= 0 )"), String("\t\t\t\t\t{//Time to start fading down"), String("\t\t\t\t\t\tcent->gent->painDebounceTime = cg.time;"), String("\t\t\t\t\t\tcent->gent->pushDebounceTime = 1;"), String("\t\t\t\t\t\tpercentage = 0.0f;"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String("\t\t\t\telse"), String("\t\t\t\t{//Stick on startRGBA"), String("\t\t\t\t\tpercentage = 0.0f;"), String("\t\t\t\t}"), String("\t\t\t\tbreak;"), String("\t\t\tcase 1://Fading from final to start"), String("\t\t\t\tif ( tDelta - cent->gent->speed - cent->gent->radius >= 0 )"), String("\t\t\t\t{//Time to start fading up"), String("\t\t\t\t\tcent->gent->painDebounceTime = cg.time;"), String("\t\t\t\t\tcent->gent->pushDebounceTime = 0;"), String("\t\t\t\t\tpercentage = 0.0f;"), String("\t\t\t\t}"), String("\t\t\t\tbreak;"), String("\t\t\tcase 2://Fading from 0 intensity to start intensity"), String("\t\t\t\t//Time to start fading from start to final"), String("\t\t\t\tcent->gent->painDebounceTime = cg.time;"), String("\t\t\t\tcent->gent->pushDebounceTime = 0;"), String("\t\t\t\tpercentage = 0.0f;"), String("\t\t\t\tbreak;"), String("\t\t\tcase 3://Fading from current intensity to 0 intensity"), String("\t\t\t\t//Time to turn off"), String("\t\t\t\tcent->gent->misc_dlight_active = qfalse;"), String("\t\t\t\tcent->gent->e_clThinkFunc = clThinkF_NULL;"), String("\t\t\t\tcent->gent->s.eType = ET_GENERAL;"), String("\t\t\t\tcent->gent->svFlags &= ~SVF_BROADCAST;"), String("\t\t\t\treturn;\t\t"), String("\t\t\t\tbreak;"), String("\t\t\tdefault:"), String("\t\t\t\tbreak;"), String("\t\t\t}"), String("\t\t}"), String(""), String("\t\tswitch( cent->gent->pushDebounceTime )"), String("\t\t{"), String("\t\tcase 0://Fading from start to final"), String("\t\t\tfor ( i = 0; i < 4; i++ )"), String("\t\t\t{"), String("\t\t\t\tcurrentRGBA[i] = cent->gent->startRGBA[i] + ( (cent->gent->finalRGBA[i] - cent->gent->startRGBA[i]) * percentage );"), String("\t\t\t}"), String("\t\t\tbreak;"), String("\t\tcase 1://Fading from final to start"), String("\t\t\tfor ( i = 0; i < 4; i++ )"), String("\t\t\t{"), String("\t\t\t\tcurrentRGBA[i] = cent->gent->finalRGBA[i] + ( (cent->gent->startRGBA[i] - cent->gent->finalRGBA[i]) * percentage );"), String("\t\t\t}"), String("\t\t\tbreak;"), String("\t\tcase 2://Fading from 0 intensity to start"), String("\t\t\tfor ( i = 0; i < 3; i++ )"), String("\t\t\t{"), String("\t\t\t\tcurrentRGBA[i] = cent->gent->startRGBA[i];"), String("\t\t\t}"), String("\t\t\tcurrentRGBA[3] = cent->gent->startRGBA[3] * percentage;"), String("\t\t\tbreak;"), String("\t\tcase 3://Fading from current intensity to 0"), String("\t\t\tfor ( i = 0; i < 3; i++ )"), String("\t\t\t{//FIXME: use last"), String("\t\t\t\tcurrentRGBA[i] = cent->gent->startRGBA[i];"), String("\t\t\t}"), String("\t\t\tcurrentRGBA[3] = cent->gent->startRGBA[3] - (cent->gent->startRGBA[3] * percentage);"), String("\t\t\tbreak;"), String("\t\tdefault:"), String("\t\t\treturn;"), String("\t\t\tbreak;"), String("\t\t}"), String(""), String("\t\tif ( cent->gent->owner )"), String("\t\t{"), String("\t\t\towner = cent->gent->owner;"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("\t\t\towner = cent->gent;"), String("\t\t}"), String(""), String("\t\tif ( owner->s.pos.trType == TR_INTERPOLATE )"), String("\t\t{"), String("\t\t\tVectorCopy( cg_entities[owner->s.number].lerpOrigin, org );"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("\t\t\tVectorCopy( owner->currentOrigin, org );"), String("\t\t}"), String(""), String("\t\tcgi_R_AddLightToScene(org, currentRGBA[3]*10, currentRGBA[0], currentRGBA[1], currentRGBA[2] );"), String("\t}"), String("}"), String(""), String("void CG_Limb ( centity_t *cent )"), String("{//first time we\'re drawn, remove us from the owner ent"), String("\tif ( cent->gent && cent->gent->owner && cent->gent->owner->ghoul2.size() )"), String("\t{"), String("\t\tgentity_t\t*owner = cent->gent->owner;"), String("\t\tif ( cent->gent->aimDebounceTime )"), String("\t\t{//done with dismemberment, just waiting to mark owner dismemberable again"), String("\t\t\tif ( cent->gent->aimDebounceTime > cg.time )"), String("\t\t\t{//still waiting"), String("\t\t\t\treturn;"), String("\t\t\t}"), String("\t\t\t//done!"), String("\t\t\towner->client->dismembered = false;"), String("\t\t\t//done!"), String("\t\t\tcent->gent->e_clThinkFunc = clThinkF_NULL;"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("extern cvar_t\t*g_dismemberment;"), String("extern cvar_t\t*g_saberRealisticCombat;"), String("\t\t\t//3) turn off w/descendants that surf in original model"), String("\t\t\tif ( cent->gent->target )//stubTagName )"), String("\t\t\t{//add smoke to cap surf, spawn effect"), String("\t\t\t\tif ( cent->gent->delay <= cg.time )"), String("\t\t\t\t{//debounced so it only plays effect once every 50ms"), String("\t\t\t\t\tint newBolt = gi.G2API_AddBolt( &owner->ghoul2[owner->playerModel], cent->gent->target );"), String("\t\t\t\t\tif ( newBolt != -1 )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tcent->gent->delay = cg.time + 50;"), String("\t\t\t\t\t\t //LAvaPort - file is missing in Steam files"), String("\t\t\t\t\t\t//CG_PlayEffectBolted( \"saber/limb_bolton\", owner->playerModel, newBolt, owner->s.number, owner->s.origin );\t//ent origin used to make FX culling work"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String("\t\t\t}"), String("\t\t\tif ( cent->gent->target2 )//limbName"), String("\t\t\t{//turn the limb off"), String("\t\t\t\t//NOTE: MUST use G2SURFACEFLAG_NODESCENDANTS"), String("\t\t\t\tgi.G2API_SetSurfaceOnOff( &owner->ghoul2[owner->playerModel], cent->gent->target2, 0x00000100 );//G2SURFACEFLAG_NODESCENDANTS"), String("\t\t\t}"), String("\t\t\tif ( cent->gent->target3 )//stubCapName )"), String("\t\t\t{//turn on caps"), String("\t\t\t\tgi.G2API_SetSurfaceOnOff( &owner->ghoul2[owner->playerModel], cent->gent->target3, 0 );"), String("\t\t\t}"), String("\t\t\tif ( owner->weaponModel[0] > 0 )"), String("\t\t\t{//the corpse hasn\'t dropped their weapon"), String("\t\t\t\tif ( cent->gent->count == BOTH_DISMEMBER_RARM || cent->gent->count == BOTH_DISMEMBER_TORSO1 )//&& ent->s.weapon == WP_SABER && ent->weaponModel[0] != -1 )"), String("\t\t\t\t{//FIXME: is this first check needed with this lower one?"), String("\t\t\t\t\tgi.G2API_RemoveGhoul2Model( owner->ghoul2, owner->weaponModel[0] );"), String("\t\t\t\t\towner->weaponModel[0] = -1;"), String("\t\t\t\t}"), String("\t\t\t}"), String("\t\t\tif ( owner->client->NPC_class == CLASS_PROTOCOL "), String("\t\t\t\t|| debug_subdivision->integer"), String("\t\t\t\t|| g_saberRealisticCombat->integer )"), String("\t\t\t{"), String("\t\t\t\t//wait 100ms before allowing owner to be dismembered again"), String("\t\t\t\tcent->gent->aimDebounceTime = cg.time + 100;"), String("\t\t\t\treturn;"), String("\t\t\t}"), String("\t\t\telse"), String("\t\t\t{"), String("\t\t\t\t//done!"), String("\t\t\t\tcent->gent->e_clThinkFunc = clThinkF_NULL;"), String("\t\t\t}"), String("\t\t}"), String("\t}"), String("}"), String(""), String("extern Vehicle_t *G_IsRidingVehicle( gentity_t *ent );"), String("qboolean\tMatrixMode = qfalse;"), String("extern cvar_t\t*g_skippingcin;"), String("void CG_MatrixEffect ( centity_t *cent )"), String("{"), String("\tfloat\tMATRIX_EFFECT_TIME = 1000.0f;"), String("\tif ( (cent->currentState.boltInfo&MEF_MULTI_SPIN) )"), String("\t{//multiple spins"), String("\t\tif ( cent->currentState.time2 > 0 )"), String("\t\t{//with a custom amount of time per spin"), String("\t\t\tMATRIX_EFFECT_TIME = cent->currentState.time2;"), String("\t\t}"), String("\t}"), String("\telse"), String("\t{"), String("\t\tif ( cent->currentState.eventParm "), String("\t\t\t&& cent->currentState.eventParm != MATRIX_EFFECT_TIME )"), String("\t\t{//not a falling multi-spin, so stretch out the effect over the whole desired length (or: condenses it, too)"), String("\t\t\tMATRIX_EFFECT_TIME = cent->currentState.eventParm;"), String("\t\t}"), String("\t}"), String("\t//VectorCopy( cent->lerpOrigin, cg.refdef.vieworg );"), String("\tfloat totalElapsedTime = (float)(cg.time - cent->currentState.time);"), String("\tfloat elapsedTime = totalElapsedTime;"), String("\tbool\tstopEffect = ((totalElapsedTime > cent->currentState.eventParm) || cg.missionStatusShow || in_camera);"), String(""), String("\tif (!stopEffect && (cent->currentState.boltInfo&MEF_HIT_GROUND_STOP) && g_entities[cent->currentState.otherEntityNum].client)"), String("\t{"), String("\t\tif (g_entities[cent->currentState.otherEntityNum].client->ps.groundEntityNum!=ENTITYNUM_NONE)"), String("\t\t{"), String("\t\t\tstopEffect = true;"), String("\t\t}"), String("\t\telse if (g_entities[cent->currentState.otherEntityNum].client->NPC_class == CLASS_VEHICLE)"), String("\t\t{"), String("\t\t\tVehicle_t*\tpVeh = g_entities[cent->currentState.otherEntityNum].m_pVehicle;"), String("\t\t\tif (pVeh && !(pVeh->m_ulFlags&VEH_FLYING))"), String("\t\t\t{"), String("\t\t\t\tstopEffect = true;"), String("\t\t\t}"), String("\t\t}"), String("\t}"), String("\tif (!stopEffect && (cent->currentState.boltInfo&MEF_LOOK_AT_ENEMY))"), String("\t{"), String("\t\tif (!g_entities[cent->currentState.otherEntityNum].lastEnemy || "), String("\t\t\t!g_entities[cent->currentState.otherEntityNum].lastEnemy->inuse)"), String("\t\t{"), String("\t\t\tstopEffect = true;"), String("\t\t}"), String("\t}"), String(""), String("\tif (stopEffect)"), String("\t{//time is up or this is a falling spin and they hit the ground or mission end screen is up"), String("\t\tcg.overrides.active &= ~(/*CG_OVERRIDE_3RD_PERSON_ENT|*/CG_OVERRIDE_3RD_PERSON_RNG|CG_OVERRIDE_3RD_PERSON_ANG|CG_OVERRIDE_3RD_PERSON_POF);"), String("\t\t//cg.overrides.thirdPersonEntity = 0;"), String("\t\tcg.overrides.thirdPersonAngle = 0;"), String("\t\tcg.overrides.thirdPersonPitchOffset = 0;"), String("\t\tcg.overrides.thirdPersonRange = 0;"), String("\t\tif ( g_skippingcin->integer )"), String("\t\t{//skipping?  don\'t mess with timescale"), String("\t\t\t/*"), String("\t\t\tif ( g_timescale->integer < 100 )"), String("\t\t\t{//something messed up timescale, reset it?"), String("\t\t\t\tcgi_Cvar_Set( \"timescale\", \"100\" );"), String("\t\t\t}"), String("\t\t\t*/"), String("\t\t}"), String("\t\telse"), String("\t\t{//set it back to 1"), String("\t\t\tcgi_Cvar_Set( \"timescale\", \"1.0\" );"), String("\t\t}"), String("\t\tMatrixMode = qfalse;"), String("\t\tcent->gent->e_clThinkFunc = clThinkF_NULL;"), String("\t\tcent->gent->e_ThinkFunc = thinkF_G_FreeEntity;"), String("\t\tcent->gent->nextthink = cg.time + 500;"), String("\t\treturn;"), String("\t}"), String("\telse "), String("\t{"), String("\t\twhile ( elapsedTime > MATRIX_EFFECT_TIME )"), String("\t\t{"), String("\t\t\telapsedTime -= MATRIX_EFFECT_TIME;"), String("\t\t}"), String("\t}"), String("\t"), String("\tMatrixMode = qtrue;"), String(""), String("\t//FIXME: move the position towards them and back?"), String("\t//cg.overrides.active |= CG_OVERRIDE_3RD_PERSON_ENT;"), String("\t//cg.overrides.thirdPersonEntity = cent->currentState.otherEntityNum;"), String(""), String("\tif (cent->currentState.boltInfo&MEF_LOOK_AT_ENEMY)"), String("\t{"), String("\t\tvec3_t\ttoEnemy;"), String("\t\tvec3_t\ttoEnemyAngles;"), String(""), String("\t\tVectorCopy(cg_entities[g_entities[cent->currentState.otherEntityNum].lastEnemy->s.number].lerpOrigin, toEnemy);"), String("//\t\tCG_DrawEdge(cg_entities[cent->currentState.otherEntityNum].lerpOrigin, toEnemy, EDGE_NORMAL);"), String("\t\tVectorSubtract(cg_entities[cent->currentState.otherEntityNum].lerpOrigin, toEnemy, toEnemy);"), String("\t\tvectoangles(toEnemy, toEnemyAngles);"), String(""), String(""), String("\t\tcg.overrides.active\t\t\t\t\t|= CG_OVERRIDE_3RD_PERSON_ANG;"), String("  \t \tcg.overrides.thirdPersonAngle\t\t = "), String("\t\t\ttoEnemyAngles[1] - "), String("\t\t\tcg_entities[cent->currentState.otherEntityNum].lerpAngles[1] + "), String(" \t\t\t145.0f;"), String("\t \tcg.overrides.thirdPersonAngle = AngleNormalize180(cg.overrides.thirdPersonAngle);"), String(""), String("\t\tfloat\tMATRIX_EFFECT_TIME_HALF = MATRIX_EFFECT_TIME/2.0f;"), String("\t\tfloat\tX = 1.0f;"), String("\t\tif (elapsedTime>MATRIX_EFFECT_TIME_HALF)"), String("\t\t{"), String("\t\t\tX -= ((elapsedTime - MATRIX_EFFECT_TIME_HALF)/MATRIX_EFFECT_TIME_HALF);"), String("\t\t}"), String("\t\tcg.overrides.thirdPersonAngle\t\t*= X;"), String(""), String(" //\t\tgi.Printf(\"%f\\n\", cg.overrides.thirdPersonAngle);"), String("\t\tcg.overrides.thirdPersonPitchOffset\t = 0.0f;"), String("\t\tcg.overrides.thirdPersonRange\t\t = cg_thirdPersonRange.value * 3.0f;"), String("\t}"), String(""), String("\tif ( !(cent->currentState.boltInfo&MEF_NO_SPIN) )"), String("\t{//rotate around them"), String("\t\t//rotate"), String("\t\tcg.overrides.active |= CG_OVERRIDE_3RD_PERSON_ANG;"), String("\t\tcg.overrides.thirdPersonAngle = 360.0f*elapsedTime/MATRIX_EFFECT_TIME;"), String("\t\tif ( (cent->currentState.boltInfo&MEF_REVERSE_SPIN) )"), String("\t\t{"), String("\t\t\tcg.overrides.thirdPersonAngle *= -1;"), String("\t\t}"), String("\t}"), String(""), String("\t//do all the slowdown and vert bob stuff"), String("\tif ( cent->currentState.angles2[0] )"), String("\t{"), String("\t\tcgi_Cvar_Set( \"timescale\", va(\"%4.2f\",cent->currentState.angles2[0]) );"), String("\t}"), String("\telse if ( !(cent->currentState.boltInfo&MEF_NO_TIMESCALE) )"), String("\t{//ramp the timescale"), String("\t\t//slowdown"), String("\t\tfloat timescale = (elapsedTime/MATRIX_EFFECT_TIME);"), String("\t\tif ( timescale < 0.01f )"), String("\t\t{"), String("\t\t\ttimescale = 0.01f;"), String("\t\t}"), String("\t\tcgi_Cvar_Set( \"timescale\", va(\"%4.2f\",timescale) );"), String("\t}"), String("\telse"), String("\t{//FIXME: MEF_HIT_GROUND_STOP: if they\'re on the ground, stop spinning and stop timescale"), String("\t\t//FIXME: if they go to the menu, restore timescale?"), String("\t\t//cgi_Cvar_Set( \"timescale\", \"1.0ff\" );"), String("\t}"), String(""), String("\tif ( !(cent->currentState.boltInfo&MEF_NO_VERTBOB) )"), String("\t{//bob the pitch"), String("\t\t//pitch"), String("\t\t//dip - FIXME: use pitchOffet?"), String("\t\tcg.overrides.active |= CG_OVERRIDE_3RD_PERSON_POF;"), String("\t\tcg.overrides.thirdPersonPitchOffset = cg_thirdPersonPitchOffset.value;"), String("\t\tif ( elapsedTime < MATRIX_EFFECT_TIME*0.33f )"), String("\t\t{"), String("\t\t\tcg.overrides.thirdPersonPitchOffset -= 30.0f*elapsedTime/(MATRIX_EFFECT_TIME*0.33);"), String("\t\t}"), String("\t\telse if ( elapsedTime > MATRIX_EFFECT_TIME*0.66f )"), String("\t\t{"), String("\t\t\tcg.overrides.thirdPersonPitchOffset -= 30.0f*(MATRIX_EFFECT_TIME-elapsedTime)/(MATRIX_EFFECT_TIME*0.33);"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("\t\t\tcg.overrides.thirdPersonPitchOffset -= 30.0f;"), String("\t\t}"), String("\t}"), String(""), String("\tif ( !(cent->currentState.boltInfo&MEF_NO_RANGEVAR) )"), String("\t{//vary the camera range"), String("\t\t//pull back"), String("\t\tcg.overrides.active |= CG_OVERRIDE_3RD_PERSON_RNG;"), String("\t\tcg.overrides.thirdPersonRange = cg_thirdPersonRange.value;"), String("\t\tif ( elapsedTime < MATRIX_EFFECT_TIME*0.33 )"), String("\t\t{"), String("\t\t\tcg.overrides.thirdPersonRange += 80.0f*elapsedTime/(MATRIX_EFFECT_TIME*0.33);"), String("\t\t}"), String("\t\telse if ( elapsedTime > MATRIX_EFFECT_TIME*0.66 )"), String("\t\t{"), String("\t\t\tcg.overrides.thirdPersonRange += 80.0f*(MATRIX_EFFECT_TIME-elapsedTime)/(MATRIX_EFFECT_TIME*0.33);"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("\t\t\tcg.overrides.thirdPersonRange += 80.0f;"), String("\t\t}"), String("\t}"), String("}"), String(""), String("static void CG_Think ( centity_t *cent )"), String("{"), String("\tif(!cent->gent)"), String("\t{"), String("\t\treturn;"), String("\t}"), String(""), String("\tCEntity_ThinkFunc(cent);\t//\tcent->gent->clThink(cent);"), String("}"), String(""), String("static void CG_Clouds( centity_t *cent )"), String("{"), String("\trefEntity_t\t\tent;"), String("\tentityState_t\t*s1;"), String(""), String("\ts1 = &cent->currentState;"), String(""), String("\t// create the render entity"), String("\tmemset( &ent, 0, sizeof( ent ));"), String(""), String("\tVectorCopy( cent->lerpOrigin, ent.origin );"), String(""), String("\tent.shaderRGBA[0] = ent.shaderRGBA[1] = ent.shaderRGBA[2] = ent.shaderRGBA[3] = 255;"), String(""), String("\tent.radius = cent->gent->radius;"), String("\tent.backlerp = cent->gent->wait;"), String(""), String("\tent.reType = RT_CLOUDS;"), String(""), String("\tif ( cent->gent->spawnflags & 1 ) // TUBE type, the one with a hole in the middle"), String("\t{"), String("\t\tent.rotation = cent->gent->random;"), String("\t\tent.renderfx = RF_GROW;// tube flag "), String("\t}"), String(""), String("\tif ( cent->gent->spawnflags & 2 ) // ALT type, uses a different shader"), String("\t{"), String("\t\tent.customShader = cgi_R_RegisterShader( \"gfx/world/haze2\" );"), String("\t}"), String("\telse"), String("\t{"), String("\t\tent.customShader = cgi_R_RegisterShader( \"gfx/world/haze\" );"), String("\t}"), String("\t"), String("\tcgi_R_AddRefEntityToScene( &ent );"), String("}"), String(""), String("/*"), String("==============="), String("CG_AddCEntity"), String(""), String("==============="), String("*/"), String("static void CG_AddCEntity( centity_t *cent ) "), String("{"), String("\t// event-only entities will have been dealt with already"), String("\tif ( cent->currentState.eType >= ET_EVENTS ) {"), String("\t\treturn;"), String("\t}"), String(""), String("\t//we must have restarted the game"), String("\tif (!cent->gent)"), String("\t{"), String("\t\treturn;"), String("\t}"), String(""), String("\tcent->snapShotTime = cg.time;"), String(""), String("\t// calculate the current origin"), String("\tCG_CalcEntityLerpPositions( cent );"), String(""), String("\t// add automatic effects"), String("\tCG_EntityEffects( cent );"), String(""), String("\t// add local sound set if any"), String("\tif ( cent->gent && cent->gent->soundSet && cent->gent->soundSet[0] && cent->currentState.eType != ET_MOVER )"), String("\t{"), String("\t\tCG_AddLocalSet( cent );"), String("\t}"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("\t// do this before we copy the data to refEnts"), String("\tif (cent->gent->ghoul2.IsValid())"), String("\t{"), String("\t\ttrap_G2_SetGhoul2ModelIndexes(cent->gent->ghoul2, cgs.model_draw, cgs.skins);"), String("\t}"), String(""), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("\tswitch ( cent->currentState.eType ) {"), String("\tdefault:"), String("\t\tCG_Error( \"Bad entity type: %i\\n\", cent->currentState.eType );"), String("\t\tbreak;"), String("\tcase ET_INVISIBLE:"), String("\tcase ET_PUSH_TRIGGER:"), String("\tcase ET_TELEPORT_TRIGGER:"), String("\tcase ET_TERRAIN:"), String("\t\tbreak;"), String("\tcase ET_GENERAL:"), String("\t\tCG_General( cent );"), String("\t\tbreak;"), String("\tcase ET_PLAYER:"), String("\t\tCG_Player( cent );"), String("\t\tbreak;"), String("\tcase ET_ITEM:"), String("\t\tCG_Item( cent );"), String("\t\tbreak;"), String("\tcase ET_MISSILE:"), String("\t\tCG_Missile( cent );"), String("\t\tbreak;"), String("\tcase ET_MOVER:"), String("\t\tCG_Mover( cent );"), String("\t\tbreak;"), String("\tcase ET_BEAM:"), String("\t\tCG_Beam( cent, 0 );"), String("\t\tbreak;"), String("\tcase ET_PORTAL:"), String("\t\tCG_Portal( cent );"), String("\t\tbreak;"), String("\tcase ET_SPEAKER:"), String("\t\tif ( cent->gent && cent->gent->soundSet && cent->gent->soundSet[0] )"), String("\t\t{"), String("\t\t\tbreak;"), String("\t\t}"), String("\t\tCG_Speaker( cent );"), String("\t\tbreak;"), String("\tcase ET_THINKER:"), String("\t\tCG_General( cent );"), String("\t\tCG_Think( cent );"), String("\t\tbreak;"), String("\tcase ET_CLOUD: // dumb"), String("\t\tCG_Clouds( cent );"), String("\t\tbreak;"), String("\t}"), String("}"), String(""), String("/*"), String("==============="), String("CG_AddPacketEntities"), String(""), String("==============="), String("*/"), String("void CG_AddPacketEntities( qboolean isPortal ) {"), String("\tint\t\t\t\t\tnum;"), String("\tcentity_t\t\t\t*cent;"), String("\tplayerState_t\t\t*ps;"), String(""), String("\tif (isPortal)"), String("\t{"), String("\t\tfor ( num = 0 ; num < cg.snap->numEntities ; num++ )"), String("\t\t{"), String("\t\t\tcent = &cg_entities[ cg.snap->entities[ num ].number ];"), String(""), String("\t\t\tif (cent->currentState.isPortalEnt)"), String("\t\t\t{"), String("\t\t\t\tCG_AddCEntity( cent );"), String("\t\t\t}"), String("\t\t}"), String("\t\treturn;"), String("\t}"), String(""), String("\t// set cg.frameInterpolation"), String("\tif ( cg.nextSnap ) "), String("\t{"), String("\t\tint\t\tdelta;"), String(""), String("\t\tdelta = (cg.nextSnap->serverTime - cg.snap->serverTime);"), String("\t\tif ( delta == 0 ) "), String("\t\t{"), String("\t\t\tcg.frameInterpolation = 0;"), String("\t\t} "), String("\t\telse "), String("\t\t{"), String("\t\t\tcg.frameInterpolation = (float)( cg.time - cg.snap->serverTime ) / delta;"), String("\t\t}"), String("//OutputDebugString(va(\"interp %4.2f ct=%6d nt=%6d st=%6d\\n\",cg.frameInterpolation,cg.time,cg.nextSnap->serverTime,cg.snap->serverTime));"), String("\t} "), String("\telse "), String("\t{"), String("\t\tcg.frameInterpolation = 0;\t// actually, it should never be used, because "), String("\t\t\t\t\t\t\t\t\t// no entities should be marked as interpolating"), String("//OutputDebugString(va(\"noterp %4.2f ct=%6d nt=%6d st=%6d\\n\",cg.frameInterpolation,cg.time,0,cg.snap->serverTime));"), String("\t}"), String(""), String("\t// the auto-rotating items will all have the same axis"), String("\tcg.autoAngles[0] = 0;"), String("\tcg.autoAngles[1] = ( cg.time & 2047 ) * 360 / 2048.0f;"), String("\tcg.autoAngles[2] = 0;"), String(""), String("\tcg.autoAnglesFast[0] = 0;"), String("\tcg.autoAnglesFast[1] = ( cg.time & 1023 ) * 360 / 1024.0f;"), String("\tcg.autoAnglesFast[2] = 0;"), String(""), String("\tAnglesToAxis( cg.autoAngles, cg.autoAxis );"), String("\tAnglesToAxis( cg.autoAnglesFast, cg.autoAxisFast );"), String(""), String("\t// generate and add the entity from the playerstate"), String("\tps = &cg.predicted_player_state;"), String("\tPlayerStateToEntityState( ps, &cg_entities[ ps->clientNum ].currentState );"), String("\t"), String("//\tcent = &cg_entities[ ps->clientNum ];\t// not needed now that player is in the snap packet"), String("//\tCG_AddCEntity( cent );\t\t\t\t\t//"), String(""), String("\t// add each entity sent over by the server"), String("\tfor ( num = 0 ; num < cg.snap->numEntities ; num++ ) {"), String("\t\tcent = &cg_entities[ cg.snap->entities[ num ].number ];"), String(""), String("\t\tCG_AddCEntity( cent );"), String("\t}"), String(""), String("\tfor(num=0;num<cg_numpermanents;num++)"), String("\t{"), String("\t\tcent = cg_permanents[num];"), String("\t\tif (cent->currentValid)"), String("\t\t{"), String("\t\t\tCG_AddCEntity( cent );"), String("\t\t}"), String("\t}"), String("}"), String(""), String("//rww - This function is not currently called. Use it as the client-side ROFF"), String("//callback once that\'s implemented fully."), String("void CG_ROFF_NotetrackCallback( centity_t *cent, const char *notetrack)"), String("{"), String("\tint i = 0, r = 0, objectID = 0, anglesGathered = 0, posoffsetGathered = 0;"), String("\tchar type[256];"), String("\tchar argument[512];"), String("\tchar addlArg[512];"), String("\tchar errMsg[256];"), String("\tchar t[64];"), String("\tint addlArgs = 0;"), String("\tvec3_t parsedAngles, parsedOffset, useAngles, useOrigin, forward, right, up;"), String(""), String("\tif (!cent || !notetrack)"), String("\t{"), String("\t\treturn;"), String("\t}"), String(""), String("\t//notetrack = \"effect effects/explosion1.efx 0+0+64 0-0-1\";"), String(""), String("\twhile (notetrack[i] && notetrack[i] != \' \')"), String("\t{"), String("\t\ttype[i] = notetrack[i];"), String("\t\ti++;"), String("\t}"), String(""), String("\ttype[i] = \'\\0\';"), String(""), String("\tif (notetrack[i] != \' \')"), String("\t{ //didn\'t pass in a valid notetrack type, or forgot the argument for it"), String("\t\treturn;"), String("\t}"), String(""), String("\ti++;"), String(""), String("\twhile (notetrack[i] && notetrack[i] != \' \')"), String("\t{"), String("\t\targument[r] = notetrack[i];"), String("\t\tr++;"), String("\t\ti++;"), String("\t}"), String("\targument[r] = \'\\0\';"), String(""), String("\tif (!r)"), String("\t{"), String("\t\treturn;"), String("\t}"), String(""), String("\tif (notetrack[i] == \' \')"), String("\t{ //additional arguments..."), String("\t\taddlArgs = 1;"), String(""), String("\t\ti++;"), String("\t\tr = 0;"), String("\t\twhile (notetrack[i])"), String("\t\t{"), String("\t\t\taddlArg[r] = notetrack[i];"), String("\t\t\tr++;"), String("\t\t\ti++;"), String("\t\t}"), String("\t\taddlArg[r] = \'\\0\';"), String("\t}"), String(""), String("\tif (strcmp(type, \"effect\") == 0)"), String("\t{"), String("\t\tif (!addlArgs)"), String("\t\t{"), String("\t\t\t//sprintf(errMsg, \"Offset position argument for \'effect\' type is invalid.\");"), String("\t\t\t//goto functionend;"), String("\t\t\tVectorClear(parsedOffset);"), String("\t\t\tgoto defaultoffsetposition;"), String("\t\t}"), String(""), String("\t\ti = 0;"), String(""), String("\t\twhile (posoffsetGathered < 3)"), String("\t\t{"), String("\t\t\tr = 0;"), String("\t\t\twhile (addlArg[i] && addlArg[i] != \'+\' && addlArg[i] != \' \')"), String("\t\t\t{"), String("\t\t\t\tt[r] = addlArg[i];"), String("\t\t\t\tr++;"), String("\t\t\t\ti++;"), String("\t\t\t}"), String("\t\t\tt[r] = \'\\0\';"), String("\t\t\ti++;"), String("\t\t\tif (!r)"), String("\t\t\t{ //failure.."), String("\t\t\t\t//sprintf(errMsg, \"Offset position argument for \'effect\' type is invalid.\");"), String("\t\t\t\t//goto functionend;"), String("\t\t\t\tVectorClear(parsedOffset);"), String("\t\t\t\ti = 0;"), String("\t\t\t\tgoto defaultoffsetposition;"), String("\t\t\t}"), String("\t\t\tparsedOffset[posoffsetGathered] = atof(t);"), String("\t\t\tposoffsetGathered++;"), String("\t\t}"), String(""), String("\t\tif (posoffsetGathered < 3)"), String("\t\t{"), String("\t\t\tsprintf(errMsg, \"Offset position argument for \'effect\' type is invalid.\");"), String("\t\t\tgoto functionend;"), String("\t\t}"), String(""), String("\t\ti--;"), String(""), String("\t\tif (addlArg[i] != \' \')"), String("\t\t{"), String("\t\t\taddlArgs = 0;"), String("\t\t}"), String(""), String("defaultoffsetposition:"), String(""), String("\t\tobjectID = theFxScheduler.RegisterEffect(argument);"), String(""), String("\t\tif (objectID)"), String("\t\t{"), String("\t\t\tif (addlArgs)"), String("\t\t\t{ //if there is an additional argument for an effect it is expected to be XANGLE-YANGLE-ZANGLE"), String("\t\t\t\ti++;"), String("\t\t\t\twhile (anglesGathered < 3)"), String("\t\t\t\t{"), String("\t\t\t\t\tr = 0;"), String("\t\t\t\t\twhile (addlArg[i] && addlArg[i] != \'-\')"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tt[r] = addlArg[i];"), String("\t\t\t\t\t\tr++;"), String("\t\t\t\t\t\ti++;"), String("\t\t\t\t\t}"), String("\t\t\t\t\tt[r] = \'\\0\';"), String("\t\t\t\t\ti++;"), String(""), String("\t\t\t\t\tif (!r)"), String("\t\t\t\t\t{ //failed to get a new part of the vector"), String("\t\t\t\t\t\tanglesGathered = 0;"), String("\t\t\t\t\t\tbreak;"), String("\t\t\t\t\t}"), String(""), String("\t\t\t\t\tparsedAngles[anglesGathered] = atof(t);"), String("\t\t\t\t\tanglesGathered++;"), String("\t\t\t\t}"), String(""), String("\t\t\t\tif (anglesGathered)"), String("\t\t\t\t{"), String("\t\t\t\t\tVectorCopy(parsedAngles, useAngles);"), String("\t\t\t\t}"), String("\t\t\t\telse"), String("\t\t\t\t{ //failed to parse angles from the extra argument provided.."), String("\t\t\t\t\tVectorCopy(cent->lerpAngles, useAngles);"), String("\t\t\t\t}"), String("\t\t\t}"), String("\t\t\telse"), String("\t\t\t{ //if no constant angles, play in direction entity is facing"), String("\t\t\t\tVectorCopy(cent->lerpAngles, useAngles);"), String("\t\t\t}"), String(""), String("\t\t\tAngleVectors(useAngles, forward, right, up);"), String(""), String("\t\t\tVectorCopy(cent->lerpOrigin, useOrigin);"), String(""), String("\t\t\t//forward"), String("\t\t\tuseOrigin[0] += forward[0]*parsedOffset[0];"), String("\t\t\tuseOrigin[1] += forward[1]*parsedOffset[0];"), String("\t\t\tuseOrigin[2] += forward[2]*parsedOffset[0];"), String(""), String("\t\t\t//right"), String("\t\t\tuseOrigin[0] += right[0]*parsedOffset[1];"), String("\t\t\tuseOrigin[1] += right[1]*parsedOffset[1];"), String("\t\t\tuseOrigin[2] += right[2]*parsedOffset[1];"), String(""), String("\t\t\t//up"), String("\t\t\tuseOrigin[0] += up[0]*parsedOffset[2];"), String("\t\t\tuseOrigin[1] += up[1]*parsedOffset[2];"), String("\t\t\tuseOrigin[2] += up[2]*parsedOffset[2];"), String(""), String("\t\t\ttheFxScheduler.PlayEffect(objectID, useOrigin, useAngles);"), String("\t\t}"), String("\t}"), String("\telse if (strcmp(type, \"sound\") == 0)"), String("\t{"), String("\t\tobjectID = cgi_S_RegisterSound(argument);"), String("\t\tcgi_S_StartSound(cent->lerpOrigin, cent->currentState.number, CHAN_BODY, objectID);"), String("\t}"), String("\telse if (strcmp(type, \"loop\") == 0)"), String("\t{ //handled server-side"), String("\t\treturn;"), String("\t}"), String("\t//else if ..."), String("\telse"), String("\t{"), String("\t\tif (type[0])"), String("\t\t{"), String("\t\t\tCom_Printf(\"^3Warning: \\\"%s\\\" is an invalid ROFF notetrack function\\n\", type);"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("\t\t\tCom_Printf(\"^3Warning: Notetrack is missing function and/or arguments\\n\");"), String("\t\t}"), String("\t}"), String(""), String("\treturn;"), String(""), String("functionend:"), String("\tCom_Printf(\"^3Type-specific notetrack error: %s\\n\", errMsg);"), String("\treturn;"), String("}"), String("======="), String("// cg_ents.c -- present snapshot entities, happens every single frame\r"), String("\r"), String("// this line must stay at top so the whole PCH thing works...\r"), String("#include \"cg_headers.h\"\r"), String("\r"), String("//#include \"cg_local.h\"\r"), String("#include \"cg_media.h\"\r"), String("#include \"..\\game\\g_functions.h\"\r"), String("#include \"..\\ghoul2\\g2.h\"\r"), String("#include \"FxScheduler.h\"\r"), String("#include \"..\\game\\wp_saber.h\"\r"), String("#include \"..\\game\\g_vehicles.h\"\r"), String("\r"), String("extern void CG_AddSaberBlade( centity_t *cent, centity_t *scent, refEntity_t *saber, int renderfx, int modelIndex, vec3_t origin, vec3_t angles);\r"), String("extern void CG_CheckSaberInWater( centity_t *cent, centity_t *scent, int saberNum, int modelIndex, vec3_t origin, vec3_t angles );\r"), String("extern void CG_ForcePushBlur( const vec3_t org, qboolean darkSide = qfalse );\r"), String("extern void CG_AddForceSightShell( refEntity_t *ent, centity_t *cent );\r"), String("extern qboolean CG_PlayerCanSeeCent( centity_t *cent );\r"), String("extern cvar_t\t*debug_subdivision;\r"), String("\r"), String("/*\r"), String("======================\r"), String("CG_PositionEntityOnTag\r"), String("\r"), String("Modifies the entities position and axis by the given\r"), String("tag location\r"), String("======================\r"), String("*/\r"), String("void CG_PositionEntityOnTag( refEntity_t *entity, const refEntity_t *parent, \r"), String("\t\t\t\t\t\t\tqhandle_t parentModel, char *tagName ) {\r"), String("\tint\t\t\t\ti;\r"), String("\torientation_t\tlerped;\r"), String("\t\r"), String("\t// lerp the tag\r"), String("\tcgi_R_LerpTag( &lerped, parentModel, parent->oldframe, parent->frame,\r"), String("\t\t1.0f - parent->backlerp, tagName );\r"), String("\r"), String("\t// FIXME: allow origin offsets along tag?\r"), String("\tVectorCopy( parent->origin, entity->origin );\r"), String("\tfor ( i = 0 ; i < 3 ; i++ ) \r"), String("\t{\r"), String("\t\tVectorMA( entity->origin, lerped.origin[i], parent->axis[i], entity->origin );\r"), String("\t}\r"), String("\r"), String("\t// had to cast away the const to avoid compiler problems...\r"), String("\tMatrixMultiply( lerped.axis, ((refEntity_t *)parent)->axis, entity->axis );\r"), String("\tentity->backlerp = parent->backlerp;\r"), String("}\r"), String("\r"), String("/*\r"), String("======================\r"), String("CG_PositionRotatedEntityOnTag\r"), String("\r"), String("Modifies the entities position and axis by the given\r"), String("tag location\r"), String("======================\r"), String("*/\r"), String("void CG_PositionRotatedEntityOnTag( refEntity_t *entity, const refEntity_t *parent, \r"), String("\t\t\t\t\t\t\tqhandle_t parentModel, char *tagName, orientation_t *tagOrient ) {\r"), String("\tint\t\t\t\ti;\r"), String("\torientation_t\tlerped;\r"), String("\tvec3_t\t\t\ttempAxis[3];\r"), String("\r"), String("\t// lerp the tag\r"), String("\tcgi_R_LerpTag( &lerped, parentModel, parent->oldframe, parent->frame,\r"), String("\t\t1.0f - parent->backlerp, tagName );\r"), String("\r"), String("\tif ( tagOrient )\r"), String("\t{\r"), String("\t\tVectorCopy( lerped.origin, tagOrient->origin );\r"), String("\t\tfor ( i = 0 ; i < 3 ; i++ ) \r"), String("\t\t{\r"), String("\t\t\tVectorCopy( lerped.axis[i], tagOrient->axis[i] );\r"), String("\t\t}\r"), String("\t}\r"), String("\r"), String("\t// FIXME: allow origin offsets along tag?\r"), String("\tVectorCopy( parent->origin, entity->origin );\r"), String("\tfor ( i = 0 ; i < 3 ; i++ ) {\r"), String("\t\tVectorMA( entity->origin, lerped.origin[i], parent->axis[i], entity->origin );\r"), String("\t}\r"), String("\r"), String("\tMatrixMultiply( entity->axis, lerped.axis, tempAxis );\r"), String("\tMatrixMultiply( tempAxis, ((refEntity_t *)parent)->axis, entity->axis );\r"), String("}\r"), String("\r"), String("\r"), String("\r"), String("/*\r"), String("==========================================================================\r"), String("\r"), String("FUNCTIONS CALLED EACH FRAME\r"), String("\r"), String("==========================================================================\r"), String("*/\r"), String("\r"), String("/*\r"), String("======================\r"), String("CG_SetEntitySoundPosition\r"), String("\r"), String("Also called by event processing code\r"), String("======================\r"), String("*/\r"), String("vec3_t *CG_SetEntitySoundPosition( centity_t *cent ) {\r"), String("\tstatic vec3_t v3Return;\r"), String("\tif ( cent->currentState.solid == SOLID_BMODEL ) {\r"), String("\t\tvec3_t\torigin;\r"), String("\t\tfloat\t*v;\r"), String("\r"), String("\t\tv = cgs.inlineModelMidpoints[ cent->currentState.modelindex ];\r"), String("\t\tVectorAdd( cent->lerpOrigin, v, origin );\r"), String("\t\tcgi_S_UpdateEntityPosition( cent->currentState.number, origin );\r"), String("\t\tVectorCopy(origin, v3Return);\r"), String("\t} else {\r"), String("\t\tif ( cent->currentState.eType == ET_PLAYER\r"), String("\t\t\t&& cent->gent\r"), String("\t\t\t&& cent->gent->client\r"), String("\t\t\t&& cent->gent->ghoul2.IsValid() \r"), String("\t\t\t&& cent->gent->ghoul2[0].animModelIndexOffset )//If it has an animOffset it\'s a cinematic anim\r"), String("\t\t{//I might be running out of my bounding box, so use my headPoint from the last render frame...?\r"), String("\t\t\t//NOTE: if I\'m not rendered, will this not update correctly?  Would cent->lerpOrigin be any more updated?\r"), String("\t\t\tVectorCopy(cent->gent->client->renderInfo.eyePoint, v3Return);\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{//just use my org\r"), String("\t\t\tVectorCopy(cent->lerpOrigin, v3Return);\r"), String("\t\t}\r"), String("\t\tcgi_S_UpdateEntityPosition( cent->currentState.number, v3Return );\r"), String("\t}\r"), String("\r"), String("\treturn &v3Return;\r"), String("}\r"), String("\r"), String("/*\r"), String("==================\r"), String("CG_EntityEffects\r"), String("\r"), String("Add continuous entity effects, like local entity emission and lighting\r"), String("==================\r"), String("*/\r"), String("static void CG_EntityEffects( centity_t *cent ) {\r"), String("\r"), String("\t// update sound origins\r"), String("\tvec3_t v3Origin;\r"), String("\tVectorCopy(*CG_SetEntitySoundPosition( cent ),v3Origin);\r"), String("\r"), String("\t// add loop sound\r"), String("\tif ( cent->currentState.loopSound ) \r"), String("\t{\r"), String("\t\tsoundChannel_t chan = CHAN_AUTO;\r"), String("\r"), String("\t\tgentity_t *ent = cent->gent;\r"), String("\r"), String("\t\tif ( ent->s.eFlags & EF_LESS_ATTEN )\r"), String("\t\t{\r"), String("\t\t\tchan = CHAN_LESS_ATTEN;\r"), String("\t\t}\r"), String("\t\t\r"), String("\t\tsfxHandle_t\tsfx = ( cent->currentState.eType == ET_MOVER ) ? cent->currentState.loopSound : cgs.sound_precache[ cent->currentState.loopSound ];\r"), String("\r"), String("\t\t// Only play sound if being drawn.\r"), String("\t\tif ( !( ent->s.eFlags & EF_NODRAW ) )\r"), String("\t\t{\r"), String("\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, v3Origin/*cent->lerpOrigin*/, vec3_origin, sfx, chan );\r"), String("\t\t}\r"), String("\t}\r"), String("\r"), String("\t// constant light glow\r"), String("\tif ( cent->currentState.constantLight ) {\r"), String("\t\tint\t\tcl;\r"), String("\t\tint\t\ti, r, g, b;\r"), String("\r"), String("\t\tcl = cent->currentState.constantLight;\r"), String("\t\tr = cl & 255;\r"), String("\t\tg = ( cl >> 8 ) & 255;\r"), String("\t\tb = ( cl >> 16 ) & 255;\r"), String("\t\ti = ( ( cl >> 24 ) & 255 ) * 4;\r"), String("\t\tcgi_R_AddLightToScene( cent->lerpOrigin, (float)i, (float)r, (float)g, (float)b );\r"), String("\t}\r"), String("}\r"), String("\r"), String("void CG_AddRefEntWithTransportEffect ( centity_t *cent, refEntity_t *ent )\r"), String("{\r"), String("\t// We are a normal thing....\r"), String("\tcgi_R_AddRefEntityToScene (ent);\r"), String("\r"), String("\tif ( ent->renderfx & RF_PULSATE && cent->gent->owner && cent->gent->owner->health &&\r"), String("\t\t!cent->gent->owner->s.number && cent->gent->owner->client && //only for player\r"), String("\t\t\tcent->gent->owner->client->ps.saberEntityState == SES_RETURNING && \r"), String("\t\t\tcent->currentState.saberActive == qfalse )\r"), String("\t{\r"), String("\t\t// if we are the saber and we have been dropped, do a glow so it can be spotted easier\r"), String("\t\tfloat\twv;\r"), String("\t\tvec3_t\torg;\r"), String("\r"), String("\t\tent->customShader = cgi_R_RegisterShader( \"gfx/effects/solidWhite_cull\" );\r"), String("\t\tent->renderfx = RF_RGB_TINT;\r"), String("\t\twv = sin( cg.time * 0.003f ) * 0.08f + 0.1f;\r"), String("\t\tent->shaderRGBA[0] = wv * 255;\r"), String("\t\tent->shaderRGBA[1] = wv * 255;\r"), String("\t\tent->shaderRGBA[2] = wv * 0;\r"), String("\t\tcgi_R_AddRefEntityToScene (ent);\r"), String("\r"), String("\t\tfor ( int i = -4; i < 10; i += 1 )\r"), String("\t\t{\r"), String("\t\t\tVectorMA( ent->origin, -i, ent->axis[2], org );\r"), String("\r"), String("\t\t\tFX_AddSprite( org, NULL, NULL, 5.5f, 5.5f, wv, wv, 0.0f, 0.0f, 1.0f, cgs.media.yellowDroppedSaberShader, 0x08000000 );\r"), String("\t\t}\r"), String("\t\tif ( cent->gent->owner->s.weapon == WP_SABER )\r"), String("\t\t{//he\'s still controlling me\r"), String("\t\t\tFX_AddSprite( cent->gent->owner->client->renderInfo.handRPoint, NULL, NULL, 8.0f, 8.0f, wv, wv, 0.0f, 0.0f, 1.0f, cgs.media.yellowDroppedSaberShader, 0x08000000 );\r"), String("\t\t}\r"), String("\t}\r"), String("}\r"), String("\r"), String("\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\r"), String("// Copy the ghoul2 data into the ref ent correctly\r"), String("void CG_SetGhoul2Info( refEntity_t *ent, centity_t *cent)\r"), String("{\r"), String("\tent->ghoul2 = &cent->gent->ghoul2;\r"), String("\tVectorCopy( cent->currentState.modelScale, ent->modelScale);\r"), String("\tent->radius = cent->currentState.radius;\r"), String("\tVectorCopy (cent->lerpAngles, ent->angles);\r"), String("}\r"), String("\r"), String("\r"), String("// write in the axis and stuff\r"), String("void G2_BoltToGhoul2Model(centity_t *cent, refEntity_t *ent)\r"), String("{\r"), String("\t\t// extract the wraith ID from the bolt info\r"), String("\tint modelNum = cent->currentState.boltInfo >> MODEL_SHIFT;\r"), String("\tmodelNum &= MODEL_AND;\r"), String("\tint boltNum\t= cent->currentState.boltInfo >> BOLT_SHIFT;\r"), String("\tboltNum &= BOLT_AND;\r"), String("\tint\tentNum = cent->currentState.boltInfo >> ENTITY_SHIFT;\r"), String("\tentNum &= ENTITY_AND;\r"), String("\r"), String(" \tmdxaBone_t \t\tboltMatrix;\r"), String("\r"), String(" \t// go away and get me the bolt position for this frame please\r"), String(" \tgi.G2API_GetBoltMatrix(cent->gent->ghoul2, modelNum, boltNum, &boltMatrix, cg_entities[entNum].currentState.angles, cg_entities[entNum].currentState.origin, cg.time, cgs.model_draw, cent->currentState.modelScale);\r"), String("\r"), String("\t// set up the axis and origin we need for the actual effect spawning\r"), String(" \tent->origin[0] = boltMatrix.matrix[0][3];\r"), String(" \tent->origin[1] = boltMatrix.matrix[1][3];\r"), String(" \tent->origin[2] = boltMatrix.matrix[2][3];\r"), String("\r"), String(" \tent->axis[0][0] = boltMatrix.matrix[0][0];\r"), String(" \tent->axis[0][1] = boltMatrix.matrix[1][0];\r"), String(" \tent->axis[0][2] = boltMatrix.matrix[2][0];\r"), String("\r"), String(" \tent->axis[1][0] = boltMatrix.matrix[0][1];\r"), String(" \tent->axis[1][1] = boltMatrix.matrix[1][1];\r"), String(" \tent->axis[1][2] = boltMatrix.matrix[2][1];\r"), String("\r"), String(" \tent->axis[2][0] = boltMatrix.matrix[0][2];\r"), String(" \tent->axis[2][1] = boltMatrix.matrix[1][2];\r"), String(" \tent->axis[2][2] = boltMatrix.matrix[2][2];\r"), String("}\r"), String("\r"), String("void ScaleModelAxis(refEntity_t\t*ent)\r"), String("\r"), String("{\t\t// scale the model should we need to\r"), String("\t\tif (ent->modelScale[0] && ent->modelScale[0] != 1.0f)\r"), String("\t\t{\r"), String("\t\t\tVectorScale( ent->axis[0], ent->modelScale[0] , ent->axis[0] );\r"), String("\t\t\tent->nonNormalizedAxes = qtrue;\r"), String("\t\t}\r"), String("\t\tif (ent->modelScale[1] && ent->modelScale[1] != 1.0f)\r"), String("\t\t{\r"), String("\t\t\tVectorScale( ent->axis[1], ent->modelScale[1] , ent->axis[1] );\r"), String("\t\t\tent->nonNormalizedAxes = qtrue;\r"), String("\t\t}\r"), String("\t\tif (ent->modelScale[2] && ent->modelScale[2] != 1.0f)\r"), String("\t\t{\r"), String("\t\t\tVectorScale( ent->axis[2], ent->modelScale[2] , ent->axis[2] );\r"), String("\t\t\tent->nonNormalizedAxes = qtrue;\r"), String("\t\t}\r"), String("}\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("/*\r"), String("==================\r"), String("CG_General\r"), String("==================\r"), String("*/\r"), String("static void CG_General( centity_t *cent ) \r"), String("{\r"), String("\trefEntity_t\t\t\tent;\r"), String("\tentityState_t\t\t*s1;\r"), String("\r"), String("\ts1 = &cent->currentState;\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\r"), String("\t// if set to invisible, skip\r"), String("\tif (!s1->modelindex && !cent->gent->ghoul2.IsValid() ) {\r"), String("\t\treturn;\r"), String("\t}\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\tif ( s1->eFlags & EF_NODRAW )\r"), String("\t{\r"), String("\t\t// If you don\'t like it doing NODRAW, then don\'t set the flag\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tmemset (&ent, 0, sizeof(ent));\r"), String("\r"), String("\t// set frame\r"), String("\r"), String("\tif ( cent->currentState.eFlags & EF_DISABLE_SHADER_ANIM )\r"), String("\t{\r"), String("\t\t// by setting the shader time to the current time, we can force an animating shader to not animate\r"), String("\t\tent.shaderTime = cg.time * 0.001f;\r"), String("\t}\r"), String("\r"), String("\tif ( s1->eFlags & EF_SHADER_ANIM )\r"), String("\t{\r"), String("\t\t// Deliberately setting it up so that shader anim will completely override any kind of model animation frame setting.\r"), String("\t\tent.renderfx|=RF_SETANIMINDEX;\r"), String("\t\tent.skinNum = s1->frame;\r"), String("\t}\r"), String("\telse if ( s1->eFlags & EF_ANIM_ONCE )\r"), String("\t{\r"), String("\t\t//s1->frame++;\r"), String("\t\t//ent.frame = s1->frame;\r"), String("\t\tent.frame = cent->gent->s.frame;\r"), String("\t\tent.renderfx|=RF_CAP_FRAMES;\r"), String("\t}\r"), String("\telse if ( s1->eFlags & EF_ANIM_ALLFAST )\r"), String("\t{\r"), String("\t\tent.frame = (cg.time / 100);\r"), String("\t\tent.renderfx|=RF_WRAP_FRAMES;\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\tent.frame = s1->frame;\r"), String("\t}\r"), String("\tent.oldframe = ent.frame;\r"), String("\tent.backlerp = 0;\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\tCG_SetGhoul2Info(&ent, cent);\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\tVectorCopy( cent->lerpOrigin, ent.origin);\r"), String("\tVectorCopy( cent->lerpOrigin, ent.oldorigin);\r"), String("\r"), String("\tent.hModel = cgs.model_draw[s1->modelindex];\r"), String("\r"), String("\tif ( !ent.radius )\r"), String("\t{// Set default g2 cull radius.\r"), String("\t\tent.radius = 60;\r"), String("\t}\r"), String("\r"), String("\tif ( s1->eFlags & EF_AUTO_SIZE && cent->gent )\r"), String("\t{\r"), String("\t\tcgi_R_ModelBounds( ent.hModel, cent->gent->mins, cent->gent->maxs );\r"), String("\t\t//Only do this once\r"), String("\t\tcent->gent->s.eFlags &= ~EF_AUTO_SIZE;\r"), String("\t}\r"), String("\r"), String("\t// player model\r"), String("\tif (s1->number == cg.snap->ps.clientNum) \r"), String("\t{\r"), String("\t\tent.renderfx |= RF_THIRD_PERSON;\t// only draw from mirrors\r"), String("\t}\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\t// are we bolted to a Ghoul2 model?\r"), String("\tif (s1->boltInfo)\r"), String("\t{\r"), String("\t\tG2_BoltToGhoul2Model(cent, &ent);\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\t//-------------------------------------------------------\r"), String("\t\t// Start of chair\r"), String("\t\t//-------------------------------------------------------\r"), String("\t\tif ( cent->gent->s.weapon == WP_EMPLACED_GUN || ( cent->gent->activator && cent->gent->activator->owner && \r"), String("\t\t\t\tcent->gent->activator->s.eFlags & EF_LOCKED_TO_WEAPON ))\r"), String("\t\t{\r"), String("\t\t\tvec3_t\ttemp;\r"), String("\r"), String("\t\t\tif ( cent->gent->health <= 0 && cent->gent->e_ThinkFunc == thinkF_NULL )\r"), String("\t\t\t{\r"), String("\t\t\t\tif ( !cent->gent->bounceCount )\r"), String("\t\t\t\t{//not an EWeb\r"), String("\t\t\t\t\tent.customShader = cgi_R_RegisterShader( \"models/map_objects/imp_mine/turret_chair_dmg\" );\r"), String("\t\t\t\t}\r"), String("\r"), String("\t\t\t\tVectorSet( temp, 0, 0, 1 );\r"), String("\r"), String("\t\t\t\t// add a big scorch mark under the gun\r"), String("\t\t\t\tCG_ImpactMark( cgs.media.scavMarkShader, cent->lerpOrigin, temp, \r"), String("\t\t\t\t\t0, 1,1,1, 1.0f, qfalse, 92, qtrue );\r"), String("\t\t\t\tCG_ImpactMark( cgs.media.scavMarkShader, cent->lerpOrigin, temp, \r"), String("\t\t\t\t\t90, 1,1,1, 1.0f, qfalse, 48, qtrue );\r"), String("\t\t\t}\r"), String("\t\t\telse\r"), String("\t\t\t{\r"), String("\t\t\t\tVectorSet( temp, 0, 0, 1 );\r"), String("\r"), String("\t\t\t\tif ( !( cent->gent->svFlags & SVF_INACTIVE ))\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tif ( !cent->gent->bounceCount )\r"), String("\t\t\t\t\t{//not an EWeb\r"), String("\t\t\t\t\t\tent.customShader = cgi_R_RegisterShader( \"models/map_objects/imp_mine/turret_chair_on\" );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\r"), String("\t\t\t\t// shadow under the gun\r"), String("\t\t\t\tCG_ImpactMark( cgs.media.shadowMarkShader, cent->lerpOrigin, temp, \r"), String("\t\t\t\t\t0, 1,1,1, 1.0f, qfalse, 32, qtrue );\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\r"), String("\t\tif ( cent->gent->activator && cent->gent->activator->owner && \r"), String("\t\t\t\tcent->gent->activator->s.eFlags & EF_LOCKED_TO_WEAPON && \r"), String("\t\t\t\tcent->gent->activator->owner->s.number == cent->currentState.number ) // gun number must be same as current entities number\r"), String("\t\t{\r"), String("\t\t\tcentity_t *cc = &cg_entities[cent->gent->activator->s.number];\r"), String("\r"), String("const weaponData_t  *wData = NULL;\r"), String("\r"), String("\t\t\tif ( cc->currentState.weapon )\r"), String("\t\t\t{\r"), String("\t\t\t\twData = &weaponData[cc->currentState.weapon];\r"), String("\t\t\t}\r"), String("\r"), String("\t\t\tif ( !( cc->currentState.eFlags & EF_FIRING ) && !( cc->currentState.eFlags & EF_ALT_FIRING ))\r"), String("\t\t\t{\r"), String("\t\t\t\t// not animating..pausing was leaving the barrels in a bad state\r"), String("\t\t\t\tgi.G2API_PauseBoneAnim( &cent->gent->ghoul2[cent->gent->playerModel], \"model_root\", cg.time );\r"), String("\r"), String("//\t\t\t\tgi.G2API_SetBoneAnimIndex( &cent->gent->ghoul2[cent->gent->playerModel], cent->gent->rootBone, \r"), String("//\t\t\t\t\t\t0, 0, BONE_ANIM_OVERRIDE, 1.0f, cg.time );\r"), String("\t\t\t}\r"), String("\r"), String("\t\t\t// get alternating muzzle end bolts\r"), String("\t\t\tint\t\t\tbolt = cent->gent->handRBolt;\r"), String("\t\t\tmdxaBone_t\tboltMatrix;\r"), String("\r"), String("\t\t\tif ( !cc->gent->fxID || bolt == -1 )\r"), String("\t\t\t{\r"), String("\t\t\t\tbolt = cent->gent->handLBolt;\r"), String("\t\t\t}\r"), String("\r"), String("\t\t\tif ( bolt == -1 )\r"), String("\t\t\t{\r"), String("\t\t\t\tbolt = 0;\r"), String("\t\t\t}\r"), String("\t\t\tgi.G2API_GetBoltMatrix( cent->gent->ghoul2, 0, bolt, \r"), String("\t\t\t\t&boltMatrix, cent->lerpAngles, cent->lerpOrigin, cg.time,\r"), String("\t\t\t\tcgs.model_draw, cent->currentState.modelScale );\r"), String("\r"), String("\t\t\t// store the muzzle point and direction so that we can fire in the right direction\r"), String("\t\t\tgi.G2API_GiveMeVectorFromMatrix( boltMatrix, ORIGIN, cc->gent->client->renderInfo.muzzlePoint );\r"), String("\t\t\tif ( cent->gent->bounceCount )\r"), String("\t\t\t{//EWeb - *sigh* the muzzle tag on this is not aligned like th eone on the emplaced gun... consistency anyone...?\r"), String("\t\t\t\tgi.G2API_GiveMeVectorFromMatrix( boltMatrix, NEGATIVE_X, cc->gent->client->renderInfo.muzzleDir );\r"), String("\t\t\t}\r"), String("\t\t\telse\r"), String("\t\t\t{//Emplaced gun\r"), String("\t\t\t\tgi.G2API_GiveMeVectorFromMatrix( boltMatrix, POSITIVE_Y, cc->gent->client->renderInfo.muzzleDir );\r"), String("\t\t\t}\r"), String("\t\t\tcc->gent->client->renderInfo.mPCalcTime = cg.time;\r"), String("\r"), String("\t\t\t// HACK: adding in muzzle flashes\r"), String("\t\t\tif ( cc->muzzleFlashTime > 0 && wData )\r"), String("\t\t\t{\r"), String("\t\t\t\tconst char *effect = NULL;\r"), String("\t\t\t\tcc->muzzleFlashTime = 0;\r"), String("\r"), String("\t\t\t\t// Try and get a default muzzle so we have one to fall back on\r"), String("\t\t\t\tif ( wData->mMuzzleEffect[0] )\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\teffect = &wData->mMuzzleEffect[0];\r"), String("\t\t\t\t}\r"), String("\r"), String("\t\t\t\tif ( cc->currentState.eFlags & EF_ALT_FIRING )\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\t// We\'re alt-firing, so see if we need to override with a custom alt-fire effect\r"), String("\t\t\t\t\tif ( wData->mAltMuzzleEffect[0] )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\teffect = &wData->mAltMuzzleEffect[0];\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\r"), String("\t\t\t\tif ( cc->currentState.eFlags & EF_FIRING || cc->currentState.eFlags & EF_ALT_FIRING )\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tif ( cent->gent->bounceCount )\r"), String("\t\t\t\t\t{//EWeb\r"), String("\t\t\t\t\t\tgi.G2API_SetBoneAnimIndex( &cent->gent->ghoul2[cent->gent->playerModel], cent->gent->rootBone, \r"), String("\t\t\t\t\t\t\t2, 4, BONE_ANIM_OVERRIDE_FREEZE, 0.6f, cg.time, -1, -1 );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\telse\r"), String("\t\t\t\t\t{//Emplaced Gun\r"), String("\t\t\t\t\t\tgi.G2API_SetBoneAnimIndex( &cent->gent->ghoul2[cent->gent->playerModel], cent->gent->rootBone, \r"), String("\t\t\t\t\t\t\t0, 3, BONE_ANIM_OVERRIDE_FREEZE, 0.6f, cg.time, -1, -1 );\r"), String("\t\t\t\t\t}\r"), String("\t\t\r"), String("\t\t\t\t\tif ( effect )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\t// We got an effect and we\'re firing, so let \'er rip.\r"), String("\t\t\t\t\t\ttheFxScheduler.PlayEffect( effect, cc->gent->client->renderInfo.muzzlePoint, \r"), String("\t\t\t\t\t\t\t\t\t\t\t\t\tcc->gent->client->renderInfo.muzzleDir );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\r"), String("\t\t\tVectorCopy( cent->gent->s.apos.trBase, cent->lerpAngles );\r"), String("\t\t}\r"), String("\t\t//-------------------------------------------------------\r"), String("\t\t// End of chair\r"), String("\t\t//-------------------------------------------------------\r"), String("\r"), String("\t\tAnglesToAxis( cent->lerpAngles, ent.axis );\r"), String("\t}\r"), String("\r"), String("\t//copy modelscale, if any\r"), String("\tVectorCopy( cent->currentState.modelScale, ent.modelScale );\r"), String("\t//apply modelscale, if any\r"), String("\tScaleModelAxis(&ent);\r"), String("\r"), String("\tif (cent->gent->ghoul2.size())\r"), String("\t{\r"), String("\t\t//FIXME: use a flag for this, not a strcmp\r"), String("\t\tif ( cent->gent->classname && Q_stricmp( \"limb\", cent->gent->classname ) == 0 )\r"), String("\t\t{//limb, copy RGB\r"), String("\t\t\tent.shaderRGBA[0] = cent->gent->startRGBA[0];\r"), String("\t\t\tent.shaderRGBA[1] = cent->gent->startRGBA[1];\r"), String("\t\t\tent.shaderRGBA[2] = cent->gent->startRGBA[2];\r"), String("\t\t}\r"), String("\t\tif ( s1->weapon == WP_SABER && cent->gent && cent->gent->owner && cent->gent->owner->inuse )\r"), String("\t\t{//flying lightsaber\r"), String("\t\t\t//FIXME: better way to tell what it is would be nice\r"), String("\t\t\tif ( cent->gent->classname && !Q_stricmp( \"limb\", cent->gent->classname ) )\r"), String("\t\t\t{//limb, just add blade\r"), String("\t\t\t\tif ( cent->gent->owner->client )\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tif ( cent->gent->owner->client->ps.saber[0].Length() > 0 )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tCG_AddSaberBlade( &cg_entities[cent->gent->owner->s.number], \r"), String("\t\t\t\t\t\t\t&cg_entities[cent->gent->s.number], NULL, ent.renderfx, \r"), String("\t\t\t\t\t\t\tcent->gent->weaponModel[0], cent->lerpOrigin, cent->lerpAngles );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\telse if ( cent->gent->owner->client->ps.saberEventFlags & SEF_INWATER )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tCG_CheckSaberInWater( &cg_entities[cent->gent->owner->s.number], \r"), String("\t\t\t\t\t\t\t&cg_entities[cent->gent->s.number], 0, cent->gent->weaponModel[0], \r"), String("\t\t\t\t\t\t\tcent->lerpOrigin, cent->lerpAngles );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\t\t\telse\r"), String("\t\t\t{//thrown saber\r"), String("\t\t\t\t//light?  sound?\r"), String("\t\t\t\tif ( cent->gent->owner->client && g_entities[cent->currentState.otherEntityNum].client && g_entities[cent->currentState.otherEntityNum].client->ps.saber[0].Active() )\r"), String("\t\t\t\t{//saber is in-flight and active, play a sound on it\r"), String("\t\t\t\t\tif ( cent->gent->owner->client->ps.saberEntityState == SES_RETURNING \r"), String("\t\t\t\t\t\t&& cent->gent->owner->client->ps.saber[0].type != SABER_STAR )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, \r"), String("\t\t\t\t\t\t\tcent->lerpOrigin, vec3_origin, \r"), String("\t\t\t\t\t\t\tcgs.sound_precache[g_entities[cent->currentState.clientNum].client->ps.saber[0].soundLoop] );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\telse\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tint spinSound;\r"), String("\t\t\t\t\t\tif ( cent->gent->owner->client->ps.saber[0].spinSound \r"), String("\t\t\t\t\t\t\t&& cgs.sound_precache[cent->gent->owner->client->ps.saber[0].spinSound] )\r"), String("\t\t\t\t\t\t{\r"), String("\t\t\t\t\t\t\tspinSound = cgs.sound_precache[cent->gent->owner->client->ps.saber[0].spinSound];\r"), String("\t\t\t\t\t\t}\r"), String("\t\t\t\t\t\telse if ( cent->gent->owner->client->ps.saber[0].type == SABER_SITH_SWORD )\r"), String("\t\t\t\t\t\t{\r"), String("\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspinoff.wav\" );\r"), String("\t\t\t\t\t\t}\r"), String("\t\t\t\t\t\telse\r"), String("\t\t\t\t\t\t{\r"), String("\t\t\t\t\t\t\tswitch ( cent->gent->owner->client->ps.forcePowerLevel[FP_SABERTHROW] )\r"), String("\t\t\t\t\t\t\t{\r"), String("\t\t\t\t\t\t\tcase FORCE_LEVEL_1:\r"), String("\t\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin3.wav\" );\r"), String("\t\t\t\t\t\t\t\tbreak;\r"), String("\t\t\t\t\t\t\tcase FORCE_LEVEL_2:\r"), String("\t\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin2.wav\" );\r"), String("\t\t\t\t\t\t\t\tbreak;\r"), String("\t\t\t\t\t\t\tdefault:\r"), String("\t\t\t\t\t\t\tcase FORCE_LEVEL_3:\r"), String("\t\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin1.wav\" );\r"), String("\t\t\t\t\t\t\t\tbreak;\r"), String("\t\t\t\t\t\t\t}\r"), String("\t\t\t\t\t\t}\r"), String("\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, \r"), String("\t\t\t\t\t\t\tvec3_origin, spinSound );\r"), String("\t\t\t\t\t\t/*\r"), String("\t\t\t\t\t\tif ( cg_weapons[WP_SABER].missileSound )\r"), String("\t\t\t\t\t\t{\r"), String("\t\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, cg_weapons[WP_SABER].missileSound );\r"), String("\t\t\t\t\t\t}\r"), String("\t\t\t\t\t\t*/\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\t\t\t\tif ( cent->gent->owner->client )\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tif ( cent->gent->owner->client->ps.saber[0].Length() > 0 )\r"), String("\t\t\t\t\t{//only add the blade if it\'s on\r"), String("\t\t\t\t\t\tCG_AddSaberBlade( &cg_entities[cent->gent->owner->s.number], \r"), String("\t\t\t\t\t\t\t&cg_entities[cent->gent->s.number], NULL, ent.renderfx, \r"), String("\t\t\t\t\t\t\t0, cent->lerpOrigin, cent->lerpAngles );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\telse if ( cent->gent->owner->client->ps.saberEventFlags & SEF_INWATER )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tCG_CheckSaberInWater( &cg_entities[cent->gent->owner->s.number], \r"), String("\t\t\t\t\t\t\t&cg_entities[cent->gent->s.number], 0, 0, cent->lerpOrigin, \r"), String("\t\t\t\t\t\t\tcent->lerpAngles );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\t\t\t\tif ( cent->gent->owner->health )\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\t//make sure we can always be seen\r"), String("\t\t\t\t\tent.renderfx |= RF_PULSATE;\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\tif ( s1->weapon == WP_SABER && cent->gent && cent->gent->owner )\r"), String("\t\t{//flying lightsaber\r"), String("\t\t\t//light?  sound?\r"), String("\t\t\tif ( cent->gent->owner->client && cent->currentState.saberActive )\r"), String("\t\t\t{//saber is in-flight and active, play a sound on it\r"), String("\t\t\t\tif ( cent->gent->owner->client->ps.saberEntityState == SES_RETURNING \r"), String("\t\t\t\t\t&& cent->gent->owner->client->ps.saber[0].type != SABER_STAR )\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tif ( cg_weapons[WP_SABER].firingSound )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, \r"), String("\t\t\t\t\t\t\tcent->lerpOrigin, vec3_origin, cg_weapons[WP_SABER].firingSound );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\t\t\t\telse\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tint spinSound;\r"), String("\t\t\t\t\tif ( cent->gent->owner->client->ps.saber[0].spinSound \r"), String("\t\t\t\t\t\t&& cgs.sound_precache[cent->gent->owner->client->ps.saber[0].spinSound] )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tspinSound = cgs.sound_precache[cent->gent->owner->client->ps.saber[0].spinSound];\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\telse if ( cent->gent->owner->client->ps.saber[0].type == SABER_SITH_SWORD )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspinoff.wav\" );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\telse\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tswitch ( cent->gent->owner->client->ps.forcePowerLevel[FP_SABERTHROW] )\r"), String("\t\t\t\t\t\t{\r"), String("\t\t\t\t\t\tcase FORCE_LEVEL_1:\r"), String("\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin3.wav\" );\r"), String("\t\t\t\t\t\t\tbreak;\r"), String("\t\t\t\t\t\tcase FORCE_LEVEL_2:\r"), String("\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin2.wav\" );\r"), String("\t\t\t\t\t\t\tbreak;\r"), String("\t\t\t\t\t\tdefault:\r"), String("\t\t\t\t\t\tcase FORCE_LEVEL_3:\r"), String("\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin1.wav\" );\r"), String("\t\t\t\t\t\t\tbreak;\r"), String("\t\t\t\t\t\t}\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, \r"), String("\t\t\t\t\t\tvec3_origin, spinSound );\r"), String("\t\t\t\t\t/*\r"), String("\t\t\t\t\tif ( cg_weapons[WP_SABER].missileSound )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, cg_weapons[WP_SABER].missileSound );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\t*/\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\t\t\tCG_AddSaberBlade( &cg_entities[cent->gent->owner->s.number], \r"), String("\t\t\t\tNULL, &ent, ent.renderfx, 0, NULL, NULL );\r"), String("\r"), String("\t\t\tif ( cent->gent->owner->health )\r"), String("\t\t\t{\r"), String("\t\t\t\t//make sure we can always be seen\r"), String("\t\t\t\tent.renderfx |= RF_PULSATE;\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t}\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\tif ( cent->gent && cent->gent->forcePushTime > cg.time )\r"), String("\t{//FIXME: if I\'m a rather large model, this will look kind of stupid...\r"), String("\t\tCG_ForcePushBlur( cent->lerpOrigin );\r"), String("\t}\r"), String("\tCG_AddRefEntWithTransportEffect( cent, &ent );\r"), String("\r"), String("\tif ( cent->gent->health <= 0 \r"), String("\t\t&& cent->gent->s.weapon == WP_EMPLACED_GUN \r"), String("\t\t&& cent->gent->e_ThinkFunc )\r"), String("\t{\r"), String("\t\t// make the gun pulse red to warn about it exploding\r"), String("\t\tfloat val = (1.0f - (float)(cent->gent->nextthink - cg.time) / 3200.0f ) * 0.3f;\r"), String("\r"), String("\t\tent.customShader = cgi_R_RegisterShader( \"gfx/effects/solidWhite\" );\r"), String("\t\tent.shaderRGBA[0] = (sin( cg.time * 0.04f ) * val * 0.4f + val) * 255;\r"), String("\t\tent.shaderRGBA[1] = ent.shaderRGBA[2] = 0;\r"), String("\t\tent.renderfx |= RF_RGB_TINT;\r"), String("\t\tcgi_R_AddRefEntityToScene( &ent );\r"), String("\t}\r"), String("\r"), String("\t//--------------------------\r"), String("\tif ( s1->eFlags & EF_FIRING && cent->gent->inuse )\r"), String("\t{\r"), String("\t\t//special code for adding the beam to the attached tripwire mine\r"), String("\t\tvec3_t\t\t\tbeamOrg;\r"), String("\t\tint\t\t\t\thandle = 0;\r"), String("\t\tSEffectTemplate\t*temp;\r"), String("\r"), String("\t\tVectorMA( ent.origin, 6.6f, ent.axis[0], beamOrg );// forward\r"), String("\r"), String("\t\t// overriding the effect, so give us a copy first\r"), String("\t\ttemp = theFxScheduler.GetEffectCopy( \"tripMine/laser\", &handle );\t\r"), String("\r"), String("\t\tif ( temp )\r"), String("\t\t{\r"), String("\t\t\t// have a copy, so get the line element out of there\r"), String("\t\t\tCPrimitiveTemplate *prim = theFxScheduler.GetPrimitiveCopy( temp, \"line1\" );\r"), String("\r"), String("\t\t\tif ( prim )\r"), String("\t\t\t{\r"), String("\t\t\t\t// we have the primitive, so modify the endpoint\r"), String("\t\t\t\tprim->mOrigin2X.SetRange( cent->gent->pos4[0], cent->gent->pos4[0] );\r"), String("\t\t\t\tprim->mOrigin2Y.SetRange( cent->gent->pos4[1], cent->gent->pos4[1] );\r"), String("\t\t\t\tprim->mOrigin2Z.SetRange( cent->gent->pos4[2], cent->gent->pos4[2] );\r"), String("\r"), String("\t\t\t\t// have a copy, so get the line element out of there\r"), String("\t\t\t\tCPrimitiveTemplate *prim = theFxScheduler.GetPrimitiveCopy( temp, \"line2\" );\r"), String("\r"), String("\t\t\t\tif ( prim )\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\t// we have the primitive, so modify the cent->gent->pos3point\r"), String("\t\t\t\t\tprim->mOrigin2X.SetRange( cent->gent->pos4[0], cent->gent->pos4[0] );\r"), String("\t\t\t\t\tprim->mOrigin2Y.SetRange( cent->gent->pos4[1], cent->gent->pos4[1] );\r"), String("\t\t\t\t\tprim->mOrigin2Z.SetRange( cent->gent->pos4[2], cent->gent->pos4[2] );\r"), String("\r"), String("\t\t\t\t\t// play the modified effect\r"), String("\t\t\t\t\ttheFxScheduler.PlayEffect( handle, beamOrg, ent.axis[0] );\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\r"), String("\t\ttheFxScheduler.PlayEffect( \"tripMine/laserImpactGlow\", cent->gent->pos4, ent.axis[0] );\r"), String("\t}\r"), String("\r"), String("\r"), String("\tif ( s1->eFlags & EF_PROX_TRIP )\r"), String("\t{\r"), String("\t\t//special code for adding the glow end to proximity tripmine\r"), String("\t\tvec3_t\tbeamOrg;\r"), String("\r"), String("\t\tVectorMA( ent.origin, 6.6f, ent.axis[0], beamOrg );// forward\r"), String("\t\ttheFxScheduler.PlayEffect( \"tripMine/glowBit\", beamOrg, ent.axis[0] );\r"), String("\t}\r"), String("\r"), String("\tif ( s1->eFlags & EF_ALT_FIRING )\r"), String("\t{\r"), String("\t\t// hack for the spotlight\r"), String("\t\tvec3_t\torg, axis[3], dir;\r"), String("\r"), String("\t\tAngleVectors( cent->lerpAngles, dir, NULL, NULL );\r"), String("\r"), String("\t\tCG_GetTagWorldPosition( &ent, \"tag_flash\", org, axis );\r"), String("\r"), String("\t\ttheFxScheduler.PlayEffect( \"env/light_cone\", org, axis[0] );\r"), String("\r"), String("\t\tVectorMA( cent->lerpOrigin, cent->gent->radius - 5, dir, org ); // stay a bit back from the impact point...this may not be enough?\r"), String("\r"), String("\t\tcgi_R_AddLightToScene( org, 225, 1.0f, 1.0f, 1.0f );\r"), String("\t}\r"), String("\r"), String("\t//-----------------------------------------------------------\r"), String("\tif ( cent->gent->flags & (FL_DMG_BY_HEAVY_WEAP_ONLY | FL_SHIELDED ))\r"), String("\t{\r"), String("\t\t// Dumb assumption, but I guess we must be a shielded ion_cannon??  We should probably verify\r"), String("\t\t// if it\'s an ion_cannon that\'s Heavy Weapon only, we don\'t want to make it shielded do we...?\r"), String("\t\tif ( (!strcmp( \"misc_ion_cannon\", cent->gent->classname )) && (cent->gent->flags & FL_SHIELDED ))\r"), String("\t\t{\r"), String("\t\t\t// must be doing \"pain\"....er, impact\r"), String("\t\t\tif ( cent->gent->painDebounceTime > cg.time )\r"), String("\t\t\t{\r"), String("\t\t\t\tfloat t = (float)(cent->gent->painDebounceTime - cg.time ) / 1000.0f;\r"), String("\r"), String("\t\t\t\t// Only display when we have damage\r"), String("\t\t\t\tif ( t >= 0.0f && t <= 1.0f ) \r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tt *= random();\r"), String("\r"), String("\t\t\t\t\tent.shaderRGBA[0] = ent.shaderRGBA[1] = ent.shaderRGBA[2] = 255.0f * t;\r"), String("\t\t\t\t\tent.shaderRGBA[3] = 255;\r"), String("\t\t\t\t\tent.renderfx &= ~RF_ALPHA_FADE;\r"), String("\t\t\t\t\tent.renderfx |= RF_RGB_TINT;\r"), String("\t\t\t\t\tent.customShader = cgi_R_RegisterShader( \"gfx/misc/ion_shield\" );\r"), String("\t\t\t\t\r"), String("\t\t\t\t\tcgi_R_AddRefEntityToScene( &ent );\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t}\r"), String("\r"), String("\t//draw force sight shell around it, too\r"), String("\tif ((cg.snap->ps.forcePowersActive & (1 << FP_SEE)) \r"), String("\t\t&& cg.snap->ps.clientNum != cent->currentState.number \r"), String("\t\t&& CG_PlayerCanSeeCent( cent ) )\r"), String("\t{//so player can see dark missiles/explosives\r"), String("\t\tif ( s1->weapon == WP_THERMAL\r"), String("\t\t\t|| s1->weapon == WP_DET_PACK\r"), String("\t\t\t|| s1->weapon == WP_TRIP_MINE\r"), String("\t\t\t|| (cent->gent&&cent->gent->e_UseFunc==useF_ammo_power_converter_use)\r"), String("\t\t\t|| (cent->gent&&cent->gent->e_UseFunc==useF_shield_power_converter_use)\r"), String("\t\t\t|| (s1->eFlags&EF_FORCE_VISIBLE) )\r"), String("\t\t{//really, we only need to do this for things like thermals, detpacks and tripmines, no?\r"), String("\t\t\tCG_AddForceSightShell( &ent, cent );\r"), String("\t\t}\r"), String("\t}\r"), String("}\r"), String("\r"), String("/*\r"), String("==================\r"), String("CG_Speaker\r"), String("\r"), String("Speaker entities can automatically play sounds\r"), String("==================\r"), String("*/\r"), String("static void CG_Speaker( centity_t *cent ) {\r"), String("\tif ( ! cent->currentState.clientNum ) {\t// FIXME: use something other than clientNum...\r"), String("\t\treturn;\t\t// not auto triggering\r"), String("\t}\r"), String("\r"), String("\tif ( cg.time < cent->miscTime ) {\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tcgi_S_StartSound (NULL, cent->currentState.number, CHAN_ITEM, cgs.sound_precache[cent->currentState.eventParm] );\r"), String("\r"), String("\t//\tent->s.frame = ent->wait * 10;\r"), String("\t//\tent->s.clientNum = ent->random * 10;\r"), String("\tcent->miscTime = (int)(cg.time + cent->currentState.frame * 100 + cent->currentState.clientNum * 100 * crandom());\r"), String("}\r"), String("\r"), String("/*\r"), String("==================\r"), String("CG_Item\r"), String("==================\r"), String("*/\r"), String("static void CG_Item( centity_t *cent ) \r"), String("{\r"), String("\trefEntity_t\t\t\tent;\r"), String("\tentityState_t\t\t*es;\r"), String("\tgitem_t\t\t\t\t*item;\r"), String("//\tint\t\t\t\t\tmsec;\r"), String("//\tfloat\t\t\t\tfrac;\r"), String("\tfloat\t\t\t\tscale;\r"), String("\r"), String("\tes = &cent->currentState;\r"), String("\tif ( es->modelindex >= bg_numItems ) \r"), String("\t{\r"), String("\t\tCG_Error( \"Bad item index %i on entity\", es->modelindex );\r"), String("\t}\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\r"), String("\t// if set to invisible, skip\r"), String("\tif ( (!es->modelindex && !cent->gent->ghoul2.IsValid() ) || ( es->eFlags & EF_NODRAW ) ) \r"), String("\t{\r"), String("\t\treturn;\r"), String("\t}\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\tif ( cent->gent && !cent->gent->inuse )\r"), String("\t{\r"), String("\t\t// Yeah, I know....items were being freed on touch, but it could still get here and draw incorrectly...\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\titem = &bg_itemlist[ es->modelindex ];\r"), String("\r"), String("\tif ( cg_simpleItems.integer ) \r"), String("\t{\r"), String("\t\tmemset( &ent, 0, sizeof( ent ) );\r"), String("\t\tent.reType = RT_SPRITE;\r"), String("\t\tVectorCopy( cent->lerpOrigin, ent.origin );\r"), String("\t\tent.radius = 14;\r"), String("\t\tent.customShader = cg_items[es->modelindex].icon;\r"), String("\t\tent.shaderRGBA[0] = 255;\r"), String("\t\tent.shaderRGBA[1] = 255;\r"), String("\t\tent.shaderRGBA[2] = 255;\r"), String("\t\tent.shaderRGBA[3] = 255;\r"), String("\t\tcgi_R_AddRefEntityToScene(&ent);\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tmemset (&ent, 0, sizeof(ent));\r"), String("\r"), String("\t// items bob up and down continuously\r"), String("\tif( item->giType == IT_HOLOCRON )\r"), String("\t{\r"), String("\t\tscale = 0.005f + cent->currentState.number * 0.00001f;\r"), String("\t\tcent->lerpOrigin[2] += (float)(4 + cos( ( cg.time + 1000 ) *  scale ) * 3)+8; // just raised them up a bit\r"), String("\t}\r"), String("\r"), String("\r"), String("\r"), String("\t// autorotate at one of two speeds\r"), String("//\tif ( item->giType == IT_HEALTH ) {\r"), String("//\t\tVectorCopy( cg.autoAnglesFast, cent->lerpAngles );\r"), String("//\t\tAxisCopy( cg.autoAxisFast, ent.axis );\r"), String("//\t} else {\r"), String("\tif( item->giType == IT_HOLOCRON )\r"), String("\t{\r"), String("\t\tVectorCopy( cg.autoAngles, cent->lerpAngles );\r"), String("\t\tAxisCopy( cg.autoAxis, ent.axis );\r"), String("\t}\r"), String("\r"), String("\r"), String("\t// the weapons have their origin where they attatch to player\r"), String("\t// models, so we need to offset them or they will rotate\r"), String("\t// eccentricly\r"), String("//\tif ( item->giType == IT_WEAPON ) {\r"), String("//\t\tweaponInfo_t\t*wi;\r"), String("//\r"), String("//\t\twi = &cg_weapons[item->giTag];\r"), String("//\t\tcent->lerpOrigin[0] -= \r"), String("//\t\t\twi->weaponMidpoint[0] * ent.axis[0][0] +\r"), String("//\t\t\twi->weaponMidpoint[1] * ent.axis[1][0] +\r"), String("//\t\t\twi->weaponMidpoint[2] * ent.axis[2][0];\r"), String("//\t\tcent->lerpOrigin[1] -= \r"), String("//\t\t\twi->weaponMidpoint[0] * ent.axis[0][1] +\r"), String("//\t\t\twi->weaponMidpoint[1] * ent.axis[1][1] +\r"), String("//\t\t\twi->weaponMidpoint[2] * ent.axis[2][1];\r"), String("//\t\tcent->lerpOrigin[2] -= \r"), String("//\t\t\twi->weaponMidpoint[0] * ent.axis[0][2] +\r"), String("//\t\t\twi->weaponMidpoint[1] * ent.axis[1][2] +\r"), String("//\t\t\twi->weaponMidpoint[2] * ent.axis[2][2];\r"), String("\r"), String("//\t\tcent->lerpOrigin[2] += 8;\t// an extra height boost\r"), String("//\t}\r"), String("\tvec3_t spinAngles;\r"), String("\r"), String("\t//AxisClear( ent.axis );\r"), String("\tVectorCopy( cent->gent->s.angles, spinAngles );\r"), String("\r"), String("\tif ( cent->gent->ghoul2.IsValid()\r"), String("\t\t&& cent->gent->ghoul2.size() )\r"), String("\t{//since modelindex is used by items as an index into items(not models), we need to ignore the hModel here to force it to use the ghoul2 model if we have one\r"), String("\t\tent.hModel = cgs.model_draw[0];\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\tent.hModel = cg_items[es->modelindex].models;\r"), String("\t}\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\tCG_SetGhoul2Info(&ent, cent);  \r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\tVectorCopy( cent->lerpOrigin, ent.origin);\r"), String("\tVectorCopy( cent->lerpOrigin, ent.oldorigin);\r"), String("\r"), String("\tent.nonNormalizedAxes = qfalse;\r"), String("\r"), String("\t// lovely...this is for weapons that should be oriented vertically.  For weapons lockers and such.\r"), String("\tif ( cent->gent->spawnflags & 16 )\r"), String("\t{\t//VectorClear( spinAngles );\r"), String("\t\tif ( item->giType == IT_WEAPON \r"), String("\t\t\t&& item->giTag == WP_SABER )\r"), String("\t\t{\r"), String("\t\t\tif ( cent->gent->random )\r"), String("\t\t\t{//pitch specified\r"), String("\t\t\t\tspinAngles[PITCH] += cent->gent->random;\r"), String("\t\t\t}\r"), String("\t\t\telse\r"), String("\t\t\t{\r"), String("\t\t\t\tspinAngles[PITCH] -= 20;\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("\t\t\tspinAngles[PITCH] -= 75;\r"), String("\t\t}\r"), String("\t}\r"), String("\t\r"), String("\tif( item->giType != IT_HOLOCRON )\r"), String("\t{\r"), String("\t\tAnglesToAxis( spinAngles, ent.axis );\r"), String("\t}\r"), String("\r"), String("\t// items without glow textures need to keep a minimum light value\r"), String("\t// so they are always visible\r"), String("/*\tif (( item->giType == IT_WEAPON ) || ( item->giType == IT_ARMOR )) \r"), String("\t{\r"), String("\t\tent.renderfx |= RF_MINLIGHT;\r"), String("\t}\r"), String("*/\r"), String("\t// increase the size of the weapons when they are presented as items\r"), String("//\tif ( item->giType == IT_WEAPON ) {\r"), String("//\t\tVectorScale( ent.axis[0], 1.5f, ent.axis[0] );\r"), String("//\t\tVectorScale( ent.axis[1], 1.5f, ent.axis[1] );\r"), String("//\t\tVectorScale( ent.axis[2], 1.5f, ent.axis[2] );\r"), String("//\t\tent.nonNormalizedAxes = qtrue;\r"), String("//\t}\r"), String("\r"), String("\t// add to refresh list\r"), String("\tcgi_R_AddRefEntityToScene(&ent);\r"), String("\r"), String("\tif ((cg.snap->ps.forcePowersActive & (1 << FP_SEE)) \r"), String("\t\t&& cg.snap->ps.clientNum != cent->currentState.number \r"), String("\t\t&& CG_PlayerCanSeeCent( cent ) )\r"), String("\t{\r"), String("\t\tCG_AddForceSightShell( &ent, cent );\r"), String("\t}\r"), String("\r"), String("\tif ( item->giType == IT_WEAPON \r"), String("\t\t&& item->giTag == WP_SABER \r"), String("\t\t&& (!cent->gent || !(cent->gent->spawnflags&64/*ITMSF_NOGLOW*/)) )\r"), String("\t{\r"), String("\t\t// saber pickup item needs to be more visible\r"), String("\t\tfloat\twv;\r"), String("\t\tvec3_t\torg;\r"), String("\r"), String("\t\tent.customShader = cgi_R_RegisterShader( \"gfx/effects/solidWhite_cull\" );\r"), String("\t\tent.renderfx = RF_RGB_TINT;\r"), String("\t\twv = sin( cg.time * 0.002f ) * 0.08f + 0.2f;\r"), String("\t\tent.shaderRGBA[0] = ent.shaderRGBA[1] = wv * 255;\r"), String("\t\tent.shaderRGBA[2] = 0;\r"), String("\t\tcgi_R_AddRefEntityToScene(&ent);\r"), String("\r"), String("\t\tfor ( int i = -4; i < 10; i += 1 )\r"), String("\t\t{\r"), String("\t\t\tVectorMA( ent.origin, -i, ent.axis[2], org );\r"), String("\r"), String("\t\t\tFX_AddSprite( org, NULL, NULL, 10.0f, 10.0f, wv * 0.5f, wv * 0.5f, 0.0f, 0.0f, 1.0f, cgs.media.yellowDroppedSaberShader, 0x08000000 );\r"), String("\t\t}\r"), String("\r"), String("\t\t// THIS light looks crappy...maybe it should just be removed...\r"), String("\t\tcgi_R_AddLightToScene( ent.origin, wv * 350 + 180, 1.0f, 1.0f, 0.0f );\r"), String("\t}\r"), String("}\r"), String("\r"), String("//============================================================================\r"), String("\r"), String("/*\r"), String("===============\r"), String("CG_Missile\r"), String("===============\r"), String("*/\r"), String("static void CG_Missile( centity_t *cent ) {\r"), String("\trefEntity_t\t\t\tent;\r"), String("\tentityState_t\t\t*s1;\r"), String("\tconst weaponInfo_t\t*weapon;\r"), String("\tconst weaponData_t  *wData;\r"), String("\r"), String("\tif ( !cent->gent->inuse )\r"), String("\t\treturn;\r"), String("\r"), String("\ts1 = &cent->currentState;\r"), String("\tif ( s1->weapon >= WP_NUM_WEAPONS ) {\r"), String("\t\ts1->weapon = 0;\r"), String("\t}\r"), String("\tweapon = &cg_weapons[s1->weapon];\r"), String("\twData = &weaponData[s1->weapon];\r"), String("\r"), String("\tif ( s1->pos.trType != TR_INTERPOLATE )\r"), String("\t{\r"), String("\t\t// calculate the axis\r"), String("\t\tVectorCopy( s1->angles, cent->lerpAngles );\r"), String("\t}\r"), String("\r"), String("\tif ( cent->gent->alt_fire )\r"), String("\t{\r"), String("\t\t// add trails\r"), String("\t\tif ( weapon->alt_missileTrailFunc )  \r"), String("\t\t\tweapon->alt_missileTrailFunc( cent, weapon );\r"), String("\r"), String("\t\t// add dynamic light\r"), String("\t\tif ( wData->alt_missileDlight )\r"), String("\t\t\t\tcgi_R_AddLightToScene(cent->lerpOrigin, wData->alt_missileDlight, \r"), String("\t\t\t\t\twData->alt_missileDlightColor[0], wData->alt_missileDlightColor[1], wData->alt_missileDlightColor[2] );\r"), String("\r"), String("\t\t// add missile sound\r"), String("\t\tif ( weapon->alt_missileSound )\r"), String("\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->alt_missileSound );\r"), String("\r"), String("\t\t//Don\'t draw something without a model\r"), String("\t\tif ( weapon->alt_missileModel == NULL )\r"), String("\t\t\treturn;\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\t// add trails\r"), String("\t\tif ( weapon->missileTrailFunc )  \r"), String("\t\t\tweapon->missileTrailFunc( cent, weapon );\r"), String("\r"), String("\t\t// add dynamic light\r"), String("\t\tif ( wData->missileDlight )\r"), String("\t\t\tcgi_R_AddLightToScene(cent->lerpOrigin, wData->missileDlight, \r"), String("\t\t\t\twData->missileDlightColor[0], wData->missileDlightColor[1], wData->missileDlightColor[2] );\r"), String("\r"), String("\t\t// add missile sound\r"), String("\t\tif ( weapon->missileSound )\r"), String("\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->missileSound );\r"), String("\r"), String("\t\t//Don\'t draw something without a model\r"), String("\t\tif ( weapon->missileModel == NULL )\r"), String("\t\t\treturn;\r"), String("\t}\r"), String("\r"), String("\t// create the render entity\r"), String("\tmemset (&ent, 0, sizeof(ent));\r"), String("\tVectorCopy( cent->lerpOrigin, ent.origin);\r"), String("\tVectorCopy( cent->lerpOrigin, ent.oldorigin);\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\tCG_SetGhoul2Info(&ent, cent);  \r"), String("\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\t// flicker between two skins\r"), String("\tent.skinNum = cg.clientFrame & 1;\r"), String("\tent.renderfx = /*weapon->missileRenderfx | */RF_NOSHADOW;\r"), String("\r"), String("\tif ( cent->gent->alt_fire )\r"), String("\t\tent.hModel = weapon->alt_missileModel;\r"), String("\telse\r"), String("\t\tent.hModel = weapon->missileModel;\r"), String("\r"), String("\t// spin as it moves\r"), String("\tif ( s1->apos.trType != TR_INTERPOLATE)\r"), String("\t{\r"), String("\r"), String("\t\t// convert direction of travel into axis\r"), String("\t\tif ( VectorNormalize2( s1->pos.trDelta, ent.axis[0] ) == 0 ) {\r"), String("\t\t\tent.axis[0][2] = 1;\r"), String("\t\t}\r"), String("\t\tif ( s1->pos.trType != TR_STATIONARY )\r"), String("\t\t{\r"), String("\t\t\tif ( s1->eFlags & EF_MISSILE_STICK )\r"), String("\t\t\t\tRotateAroundDirection( ent.axis, cg.time * 0.5f );//Did this so regular missiles don\'t get broken\r"), String("\t\t\telse\r"), String("\t\t\t\tRotateAroundDirection( ent.axis, cg.time * 0.25f );//JFM:FLOAT FIX\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("\t\t\tif ( s1->eFlags & EF_MISSILE_STICK )\r"), String("\t\t\t\tRotateAroundDirection( ent.axis, (float)s1->pos.trTime * 0.5f );\r"), String("\t\t\telse\r"), String("\t\t\t\tRotateAroundDirection( ent.axis, (float)s1->time );\r"), String("\t\t}\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\tAnglesToAxis( cent->lerpAngles, ent.axis );\r"), String("\t}\r"), String("\r"), String("\t// add to refresh list, possibly with quad glow\r"), String("\tCG_AddRefEntityWithPowerups( &ent, s1->powerups, NULL );\r"), String("\r"), String("\tif ((cg.snap->ps.forcePowersActive & (1 << FP_SEE)) \r"), String("\t\t&& cg.snap->ps.clientNum != cent->currentState.number \r"), String("\t\t&& CG_PlayerCanSeeCent( cent ) )\r"), String("\t{//so player can see dark missiles/explosives\r"), String("\t\tif ( s1->weapon == WP_THERMAL\r"), String("\t\t\t|| s1->weapon == WP_DET_PACK\r"), String("\t\t\t|| s1->weapon == WP_TRIP_MINE\r"), String("\t\t\t|| (s1->eFlags&EF_FORCE_VISIBLE) )\r"), String("\t\t{//really, we only need to do this for things like thermals, detpacks and tripmines, no?\r"), String("\t\t\tCG_AddForceSightShell( &ent, cent );\r"), String("\t\t}\r"), String("\t}\r"), String("}\r"), String("\r"), String("/*\r"), String("===============\r"), String("CG_Mover\r"), String("===============\r"), String("*/\r"), String("\r"), String("#define DOOR_OPENING\t1\r"), String("#define DOOR_CLOSING\t2\r"), String("#define DOOR_OPEN\t\t3\r"), String("#define DOOR_CLOSED\t\t4\r"), String("\r"), String("static void CG_Mover( centity_t *cent ) {\r"), String("\trefEntity_t\t\t\tent;\r"), String("\tentityState_t\t\t*s1;\r"), String("\r"), String("\ts1 = &cent->currentState;\r"), String("\r"), String("\t// create the render entity\r"), String("\tmemset (&ent, 0, sizeof(ent));\r"), String("\t//FIXME: why are these always 0, 0, 0???!\r"), String("\tVectorCopy( cent->lerpOrigin, ent.origin);\r"), String("\tVectorCopy( cent->lerpOrigin, ent.oldorigin);\r"), String("\tAnglesToAxis( cent->lerpAngles, ent.axis );\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\r"), String("\tCG_SetGhoul2Info(&ent, cent);  \r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\tent.renderfx = RF_NOSHADOW;\r"), String("\r"), String("\t// flicker between two skins (FIXME?)\r"), String("\tent.skinNum = ( cg.time >> 6 ) & 1;\r"), String("\r"), String("\t// get the model, either as a bmodel or a modelindex\r"), String("\tif ( s1->solid == SOLID_BMODEL ) {\r"), String("\t\tent.hModel = cgs.inlineDrawModel[s1->modelindex];\r"), String("\t} else {\r"), String("\t\tent.hModel = cgs.model_draw[s1->modelindex];\r"), String("\t}\r"), String("\r"), String("\t// If there isn\'t an hModel for this mover, an RGB axis model will get drawn.\r"), String("\tif ( !ent.hModel )\r"), String("\t{\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tif ( cent->currentState.eFlags & EF_DISABLE_SHADER_ANIM )\r"), String("\t{\r"), String("\t\t// by setting the shader time to the current time, we can force an animating shader to not animate\r"), String("\t\tent.shaderTime = cg.time * 0.001f;\r"), String("\t}\r"), String("\r"), String("\t// add the secondary model\r"), String("\tif ( s1->solid == SOLID_BMODEL && s1->modelindex2 ) \r"), String("\t{\r"), String("//\t\tvec3_t\torg;\r"), String("\t\tif ( !(s1->eFlags & EF_NODRAW) )\r"), String("\t\t{\r"), String("\t\t\t// add to refresh list\r"), String("\t\t\tCG_AddRefEntWithTransportEffect( cent, &ent );\r"), String("\t\t}\r"), String("\r"), String("/*\t\t// Um, this does not interpolate nicely?  Not sure why it was here....\r"), String("\t\tVectorAdd(cent->gent->absmin, cent->gent->absmax, org);\r"), String("\t\tVectorScale(org, 0.5, org);\r"), String("\t\tVectorCopy( org, ent.origin);\r"), String("\t\tVectorCopy( org, ent.oldorigin);\r"), String("*/\r"), String("\t\tif ( !VectorCompare( vec3_origin, cent->gent->modelAngles ) )\r"), String("\t\t{//we have a rotational offset for the model for this brush\r"), String("\t\t\tvec3_t modelAngles;\r"), String("\t\t\tVectorAdd( cent->lerpAngles, cent->gent->modelAngles, modelAngles );\r"), String("\t\t\tAnglesToAxis( modelAngles, ent.axis );\r"), String("\t\t}\r"), String("\t\tent.hModel = cgs.model_draw[s1->modelindex2];\r"), String("\t}\r"), String("\r"), String("\t// I changed it to always do it because nodraw seemed like it should actually do what it says. Be aware that if you change this,\r"), String("\t//\tthe movers for the shooting gallery on doom_detention will break.\r"), String("\tif ( (s1->eFlags & EF_NODRAW) )\r"), String("\t{\r"), String("\t\treturn;\r"), String("\t}\r"), String("\t//fall through and render the hModel or...\r"), String("\r"), String("\t//We\'re a normal model being moved, animate our model\r"), String("\tent.skinNum = 0;\r"), String("\tif ( s1->eFlags & EF_ANIM_ONCE )\r"), String("\t{//FIXME: needs to anim at once per 100 ms\r"), String("\t\tent.frame = cent->gent->s.frame;\r"), String("\t\tent.renderfx|=RF_CAP_FRAMES;\r"), String("\t}\r"), String("\telse if ( s1->eFlags & EF_ANIM_ALLFAST )\r"), String("\t{\r"), String("\t\tent.frame = (cg.time / 100);\r"), String("\t\tent.renderfx|=RF_WRAP_FRAMES;\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\tent.frame = s1->frame;\r"), String("\t}\r"), String("\r"), String("\tif ( s1->eFlags & EF_SHADER_ANIM )\r"), String("\t{\r"), String("\t\tent.renderfx|=RF_SETANIMINDEX;\r"), String("\t\tent.skinNum = s1->frame;\r"), String("\t\t//ent.shaderTime = cg.time*0.001f - s1->frame/s1->time;//NOTE: s1->time is number of frames\r"), String("\t}\r"), String("\r"), String("\t// add to refresh list\r"), String("\tCG_AddRefEntWithTransportEffect( cent, &ent );\r"), String("\r"), String("\tif ((cg.snap->ps.forcePowersActive & (1 << FP_SEE)) \r"), String("\t\t&& cg.snap->ps.clientNum != cent->currentState.number \r"), String("\t\t&& (s1->eFlags&EF_FORCE_VISIBLE) )\r"), String("\t{//so player can see func_breakables\r"), String("\t\tCG_AddForceSightShell( &ent, cent );\r"), String("\t}\r"), String("}\r"), String("\r"), String("/*\r"), String("===============\r"), String("CG_Beam\r"), String("\r"), String("Also called as an event\r"), String("===============\r"), String("*/\r"), String("void CG_Beam( centity_t *cent, int color ) {\r"), String("\trefEntity_t\t\t\tent;\r"), String("\tentityState_t\t\t*s1;\r"), String("\r"), String("\ts1 = &cent->currentState;\r"), String("\r"), String("\t// create the render entity\r"), String("\tmemset (&ent, 0, sizeof(ent));\r"), String("\tVectorCopy( s1->pos.trBase, ent.origin );\r"), String("\tVectorCopy( s1->origin2, ent.oldorigin );\r"), String("\tAxisClear( ent.axis );\r"), String("\tent.reType = RT_BEAM;\r"), String("\tent.skinNum = color;\r"), String("\r"), String("\tent.renderfx = RF_NOSHADOW;\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\tCG_SetGhoul2Info(&ent, cent);  \r"), String("\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\t// add to refresh list\r"), String("\tcgi_R_AddRefEntityToScene(&ent);\r"), String("}\r"), String("\r"), String("/*\r"), String("===============\r"), String("CG_Cylinder\r"), String("===============\r"), String("*/\r"), String("void CG_Cylinder( vec3_t start, vec3_t end, float radius, vec3_t color ) \r"), String("{\r"), String("\tvec3_t\tdir;\r"), String("\tfloat\tlength;\r"), String("\r"), String("\tVectorSubtract( end, start, dir );\r"), String("\tlength = VectorNormalize( dir );\r"), String("\r"), String("/*\tFX_AddCylinder( -1, start, \r"), String("\t\t\t\t\tdir, \r"), String("\t\t\t\t\tlength, \r"), String("\t\t\t\t\t0.0f, \r"), String("\t\t\t\t\tradius,\r"), String("\t\t\t\t\t0.0f,\r"), String("\t\t\t\t\tradius,\r"), String("\t\t\t\t\t0.0f,\r"), String("\t\t\t\t\t1.0f,\r"), String("\t\t\t\t\t1.0f,\r"), String("\t\t\t\t\tcolor,\r"), String("\t\t\t\t\tcolor,\r"), String("\t\t\t\t\t100.0f,\r"), String("\t\t\t\t\tcgs.media.waterDropShader\r"), String("\t\t\t\t\t0, -1, -1 );*/\r"), String("}\r"), String("\r"), String("static vec2_t st[] = \r"), String("{\r"), String("\t0.0f, 0.0f,\r"), String("\t1.0f, 0.0f,\r"), String("\t1.0f, 1.0f,\r"), String("\t0.0f, 1.0f\r"), String("};\r"), String("\r"), String("void CG_Cube( vec3_t mins, vec3_t maxs, vec3_t color, float alpha ) \r"), String("{\r"), String("\tvec3_t\tpoint[4], rot={0,0,0};\r"), String("\tvec2_t\tst[4];\r"), String("\tint\t\tvec[3];\r"), String("\tint\t\taxis, i;\r"), String("\r"), String("\tfor ( axis = 0, vec[0] = 0, vec[1] = 1, vec[2] = 2; axis < 3; axis++, vec[0]++, vec[1]++, vec[2]++ )\r"), String("\t{\r"), String("\t\tfor ( i = 0; i < 3; i++ )\r"), String("\t\t{\r"), String("\t\t\tif ( vec[i] > 2 )\r"), String("\t\t\t{\r"), String("\t\t\t\tvec[i] = 0;\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\r"), String("\t\tpoint[0][vec[1]] = mins[vec[1]];\r"), String("\t\tpoint[0][vec[2]] = mins[vec[2]];\r"), String("\r"), String("\t\tpoint[1][vec[1]] = mins[vec[1]];\r"), String("\t\tpoint[1][vec[2]] = maxs[vec[2]];\r"), String("\r"), String("\t\tpoint[2][vec[1]] = maxs[vec[1]];\r"), String("\t\tpoint[2][vec[2]] = maxs[vec[2]];\r"), String("\t\t\r"), String("\t\tpoint[3][vec[1]] = maxs[vec[1]];\r"), String("\t\tpoint[3][vec[2]] = mins[vec[2]];\r"), String("\r"), String("\t\t//- face\r"), String("\t\tpoint[0][vec[0]] = point[1][vec[0]] = point[2][vec[0]] = point[3][vec[0]] = mins[vec[0]];\r"), String("\r"), String("\t\tFX_AddPoly( point, st, 4, NULL, NULL, alpha, alpha, 0.0f, \r"), String("\t\t\t\t\t\tcolor, color, 0.0f, rot, 0.0f, 0.0f, \r"), String("\t\t\t\t\t\t100, cgs.media.solidWhiteShader, 0 );\r"), String("\r"), String("\t\t//+ face\r"), String("\t\tpoint[0][vec[0]] = point[1][vec[0]] = point[2][vec[0]] = point[3][vec[0]] = maxs[vec[0]];\r"), String("\r"), String("\t\tFX_AddPoly( point, st, 4, NULL, NULL, alpha, alpha, 0.0f, \r"), String("\t\t\t\t\t\tcolor, color, 0.0f, rot, 0.0f, 0.0f, \r"), String("\t\t\t\t\t\t100, cgs.media.solidWhiteShader, 0 );\r"), String("\t}\r"), String("}\r"), String("\r"), String("void CG_CubeOutline( vec3_t mins, vec3_t maxs, int time, unsigned int color, float alpha )\r"), String("{\r"), String("\tvec3_t\tpoint1, point2, point3, point4;\r"), String("\tint\t\tvec[3];\r"), String("\tint\t\taxis, i;\r"), String("\r"), String("\tfor ( axis = 0, vec[0] = 0, vec[1] = 1, vec[2] = 2; axis < 3; axis++, vec[0]++, vec[1]++, vec[2]++ )\r"), String("\t{\r"), String("\t\tfor ( i = 0; i < 3; i++ )\r"), String("\t\t{\r"), String("\t\t\tif ( vec[i] > 2 )\r"), String("\t\t\t{\r"), String("\t\t\t\tvec[i] = 0;\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\r"), String("\t\tpoint1[vec[1]] = mins[vec[1]];\r"), String("\t\tpoint1[vec[2]] = mins[vec[2]];\r"), String("\r"), String("\t\tpoint2[vec[1]] = mins[vec[1]];\r"), String("\t\tpoint2[vec[2]] = maxs[vec[2]];\r"), String("\r"), String("\t\tpoint3[vec[1]] = maxs[vec[1]];\r"), String("\t\tpoint3[vec[2]] = maxs[vec[2]];\r"), String("\t\t\r"), String("\t\tpoint4[vec[1]] = maxs[vec[1]];\r"), String("\t\tpoint4[vec[2]] = mins[vec[2]];\r"), String("\r"), String("\t\t//- face\r"), String("\t\tpoint1[vec[0]] = point2[vec[0]] = point3[vec[0]] = point4[vec[0]] = mins[vec[0]];\r"), String("\r"), String("\t\tCG_TestLine( point1, point2, time, color, 1 );\r"), String("\t\tCG_TestLine( point2, point3, time, color, 1 );\r"), String("\t\tCG_TestLine( point1, point4, time, color, 1 );\r"), String("\t\tCG_TestLine( point4, point3, time, color, 1 );\r"), String("\r"), String("\t\t//+ face\r"), String("\t\tpoint1[vec[0]] = point2[vec[0]] = point3[vec[0]] = point4[vec[0]] = maxs[vec[0]];\r"), String("\r"), String("\t\tCG_TestLine( point1, point2, time, color, 1 );\r"), String("\t\tCG_TestLine( point2, point3, time, color, 1 );\r"), String("\t\tCG_TestLine( point1, point4, time, color, 1 );\r"), String("\t\tCG_TestLine( point4, point1, time, color, 1 );\r"), String("\t}\r"), String("}\r"), String("\r"), String("void CG_Line( vec3_t start, vec3_t end, vec3_t color, float alpha ) \r"), String("{\r"), String("\t/*FX_AddLine( start,\r"), String("\t\t\t\tend,\r"), String("\t\t\t\t1.0f,\r"), String("\t\t\t\t1.0,\r"), String("\t\t\t\t1.0f,\r"), String("\t\t\t\talpha,\r"), String("\t\t\t\talpha,\r"), String("\t\t\t\tcolor, \r"), String("\t\t\t\tcolor, \r"), String("\t\t\t\t100.0f,\r"), String("\t\t\t\tcgs.media.whiteShader );*/\r"), String("}\r"), String("\r"), String("/*\r"), String("===============\r"), String("CG_Portal\r"), String("===============\r"), String("*/\r"), String("static void CG_Portal( centity_t *cent ) {\r"), String("\trefEntity_t\t\t\tent;\r"), String("\tentityState_t\t\t*s1;\r"), String("\r"), String("\ts1 = &cent->currentState;\r"), String("\r"), String("\t//FIXME: this tends to give a bad axis[1], perhaps we\r"), String("\t//should just do the VectorSubtraction here rather than\r"), String("\t//on the game side.  Would also allow camera to follow\r"), String("\t//a moving target.\r"), String("\r"), String("\t// create the render entity\r"), String("\tmemset (&ent, 0, sizeof(ent));\r"), String("\tVectorCopy( cent->lerpOrigin, ent.origin );\r"), String("\tVectorCopy( s1->origin2, ent.oldorigin );\r"), String("\tByteToDir( s1->eventParm, ent.axis[0] );\r"), String("\tPerpendicularVector( ent.axis[1], ent.axis[0] );\r"), String("\r"), String("\t// negating this tends to get the directions like they want\r"), String("\t// we really should have a camera roll value\r"), String("\tVectorSubtract( vec3_origin, ent.axis[1], ent.axis[1] );\r"), String("\r"), String("\tCrossProduct( ent.axis[0], ent.axis[1], ent.axis[2] );\r"), String("\tent.reType = RT_PORTALSURFACE;\r"), String("\tent.frame = s1->frame;\t\t// rotation speed\r"), String("\tent.skinNum = (int)(s1->clientNum/256.0 * 360);\t// roll offset\r"), String("\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\tCG_SetGhoul2Info(&ent, cent);  \r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\r"), String("\t// add to refresh list\r"), String("\tcgi_R_AddRefEntityToScene(&ent);\r"), String("}\r"), String("\r"), String("\r"), String("/*\r"), String("=========================\r"), String("CG_AdjustPositionForMover\r"), String("\r"), String("Also called by client movement prediction code\r"), String("=========================\r"), String("*/\r"), String("void CG_AdjustPositionForMover( const vec3_t in, int moverNum, int atTime, vec3_t out ) {\r"), String("\tcentity_t\t*cent;\r"), String("\tvec3_t\toldOrigin, origin, deltaOrigin;\r"), String("//\tvec3_t\toldAngles, angles, deltaAngles;\r"), String("\r"), String("\tif ( moverNum <= 0 ) {\r"), String("\t\tVectorCopy( in, out );\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tcent = &cg_entities[ moverNum ];\r"), String("\tif ( cent->currentState.eType != ET_MOVER ) {\r"), String("\t\tVectorCopy( in, out );\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, oldOrigin );\r"), String("//\tEvaluateTrajectory( &cent->currentState.apos, cg.snap->serverTime, oldAngles );\r"), String("\r"), String("\tEvaluateTrajectory( &cent->currentState.pos, atTime, origin );\r"), String("//\tEvaluateTrajectory( &cent->currentState.apos, atTime, angles );\r"), String("\r"), String("\tVectorSubtract( origin, oldOrigin, deltaOrigin );\r"), String("//\tVectorSubtract( angles, oldAngles, deltaAngles );\r"), String("\r"), String("\r"), String("\tVectorAdd( in, deltaOrigin, out );\r"), String("\r"), String("\t// FIXME: origin change when on a rotating object\r"), String("}\r"), String("/*\r"), String("===============\r"), String("CG_CalcEntityLerpPositions\r"), String("\r"), String("===============\r"), String("*/\r"), String("extern char\t*vtos( const vec3_t v );\r"), String("#if 1\r"), String("void CG_CalcEntityLerpPositions( centity_t *cent ) {\r"), String("\tif ( cent->gent && cent->gent->client && cent->gent->client->NPC_class == CLASS_VEHICLE && cent->nextState ) //cent->currentState.vehicleIndex != VEHICLE_NONE )\r"), String("\t{\r"), String("\t\tfloat\t\tf = cg.frameInterpolation;\r"), String("\r"), String("\t\tcent->currentState.vehicleAngles[0] = LerpAngle( cent->currentState.vehicleAngles[0], cent->nextState->vehicleAngles[0], f );\r"), String("\t\tcent->currentState.vehicleAngles[1] = LerpAngle( cent->currentState.vehicleAngles[1], cent->nextState->vehicleAngles[1], f );\r"), String("\t\tcent->currentState.vehicleAngles[2] = LerpAngle( cent->currentState.vehicleAngles[2], cent->nextState->vehicleAngles[2], f );\r"), String("\t}\r"), String("\r"), String("\tif ( cent->currentState.number == cg.snap->ps.clientNum)\r"), String("\t{\r"), String("\t\t// if the player, take position from prediction\r"), String("\t\tVectorCopy( cg.predicted_player_state.origin, cent->lerpOrigin );\r"), String("\t\tVectorCopy( cg.predicted_player_state.viewangles, cent->lerpAngles );\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("//\t\tLerpBoneAngleOverrides(cent);\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\t\treturn;\r"), String("\t}\r"), String("\t\r"), String("\t//FIXME: prediction on clients in timescale results in jerky positional translation\r"), String("\tif ( cent->interpolate )\r"), String("\t{\r"), String("\t\t// if the entity has a valid next state, interpolate a value between the frames\r"), String("\t\t// unless it is a mover with a known start and stop\r"), String("\t\tvec3_t\t\tcurrent, next;\r"), String("\t\tfloat\t\tf;\r"), String("\r"), String("\t\t// it would be an internal error to find an entity that interpolates without\r"), String("\t\t// a snapshot ahead of the current one\r"), String("\t\tif ( cg.nextSnap == NULL ) {\r"), String("\t\t\tCG_Error( \"CG_AddCEntity: cg.nextSnap == NULL\" );\r"), String("\t\t}\r"), String("\r"), String("\t\tf = cg.frameInterpolation;\r"), String("\r"), String("\t\tif ( cent->currentState.apos.trType == TR_INTERPOLATE && cent->nextState )\r"), String("\t\t{\r"), String("\t\t\tEvaluateTrajectory( &cent->currentState.apos, cg.snap->serverTime, current );\r"), String("\t\t\tEvaluateTrajectory( &cent->nextState->apos, cg.nextSnap->serverTime, next );\r"), String("\r"), String("\t\t\tcent->lerpAngles[0] = LerpAngle( current[0], next[0], f );\r"), String("\t\t\tcent->lerpAngles[1] = LerpAngle( current[1], next[1], f );\r"), String("\t\t\tcent->lerpAngles[2] = LerpAngle( current[2], next[2], f );\r"), String("\r"), String("\t\t\t/*\r"), String("\t\t\tif(cent->gent && cent->currentState.clientNum != 0 && !VectorCompare(current, next))\r"), String("\t\t\t{\r"), String("\t\t\t\tCom_Printf(\"%s last/next/lerp apos %s/%s/%s, f = %4.2f\\n\", cent->gent->script_targetname, vtos(current), vtos(next), vtos(cent->lerpAngles), f);\r"), String("\t\t\t}\r"), String("\t\t\t*/\r"), String("\t/*\r"), String("\tGhoul2 Insert Start\r"), String("\t*/\r"), String("\t\t\t// now the nasty stuff - this will interpolate all ghoul2 models bone angle overrides per model attached to this cent\r"), String("\t\t\t/*\r"), String("\t\t\tif (cent->gent->ghoul2.size())\r"), String("\t\t\t{\r"), String("\t\t\t\tLerpBoneAngleOverrides(cent);\r"), String("\t\t\t}\r"), String("\t\t\t*/\r"), String("\t/*\r"), String("\tGhoul2 Insert End\r"), String("\t*/\r"), String("\t\t}\r"), String("\t\tif ( cent->currentState.pos.trType == TR_INTERPOLATE && cent->nextState ) \r"), String("\t\t{\r"), String("\t\t\t// this will linearize a sine or parabolic curve, but it is important\r"), String("\t\t\t// to not extrapolate player positions if more recent data is available\r"), String("\t\t\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, current );\r"), String("\t\t\tEvaluateTrajectory( &cent->nextState->pos, cg.nextSnap->serverTime, next );\r"), String("\r"), String("\t\t\tcent->lerpOrigin[0] = current[0] + f * ( next[0] - current[0] );\r"), String("\t\t\tcent->lerpOrigin[1] = current[1] + f * ( next[1] - current[1] );\r"), String("\t\t\tcent->lerpOrigin[2] = current[2] + f * ( next[2] - current[2] );\r"), String("\r"), String("\t\t\t/*\r"), String("\t\t\tif ( cent->gent && cent->currentState.clientNum != 0 )\r"), String("\t\t\t{\r"), String("\t\t\t\tCom_Printf(\"%s last/next/lerp pos %s/%s/%s, f = %4.2f\\n\", cent->gent->script_targetname, vtos(current), vtos(next), vtos(cent->lerpOrigin), f);\r"), String("\t\t\t}\r"), String("\t\t\t*/\r"), String("\t\t\treturn;//FIXME: should this be outside this if?\r"), String("\t\t}\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\tif ( cent->currentState.apos.trType == TR_INTERPOLATE )\r"), String("\t\t{\r"), String("\t\t\tEvaluateTrajectory( &cent->currentState.apos, cg.snap->serverTime, cent->lerpAngles );\r"), String("\t\t}\r"), String("\t\tif ( cent->currentState.pos.trType == TR_INTERPOLATE ) \r"), String("\t\t{\r"), String("\t\t\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, cent->lerpOrigin );\r"), String("\t\t\t/*\r"), String("\t\t\tif(cent->gent && cent->currentState.clientNum != 0 )\r"), String("\t\t\t{\r"), String("\t\t\t\tCom_Printf(\"%s last/next/lerp pos %s, f = 1.0\\n\", cent->gent->script_targetname, vtos(cent->lerpOrigin) );\r"), String("\t\t\t}\r"), String("\t\t\t*/\r"), String("\t\t\treturn;\r"), String("\t\t}\r"), String("\t}\r"), String("\t\r"), String("\t// FIXME: if it\'s blocked, it wigs out, draws it in a predicted spot, but never\r"), String("\t// makes it there - we need to predict it in the right place if this is happens...\r"), String("\r"), String("\t// just use the current frame and evaluate as best we can\r"), String("\ttrajectory_t *posData = &cent->currentState.pos;\r"), String("\t{\r"), String("\t\tgentity_t *ent = &g_entities[cent->currentState.number];\r"), String("\r"), String("\t\tif ( ent && ent->inuse)\r"), String("\t\t{\r"), String("\t\t\tif ( ent->s.eFlags & EF_BLOCKED_MOVER || ent->s.pos.trType == TR_STATIONARY )\r"), String("\t\t\t{//this mover has stopped moving and is going to wig out if we predict it\r"), String("\t\t\t\t//based on last frame\'s info- cut across the network and use the currentOrigin\r"), String("\t\t\t\tVectorCopy( ent->currentOrigin, cent->lerpOrigin );\r"), String("\t\t\t\tposData = NULL;\r"), String("\t\t\t}\r"), String("\t\t\telse\r"), String("\t\t\t{\r"), String("\t\t\t\tposData = &ent->s.pos;\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t}\r"), String("\r"), String("\tif ( posData )\r"), String("\t{\r"), String("\t\tEvaluateTrajectory( posData, cg.time, cent->lerpOrigin );\r"), String("\t}\r"), String("\r"), String("\t// FIXME: this will stomp an apos trType of TR_INTERPOLATE!!\r"), String("\tEvaluateTrajectory( &cent->currentState.apos, cg.time, cent->lerpAngles );\r"), String("\r"), String("\t// adjust for riding a mover\r"), String("\tCG_AdjustPositionForMover( cent->lerpOrigin, cent->currentState.groundEntityNum, cg.time, cent->lerpOrigin );\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\t\t// now the nasty stuff - this will interpolate all ghoul2 models bone angle overrides per model attached to this cent\r"), String("\t/*\r"), String("\tif (cent->gent->ghoul2.size())\r"), String("\t{\r"), String("\t\tLerpBoneAngleOverrides(cent);\r"), String("\t}\r"), String("\t*/\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\t// FIXME: perform general error decay?\r"), String("}\r"), String("#else\r"), String("void CG_CalcEntityLerpPositions( centity_t *cent ) \r"), String("{\r"), String("\tif ( cent->currentState.number == cg.snap->ps.clientNum)\r"), String("\t{\r"), String("\t\t// if the player, take position from prediction\r"), String("\t\tVectorCopy( cg.predicted_player_state.origin, cent->lerpOrigin );\r"), String("\t\tVectorCopy( cg.predicted_player_state.viewangles, cent->lerpAngles );\r"), String("OutputDebugString(va(\"b=(%6.2f,%6.2f,%6.2f)\\n\",cent->lerpOrigin[0],cent->lerpOrigin[1],cent->lerpOrigin[2]));\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\r"), String("if (cent->currentState.number != cg.snap->ps.clientNum&&cent->interpolate && cent->currentState.pos.trType == TR_INTERPOLATE)\r"), String("{\r"), String("\tif (cent->interpolate)\r"), String("\t{\r"), String("OutputDebugString(va(\"[%3d] interp %4.2f t=%6d  st = %6d  nst = %6d     b=%6.2f   nb=%6.2f\\n\",\r"), String("\t\tcent->currentState.number,\r"), String("\t\tcg.frameInterpolation,\r"), String("\t\tcg.time,\r"), String("\t\tcg.snap->serverTime,\r"), String("\t\tcg.nextSnap->serverTime,\r"), String("\t\tcent->currentState.pos.trBase[0],\r"), String("\t\tcent->nextState.pos.trBase[0]));\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("OutputDebugString(va(\"[%3d] nonext %4.2f t=%6d  st = %6d  nst = %6d     b=%6.2f   nb=%6.2f\\n\",\r"), String("\t\tcent->currentState.number,\r"), String("\t\tcg.frameInterpolation,\r"), String("\t\tcg.time,\r"), String("\t\tcg.snap->serverTime,\r"), String("\t\t0,\r"), String("\t\tcent->currentState.pos.trBase[0],\r"), String("\t\t0.0f));\r"), String("\t}\r"), String("}\r"), String("\r"), String("\t//FIXME: prediction on clients in timescale results in jerky positional translation\r"), String("\tif (cent->interpolate && \r"), String("\t\t(cent->currentState.number == cg.snap->ps.clientNum ||\r"), String("\t\tcent->interpolate && cent->currentState.pos.trType == TR_INTERPOLATE ) )\r"), String("\t{\r"), String("\t\tvec3_t\t\tcurrent, next;\r"), String("\t\tfloat\t\tf;\r"), String("\r"), String("\t\t// it would be an internal error to find an entity that interpolates without\r"), String("\t\t// a snapshot ahead of the current one\r"), String("\t\tif ( cg.nextSnap == NULL ) \r"), String("\t\t{\r"), String("\t\t\tCG_Error( \"CG_AddCEntity: cg.nextSnap == NULL\" );\r"), String("\t\t}\r"), String("\r"), String("\t\tf = cg.frameInterpolation;\r"), String("\r"), String("\t\tEvaluateTrajectory( &cent->currentState.apos, cg.snap->serverTime, current );\r"), String("\t\tEvaluateTrajectory( &cent->nextState.apos, cg.nextSnap->serverTime, next );\r"), String("\r"), String("\t\tcent->lerpAngles[0] = LerpAngle( current[0], next[0], f );\r"), String("\t\tcent->lerpAngles[1] = LerpAngle( current[1], next[1], f );\r"), String("\t\tcent->lerpAngles[2] = LerpAngle( current[2], next[2], f );\r"), String("\r"), String("\t\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, current );\r"), String("\t\tEvaluateTrajectory( &cent->nextState.pos, cg.nextSnap->serverTime, next );\r"), String("\r"), String("\t\tcent->lerpOrigin[0] = current[0] + f * ( next[0] - current[0] );\r"), String("\t\tcent->lerpOrigin[1] = current[1] + f * ( next[1] - current[1] );\r"), String("\t\tcent->lerpOrigin[2] = current[2] + f * ( next[2] - current[2] );\r"), String("\t\treturn;\r"), String("\t}\r"), String("\t// just use the current frame and evaluate as best we can\r"), String("\ttrajectory_t *posData = &cent->currentState.pos;\r"), String("\t{\r"), String("\t\tgentity_t *ent = &g_entities[cent->currentState.number];\r"), String("\r"), String("\t\tif ( ent && ent->inuse)\r"), String("\t\t{\r"), String("\t\t\tif ( ent->s.eFlags & EF_BLOCKED_MOVER || ent->s.pos.trType == TR_STATIONARY )\r"), String("\t\t\t{//this mover has stopped moving and is going to wig out if we predict it\r"), String("\t\t\t\t//based on last frame\'s info- cut across the network and use the currentOrigin\r"), String("\t\t\t\tVectorCopy( ent->currentOrigin, cent->lerpOrigin );\r"), String("\t\t\t\tposData = NULL;\r"), String("\t\t\t}\r"), String("\t\t\telse\r"), String("\t\t\t{\r"), String("\t\t\t\tposData = &ent->s.pos;\r"), String("\t\t\t\tEvaluateTrajectory(&ent->s.pos,cg.time, cent->lerpOrigin );\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("\t\t\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, cent->lerpOrigin );\r"), String("\t\t}\r"), String("\t}\r"), String("\tEvaluateTrajectory( &cent->currentState.apos, cg.time, cent->lerpAngles );\r"), String("\r"), String("\t// adjust for riding a mover\r"), String("\tCG_AdjustPositionForMover( cent->lerpOrigin, cent->currentState.groundEntityNum, cg.time, cent->lerpOrigin );\r"), String("}\r"), String("#endif\r"), String("/*\r"), String("===============\r"), String("CG_AddLocalSet\r"), String("===============\r"), String("*/\r"), String("\r"), String("static void CG_AddLocalSet( centity_t *cent )\r"), String("{\r"), String("\tcent->gent->setTime = cgi_S_AddLocalSet( cent->gent->soundSet, cg.refdef.vieworg, cent->lerpOrigin, cent->gent->s.number, cent->gent->setTime );\r"), String("}\r"), String("\r"), String("/*\r"), String("-------------------------\r"), String("CAS_GetBModelSound\r"), String("-------------------------\r"), String("*/\r"), String("\r"), String("sfxHandle_t CAS_GetBModelSound( const char *name, int stage )\r"), String("{\r"), String("\treturn cgi_AS_GetBModelSound( name, stage );\r"), String("}\r"), String("\r"), String("void CG_DLightThink ( centity_t *cent )\r"), String("{\r"), String("\tif(cent->gent)\r"), String("\t{\r"), String("\t\tfloat\ttDelta = cg.time - cent->gent->painDebounceTime;\r"), String("\t\tfloat\tpercentage = ( tDelta/((float)cent->gent->speed) );\r"), String("\t\tvec3_t\torg;\r"), String("\t\tvec4_t\tcurrentRGBA;\r"), String("\t\tgentity_t\t*owner = NULL;\r"), String("\t\tint\t\ti;\r"), String("\t\t\r"), String("\t\tif ( percentage >= 1.0f )\r"), String("\t\t{//We hit the end\r"), String("\t\t\tpercentage = 1.0f;\r"), String("\t\t\tswitch( cent->gent->pushDebounceTime )\r"), String("\t\t\t{\r"), String("\t\t\tcase 0://Fading from start to final\r"), String("\t\t\t\tif ( cent->gent->spawnflags & 8 )\r"), String("\t\t\t\t{//PULSER\r"), String("\t\t\t\t\tif ( tDelta - cent->gent->speed - cent->gent->wait >= 0 )\r"), String("\t\t\t\t\t{//Time to start fading down\r"), String("\t\t\t\t\t\tcent->gent->painDebounceTime = cg.time;\r"), String("\t\t\t\t\t\tcent->gent->pushDebounceTime = 1;\r"), String("\t\t\t\t\t\tpercentage = 0.0f;\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\t\t\t\telse\r"), String("\t\t\t\t{//Stick on startRGBA\r"), String("\t\t\t\t\tpercentage = 0.0f;\r"), String("\t\t\t\t}\r"), String("\t\t\t\tbreak;\r"), String("\t\t\tcase 1://Fading from final to start\r"), String("\t\t\t\tif ( tDelta - cent->gent->speed - cent->gent->radius >= 0 )\r"), String("\t\t\t\t{//Time to start fading up\r"), String("\t\t\t\t\tcent->gent->painDebounceTime = cg.time;\r"), String("\t\t\t\t\tcent->gent->pushDebounceTime = 0;\r"), String("\t\t\t\t\tpercentage = 0.0f;\r"), String("\t\t\t\t}\r"), String("\t\t\t\tbreak;\r"), String("\t\t\tcase 2://Fading from 0 intensity to start intensity\r"), String("\t\t\t\t//Time to start fading from start to final\r"), String("\t\t\t\tcent->gent->painDebounceTime = cg.time;\r"), String("\t\t\t\tcent->gent->pushDebounceTime = 0;\r"), String("\t\t\t\tpercentage = 0.0f;\r"), String("\t\t\t\tbreak;\r"), String("\t\t\tcase 3://Fading from current intensity to 0 intensity\r"), String("\t\t\t\t//Time to turn off\r"), String("\t\t\t\tcent->gent->misc_dlight_active = qfalse;\r"), String("\t\t\t\tcent->gent->e_clThinkFunc = clThinkF_NULL;\r"), String("\t\t\t\tcent->gent->s.eType = ET_GENERAL;\r"), String("\t\t\t\tcent->gent->svFlags &= ~SVF_BROADCAST;\r"), String("\t\t\t\treturn;\t\t\r"), String("\t\t\t\tbreak;\r"), String("\t\t\tdefault:\r"), String("\t\t\t\tbreak;\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\r"), String("\t\tswitch( cent->gent->pushDebounceTime )\r"), String("\t\t{\r"), String("\t\tcase 0://Fading from start to final\r"), String("\t\t\tfor ( i = 0; i < 4; i++ )\r"), String("\t\t\t{\r"), String("\t\t\t\tcurrentRGBA[i] = cent->gent->startRGBA[i] + ( (cent->gent->finalRGBA[i] - cent->gent->startRGBA[i]) * percentage );\r"), String("\t\t\t}\r"), String("\t\t\tbreak;\r"), String("\t\tcase 1://Fading from final to start\r"), String("\t\t\tfor ( i = 0; i < 4; i++ )\r"), String("\t\t\t{\r"), String("\t\t\t\tcurrentRGBA[i] = cent->gent->finalRGBA[i] + ( (cent->gent->startRGBA[i] - cent->gent->finalRGBA[i]) * percentage );\r"), String("\t\t\t}\r"), String("\t\t\tbreak;\r"), String("\t\tcase 2://Fading from 0 intensity to start\r"), String("\t\t\tfor ( i = 0; i < 3; i++ )\r"), String("\t\t\t{\r"), String("\t\t\t\tcurrentRGBA[i] = cent->gent->startRGBA[i];\r"), String("\t\t\t}\r"), String("\t\t\tcurrentRGBA[3] = cent->gent->startRGBA[3] * percentage;\r"), String("\t\t\tbreak;\r"), String("\t\tcase 3://Fading from current intensity to 0\r"), String("\t\t\tfor ( i = 0; i < 3; i++ )\r"), String("\t\t\t{//FIXME: use last\r"), String("\t\t\t\tcurrentRGBA[i] = cent->gent->startRGBA[i];\r"), String("\t\t\t}\r"), String("\t\t\tcurrentRGBA[3] = cent->gent->startRGBA[3] - (cent->gent->startRGBA[3] * percentage);\r"), String("\t\t\tbreak;\r"), String("\t\tdefault:\r"), String("\t\t\treturn;\r"), String("\t\t\tbreak;\r"), String("\t\t}\r"), String("\r"), String("\t\tif ( cent->gent->owner )\r"), String("\t\t{\r"), String("\t\t\towner = cent->gent->owner;\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("\t\t\towner = cent->gent;\r"), String("\t\t}\r"), String("\r"), String("\t\tif ( owner->s.pos.trType == TR_INTERPOLATE )\r"), String("\t\t{\r"), String("\t\t\tVectorCopy( cg_entities[owner->s.number].lerpOrigin, org );\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("\t\t\tVectorCopy( owner->currentOrigin, org );\r"), String("\t\t}\r"), String("\r"), String("\t\tcgi_R_AddLightToScene(org, currentRGBA[3]*10, currentRGBA[0], currentRGBA[1], currentRGBA[2] );\r"), String("\t}\r"), String("}\r"), String("\r"), String("void CG_Limb ( centity_t *cent )\r"), String("{//first time we\'re drawn, remove us from the owner ent\r"), String("\tif ( cent->gent && cent->gent->owner && cent->gent->owner->ghoul2.size() )\r"), String("\t{\r"), String("\t\tgentity_t\t*owner = cent->gent->owner;\r"), String("\t\tif ( cent->gent->aimDebounceTime )\r"), String("\t\t{//done with dismemberment, just waiting to mark owner dismemberable again\r"), String("\t\t\tif ( cent->gent->aimDebounceTime > cg.time )\r"), String("\t\t\t{//still waiting\r"), String("\t\t\t\treturn;\r"), String("\t\t\t}\r"), String("\t\t\t//done!\r"), String("\t\t\towner->client->dismembered = false;\r"), String("\t\t\t//done!\r"), String("\t\t\tcent->gent->e_clThinkFunc = clThinkF_NULL;\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("extern cvar_t\t*g_dismemberment;\r"), String("extern cvar_t\t*g_saberRealisticCombat;\r"), String("\t\t\t//3) turn off w/descendants that surf in original model\r"), String("\t\t\tif ( cent->gent->target )//stubTagName )\r"), String("\t\t\t{//add smoke to cap surf, spawn effect\r"), String("\t\t\t\tif ( cent->gent->delay <= cg.time )\r"), String("\t\t\t\t{//debounced so it only plays effect once every 50ms\r"), String("\t\t\t\t\tint newBolt = gi.G2API_AddBolt( &owner->ghoul2[owner->playerModel], cent->gent->target );\r"), String("\t\t\t\t\tif ( newBolt != -1 )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tcent->gent->delay = cg.time + 50;\r"), String("\t\t\t\t\t\tCG_PlayEffectBolted( \"saber/limb_bolton\", owner->playerModel, newBolt, owner->s.number, owner->s.origin );\t//ent origin used to make FX culling work\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\t\t\tif ( cent->gent->target2 )//limbName\r"), String("\t\t\t{//turn the limb off\r"), String("\t\t\t\t//NOTE: MUST use G2SURFACEFLAG_NODESCENDANTS\r"), String("\t\t\t\tgi.G2API_SetSurfaceOnOff( &owner->ghoul2[owner->playerModel], cent->gent->target2, 0x00000100 );//G2SURFACEFLAG_NODESCENDANTS\r"), String("\t\t\t}\r"), String("\t\t\tif ( cent->gent->target3 )//stubCapName )\r"), String("\t\t\t{//turn on caps\r"), String("\t\t\t\tgi.G2API_SetSurfaceOnOff( &owner->ghoul2[owner->playerModel], cent->gent->target3, 0 );\r"), String("\t\t\t}\r"), String("\t\t\tif ( owner->weaponModel[0] > 0 )\r"), String("\t\t\t{//the corpse hasn\'t dropped their weapon\r"), String("\t\t\t\tif ( cent->gent->count == BOTH_DISMEMBER_RARM || cent->gent->count == BOTH_DISMEMBER_TORSO1 )//&& ent->s.weapon == WP_SABER && ent->weaponModel[0] != -1 )\r"), String("\t\t\t\t{//FIXME: is this first check needed with this lower one?\r"), String("\t\t\t\t\tgi.G2API_RemoveGhoul2Model( owner->ghoul2, owner->weaponModel[0] );\r"), String("\t\t\t\t\towner->weaponModel[0] = -1;\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\t\t\tif ( owner->client->NPC_class == CLASS_PROTOCOL \r"), String("\t\t\t\t|| debug_subdivision->integer\r"), String("\t\t\t\t|| g_saberRealisticCombat->integer )\r"), String("\t\t\t{\r"), String("\t\t\t\t//wait 100ms before allowing owner to be dismembered again\r"), String("\t\t\t\tcent->gent->aimDebounceTime = cg.time + 100;\r"), String("\t\t\t\treturn;\r"), String("\t\t\t}\r"), String("\t\t\telse\r"), String("\t\t\t{\r"), String("\t\t\t\t//done!\r"), String("\t\t\t\tcent->gent->e_clThinkFunc = clThinkF_NULL;\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t}\r"), String("}\r"), String("\r"), String("extern Vehicle_t *G_IsRidingVehicle( gentity_t *ent );\r"), String("qboolean\tMatrixMode = qfalse;\r"), String("extern cvar_t\t*g_skippingcin;\r"), String("void CG_MatrixEffect ( centity_t *cent )\r"), String("{\r"), String("\tfloat\tMATRIX_EFFECT_TIME = 1000.0f;\r"), String("\tif ( (cent->currentState.boltInfo&MEF_MULTI_SPIN) )\r"), String("\t{//multiple spins\r"), String("\t\tif ( cent->currentState.time2 > 0 )\r"), String("\t\t{//with a custom amount of time per spin\r"), String("\t\t\tMATRIX_EFFECT_TIME = cent->currentState.time2;\r"), String("\t\t}\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\tif ( cent->currentState.eventParm \r"), String("\t\t\t&& cent->currentState.eventParm != MATRIX_EFFECT_TIME )\r"), String("\t\t{//not a falling multi-spin, so stretch out the effect over the whole desired length (or: condenses it, too)\r"), String("\t\t\tMATRIX_EFFECT_TIME = cent->currentState.eventParm;\r"), String("\t\t}\r"), String("\t}\r"), String("\t//VectorCopy( cent->lerpOrigin, cg.refdef.vieworg );\r"), String("\tfloat totalElapsedTime = (float)(cg.time - cent->currentState.time);\r"), String("\tfloat elapsedTime = totalElapsedTime;\r"), String("\tbool\tstopEffect = ((totalElapsedTime > cent->currentState.eventParm) || cg.missionStatusShow || in_camera);\r"), String("\r"), String("\tif (!stopEffect && (cent->currentState.boltInfo&MEF_HIT_GROUND_STOP) && g_entities[cent->currentState.otherEntityNum].client)\r"), String("\t{\r"), String("\t\tif (g_entities[cent->currentState.otherEntityNum].client->ps.groundEntityNum!=ENTITYNUM_NONE)\r"), String("\t\t{\r"), String("\t\t\tstopEffect = true;\r"), String("\t\t}\r"), String("\t\telse if (g_entities[cent->currentState.otherEntityNum].client->NPC_class == CLASS_VEHICLE)\r"), String("\t\t{\r"), String("\t\t\tVehicle_t*\tpVeh = g_entities[cent->currentState.otherEntityNum].m_pVehicle;\r"), String("\t\t\tif (pVeh && !(pVeh->m_ulFlags&VEH_FLYING))\r"), String("\t\t\t{\r"), String("\t\t\t\tstopEffect = true;\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t}\r"), String("\tif (!stopEffect && (cent->currentState.boltInfo&MEF_LOOK_AT_ENEMY))\r"), String("\t{\r"), String("\t\tif (!g_entities[cent->currentState.otherEntityNum].lastEnemy || \r"), String("\t\t\t!g_entities[cent->currentState.otherEntityNum].lastEnemy->inuse)\r"), String("\t\t{\r"), String("\t\t\tstopEffect = true;\r"), String("\t\t}\r"), String("\t}\r"), String("\r"), String("\tif (stopEffect)\r"), String("\t{//time is up or this is a falling spin and they hit the ground or mission end screen is up\r"), String("\t\tcg.overrides.active &= ~(/*CG_OVERRIDE_3RD_PERSON_ENT|*/CG_OVERRIDE_3RD_PERSON_RNG|CG_OVERRIDE_3RD_PERSON_ANG|CG_OVERRIDE_3RD_PERSON_POF);\r"), String("\t\t//cg.overrides.thirdPersonEntity = 0;\r"), String("\t\tcg.overrides.thirdPersonAngle = 0;\r"), String("\t\tcg.overrides.thirdPersonPitchOffset = 0;\r"), String("\t\tcg.overrides.thirdPersonRange = 0;\r"), String("\t\tif ( g_skippingcin->integer )\r"), String("\t\t{//skipping?  don\'t mess with timescale\r"), String("\t\t\t/*\r"), String("\t\t\tif ( g_timescale->integer < 100 )\r"), String("\t\t\t{//something messed up timescale, reset it?\r"), String("\t\t\t\tcgi_Cvar_Set( \"timescale\", \"100\" );\r"), String("\t\t\t}\r"), String("\t\t\t*/\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{//set it back to 1\r"), String("\t\t\tcgi_Cvar_Set( \"timescale\", \"1.0\" );\r"), String("\t\t}\r"), String("\t\tMatrixMode = qfalse;\r"), String("\t\tcent->gent->e_clThinkFunc = clThinkF_NULL;\r"), String("\t\tcent->gent->e_ThinkFunc = thinkF_G_FreeEntity;\r"), String("\t\tcent->gent->nextthink = cg.time + 500;\r"), String("\t\treturn;\r"), String("\t}\r"), String("\telse \r"), String("\t{\r"), String("\t\twhile ( elapsedTime > MATRIX_EFFECT_TIME )\r"), String("\t\t{\r"), String("\t\t\telapsedTime -= MATRIX_EFFECT_TIME;\r"), String("\t\t}\r"), String("\t}\r"), String("\t\r"), String("\tMatrixMode = qtrue;\r"), String("\r"), String("\t//FIXME: move the position towards them and back?\r"), String("\t//cg.overrides.active |= CG_OVERRIDE_3RD_PERSON_ENT;\r"), String("\t//cg.overrides.thirdPersonEntity = cent->currentState.otherEntityNum;\r"), String("\r"), String("\tif (cent->currentState.boltInfo&MEF_LOOK_AT_ENEMY)\r"), String("\t{\r"), String("\t\tvec3_t\ttoEnemy;\r"), String("\t\tvec3_t\ttoEnemyAngles;\r"), String("\r"), String("\t\tVectorCopy(cg_entities[g_entities[cent->currentState.otherEntityNum].lastEnemy->s.number].lerpOrigin, toEnemy);\r"), String("//\t\tCG_DrawEdge(cg_entities[cent->currentState.otherEntityNum].lerpOrigin, toEnemy, EDGE_NORMAL);\r"), String("\t\tVectorSubtract(cg_entities[cent->currentState.otherEntityNum].lerpOrigin, toEnemy, toEnemy);\r"), String("\t\tvectoangles(toEnemy, toEnemyAngles);\r"), String("\r"), String("\r"), String("\t\tcg.overrides.active\t\t\t\t\t|= CG_OVERRIDE_3RD_PERSON_ANG;\r"), String("  \t \tcg.overrides.thirdPersonAngle\t\t = \r"), String("\t\t\ttoEnemyAngles[1] - \r"), String("\t\t\tcg_entities[cent->currentState.otherEntityNum].lerpAngles[1] + \r"), String(" \t\t\t145.0f;\r"), String("\t \tcg.overrides.thirdPersonAngle = AngleNormalize180(cg.overrides.thirdPersonAngle);\r"), String("\r"), String("\t\tfloat\tMATRIX_EFFECT_TIME_HALF = MATRIX_EFFECT_TIME/2.0f;\r"), String("\t\tfloat\tX = 1.0f;\r"), String("\t\tif (elapsedTime>MATRIX_EFFECT_TIME_HALF)\r"), String("\t\t{\r"), String("\t\t\tX -= ((elapsedTime - MATRIX_EFFECT_TIME_HALF)/MATRIX_EFFECT_TIME_HALF);\r"), String("\t\t}\r"), String("\t\tcg.overrides.thirdPersonAngle\t\t*= X;\r"), String("\r"), String(" //\t\tgi.Printf(\"%f\\n\", cg.overrides.thirdPersonAngle);\r"), String("\t\tcg.overrides.thirdPersonPitchOffset\t = 0.0f;\r"), String("\t\tcg.overrides.thirdPersonRange\t\t = cg_thirdPersonRange.value * 3.0f;\r"), String("\t}\r"), String("\r"), String("\tif ( !(cent->currentState.boltInfo&MEF_NO_SPIN) )\r"), String("\t{//rotate around them\r"), String("\t\t//rotate\r"), String("\t\tcg.overrides.active |= CG_OVERRIDE_3RD_PERSON_ANG;\r"), String("\t\tcg.overrides.thirdPersonAngle = 360.0f*elapsedTime/MATRIX_EFFECT_TIME;\r"), String("\t\tif ( (cent->currentState.boltInfo&MEF_REVERSE_SPIN) )\r"), String("\t\t{\r"), String("\t\t\tcg.overrides.thirdPersonAngle *= -1;\r"), String("\t\t}\r"), String("\t}\r"), String("\r"), String("\t//do all the slowdown and vert bob stuff\r"), String("\tif ( cent->currentState.angles2[0] )\r"), String("\t{\r"), String("\t\tcgi_Cvar_Set( \"timescale\", va(\"%4.2f\",cent->currentState.angles2[0]) );\r"), String("\t}\r"), String("\telse if ( !(cent->currentState.boltInfo&MEF_NO_TIMESCALE) )\r"), String("\t{//ramp the timescale\r"), String("\t\t//slowdown\r"), String("\t\tfloat timescale = (elapsedTime/MATRIX_EFFECT_TIME);\r"), String("\t\tif ( timescale < 0.01f )\r"), String("\t\t{\r"), String("\t\t\ttimescale = 0.01f;\r"), String("\t\t}\r"), String("\t\tcgi_Cvar_Set( \"timescale\", va(\"%4.2f\",timescale) );\r"), String("\t}\r"), String("\telse\r"), String("\t{//FIXME: MEF_HIT_GROUND_STOP: if they\'re on the ground, stop spinning and stop timescale\r"), String("\t\t//FIXME: if they go to the menu, restore timescale?\r"), String("\t\t//cgi_Cvar_Set( \"timescale\", \"1.0ff\" );\r"), String("\t}\r"), String("\r"), String("\tif ( !(cent->currentState.boltInfo&MEF_NO_VERTBOB) )\r"), String("\t{//bob the pitch\r"), String("\t\t//pitch\r"), String("\t\t//dip - FIXME: use pitchOffet?\r"), String("\t\tcg.overrides.active |= CG_OVERRIDE_3RD_PERSON_POF;\r"), String("\t\tcg.overrides.thirdPersonPitchOffset = cg_thirdPersonPitchOffset.value;\r"), String("\t\tif ( elapsedTime < MATRIX_EFFECT_TIME*0.33f )\r"), String("\t\t{\r"), String("\t\t\tcg.overrides.thirdPersonPitchOffset -= 30.0f*elapsedTime/(MATRIX_EFFECT_TIME*0.33);\r"), String("\t\t}\r"), String("\t\telse if ( elapsedTime > MATRIX_EFFECT_TIME*0.66f )\r"), String("\t\t{\r"), String("\t\t\tcg.overrides.thirdPersonPitchOffset -= 30.0f*(MATRIX_EFFECT_TIME-elapsedTime)/(MATRIX_EFFECT_TIME*0.33);\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("\t\t\tcg.overrides.thirdPersonPitchOffset -= 30.0f;\r"), String("\t\t}\r"), String("\t}\r"), String("\r"), String("\tif ( !(cent->currentState.boltInfo&MEF_NO_RANGEVAR) )\r"), String("\t{//vary the camera range\r"), String("\t\t//pull back\r"), String("\t\tcg.overrides.active |= CG_OVERRIDE_3RD_PERSON_RNG;\r"), String("\t\tcg.overrides.thirdPersonRange = cg_thirdPersonRange.value;\r"), String("\t\tif ( elapsedTime < MATRIX_EFFECT_TIME*0.33 )\r"), String("\t\t{\r"), String("\t\t\tcg.overrides.thirdPersonRange += 80.0f*elapsedTime/(MATRIX_EFFECT_TIME*0.33);\r"), String("\t\t}\r"), String("\t\telse if ( elapsedTime > MATRIX_EFFECT_TIME*0.66 )\r"), String("\t\t{\r"), String("\t\t\tcg.overrides.thirdPersonRange += 80.0f*(MATRIX_EFFECT_TIME-elapsedTime)/(MATRIX_EFFECT_TIME*0.33);\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("\t\t\tcg.overrides.thirdPersonRange += 80.0f;\r"), String("\t\t}\r"), String("\t}\r"), String("}\r"), String("\r"), String("static void CG_Think ( centity_t *cent )\r"), String("{\r"), String("\tif(!cent->gent)\r"), String("\t{\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tCEntity_ThinkFunc(cent);\t//\tcent->gent->clThink(cent);\r"), String("}\r"), String("\r"), String("static void CG_Clouds( centity_t *cent )\r"), String("{\r"), String("\trefEntity_t\t\tent;\r"), String("\tentityState_t\t*s1;\r"), String("\r"), String("\ts1 = &cent->currentState;\r"), String("\r"), String("\t// create the render entity\r"), String("\tmemset( &ent, 0, sizeof( ent ));\r"), String("\r"), String("\tVectorCopy( cent->lerpOrigin, ent.origin );\r"), String("\r"), String("\tent.shaderRGBA[0] = ent.shaderRGBA[1] = ent.shaderRGBA[2] = ent.shaderRGBA[3] = 255;\r"), String("\r"), String("\tent.radius = cent->gent->radius;\r"), String("\tent.backlerp = cent->gent->wait;\r"), String("\r"), String("\tent.reType = RT_CLOUDS;\r"), String("\r"), String("\tif ( cent->gent->spawnflags & 1 ) // TUBE type, the one with a hole in the middle\r"), String("\t{\r"), String("\t\tent.rotation = cent->gent->random;\r"), String("\t\tent.renderfx = RF_GROW;// tube flag \r"), String("\t}\r"), String("\r"), String("\tif ( cent->gent->spawnflags & 2 ) // ALT type, uses a different shader\r"), String("\t{\r"), String("\t\tent.customShader = cgi_R_RegisterShader( \"gfx/world/haze2\" );\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\tent.customShader = cgi_R_RegisterShader( \"gfx/world/haze\" );\r"), String("\t}\r"), String("\t\r"), String("\tcgi_R_AddRefEntityToScene( &ent );\r"), String("}\r"), String("\r"), String("/*\r"), String("===============\r"), String("CG_AddCEntity\r"), String("\r"), String("===============\r"), String("*/\r"), String("static void CG_AddCEntity( centity_t *cent ) \r"), String("{\r"), String("\t// event-only entities will have been dealt with already\r"), String("\tif ( cent->currentState.eType >= ET_EVENTS ) {\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\t//we must have restarted the game\r"), String("\tif (!cent->gent)\r"), String("\t{\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tcent->snapShotTime = cg.time;\r"), String("\r"), String("\t// calculate the current origin\r"), String("\tCG_CalcEntityLerpPositions( cent );\r"), String("\r"), String("\t// add automatic effects\r"), String("\tCG_EntityEffects( cent );\r"), String("\r"), String("\t// add local sound set if any\r"), String("\tif ( cent->gent && cent->gent->soundSet && cent->gent->soundSet[0] && cent->currentState.eType != ET_MOVER )\r"), String("\t{\r"), String("\t\tCG_AddLocalSet( cent );\r"), String("\t}\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\t// do this before we copy the data to refEnts\r"), String("\tif (cent->gent->ghoul2.IsValid())\r"), String("\t{\r"), String("\t\ttrap_G2_SetGhoul2ModelIndexes(cent->gent->ghoul2, cgs.model_draw, cgs.skins);\r"), String("\t}\r"), String("\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\tswitch ( cent->currentState.eType ) {\r"), String("\tdefault:\r"), String("\t\tCG_Error( \"Bad entity type: %i\\n\", cent->currentState.eType );\r"), String("\t\tbreak;\r"), String("\tcase ET_INVISIBLE:\r"), String("\tcase ET_PUSH_TRIGGER:\r"), String("\tcase ET_TELEPORT_TRIGGER:\r"), String("\tcase ET_TERRAIN:\r"), String("\t\tbreak;\r"), String("\tcase ET_GENERAL:\r"), String("\t\tCG_General( cent );\r"), String("\t\tbreak;\r"), String("\tcase ET_PLAYER:\r"), String("\t\tCG_Player( cent );\r"), String("\t\tbreak;\r"), String("\tcase ET_ITEM:\r"), String("\t\tCG_Item( cent );\r"), String("\t\tbreak;\r"), String("\tcase ET_MISSILE:\r"), String("\t\tCG_Missile( cent );\r"), String("\t\tbreak;\r"), String("\tcase ET_MOVER:\r"), String("\t\tCG_Mover( cent );\r"), String("\t\tbreak;\r"), String("\tcase ET_BEAM:\r"), String("\t\tCG_Beam( cent, 0 );\r"), String("\t\tbreak;\r"), String("\tcase ET_PORTAL:\r"), String("\t\tCG_Portal( cent );\r"), String("\t\tbreak;\r"), String("\tcase ET_SPEAKER:\r"), String("\t\tif ( cent->gent && cent->gent->soundSet && cent->gent->soundSet[0] )\r"), String("\t\t{\r"), String("\t\t\tbreak;\r"), String("\t\t}\r"), String("\t\tCG_Speaker( cent );\r"), String("\t\tbreak;\r"), String("\tcase ET_THINKER:\r"), String("\t\tCG_General( cent );\r"), String("\t\tCG_Think( cent );\r"), String("\t\tbreak;\r"), String("\tcase ET_CLOUD: // dumb\r"), String("\t\tCG_Clouds( cent );\r"), String("\t\tbreak;\r"), String("\t}\r"), String("}\r"), String("\r"), String("/*\r"), String("===============\r"), String("CG_AddPacketEntities\r"), String("\r"), String("===============\r"), String("*/\r"), String("void CG_AddPacketEntities( qboolean isPortal ) {\r"), String("\tint\t\t\t\t\tnum;\r"), String("\tcentity_t\t\t\t*cent;\r"), String("\tplayerState_t\t\t*ps;\r"), String("\r"), String("\tif (isPortal)\r"), String("\t{\r"), String("\t\tfor ( num = 0 ; num < cg.snap->numEntities ; num++ )\r"), String("\t\t{\r"), String("\t\t\tcent = &cg_entities[ cg.snap->entities[ num ].number ];\r"), String("\r"), String("\t\t\tif (cent->currentState.isPortalEnt)\r"), String("\t\t\t{\r"), String("\t\t\t\tCG_AddCEntity( cent );\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\t// set cg.frameInterpolation\r"), String("\tif ( cg.nextSnap ) \r"), String("\t{\r"), String("\t\tint\t\tdelta;\r"), String("\r"), String("\t\tdelta = (cg.nextSnap->serverTime - cg.snap->serverTime);\r"), String("\t\tif ( delta == 0 ) \r"), String("\t\t{\r"), String("\t\t\tcg.frameInterpolation = 0;\r"), String("\t\t} \r"), String("\t\telse \r"), String("\t\t{\r"), String("\t\t\tcg.frameInterpolation = (float)( cg.time - cg.snap->serverTime ) / delta;\r"), String("\t\t}\r"), String("//OutputDebugString(va(\"interp %4.2f ct=%6d nt=%6d st=%6d\\n\",cg.frameInterpolation,cg.time,cg.nextSnap->serverTime,cg.snap->serverTime));\r"), String("\t} \r"), String("\telse \r"), String("\t{\r"), String("\t\tcg.frameInterpolation = 0;\t// actually, it should never be used, because \r"), String("\t\t\t\t\t\t\t\t\t// no entities should be marked as interpolating\r"), String("//OutputDebugString(va(\"noterp %4.2f ct=%6d nt=%6d st=%6d\\n\",cg.frameInterpolation,cg.time,0,cg.snap->serverTime));\r"), String("\t}\r"), String("\r"), String("\t// the auto-rotating items will all have the same axis\r"), String("\tcg.autoAngles[0] = 0;\r"), String("\tcg.autoAngles[1] = ( cg.time & 2047 ) * 360 / 2048.0f;\r"), String("\tcg.autoAngles[2] = 0;\r"), String("\r"), String("\tcg.autoAnglesFast[0] = 0;\r"), String("\tcg.autoAnglesFast[1] = ( cg.time & 1023 ) * 360 / 1024.0f;\r"), String("\tcg.autoAnglesFast[2] = 0;\r"), String("\r"), String("\tAnglesToAxis( cg.autoAngles, cg.autoAxis );\r"), String("\tAnglesToAxis( cg.autoAnglesFast, cg.autoAxisFast );\r"), String("\r"), String("\t// generate and add the entity from the playerstate\r"), String("\tps = &cg.predicted_player_state;\r"), String("\tPlayerStateToEntityState( ps, &cg_entities[ ps->clientNum ].currentState );\r"), String("//\tcent = &cg_entities[ ps->clientNum ];\t// not needed now that player is in the snap packet\r"), String("//\tCG_AddCEntity( cent );\t\t\t\t\t//\r"), String("\r"), String("\t// add each entity sent over by the server\r"), String("\tfor ( num = 0 ; num < cg.snap->numEntities ; num++ ) {\r"), String("\t\tcent = &cg_entities[ cg.snap->entities[ num ].number ];\r"), String("\r"), String("\t\tCG_AddCEntity( cent );\r"), String("\t}\r"), String("\r"), String("\tfor(num=0;num<cg_numpermanents;num++)\r"), String("\t{\r"), String("\t\tcent = cg_permanents[num];\r"), String("\t\tif (cent->currentValid)\r"), String("\t\t{\r"), String("\t\t\tCG_AddCEntity( cent );\r"), String("\t\t}\r"), String("\t}\r"), String("}\r"), String("\r"), String("//rww - This function is not currently called. Use it as the client-side ROFF\r"), String("//callback once that\'s implemented fully.\r"), String("void CG_ROFF_NotetrackCallback( centity_t *cent, const char *notetrack)\r"), String("{\r"), String("\tint i = 0, r = 0, objectID = 0, anglesGathered = 0, posoffsetGathered = 0;\r"), String("\tchar type[256];\r"), String("\tchar argument[512];\r"), String("\tchar addlArg[512];\r"), String("\tchar errMsg[256];\r"), String("\tchar t[64];\r"), String("\tint addlArgs = 0;\r"), String("\tvec3_t parsedAngles, parsedOffset, useAngles, useOrigin, forward, right, up;\r"), String("\r"), String("\tif (!cent || !notetrack)\r"), String("\t{\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\t//notetrack = \"effect effects/explosion1.efx 0+0+64 0-0-1\";\r"), String("\r"), String("\twhile (notetrack[i] && notetrack[i] != \' \')\r"), String("\t{\r"), String("\t\ttype[i] = notetrack[i];\r"), String("\t\ti++;\r"), String("\t}\r"), String("\r"), String("\ttype[i] = \'\\0\';\r"), String("\r"), String("\tif (notetrack[i] != \' \')\r"), String("\t{ //didn\'t pass in a valid notetrack type, or forgot the argument for it\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\ti++;\r"), String("\r"), String("\twhile (notetrack[i] && notetrack[i] != \' \')\r"), String("\t{\r"), String("\t\targument[r] = notetrack[i];\r"), String("\t\tr++;\r"), String("\t\ti++;\r"), String("\t}\r"), String("\targument[r] = \'\\0\';\r"), String("\r"), String("\tif (!r)\r"), String("\t{\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tif (notetrack[i] == \' \')\r"), String("\t{ //additional arguments...\r"), String("\t\taddlArgs = 1;\r"), String("\r"), String("\t\ti++;\r"), String("\t\tr = 0;\r"), String("\t\twhile (notetrack[i])\r"), String("\t\t{\r"), String("\t\t\taddlArg[r] = notetrack[i];\r"), String("\t\t\tr++;\r"), String("\t\t\ti++;\r"), String("\t\t}\r"), String("\t\taddlArg[r] = \'\\0\';\r"), String("\t}\r"), String("\r"), String("\tif (strcmp(type, \"effect\") == 0)\r"), String("\t{\r"), String("\t\tif (!addlArgs)\r"), String("\t\t{\r"), String("\t\t\t//sprintf(errMsg, \"Offset position argument for \'effect\' type is invalid.\");\r"), String("\t\t\t//goto functionend;\r"), String("\t\t\tVectorClear(parsedOffset);\r"), String("\t\t\tgoto defaultoffsetposition;\r"), String("\t\t}\r"), String("\r"), String("\t\ti = 0;\r"), String("\r"), String("\t\twhile (posoffsetGathered < 3)\r"), String("\t\t{\r"), String("\t\t\tr = 0;\r"), String("\t\t\twhile (addlArg[i] && addlArg[i] != \'+\' && addlArg[i] != \' \')\r"), String("\t\t\t{\r"), String("\t\t\t\tt[r] = addlArg[i];\r"), String("\t\t\t\tr++;\r"), String("\t\t\t\ti++;\r"), String("\t\t\t}\r"), String("\t\t\tt[r] = \'\\0\';\r"), String("\t\t\ti++;\r"), String("\t\t\tif (!r)\r"), String("\t\t\t{ //failure..\r"), String("\t\t\t\t//sprintf(errMsg, \"Offset position argument for \'effect\' type is invalid.\");\r"), String("\t\t\t\t//goto functionend;\r"), String("\t\t\t\tVectorClear(parsedOffset);\r"), String("\t\t\t\ti = 0;\r"), String("\t\t\t\tgoto defaultoffsetposition;\r"), String("\t\t\t}\r"), String("\t\t\tparsedOffset[posoffsetGathered] = atof(t);\r"), String("\t\t\tposoffsetGathered++;\r"), String("\t\t}\r"), String("\r"), String("\t\tif (posoffsetGathered < 3)\r"), String("\t\t{\r"), String("\t\t\tsprintf(errMsg, \"Offset position argument for \'effect\' type is invalid.\");\r"), String("\t\t\tgoto functionend;\r"), String("\t\t}\r"), String("\r"), String("\t\ti--;\r"), String("\r"), String("\t\tif (addlArg[i] != \' \')\r"), String("\t\t{\r"), String("\t\t\taddlArgs = 0;\r"), String("\t\t}\r"), String("\r"), String("defaultoffsetposition:\r"), String("\r"), String("\t\tobjectID = theFxScheduler.RegisterEffect(argument);\r"), String("\r"), String("\t\tif (objectID)\r"), String("\t\t{\r"), String("\t\t\tif (addlArgs)\r"), String("\t\t\t{ //if there is an additional argument for an effect it is expected to be XANGLE-YANGLE-ZANGLE\r"), String("\t\t\t\ti++;\r"), String("\t\t\t\twhile (anglesGathered < 3)\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tr = 0;\r"), String("\t\t\t\t\twhile (addlArg[i] && addlArg[i] != \'-\')\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tt[r] = addlArg[i];\r"), String("\t\t\t\t\t\tr++;\r"), String("\t\t\t\t\t\ti++;\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\tt[r] = \'\\0\';\r"), String("\t\t\t\t\ti++;\r"), String("\r"), String("\t\t\t\t\tif (!r)\r"), String("\t\t\t\t\t{ //failed to get a new part of the vector\r"), String("\t\t\t\t\t\tanglesGathered = 0;\r"), String("\t\t\t\t\t\tbreak;\r"), String("\t\t\t\t\t}\r"), String("\r"), String("\t\t\t\t\tparsedAngles[anglesGathered] = atof(t);\r"), String("\t\t\t\t\tanglesGathered++;\r"), String("\t\t\t\t}\r"), String("\r"), String("\t\t\t\tif (anglesGathered)\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tVectorCopy(parsedAngles, useAngles);\r"), String("\t\t\t\t}\r"), String("\t\t\t\telse\r"), String("\t\t\t\t{ //failed to parse angles from the extra argument provided..\r"), String("\t\t\t\t\tVectorCopy(cent->lerpAngles, useAngles);\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\t\t\telse\r"), String("\t\t\t{ //if no constant angles, play in direction entity is facing\r"), String("\t\t\t\tVectorCopy(cent->lerpAngles, useAngles);\r"), String("\t\t\t}\r"), String("\r"), String("\t\t\tAngleVectors(useAngles, forward, right, up);\r"), String("\r"), String("\t\t\tVectorCopy(cent->lerpOrigin, useOrigin);\r"), String("\r"), String("\t\t\t//forward\r"), String("\t\t\tuseOrigin[0] += forward[0]*parsedOffset[0];\r"), String("\t\t\tuseOrigin[1] += forward[1]*parsedOffset[0];\r"), String("\t\t\tuseOrigin[2] += forward[2]*parsedOffset[0];\r"), String("\r"), String("\t\t\t//right\r"), String("\t\t\tuseOrigin[0] += right[0]*parsedOffset[1];\r"), String("\t\t\tuseOrigin[1] += right[1]*parsedOffset[1];\r"), String("\t\t\tuseOrigin[2] += right[2]*parsedOffset[1];\r"), String("\r"), String("\t\t\t//up\r"), String("\t\t\tuseOrigin[0] += up[0]*parsedOffset[2];\r"), String("\t\t\tuseOrigin[1] += up[1]*parsedOffset[2];\r"), String("\t\t\tuseOrigin[2] += up[2]*parsedOffset[2];\r"), String("\r"), String("\t\t\ttheFxScheduler.PlayEffect(objectID, useOrigin, useAngles);\r"), String("\t\t}\r"), String("\t}\r"), String("\telse if (strcmp(type, \"sound\") == 0)\r"), String("\t{\r"), String("\t\tobjectID = cgi_S_RegisterSound(argument);\r"), String("\t\tcgi_S_StartSound(cent->lerpOrigin, cent->currentState.number, CHAN_BODY, objectID);\r"), String("\t}\r"), String("\telse if (strcmp(type, \"loop\") == 0)\r"), String("\t{ //handled server-side\r"), String("\t\treturn;\r"), String("\t}\r"), String("\t//else if ...\r"), String("\telse\r"), String("\t{\r"), String("\t\tif (type[0])\r"), String("\t\t{\r"), String("\t\t\tCom_Printf(\"^3Warning: \\\"%s\\\" is an invalid ROFF notetrack function\\n\", type);\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("\t\t\tCom_Printf(\"^3Warning: Notetrack is missing function and/or arguments\\n\");\r"), String("\t\t}\r"), String("\t}\r"), String("\r"), String("\treturn;\r"), String("\r"), String("functionend:\r"), String("\tCom_Printf(\"^3Type-specific notetrack error: %s\\n\", errMsg);\r"), String("\treturn;\r"), String("}\r"), String(">>>>>>> master"), String("")])})
11:11:50 INFO unnamed src/language_server_protocol.rs:1077 find_locations; params=Object({"bufnr": Number(1), "character": Number(11), "filename": String("/home/ys/Code/project/project-jka/src/code/cgame/cg_ents.cpp"), "gotoCmd": Null, "handle": Bool(true), "languageId": String("cpp"), "line": Number(818), "method": String("textDocument/definition"), "text": Array([String("<<<<<<< HEAD"), String("// cg_ents.c -- present snapshot entities, happens every single frame"), String(""), String("// this line must stay at top so the whole PCH thing works..."), String("#include \"cg_headers.h\""), String(""), String("//#include \"cg_local.h\""), String("#include \"cg_media.h\""), String("#include \"../game/g_functions.h\""), String("#include \"../ghoul2/G2.h\""), String("#include \"FxScheduler.h\""), String("#include \"../game/wp_saber.h\""), String("#include \"../game/g_vehicles.h\""), String("#include \"../game/g_local.h\""), String(""), String("extern void CG_AddSaberBlade( centity_t *cent, centity_t *scent, refEntity_t *saber, int renderfx, int modelIndex, vec3_t origin, vec3_t angles);"), String("extern void CG_CheckSaberInWater( centity_t *cent, centity_t *scent, int saberNum, int modelIndex, vec3_t origin, vec3_t angles );"), String("extern void CG_ForcePushBlur( const vec3_t org, qboolean darkSide = qfalse );"), String("extern void CG_AddForceSightShell( refEntity_t *ent, centity_t *cent );"), String("extern qboolean CG_PlayerCanSeeCent( centity_t *cent );"), String("extern cvar_t\t*debug_subdivision;"), String(""), String("/*"), String("======================"), String("CG_PositionEntityOnTag"), String(""), String("Modifies the entities position and axis by the given"), String("tag location"), String("======================"), String("*/"), String("void CG_PositionEntityOnTag( refEntity_t *entity, const refEntity_t *parent, "), String("\t\t\t\t\t\t\tqhandle_t parentModel, char *tagName ) {"), String("\tint\t\t\t\ti;"), String("\torientation_t\tlerped;"), String("\t"), String("\t// lerp the tag"), String("\tcgi_R_LerpTag( &lerped, parentModel, parent->oldframe, parent->frame,"), String("\t\t1.0f - parent->backlerp, tagName );"), String(""), String("\t// FIXME: allow origin offsets along tag?"), String("\tVectorCopy( parent->origin, entity->origin );"), String("\tfor ( i = 0 ; i < 3 ; i++ ) "), String("\t{"), String("\t\tVectorMA( entity->origin, lerped.origin[i], parent->axis[i], entity->origin );"), String("\t}"), String(""), String("\t// had to cast away the const to avoid compiler problems..."), String("\tMatrixMultiply( lerped.axis, ((refEntity_t *)parent)->axis, entity->axis );"), String("\tentity->backlerp = parent->backlerp;"), String("}"), String(""), String("/*"), String("======================"), String("CG_PositionRotatedEntityOnTag"), String(""), String("Modifies the entities position and axis by the given"), String("tag location"), String("======================"), String("*/"), String("void CG_PositionRotatedEntityOnTag( refEntity_t *entity, const refEntity_t *parent, "), String("\t\t\t\t\t\t\tqhandle_t parentModel, char *tagName, orientation_t *tagOrient ) {"), String("\tint\t\t\t\ti;"), String("\torientation_t\tlerped;"), String("\tvec3_t\t\t\ttempAxis[3];"), String(""), String("\t// lerp the tag"), String("\tcgi_R_LerpTag( &lerped, parentModel, parent->oldframe, parent->frame,"), String("\t\t1.0f - parent->backlerp, tagName );"), String(""), String("\tif ( tagOrient )"), String("\t{"), String("\t\tVectorCopy( lerped.origin, tagOrient->origin );"), String("\t\tfor ( i = 0 ; i < 3 ; i++ ) "), String("\t\t{"), String("\t\t\tVectorCopy( lerped.axis[i], tagOrient->axis[i] );"), String("\t\t}"), String("\t}"), String(""), String("\t// FIXME: allow origin offsets along tag?"), String("\tVectorCopy( parent->origin, entity->origin );"), String("\tfor ( i = 0 ; i < 3 ; i++ ) {"), String("\t\tVectorMA( entity->origin, lerped.origin[i], parent->axis[i], entity->origin );"), String("\t}"), String(""), String("\tMatrixMultiply( entity->axis, lerped.axis, tempAxis );"), String("\tMatrixMultiply( tempAxis, ((refEntity_t *)parent)->axis, entity->axis );"), String("}"), String(""), String(""), String(""), String("/*"), String("=========================================================================="), String(""), String("FUNCTIONS CALLED EACH FRAME"), String(""), String("=========================================================================="), String("*/"), String(""), String("/*"), String("======================"), String("CG_SetEntitySoundPosition"), String(""), String("Also called by event processing code"), String("======================"), String("*/"), String("vec3_t *CG_SetEntitySoundPosition( centity_t *cent ) {"), String("\tstatic vec3_t v3Return;"), String("\tif ( cent->currentState.solid == SOLID_BMODEL ) {"), String("\t\tvec3_t\torigin;"), String("\t\tfloat\t*v;"), String(""), String("\t\tv = cgs.inlineModelMidpoints[ cent->currentState.modelindex ];"), String("\t\tVectorAdd( cent->lerpOrigin, v, origin );"), String("\t\tcgi_S_UpdateEntityPosition( cent->currentState.number, origin );"), String("\t\tVectorCopy(origin, v3Return);"), String("\t} else {"), String("\t\tif ( cent->currentState.eType == ET_PLAYER"), String("\t\t\t&& cent->gent"), String("\t\t\t&& cent->gent->client"), String("\t\t\t&& cent->gent->ghoul2.IsValid() "), String("\t\t\t&& cent->gent->ghoul2[0].animModelIndexOffset )//If it has an animOffset it\'s a cinematic anim"), String("\t\t{//I might be running out of my bounding box, so use my headPoint from the last render frame...?"), String("\t\t\t//NOTE: if I\'m not rendered, will this not update correctly?  Would cent->lerpOrigin be any more updated?"), String("\t\t\tVectorCopy(cent->gent->client->renderInfo.eyePoint, v3Return);"), String("\t\t}"), String("\t\telse"), String("\t\t{//just use my org"), String("\t\t\tVectorCopy(cent->lerpOrigin, v3Return);"), String("\t\t}"), String("\t\tcgi_S_UpdateEntityPosition( cent->currentState.number, v3Return );"), String("\t}"), String(""), String("\treturn &v3Return;"), String("}"), String(""), String("/*"), String("=================="), String("CG_EntityEffects"), String(""), String("Add continuous entity effects, like local entity emission and lighting"), String("=================="), String("*/"), String("static void CG_EntityEffects( centity_t *cent ) {"), String(""), String("\t// update sound origins"), String("\tvec3_t v3Origin;"), String("\tVectorCopy(*CG_SetEntitySoundPosition( cent ),v3Origin);"), String(""), String("\t// add loop sound"), String("\tif ( cent->currentState.loopSound ) "), String("\t{"), String("\t\tsoundChannel_t chan = CHAN_AUTO;"), String(""), String("\t\tgentity_t *ent = cent->gent;"), String(""), String("\t\tif ( ent->s.eFlags & EF_LESS_ATTEN )"), String("\t\t{"), String("\t\t\tchan = CHAN_LESS_ATTEN;"), String("\t\t}"), String("\t\t"), String("\t\tsfxHandle_t\tsfx = ( cent->currentState.eType == ET_MOVER ) ? cent->currentState.loopSound : cgs.sound_precache[ cent->currentState.loopSound ];"), String(""), String("\t\t// Only play sound if being drawn."), String("\t\tif ( !( ent->s.eFlags & EF_NODRAW ) )"), String("\t\t{"), String("\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, v3Origin/*cent->lerpOrigin*/, vec3_origin, sfx, chan );"), String("\t\t}"), String("\t}"), String(""), String("\t// constant light glow"), String("\tif ( cent->currentState.constantLight ) {"), String("\t\tint\t\tcl;"), String("\t\tint\t\ti, r, g, b;"), String(""), String("\t\tcl = cent->currentState.constantLight;"), String("\t\tr = cl & 255;"), String("\t\tg = ( cl >> 8 ) & 255;"), String("\t\tb = ( cl >> 16 ) & 255;"), String("\t\ti = ( ( cl >> 24 ) & 255 ) * 4;"), String("\t\tcgi_R_AddLightToScene( cent->lerpOrigin, (float)i, (float)r, (float)g, (float)b );"), String("\t}"), String("}"), String(""), String("void CG_AddRefEntWithTransportEffect ( centity_t *cent, refEntity_t *ent )"), String("{"), String("\t// We are a normal thing...."), String("\tcgi_R_AddRefEntityToScene (ent);"), String(""), String("\tif ( ent->renderfx & RF_PULSATE && cent->gent->owner && cent->gent->owner->health &&"), String("\t\t!cent->gent->owner->s.number && cent->gent->owner->client && //only for player"), String("\t\t\tcent->gent->owner->client->ps.saberEntityState == SES_RETURNING && "), String("\t\t\tcent->currentState.saberActive == qfalse )"), String("\t{"), String("\t\t// if we are the saber and we have been dropped, do a glow so it can be spotted easier"), String("\t\tfloat\twv;"), String("\t\tvec3_t\torg;"), String(""), String("\t\tent->customShader = cgi_R_RegisterShader( \"gfx/effects/solidWhite_cull\" );"), String("\t\tent->renderfx = RF_RGB_TINT;"), String("\t\twv = sin( cg.time * 0.003f ) * 0.08f + 0.1f;"), String("\t\tent->shaderRGBA[0] = wv * 255;"), String("\t\tent->shaderRGBA[1] = wv * 255;"), String("\t\tent->shaderRGBA[2] = wv * 0;"), String("\t\tcgi_R_AddRefEntityToScene (ent);"), String(""), String("\t\tfor ( int i = -4; i < 10; i += 1 )"), String("\t\t{"), String("\t\t\tVectorMA( ent->origin, -i, ent->axis[2], org );"), String(""), String("\t\t\tFX_AddSprite( org, NULL, NULL, 5.5f, 5.5f, wv, wv, 0.0f, 0.0f, 1.0f, cgs.media.yellowDroppedSaberShader, 0x08000000 );"), String("\t\t}"), String("\t\tif ( cent->gent->owner->s.weapon == WP_SABER )"), String("\t\t{//he\'s still controlling me"), String("\t\t\tFX_AddSprite( cent->gent->owner->client->renderInfo.handRPoint, NULL, NULL, 8.0f, 8.0f, wv, wv, 0.0f, 0.0f, 1.0f, cgs.media.yellowDroppedSaberShader, 0x08000000 );"), String("\t\t}"), String("\t}"), String("}"), String(""), String(""), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String(""), String("// Copy the ghoul2 data into the ref ent correctly"), String("void CG_SetGhoul2Info( refEntity_t *ent, centity_t *cent)"), String("{"), String("\tent->ghoul2 = &cent->gent->ghoul2;"), String("\tVectorCopy( cent->currentState.modelScale, ent->modelScale);"), String("\tent->radius = cent->currentState.radius;"), String("\tVectorCopy (cent->lerpAngles, ent->angles);"), String("}"), String(""), String(""), String("// write in the axis and stuff"), String("void G2_BoltToGhoul2Model(centity_t *cent, refEntity_t *ent)"), String("{"), String("\t\t// extract the wraith ID from the bolt info"), String("\tint modelNum = cent->currentState.boltInfo >> MODEL_SHIFT;"), String("\tmodelNum &= MODEL_AND;"), String("\tint boltNum\t= cent->currentState.boltInfo >> BOLT_SHIFT;"), String("\tboltNum &= BOLT_AND;"), String("\tint\tentNum = cent->currentState.boltInfo >> ENTITY_SHIFT;"), String("\tentNum &= ENTITY_AND;"), String(""), String(" \tmdxaBone_t \t\tboltMatrix;"), String(""), String(" \t// go away and get me the bolt position for this frame please"), String(" \tgi.G2API_GetBoltMatrix(cent->gent->ghoul2, modelNum, boltNum, &boltMatrix, cg_entities[entNum].currentState.angles, cg_entities[entNum].currentState.origin, cg.time, cgs.model_draw, cent->currentState.modelScale);"), String(""), String("\t// set up the axis and origin we need for the actual effect spawning"), String(" \tent->origin[0] = boltMatrix.matrix[0][3];"), String(" \tent->origin[1] = boltMatrix.matrix[1][3];"), String(" \tent->origin[2] = boltMatrix.matrix[2][3];"), String(""), String(" \tent->axis[0][0] = boltMatrix.matrix[0][0];"), String(" \tent->axis[0][1] = boltMatrix.matrix[1][0];"), String(" \tent->axis[0][2] = boltMatrix.matrix[2][0];"), String(""), String(" \tent->axis[1][0] = boltMatrix.matrix[0][1];"), String(" \tent->axis[1][1] = boltMatrix.matrix[1][1];"), String(" \tent->axis[1][2] = boltMatrix.matrix[2][1];"), String(""), String(" \tent->axis[2][0] = boltMatrix.matrix[0][2];"), String(" \tent->axis[2][1] = boltMatrix.matrix[1][2];"), String(" \tent->axis[2][2] = boltMatrix.matrix[2][2];"), String("}"), String(""), String("void ScaleModelAxis(refEntity_t\t*ent)"), String(""), String("{\t\t// scale the model should we need to"), String("\t\tif (ent->modelScale[0] && ent->modelScale[0] != 1.0f)"), String("\t\t{"), String("\t\t\tVectorScale( ent->axis[0], ent->modelScale[0] , ent->axis[0] );"), String("\t\t\tent->nonNormalizedAxes = qtrue;"), String("\t\t}"), String("\t\tif (ent->modelScale[1] && ent->modelScale[1] != 1.0f)"), String("\t\t{"), String("\t\t\tVectorScale( ent->axis[1], ent->modelScale[1] , ent->axis[1] );"), String("\t\t\tent->nonNormalizedAxes = qtrue;"), String("\t\t}"), String("\t\tif (ent->modelScale[2] && ent->modelScale[2] != 1.0f)"), String("\t\t{"), String("\t\t\tVectorScale( ent->axis[2], ent->modelScale[2] , ent->axis[2] );"), String("\t\t\tent->nonNormalizedAxes = qtrue;"), String("\t\t}"), String("}"), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("/*"), String("=================="), String("CG_General"), String("=================="), String("*/"), String("static void CG_General( centity_t *cent ) "), String("{"), String("\trefEntity_t\t\t\tent;"), String("\tentityState_t\t\t*s1;"), String(""), String("\ts1 = &cent->currentState;"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String(""), String("\t// if set to invisible, skip"), String("\tif (!s1->modelindex && !cent->gent->ghoul2.IsValid() ) {"), String("\t\treturn;"), String("\t}"), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("\tif ( s1->eFlags & EF_NODRAW )"), String("\t{"), String("\t\t// If you don\'t like it doing NODRAW, then don\'t set the flag"), String("\t\treturn;"), String("\t}"), String(""), String("\tmemset (&ent, 0, sizeof(ent));"), String(""), String("\t// set frame"), String(""), String("\tif ( cent->currentState.eFlags & EF_DISABLE_SHADER_ANIM )"), String("\t{"), String("\t\t// by setting the shader time to the current time, we can force an animating shader to not animate"), String("\t\tent.shaderTime = cg.time * 0.001f;"), String("\t}"), String(""), String("\tif ( s1->eFlags & EF_SHADER_ANIM )"), String("\t{"), String("\t\t// Deliberately setting it up so that shader anim will completely override any kind of model animation frame setting."), String("\t\tent.renderfx|=RF_SETANIMINDEX;"), String("\t\tent.skinNum = s1->frame;"), String("\t}"), String("\telse if ( s1->eFlags & EF_ANIM_ONCE )"), String("\t{"), String("\t\t//s1->frame++;"), String("\t\t//ent.frame = s1->frame;"), String("\t\tent.frame = cent->gent->s.frame;"), String("\t\tent.renderfx|=RF_CAP_FRAMES;"), String("\t}"), String("\telse if ( s1->eFlags & EF_ANIM_ALLFAST )"), String("\t{"), String("\t\tent.frame = (cg.time / 100);"), String("\t\tent.renderfx|=RF_WRAP_FRAMES;"), String("\t}"), String("\telse"), String("\t{"), String("\t\tent.frame = s1->frame;"), String("\t}"), String("\tent.oldframe = ent.frame;"), String("\tent.backlerp = 0;"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("\tCG_SetGhoul2Info(&ent, cent);"), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("\tVectorCopy( cent->lerpOrigin, ent.origin);"), String("\tVectorCopy( cent->lerpOrigin, ent.oldorigin);"), String(""), String("\tent.hModel = cgs.model_draw[s1->modelindex];"), String(""), String("\tif ( !ent.radius )"), String("\t{// Set default g2 cull radius."), String("\t\tent.radius = 60;"), String("\t}"), String(""), String("\tif ( s1->eFlags & EF_AUTO_SIZE && cent->gent )"), String("\t{"), String("\t\tcgi_R_ModelBounds( ent.hModel, cent->gent->mins, cent->gent->maxs );"), String("\t\t//Only do this once"), String("\t\tcent->gent->s.eFlags &= ~EF_AUTO_SIZE;"), String("\t}"), String(""), String("\t// player model"), String("\tif (s1->number == cg.snap->ps.clientNum) "), String("\t{"), String("\t\tent.renderfx |= RF_THIRD_PERSON;\t// only draw from mirrors"), String("\t}"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("\t// are we bolted to a Ghoul2 model?"), String("\tif (s1->boltInfo)"), String("\t{"), String("\t\tG2_BoltToGhoul2Model(cent, &ent);"), String("\t}"), String("\telse"), String("\t{"), String("\t\t//-------------------------------------------------------"), String("\t\t// Start of chair"), String("\t\t//-------------------------------------------------------"), String("\t\tif ( cent->gent->s.weapon == WP_EMPLACED_GUN || ( cent->gent->activator && cent->gent->activator->owner && "), String("\t\t\t\tcent->gent->activator->s.eFlags & EF_LOCKED_TO_WEAPON ))"), String("\t\t{"), String("\t\t\tvec3_t\ttemp;"), String(""), String("\t\t\tif ( cent->gent->health <= 0 && cent->gent->e_ThinkFunc == thinkF_NULL )"), String("\t\t\t{"), String("\t\t\t\tif ( !cent->gent->bounceCount )"), String("\t\t\t\t{//not an EWeb"), String("\t\t\t\t\tent.customShader = cgi_R_RegisterShader( \"models/map_objects/imp_mine/turret_chair_dmg\" );"), String("\t\t\t\t}"), String(""), String("\t\t\t\tVectorSet( temp, 0, 0, 1 );"), String(""), String("\t\t\t\t// add a big scorch mark under the gun"), String("\t\t\t\tCG_ImpactMark( cgs.media.scavMarkShader, cent->lerpOrigin, temp, "), String("\t\t\t\t\t0, 1,1,1, 1.0f, qfalse, 92, qtrue );"), String("\t\t\t\tCG_ImpactMark( cgs.media.scavMarkShader, cent->lerpOrigin, temp, "), String("\t\t\t\t\t90, 1,1,1, 1.0f, qfalse, 48, qtrue );"), String("\t\t\t}"), String("\t\t\telse"), String("\t\t\t{"), String("\t\t\t\tVectorSet( temp, 0, 0, 1 );"), String(""), String("\t\t\t\tif ( !( cent->gent->svFlags & SVF_INACTIVE ))"), String("\t\t\t\t{"), String("\t\t\t\t\tif ( !cent->gent->bounceCount )"), String("\t\t\t\t\t{//not an EWeb"), String("\t\t\t\t\t\tent.customShader = cgi_R_RegisterShader( \"models/map_objects/imp_mine/turret_chair_on\" );"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String(""), String("\t\t\t\t// shadow under the gun"), String("\t\t\t\tCG_ImpactMark( cgs.media.shadowMarkShader, cent->lerpOrigin, temp, "), String("\t\t\t\t\t0, 1,1,1, 1.0f, qfalse, 32, qtrue );"), String("\t\t\t}"), String("\t\t}"), String(""), String("\t\tif ( cent->gent->activator && cent->gent->activator->owner && "), String("\t\t\t\tcent->gent->activator->s.eFlags & EF_LOCKED_TO_WEAPON && "), String("\t\t\t\tcent->gent->activator->owner->s.number == cent->currentState.number ) // gun number must be same as current entities number"), String("\t\t{"), String("\t\t\tcentity_t *cc = &cg_entities[cent->gent->activator->s.number];"), String(""), String("const weaponData_t  *wData = NULL;"), String(""), String("\t\t\tif ( cc->currentState.weapon )"), String("\t\t\t{"), String("\t\t\t\twData = &weaponData[cc->currentState.weapon];"), String("\t\t\t}"), String(""), String("\t\t\tif ( !( cc->currentState.eFlags & EF_FIRING ) && !( cc->currentState.eFlags & EF_ALT_FIRING ))"), String("\t\t\t{"), String("\t\t\t\t// not animating..pausing was leaving the barrels in a bad state"), String("\t\t\t\tgi.G2API_PauseBoneAnim( &cent->gent->ghoul2[cent->gent->playerModel], \"model_root\", cg.time );"), String(""), String("//\t\t\t\tgi.G2API_SetBoneAnimIndex( &cent->gent->ghoul2[cent->gent->playerModel], cent->gent->rootBone, "), String("//\t\t\t\t\t\t0, 0, BONE_ANIM_OVERRIDE, 1.0f, cg.time );"), String("\t\t\t}"), String(""), String("\t\t\t// get alternating muzzle end bolts"), String("\t\t\tint\t\t\tbolt = cent->gent->handRBolt;"), String("\t\t\tmdxaBone_t\tboltMatrix;"), String(""), String("\t\t\tif ( !cc->gent->fxID || bolt == -1 )"), String("\t\t\t{"), String("\t\t\t\tbolt = cent->gent->handLBolt;"), String("\t\t\t}"), String(""), String("\t\t\tif ( bolt == -1 )"), String("\t\t\t{"), String("\t\t\t\tbolt = 0;"), String("\t\t\t}"), String("\t\t\tgi.G2API_GetBoltMatrix( cent->gent->ghoul2, 0, bolt, "), String("\t\t\t\t&boltMatrix, cent->lerpAngles, cent->lerpOrigin, cg.time,"), String("\t\t\t\tcgs.model_draw, cent->currentState.modelScale );"), String(""), String("\t\t\t// store the muzzle point and direction so that we can fire in the right direction"), String("\t\t\tgi.G2API_GiveMeVectorFromMatrix( boltMatrix, ORIGIN, cc->gent->client->renderInfo.muzzlePoint );"), String("\t\t\tif ( cent->gent->bounceCount )"), String("\t\t\t{//EWeb - *sigh* the muzzle tag on this is not aligned like th eone on the emplaced gun... consistency anyone...?"), String("\t\t\t\tgi.G2API_GiveMeVectorFromMatrix( boltMatrix, NEGATIVE_X, cc->gent->client->renderInfo.muzzleDir );"), String("\t\t\t}"), String("\t\t\telse"), String("\t\t\t{//Emplaced gun"), String("\t\t\t\tgi.G2API_GiveMeVectorFromMatrix( boltMatrix, POSITIVE_Y, cc->gent->client->renderInfo.muzzleDir );"), String("\t\t\t}"), String("\t\t\tcc->gent->client->renderInfo.mPCalcTime = cg.time;"), String(""), String("\t\t\t// HACK: adding in muzzle flashes"), String("\t\t\tif ( cc->muzzleFlashTime > 0 && wData )"), String("\t\t\t{"), String("\t\t\t\tconst char *effect = NULL;"), String("\t\t\t\tcc->muzzleFlashTime = 0;"), String(""), String("\t\t\t\t// Try and get a default muzzle so we have one to fall back on"), String("\t\t\t\tif ( wData->mMuzzleEffect[0] )"), String("\t\t\t\t{"), String("\t\t\t\t\teffect = &wData->mMuzzleEffect[0];"), String("\t\t\t\t}"), String(""), String("\t\t\t\tif ( cc->currentState.eFlags & EF_ALT_FIRING )"), String("\t\t\t\t{"), String("\t\t\t\t\t// We\'re alt-firing, so see if we need to override with a custom alt-fire effect"), String("\t\t\t\t\tif ( wData->mAltMuzzleEffect[0] )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\teffect = &wData->mAltMuzzleEffect[0];"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String(""), String("\t\t\t\tif ( cc->currentState.eFlags & EF_FIRING || cc->currentState.eFlags & EF_ALT_FIRING )"), String("\t\t\t\t{"), String("\t\t\t\t\tif ( cent->gent->bounceCount )"), String("\t\t\t\t\t{//EWeb"), String("\t\t\t\t\t\tgi.G2API_SetBoneAnimIndex( &cent->gent->ghoul2[cent->gent->playerModel], cent->gent->rootBone, "), String("\t\t\t\t\t\t\t2, 4, BONE_ANIM_OVERRIDE_FREEZE, 0.6f, cg.time, -1, -1 );"), String("\t\t\t\t\t}"), String("\t\t\t\t\telse"), String("\t\t\t\t\t{//Emplaced Gun"), String("\t\t\t\t\t\tgi.G2API_SetBoneAnimIndex( &cent->gent->ghoul2[cent->gent->playerModel], cent->gent->rootBone, "), String("\t\t\t\t\t\t\t0, 3, BONE_ANIM_OVERRIDE_FREEZE, 0.6f, cg.time, -1, -1 );"), String("\t\t\t\t\t}"), String("\t\t"), String("\t\t\t\t\tif ( effect )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\t// We got an effect and we\'re firing, so let \'er rip."), String("\t\t\t\t\t\ttheFxScheduler.PlayEffect( effect, cc->gent->client->renderInfo.muzzlePoint, "), String("\t\t\t\t\t\t\t\t\t\t\t\t\tcc->gent->client->renderInfo.muzzleDir );"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String("\t\t\t}"), String(""), String("\t\t\tVectorCopy( cent->gent->s.apos.trBase, cent->lerpAngles );"), String("\t\t}"), String("\t\t//-------------------------------------------------------"), String("\t\t// End of chair"), String("\t\t//-------------------------------------------------------"), String(""), String("\t\tAnglesToAxis( cent->lerpAngles, ent.axis );"), String("\t}"), String(""), String("\t//copy modelscale, if any"), String("\tVectorCopy( cent->currentState.modelScale, ent.modelScale );"), String("\t//apply modelscale, if any"), String("\tScaleModelAxis(&ent);"), String(""), String("\tif (cent->gent->ghoul2.size())"), String("\t{"), String("\t\t//FIXME: use a flag for this, not a strcmp"), String("\t\tif ( cent->gent->classname && Q_stricmp( \"limb\", cent->gent->classname ) == 0 )"), String("\t\t{//limb, copy RGB"), String("\t\t\tent.shaderRGBA[0] = cent->gent->startRGBA[0];"), String("\t\t\tent.shaderRGBA[1] = cent->gent->startRGBA[1];"), String("\t\t\tent.shaderRGBA[2] = cent->gent->startRGBA[2];"), String("\t\t}"), String("\t\tif ( s1->weapon == WP_SABER && cent->gent && cent->gent->owner && cent->gent->owner->inuse )"), String("\t\t{//flying lightsaber"), String("\t\t\t//FIXME: better way to tell what it is would be nice"), String("\t\t\tif ( cent->gent->classname && !Q_stricmp( \"limb\", cent->gent->classname ) )"), String("\t\t\t{//limb, just add blade"), String("\t\t\t\tif ( cent->gent->owner->client )"), String("\t\t\t\t{"), String("\t\t\t\t\tif ( cent->gent->owner->client->ps.saber[0].Length() > 0 )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tCG_AddSaberBlade( &cg_entities[cent->gent->owner->s.number], "), String("\t\t\t\t\t\t\t&cg_entities[cent->gent->s.number], NULL, ent.renderfx, "), String("\t\t\t\t\t\t\tcent->gent->weaponModel[0], cent->lerpOrigin, cent->lerpAngles );"), String("\t\t\t\t\t}"), String("\t\t\t\t\telse if ( cent->gent->owner->client->ps.saberEventFlags & SEF_INWATER )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tCG_CheckSaberInWater( &cg_entities[cent->gent->owner->s.number], "), String("\t\t\t\t\t\t\t&cg_entities[cent->gent->s.number], 0, cent->gent->weaponModel[0], "), String("\t\t\t\t\t\t\tcent->lerpOrigin, cent->lerpAngles );"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String("\t\t\t}"), String("\t\t\telse"), String("\t\t\t{//thrown saber"), String("\t\t\t\t//light?  sound?"), String("\t\t\t\tif ( cent->gent->owner->client && g_entities[cent->currentState.otherEntityNum].client && g_entities[cent->currentState.otherEntityNum].client->ps.saber[0].Active() )"), String("\t\t\t\t{//saber is in-flight and active, play a sound on it"), String("\t\t\t\t\tif ( cent->gent->owner->client->ps.saberEntityState == SES_RETURNING "), String("\t\t\t\t\t\t&& cent->gent->owner->client->ps.saber[0].type != SABER_STAR )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, "), String("\t\t\t\t\t\t\tcent->lerpOrigin, vec3_origin, "), String("\t\t\t\t\t\t\tcgs.sound_precache[g_entities[cent->currentState.clientNum].client->ps.saber[0].soundLoop] );"), String("\t\t\t\t\t}"), String("\t\t\t\t\telse"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tint spinSound;"), String("\t\t\t\t\t\tif ( cent->gent->owner->client->ps.saber[0].spinSound "), String("\t\t\t\t\t\t\t&& cgs.sound_precache[cent->gent->owner->client->ps.saber[0].spinSound] )"), String("\t\t\t\t\t\t{"), String("\t\t\t\t\t\t\tspinSound = cgs.sound_precache[cent->gent->owner->client->ps.saber[0].spinSound];"), String("\t\t\t\t\t\t}"), String("\t\t\t\t\t\telse if ( cent->gent->owner->client->ps.saber[0].type == SABER_SITH_SWORD )"), String("\t\t\t\t\t\t{"), String("\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspinoff.wav\" );"), String("\t\t\t\t\t\t}"), String("\t\t\t\t\t\telse"), String("\t\t\t\t\t\t{"), String("\t\t\t\t\t\t\tswitch ( cent->gent->owner->client->ps.forcePowerLevel[FP_SABERTHROW] )"), String("\t\t\t\t\t\t\t{"), String("\t\t\t\t\t\t\tcase FORCE_LEVEL_1:"), String("\t\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin3.wav\" );"), String("\t\t\t\t\t\t\t\tbreak;"), String("\t\t\t\t\t\t\tcase FORCE_LEVEL_2:"), String("\t\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin2.wav\" );"), String("\t\t\t\t\t\t\t\tbreak;"), String("\t\t\t\t\t\t\tdefault:"), String("\t\t\t\t\t\t\tcase FORCE_LEVEL_3:"), String("\t\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin1.wav\" );"), String("\t\t\t\t\t\t\t\tbreak;"), String("\t\t\t\t\t\t\t}"), String("\t\t\t\t\t\t}"), String("\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, "), String("\t\t\t\t\t\t\tvec3_origin, spinSound );"), String("\t\t\t\t\t\t/*"), String("\t\t\t\t\t\tif ( cg_weapons[WP_SABER].missileSound )"), String("\t\t\t\t\t\t{"), String("\t\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, cg_weapons[WP_SABER].missileSound );"), String("\t\t\t\t\t\t}"), String("\t\t\t\t\t\t*/"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String("\t\t\t\tif ( cent->gent->owner->client )"), String("\t\t\t\t{"), String("\t\t\t\t\tif ( cent->gent->owner->client->ps.saber[0].Length() > 0 )"), String("\t\t\t\t\t{//only add the blade if it\'s on"), String("\t\t\t\t\t\tCG_AddSaberBlade( &cg_entities[cent->gent->owner->s.number], "), String("\t\t\t\t\t\t\t&cg_entities[cent->gent->s.number], NULL, ent.renderfx, "), String("\t\t\t\t\t\t\t0, cent->lerpOrigin, cent->lerpAngles );"), String("\t\t\t\t\t}"), String("\t\t\t\t\telse if ( cent->gent->owner->client->ps.saberEventFlags & SEF_INWATER )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tCG_CheckSaberInWater( &cg_entities[cent->gent->owner->s.number], "), String("\t\t\t\t\t\t\t&cg_entities[cent->gent->s.number], 0, 0, cent->lerpOrigin, "), String("\t\t\t\t\t\t\tcent->lerpAngles );"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String("\t\t\t\tif ( cent->gent->owner->health )"), String("\t\t\t\t{"), String("\t\t\t\t\t//make sure we can always be seen"), String("\t\t\t\t\tent.renderfx |= RF_PULSATE;"), String("\t\t\t\t}"), String("\t\t\t}"), String("\t\t}"), String("\t}"), String("\telse"), String("\t{"), String("\t\tif ( s1->weapon == WP_SABER && cent->gent && cent->gent->owner )"), String("\t\t{//flying lightsaber"), String("\t\t\t//light?  sound?"), String("\t\t\tif ( cent->gent->owner->client && cent->currentState.saberActive )"), String("\t\t\t{//saber is in-flight and active, play a sound on it"), String("\t\t\t\tif ( cent->gent->owner->client->ps.saberEntityState == SES_RETURNING "), String("\t\t\t\t\t&& cent->gent->owner->client->ps.saber[0].type != SABER_STAR )"), String("\t\t\t\t{"), String("\t\t\t\t\tif ( cg_weapons[WP_SABER].firingSound )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, "), String("\t\t\t\t\t\t\tcent->lerpOrigin, vec3_origin, cg_weapons[WP_SABER].firingSound );"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String("\t\t\t\telse"), String("\t\t\t\t{"), String("\t\t\t\t\tint spinSound;"), String("\t\t\t\t\tif ( cent->gent->owner->client->ps.saber[0].spinSound "), String("\t\t\t\t\t\t&& cgs.sound_precache[cent->gent->owner->client->ps.saber[0].spinSound] )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tspinSound = cgs.sound_precache[cent->gent->owner->client->ps.saber[0].spinSound];"), String("\t\t\t\t\t}"), String("\t\t\t\t\telse if ( cent->gent->owner->client->ps.saber[0].type == SABER_SITH_SWORD )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspinoff.wav\" );"), String("\t\t\t\t\t}"), String("\t\t\t\t\telse"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tswitch ( cent->gent->owner->client->ps.forcePowerLevel[FP_SABERTHROW] )"), String("\t\t\t\t\t\t{"), String("\t\t\t\t\t\tcase FORCE_LEVEL_1:"), String("\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin3.wav\" );"), String("\t\t\t\t\t\t\tbreak;"), String("\t\t\t\t\t\tcase FORCE_LEVEL_2:"), String("\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin2.wav\" );"), String("\t\t\t\t\t\t\tbreak;"), String("\t\t\t\t\t\tdefault:"), String("\t\t\t\t\t\tcase FORCE_LEVEL_3:"), String("\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin1.wav\" );"), String("\t\t\t\t\t\t\tbreak;"), String("\t\t\t\t\t\t}"), String("\t\t\t\t\t}"), String("\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, "), String("\t\t\t\t\t\tvec3_origin, spinSound );"), String("\t\t\t\t\t/*"), String("\t\t\t\t\tif ( cg_weapons[WP_SABER].missileSound )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, cg_weapons[WP_SABER].missileSound );"), String("\t\t\t\t\t}"), String("\t\t\t\t\t*/"), String("\t\t\t\t}"), String("\t\t\t}"), String("\t\t\tCG_AddSaberBlade( &cg_entities[cent->gent->owner->s.number], "), String("\t\t\t\tNULL, &ent, ent.renderfx, 0, NULL, NULL );"), String(""), String("\t\t\tif ( cent->gent->owner->health )"), String("\t\t\t{"), String("\t\t\t\t//make sure we can always be seen"), String("\t\t\t\tent.renderfx |= RF_PULSATE;"), String("\t\t\t}"), String("\t\t}"), String("\t}"), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("\tif ( cent->gent && cent->gent->forcePushTime > cg.time )"), String("\t{//FIXME: if I\'m a rather large model, this will look kind of stupid..."), String("\t\tCG_ForcePushBlur( cent->lerpOrigin );"), String("\t}"), String("\tCG_AddRefEntWithTransportEffect( cent, &ent );"), String(""), String("\tif ( cent->gent->health <= 0 "), String("\t\t&& cent->gent->s.weapon == WP_EMPLACED_GUN "), String("\t\t&& cent->gent->e_ThinkFunc )"), String("\t{"), String("\t\t// make the gun pulse red to warn about it exploding"), String("\t\tfloat val = (1.0f - (float)(cent->gent->nextthink - cg.time) / 3200.0f ) * 0.3f;"), String(""), String("\t\tent.customShader = cgi_R_RegisterShader( \"gfx/effects/solidWhite\" );"), String("\t\tent.shaderRGBA[0] = (sin( cg.time * 0.04f ) * val * 0.4f + val) * 255;"), String("\t\tent.shaderRGBA[1] = ent.shaderRGBA[2] = 0;"), String("\t\tent.renderfx |= RF_RGB_TINT;"), String("\t\tcgi_R_AddRefEntityToScene( &ent );"), String("\t}"), String(""), String("\t//--------------------------"), String("\tif ( s1->eFlags & EF_FIRING && cent->gent->inuse )"), String("\t{"), String("\t\t//special code for adding the beam to the attached tripwire mine"), String("\t\tvec3_t\t\t\tbeamOrg;"), String("\t\tint\t\t\t\thandle = 0;"), String("\t\tSEffectTemplate\t*temp;"), String(""), String("\t\tVectorMA( ent.origin, 6.6f, ent.axis[0], beamOrg );// forward"), String(""), String("\t\t// overriding the effect, so give us a copy first"), String("\t\ttemp = theFxScheduler.GetEffectCopy( \"tripMine/laser\", &handle );\t"), String(""), String("\t\tif ( temp )"), String("\t\t{"), String("\t\t\t// have a copy, so get the line element out of there"), String("\t\t\tCPrimitiveTemplate *prim = theFxScheduler.GetPrimitiveCopy( temp, \"line1\" );"), String(""), String("\t\t\tif ( prim )"), String("\t\t\t{"), String("\t\t\t\t// we have the primitive, so modify the endpoint"), String("\t\t\t\tprim->mOrigin2X.SetRange( cent->gent->pos4[0], cent->gent->pos4[0] );"), String("\t\t\t\tprim->mOrigin2Y.SetRange( cent->gent->pos4[1], cent->gent->pos4[1] );"), String("\t\t\t\tprim->mOrigin2Z.SetRange( cent->gent->pos4[2], cent->gent->pos4[2] );"), String(""), String("\t\t\t\t// have a copy, so get the line element out of there"), String("\t\t\t\tCPrimitiveTemplate *prim = theFxScheduler.GetPrimitiveCopy( temp, \"line2\" );"), String(""), String("\t\t\t\tif ( prim )"), String("\t\t\t\t{"), String("\t\t\t\t\t// we have the primitive, so modify the cent->gent->pos3point"), String("\t\t\t\t\tprim->mOrigin2X.SetRange( cent->gent->pos4[0], cent->gent->pos4[0] );"), String("\t\t\t\t\tprim->mOrigin2Y.SetRange( cent->gent->pos4[1], cent->gent->pos4[1] );"), String("\t\t\t\t\tprim->mOrigin2Z.SetRange( cent->gent->pos4[2], cent->gent->pos4[2] );"), String(""), String("\t\t\t\t\t// play the modified effect"), String("\t\t\t\t\ttheFxScheduler.PlayEffect( handle, beamOrg, ent.axis[0] );"), String("\t\t\t\t}"), String("\t\t\t}"), String("\t\t}"), String(""), String("\t\ttheFxScheduler.PlayEffect( \"tripMine/laserImpactGlow\", cent->gent->pos4, ent.axis[0] );"), String("\t}"), String(""), String(""), String("\tif ( s1->eFlags & EF_PROX_TRIP )"), String("\t{"), String("\t\t//special code for adding the glow end to proximity tripmine"), String("\t\tvec3_t\tbeamOrg;"), String(""), String("\t\tVectorMA( ent.origin, 6.6f, ent.axis[0], beamOrg );// forward"), String("\t\ttheFxScheduler.PlayEffect( \"tripMine/glowBit\", beamOrg, ent.axis[0] );"), String("\t}"), String(""), String("\tif ( s1->eFlags & EF_ALT_FIRING )"), String("\t{"), String("\t\t// hack for the spotlight"), String("\t\tvec3_t\torg, axis[3], dir;"), String(""), String("\t\tAngleVectors( cent->lerpAngles, dir, NULL, NULL );"), String(""), String("\t\tCG_GetTagWorldPosition( &ent, \"tag_flash\", org, axis );"), String(""), String("\t\ttheFxScheduler.PlayEffect( \"env/light_cone\", org, axis[0] );"), String(""), String("\t\tVectorMA( cent->lerpOrigin, cent->gent->radius - 5, dir, org ); // stay a bit back from the impact point...this may not be enough?"), String(""), String("\t\tcgi_R_AddLightToScene( org, 225, 1.0f, 1.0f, 1.0f );"), String("\t}"), String(""), String("\t//-----------------------------------------------------------"), String("\tif ( cent->gent->flags & (FL_DMG_BY_HEAVY_WEAP_ONLY | FL_SHIELDED ))"), String("\t{"), String("\t\t// Dumb assumption, but I guess we must be a shielded ion_cannon??  We should probably verify"), String("\t\t// if it\'s an ion_cannon that\'s Heavy Weapon only, we don\'t want to make it shielded do we...?"), String("\t\tif ( (!strcmp( \"misc_ion_cannon\", cent->gent->classname )) && (cent->gent->flags & FL_SHIELDED ))"), String("\t\t{"), String("\t\t\t// must be doing \"pain\"....er, impact"), String("\t\t\tif ( cent->gent->painDebounceTime > cg.time )"), String("\t\t\t{"), String("\t\t\t\tfloat t = (float)(cent->gent->painDebounceTime - cg.time ) / 1000.0f;"), String(""), String("\t\t\t\t// Only display when we have damage"), String("\t\t\t\tif ( t >= 0.0f && t <= 1.0f ) "), String("\t\t\t\t{"), String("\t\t\t\t\tt *= randomLava();"), String(""), String("\t\t\t\t\tent.shaderRGBA[0] = ent.shaderRGBA[1] = ent.shaderRGBA[2] = 255.0f * t;"), String("\t\t\t\t\tent.shaderRGBA[3] = 255;"), String("\t\t\t\t\tent.renderfx &= ~RF_ALPHA_FADE;"), String("\t\t\t\t\tent.renderfx |= RF_RGB_TINT;"), String("\t\t\t\t\tent.customShader = cgi_R_RegisterShader( \"gfx/misc/ion_shield\" );"), String("\t\t\t\t"), String("\t\t\t\t\tcgi_R_AddRefEntityToScene( &ent );"), String("\t\t\t\t}"), String("\t\t\t}"), String("\t\t}"), String("\t}"), String(""), String("\t//draw force sight shell around it, too"), String("\tif ((cg.snap->ps.forcePowersActive & (1 << FP_SEE)) "), String("\t\t&& cg.snap->ps.clientNum != cent->currentState.number "), String("\t\t&& CG_PlayerCanSeeCent( cent ) )"), String("\t{//so player can see dark missiles/explosives"), String("\t\tif ( s1->weapon == WP_THERMAL"), String("\t\t\t|| s1->weapon == WP_DET_PACK"), String("\t\t\t|| s1->weapon == WP_TRIP_MINE"), String("\t\t\t|| (cent->gent&&cent->gent->e_UseFunc==useF_ammo_power_converter_use)"), String("\t\t\t|| (cent->gent&&cent->gent->e_UseFunc==useF_shield_power_converter_use)"), String("\t\t\t|| (s1->eFlags&EF_FORCE_VISIBLE) )"), String("\t\t{//really, we only need to do this for things like thermals, detpacks and tripmines, no?"), String("\t\t\tCG_AddForceSightShell( &ent, cent );"), String("\t\t}"), String("\t}"), String("}"), String(""), String("/*"), String("=================="), String("CG_Speaker"), String(""), String("Speaker entities can automatically play sounds"), String("=================="), String("*/"), String("static void CG_Speaker( centity_t *cent ) {"), String("\tif ( ! cent->currentState.clientNum ) {\t// FIXME: use something other than clientNum..."), String("\t\treturn;\t\t// not auto triggering"), String("\t}"), String(""), String("\tif ( cg.time < cent->miscTime ) {"), String("\t\treturn;"), String("\t}"), String(""), String("\tcgi_S_StartSound (NULL, cent->currentState.number, CHAN_ITEM, cgs.sound_precache[cent->currentState.eventParm] );"), String(""), String("\t//\tent->s.frame = ent->wait * 10;"), String("\t//\tent->s.clientNum = ent->random * 10;"), String("\tcent->miscTime = (int)(cg.time + cent->currentState.frame * 100 + cent->currentState.clientNum * 100 * crandom());"), String("}"), String(""), String("/*"), String("=================="), String("CG_Item"), String("=================="), String("*/"), String("static void CG_Item( centity_t *cent ) "), String("{"), String("\trefEntity_t\t\t\tent;"), String("\tentityState_t\t\t*es;"), String("\tgitem_t\t\t\t\t*item;"), String("//\tint\t\t\t\t\tmsec;"), String("//\tfloat\t\t\t\tfrac;"), String("\tfloat\t\t\t\tscale;"), String(""), String("\tes = &cent->currentState;"), String("\tif ( es->modelindex >= bg_numItems ) "), String("\t{"), String("\t\tCG_Error( \"Bad item index %i on entity\", es->modelindex );"), String("\t}"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String(""), String("\t// if set to invisible, skip"), String("\tif ( (!es->modelindex && !cent->gent->ghoul2.IsValid() ) || ( es->eFlags & EF_NODRAW ) ) "), String("\t{"), String("\t\treturn;"), String("\t}"), String("/*"), String("Ghoul2 Insert End"), String("*/"), String("\tif ( cent->gent && !cent->gent->inuse )"), String("\t{"), String("\t\t// Yeah, I know....items were being freed on touch, but it could still get here and draw incorrectly..."), String("\t\treturn;"), String("\t}"), String(""), String("\titem = &bg_itemlist[ es->modelindex ];"), String(""), String("\tif ( cg_simpleItems.integer ) "), String("\t{"), String("\t\tmemset( &ent, 0, sizeof( ent ) );"), String("\t\tent.reType = RT_SPRITE;"), String("\t\tVectorCopy( cent->lerpOrigin, ent.origin );"), String("\t\tent.radius = 14;"), String("\t\tent.customShader = cg_items[es->modelindex].icon;"), String("\t\tent.shaderRGBA[0] = 255;"), String("\t\tent.shaderRGBA[1] = 255;"), String("\t\tent.shaderRGBA[2] = 255;"), String("\t\tent.shaderRGBA[3] = 255;"), String("\t\tcgi_R_AddRefEntityToScene(&ent);"), String("\t\treturn;"), String("\t}"), String(""), String("\tmemset (&ent, 0, sizeof(ent));"), String(""), String("\t// items bob up and down continuously"), String("\tif( item->giType == IT_HOLOCRON )"), String("\t{"), String("\t\tscale = 0.005f + cent->currentState.number * 0.00001f;"), String("\t\tcent->lerpOrigin[2] += (float)(4 + cos( ( cg.time + 1000 ) *  scale ) * 3)+8; // just raised them up a bit"), String("\t}"), String(""), String(""), String(""), String("\t// autorotate at one of two speeds"), String("//\tif ( item->giType == IT_HEALTH ) {"), String("//\t\tVectorCopy( cg.autoAnglesFast, cent->lerpAngles );"), String("//\t\tAxisCopy( cg.autoAxisFast, ent.axis );"), String("//\t} else {"), String("\tif( item->giType == IT_HOLOCRON )"), String("\t{"), String("\t\tVectorCopy( cg.autoAngles, cent->lerpAngles );"), String("\t\tAxisCopy( cg.autoAxis, ent.axis );"), String("\t}"), String(""), String(""), String("\t// the weapons have their origin where they attatch to player"), String("\t// models, so we need to offset them or they will rotate"), String("\t// eccentricly"), String("//\tif ( item->giType == IT_WEAPON ) {"), String("//\t\tweaponInfo_t\t*wi;"), String("//"), String("//\t\twi = &cg_weapons[item->giTag];"), String("//\t\tcent->lerpOrigin[0] -= "), String("//\t\t\twi->weaponMidpoint[0] * ent.axis[0][0] +"), String("//\t\t\twi->weaponMidpoint[1] * ent.axis[1][0] +"), String("//\t\t\twi->weaponMidpoint[2] * ent.axis[2][0];"), String("//\t\tcent->lerpOrigin[1] -= "), String("//\t\t\twi->weaponMidpoint[0] * ent.axis[0][1] +"), String("//\t\t\twi->weaponMidpoint[1] * ent.axis[1][1] +"), String("//\t\t\twi->weaponMidpoint[2] * ent.axis[2][1];"), String("//\t\tcent->lerpOrigin[2] -= "), String("//\t\t\twi->weaponMidpoint[0] * ent.axis[0][2] +"), String("//\t\t\twi->weaponMidpoint[1] * ent.axis[1][2] +"), String("//\t\t\twi->weaponMidpoint[2] * ent.axis[2][2];"), String(""), String("//\t\tcent->lerpOrigin[2] += 8;\t// an extra height boost"), String("//\t}"), String("\tvec3_t spinAngles;"), String(""), String("\t//AxisClear( ent.axis );"), String("\tVectorCopy( cent->gent->s.angles, spinAngles );"), String(""), String("\tif ( cent->gent->ghoul2.IsValid()"), String("\t\t&& cent->gent->ghoul2.size() )"), String("\t{//since modelindex is used by items as an index into items(not models), we need to ignore the hModel here to force it to use the ghoul2 model if we have one"), String("\t\tent.hModel = cgs.model_draw[0];"), String("\t}"), String("\telse"), String("\t{"), String("\t\tent.hModel = cg_items[es->modelindex].models;"), String("\t}"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("\tCG_SetGhoul2Info(&ent, cent);  "), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("\tVectorCopy( cent->lerpOrigin, ent.origin);"), String("\tVectorCopy( cent->lerpOrigin, ent.oldorigin);"), String(""), String("\tent.nonNormalizedAxes = qfalse;"), String(""), String("\t// lovely...this is for weapons that should be oriented vertically.  For weapons lockers and such."), String("\tif ( cent->gent->spawnflags & 16 )"), String("\t{\t//VectorClear( spinAngles );"), String("\t\tif ( item->giType == IT_WEAPON "), String("\t\t\t&& item->giTag == WP_SABER )"), String("\t\t{"), String("\t\t\tif ( cent->gent->random )"), String("\t\t\t{//pitch specified"), String("\t\t\t\tspinAngles[PITCH] += cent->gent->random;"), String("\t\t\t}"), String("\t\t\telse"), String("\t\t\t{"), String("\t\t\t\tspinAngles[PITCH] -= 20;"), String("\t\t\t}"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("\t\t\tspinAngles[PITCH] -= 75;"), String("\t\t}"), String("\t}"), String("\t"), String("\tif( item->giType != IT_HOLOCRON )"), String("\t{"), String("\t\tAnglesToAxis( spinAngles, ent.axis );"), String("\t}"), String(""), String("\t// items without glow textures need to keep a minimum light value"), String("\t// so they are always visible"), String("/*\tif (( item->giType == IT_WEAPON ) || ( item->giType == IT_ARMOR )) "), String("\t{"), String("\t\tent.renderfx |= RF_MINLIGHT;"), String("\t}"), String("*/"), String("\t// increase the size of the weapons when they are presented as items"), String("//\tif ( item->giType == IT_WEAPON ) {"), String("//\t\tVectorScale( ent.axis[0], 1.5f, ent.axis[0] );"), String("//\t\tVectorScale( ent.axis[1], 1.5f, ent.axis[1] );"), String("//\t\tVectorScale( ent.axis[2], 1.5f, ent.axis[2] );"), String("//\t\tent.nonNormalizedAxes = qtrue;"), String("//\t}"), String(""), String("\t// add to refresh list"), String("\tcgi_R_AddRefEntityToScene(&ent);"), String(""), String("\tif ((cg.snap->ps.forcePowersActive & (1 << FP_SEE)) "), String("\t\t&& cg.snap->ps.clientNum != cent->currentState.number "), String("\t\t&& CG_PlayerCanSeeCent( cent ) )"), String("\t{"), String("\t\tCG_AddForceSightShell( &ent, cent );"), String("\t}"), String(""), String("\tif ( item->giType == IT_WEAPON "), String("\t\t&& item->giTag == WP_SABER "), String("\t\t&& (!cent->gent || !(cent->gent->spawnflags&64/*ITMSF_NOGLOW*/)) )"), String("\t{"), String("\t\t// saber pickup item needs to be more visible"), String("\t\tfloat\twv;"), String("\t\tvec3_t\torg;"), String(""), String("\t\tent.customShader = cgi_R_RegisterShader( \"gfx/effects/solidWhite_cull\" );"), String("\t\tent.renderfx = RF_RGB_TINT;"), String("\t\twv = sin( cg.time * 0.002f ) * 0.08f + 0.2f;"), String("\t\tent.shaderRGBA[0] = ent.shaderRGBA[1] = wv * 255;"), String("\t\tent.shaderRGBA[2] = 0;"), String("\t\tcgi_R_AddRefEntityToScene(&ent);"), String(""), String("\t\tfor ( int i = -4; i < 10; i += 1 )"), String("\t\t{"), String("\t\t\tVectorMA( ent.origin, -i, ent.axis[2], org );"), String(""), String("\t\t\tFX_AddSprite( org, NULL, NULL, 10.0f, 10.0f, wv * 0.5f, wv * 0.5f, 0.0f, 0.0f, 1.0f, cgs.media.yellowDroppedSaberShader, 0x08000000 );"), String("\t\t}"), String(""), String("\t\t// THIS light looks crappy...maybe it should just be removed..."), String("\t\tcgi_R_AddLightToScene( ent.origin, wv * 350 + 180, 1.0f, 1.0f, 0.0f );"), String("\t}"), String("}"), String(""), String("//============================================================================"), String(""), String("/*"), String("==============="), String("CG_Missile"), String("==============="), String("*/"), String("static void CG_Missile( centity_t *cent ) {"), String("\trefEntity_t\t\t\tent;"), String("\tentityState_t\t\t*s1;"), String("\tconst weaponInfo_t\t*weapon;"), String("\tconst weaponData_t  *wData;"), String(""), String("\tif ( !cent->gent->inuse )"), String("\t\treturn;"), String(""), String("\ts1 = &cent->currentState;"), String("\tif ( s1->weapon >= WP_NUM_WEAPONS ) {"), String("\t\ts1->weapon = 0;"), String("\t}"), String("\tweapon = &cg_weapons[s1->weapon];"), String("\twData = &weaponData[s1->weapon];"), String(""), String("\tif ( s1->pos.trType != TR_INTERPOLATE )"), String("\t{"), String("\t\t// calculate the axis"), String("\t\tVectorCopy( s1->angles, cent->lerpAngles );"), String("\t}"), String(""), String("\tif ( cent->gent->alt_fire )"), String("\t{"), String("\t\t// add trails"), String("\t\tif ( weapon->alt_missileTrailFunc )  "), String("\t\t\tweapon->alt_missileTrailFunc( cent, weapon );"), String(""), String("\t\t// add dynamic light"), String("\t\tif ( wData->alt_missileDlight )"), String("\t\t\t\tcgi_R_AddLightToScene(cent->lerpOrigin, wData->alt_missileDlight, "), String("\t\t\t\t\twData->alt_missileDlightColor[0], wData->alt_missileDlightColor[1], wData->alt_missileDlightColor[2] );"), String(""), String("\t\t// add missile sound"), String("\t\tif ( weapon->alt_missileSound )"), String("\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->alt_missileSound );"), String(""), String("\t\t//Don\'t draw something without a model"), String("\t\tif ( weapon->alt_missileModel == NULL )"), String("\t\t\treturn;"), String("\t}"), String("\telse"), String("\t{"), String("\t\t// add trails"), String("\t\tif ( weapon->missileTrailFunc )  "), String("\t\t\tweapon->missileTrailFunc( cent, weapon );"), String(""), String("\t\t// add dynamic light"), String("\t\tif ( wData->missileDlight )"), String("\t\t\tcgi_R_AddLightToScene(cent->lerpOrigin, wData->missileDlight, "), String("\t\t\t\twData->missileDlightColor[0], wData->missileDlightColor[1], wData->missileDlightColor[2] );"), String(""), String("\t\t// add missile sound"), String("\t\tif ( weapon->missileSound )"), String("\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->missileSound );"), String(""), String("\t\t//Don\'t draw something without a model"), String("\t\tif ( weapon->missileModel == NULL )"), String("\t\t\treturn;"), String("\t}"), String(""), String("\t// create the render entity"), String("\tmemset (&ent, 0, sizeof(ent));"), String("\tVectorCopy( cent->lerpOrigin, ent.origin);"), String("\tVectorCopy( cent->lerpOrigin, ent.oldorigin);"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("\tCG_SetGhoul2Info(&ent, cent);  "), String(""), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("\t// flicker between two skins"), String("\tent.skinNum = cg.clientFrame & 1;"), String("\tent.renderfx = /*weapon->missileRenderfx | */RF_NOSHADOW;"), String(""), String("\tif ( cent->gent->alt_fire )"), String("\t\tent.hModel = weapon->alt_missileModel;"), String("\telse"), String("\t\tent.hModel = weapon->missileModel;"), String(""), String("\t// spin as it moves"), String("\tif ( s1->apos.trType != TR_INTERPOLATE)"), String("\t{"), String(""), String("\t\t// convert direction of travel into axis"), String("\t\tif ( VectorNormalize2( s1->pos.trDelta, ent.axis[0] ) == 0 ) {"), String("\t\t\tent.axis[0][2] = 1;"), String("\t\t}"), String("\t\tif ( s1->pos.trType != TR_STATIONARY )"), String("\t\t{"), String("\t\t\tif ( s1->eFlags & EF_MISSILE_STICK )"), String("\t\t\t\tRotateAroundDirection( ent.axis, cg.time * 0.5f );//Did this so regular missiles don\'t get broken"), String("\t\t\telse"), String("\t\t\t\tRotateAroundDirection( ent.axis, cg.time * 0.25f );//JFM:FLOAT FIX"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("\t\t\tif ( s1->eFlags & EF_MISSILE_STICK )"), String("\t\t\t\tRotateAroundDirection( ent.axis, (float)s1->pos.trTime * 0.5f );"), String("\t\t\telse"), String("\t\t\t\tRotateAroundDirection( ent.axis, (float)s1->time );"), String("\t\t}"), String("\t}"), String("\telse"), String("\t{"), String("\t\tAnglesToAxis( cent->lerpAngles, ent.axis );"), String("\t}"), String(""), String("\t// add to refresh list, possibly with quad glow"), String("\tCG_AddRefEntityWithPowerups( &ent, s1->powerups, NULL );"), String(""), String("\tif ((cg.snap->ps.forcePowersActive & (1 << FP_SEE)) "), String("\t\t&& cg.snap->ps.clientNum != cent->currentState.number "), String("\t\t&& CG_PlayerCanSeeCent( cent ) )"), String("\t{//so player can see dark missiles/explosives"), String("\t\tif ( s1->weapon == WP_THERMAL"), String("\t\t\t|| s1->weapon == WP_DET_PACK"), String("\t\t\t|| s1->weapon == WP_TRIP_MINE"), String("\t\t\t|| (s1->eFlags&EF_FORCE_VISIBLE) )"), String("\t\t{//really, we only need to do this for things like thermals, detpacks and tripmines, no?"), String("\t\t\tCG_AddForceSightShell( &ent, cent );"), String("\t\t}"), String("\t}"), String("}"), String(""), String("/*"), String("==============="), String("CG_Mover"), String("==============="), String("*/"), String(""), String("#define DOOR_OPENING\t1"), String("#define DOOR_CLOSING\t2"), String("#define DOOR_OPEN\t\t3"), String("#define DOOR_CLOSED\t\t4"), String(""), String("static void CG_Mover( centity_t *cent ) {"), String("\trefEntity_t\t\t\tent;"), String("\tentityState_t\t\t*s1;"), String(""), String("\ts1 = &cent->currentState;"), String(""), String("\t// create the render entity"), String("\tmemset (&ent, 0, sizeof(ent));"), String("\t//FIXME: why are these always 0, 0, 0???!"), String("\tVectorCopy( cent->lerpOrigin, ent.origin);"), String("\tVectorCopy( cent->lerpOrigin, ent.oldorigin);"), String("\tAnglesToAxis( cent->lerpAngles, ent.axis );"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String(""), String("\tCG_SetGhoul2Info(&ent, cent);  "), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("\tent.renderfx = RF_NOSHADOW;"), String(""), String("\t// flicker between two skins (FIXME?)"), String("\tent.skinNum = ( cg.time >> 6 ) & 1;"), String(""), String("\t// get the model, either as a bmodel or a modelindex"), String("\tif ( s1->solid == SOLID_BMODEL ) {"), String("\t\tent.hModel = cgs.inlineDrawModel[s1->modelindex];"), String("\t} else {"), String("\t\tent.hModel = cgs.model_draw[s1->modelindex];"), String("\t}"), String(""), String("\t// If there isn\'t an hModel for this mover, an RGB axis model will get drawn."), String("\tif ( !ent.hModel )"), String("\t{"), String("\t\treturn;"), String("\t}"), String(""), String("\tif ( cent->currentState.eFlags & EF_DISABLE_SHADER_ANIM )"), String("\t{"), String("\t\t// by setting the shader time to the current time, we can force an animating shader to not animate"), String("\t\tent.shaderTime = cg.time * 0.001f;"), String("\t}"), String(""), String("\t// add the secondary model"), String("\tif ( s1->solid == SOLID_BMODEL && s1->modelindex2 ) "), String("\t{"), String("//\t\tvec3_t\torg;"), String("\t\tif ( !(s1->eFlags & EF_NODRAW) )"), String("\t\t{"), String("\t\t\t// add to refresh list"), String("\t\t\tCG_AddRefEntWithTransportEffect( cent, &ent );"), String("\t\t}"), String(""), String("/*\t\t// Um, this does not interpolate nicely?  Not sure why it was here...."), String("\t\tVectorAdd(cent->gent->absmin, cent->gent->absmax, org);"), String("\t\tVectorScale(org, 0.5, org);"), String("\t\tVectorCopy( org, ent.origin);"), String("\t\tVectorCopy( org, ent.oldorigin);"), String("*/"), String("\t\tif ( !VectorCompare( vec3_origin, cent->gent->modelAngles ) )"), String("\t\t{//we have a rotational offset for the model for this brush"), String("\t\t\tvec3_t modelAngles;"), String("\t\t\tVectorAdd( cent->lerpAngles, cent->gent->modelAngles, modelAngles );"), String("\t\t\tAnglesToAxis( modelAngles, ent.axis );"), String("\t\t}"), String("\t\tent.hModel = cgs.model_draw[s1->modelindex2];"), String("\t}"), String(""), String("\t// I changed it to always do it because nodraw seemed like it should actually do what it says. Be aware that if you change this,"), String("\t//\tthe movers for the shooting gallery on doom_detention will break."), String("\tif ( (s1->eFlags & EF_NODRAW) )"), String("\t{"), String("\t\treturn;"), String("\t}"), String("\t//fall through and render the hModel or..."), String(""), String("\t//We\'re a normal model being moved, animate our model"), String("\tent.skinNum = 0;"), String("\tif ( s1->eFlags & EF_ANIM_ONCE )"), String("\t{//FIXME: needs to anim at once per 100 ms"), String("\t\tent.frame = cent->gent->s.frame;"), String("\t\tent.renderfx|=RF_CAP_FRAMES;"), String("\t}"), String("\telse if ( s1->eFlags & EF_ANIM_ALLFAST )"), String("\t{"), String("\t\tent.frame = (cg.time / 100);"), String("\t\tent.renderfx|=RF_WRAP_FRAMES;"), String("\t}"), String("\telse"), String("\t{"), String("\t\tent.frame = s1->frame;"), String("\t}"), String(""), String("\tif ( s1->eFlags & EF_SHADER_ANIM )"), String("\t{"), String("\t\tent.renderfx|=RF_SETANIMINDEX;"), String("\t\tent.skinNum = s1->frame;"), String("\t\t//ent.shaderTime = cg.time*0.001f - s1->frame/s1->time;//NOTE: s1->time is number of frames"), String("\t}"), String(""), String("\t// add to refresh list"), String("\tCG_AddRefEntWithTransportEffect( cent, &ent );"), String(""), String("\tif ((cg.snap->ps.forcePowersActive & (1 << FP_SEE)) "), String("\t\t&& cg.snap->ps.clientNum != cent->currentState.number "), String("\t\t&& (s1->eFlags&EF_FORCE_VISIBLE) )"), String("\t{//so player can see func_breakables"), String("\t\tCG_AddForceSightShell( &ent, cent );"), String("\t}"), String("}"), String(""), String("/*"), String("==============="), String("CG_Beam"), String(""), String("Also called as an event"), String("==============="), String("*/"), String("void CG_Beam( centity_t *cent, int color ) {"), String("\trefEntity_t\t\t\tent;"), String("\tentityState_t\t\t*s1;"), String(""), String("\ts1 = &cent->currentState;"), String(""), String("\t// create the render entity"), String("\tmemset (&ent, 0, sizeof(ent));"), String("\tVectorCopy( s1->pos.trBase, ent.origin );"), String("\tVectorCopy( s1->origin2, ent.oldorigin );"), String("\tAxisClear( ent.axis );"), String("\tent.reType = RT_BEAM;"), String("\tent.skinNum = color;"), String(""), String("\tent.renderfx = RF_NOSHADOW;"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("\tCG_SetGhoul2Info(&ent, cent);  "), String(""), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("\t// add to refresh list"), String("\tcgi_R_AddRefEntityToScene(&ent);"), String("}"), String(""), String("/*"), String("==============="), String("CG_Cylinder"), String("==============="), String("*/"), String("void CG_Cylinder( vec3_t start, vec3_t end, float radius, vec3_t color ) "), String("{"), String("\tvec3_t\tdir;"), String("\tfloat\tlength;"), String(""), String("\tVectorSubtract( end, start, dir );"), String("\tlength = VectorNormalize( dir );"), String(""), String("/*\tFX_AddCylinder( -1, start, "), String("\t\t\t\t\tdir, "), String("\t\t\t\t\tlength, "), String("\t\t\t\t\t0.0f, "), String("\t\t\t\t\tradius,"), String("\t\t\t\t\t0.0f,"), String("\t\t\t\t\tradius,"), String("\t\t\t\t\t0.0f,"), String("\t\t\t\t\t1.0f,"), String("\t\t\t\t\t1.0f,"), String("\t\t\t\t\tcolor,"), String("\t\t\t\t\tcolor,"), String("\t\t\t\t\t100.0f,"), String("\t\t\t\t\tcgs.media.waterDropShader"), String("\t\t\t\t\t0, -1, -1 );*/"), String("}"), String(""), String("static vec2_t st[] = "), String("{"), String("\t0.0f, 0.0f,"), String("\t1.0f, 0.0f,"), String("\t1.0f, 1.0f,"), String("\t0.0f, 1.0f"), String("};"), String(""), String("void CG_Cube( vec3_t mins, vec3_t maxs, vec3_t color, float alpha ) "), String("{"), String("\tvec3_t\tpoint[4], rot={0,0,0};"), String("\tvec2_t\tst[4];"), String("\tint\t\tvec[3];"), String("\tint\t\taxis, i;"), String(""), String("\tfor ( axis = 0, vec[0] = 0, vec[1] = 1, vec[2] = 2; axis < 3; axis++, vec[0]++, vec[1]++, vec[2]++ )"), String("\t{"), String("\t\tfor ( i = 0; i < 3; i++ )"), String("\t\t{"), String("\t\t\tif ( vec[i] > 2 )"), String("\t\t\t{"), String("\t\t\t\tvec[i] = 0;"), String("\t\t\t}"), String("\t\t}"), String(""), String("\t\tpoint[0][vec[1]] = mins[vec[1]];"), String("\t\tpoint[0][vec[2]] = mins[vec[2]];"), String(""), String("\t\tpoint[1][vec[1]] = mins[vec[1]];"), String("\t\tpoint[1][vec[2]] = maxs[vec[2]];"), String(""), String("\t\tpoint[2][vec[1]] = maxs[vec[1]];"), String("\t\tpoint[2][vec[2]] = maxs[vec[2]];"), String("\t\t"), String("\t\tpoint[3][vec[1]] = maxs[vec[1]];"), String("\t\tpoint[3][vec[2]] = mins[vec[2]];"), String(""), String("\t\t//- face"), String("\t\tpoint[0][vec[0]] = point[1][vec[0]] = point[2][vec[0]] = point[3][vec[0]] = mins[vec[0]];"), String(""), String("\t\tFX_AddPoly( point, st, 4, NULL, NULL, alpha, alpha, 0.0f, "), String("\t\t\t\t\t\tcolor, color, 0.0f, rot, 0.0f, 0.0f, "), String("\t\t\t\t\t\t100, cgs.media.solidWhiteShader, 0 );"), String(""), String("\t\t//+ face"), String("\t\tpoint[0][vec[0]] = point[1][vec[0]] = point[2][vec[0]] = point[3][vec[0]] = maxs[vec[0]];"), String(""), String("\t\tFX_AddPoly( point, st, 4, NULL, NULL, alpha, alpha, 0.0f, "), String("\t\t\t\t\t\tcolor, color, 0.0f, rot, 0.0f, 0.0f, "), String("\t\t\t\t\t\t100, cgs.media.solidWhiteShader, 0 );"), String("\t}"), String("}"), String(""), String("void CG_CubeOutline( vec3_t mins, vec3_t maxs, int time, unsigned int color, float alpha )"), String("{"), String("\tvec3_t\tpoint1, point2, point3, point4;"), String("\tint\t\tvec[3];"), String("\tint\t\taxis, i;"), String(""), String("\tfor ( axis = 0, vec[0] = 0, vec[1] = 1, vec[2] = 2; axis < 3; axis++, vec[0]++, vec[1]++, vec[2]++ )"), String("\t{"), String("\t\tfor ( i = 0; i < 3; i++ )"), String("\t\t{"), String("\t\t\tif ( vec[i] > 2 )"), String("\t\t\t{"), String("\t\t\t\tvec[i] = 0;"), String("\t\t\t}"), String("\t\t}"), String(""), String("\t\tpoint1[vec[1]] = mins[vec[1]];"), String("\t\tpoint1[vec[2]] = mins[vec[2]];"), String(""), String("\t\tpoint2[vec[1]] = mins[vec[1]];"), String("\t\tpoint2[vec[2]] = maxs[vec[2]];"), String(""), String("\t\tpoint3[vec[1]] = maxs[vec[1]];"), String("\t\tpoint3[vec[2]] = maxs[vec[2]];"), String("\t\t"), String("\t\tpoint4[vec[1]] = maxs[vec[1]];"), String("\t\tpoint4[vec[2]] = mins[vec[2]];"), String(""), String("\t\t//- face"), String("\t\tpoint1[vec[0]] = point2[vec[0]] = point3[vec[0]] = point4[vec[0]] = mins[vec[0]];"), String(""), String("\t\tCG_TestLine( point1, point2, time, color, 1 );"), String("\t\tCG_TestLine( point2, point3, time, color, 1 );"), String("\t\tCG_TestLine( point1, point4, time, color, 1 );"), String("\t\tCG_TestLine( point4, point3, time, color, 1 );"), String(""), String("\t\t//+ face"), String("\t\tpoint1[vec[0]] = point2[vec[0]] = point3[vec[0]] = point4[vec[0]] = maxs[vec[0]];"), String(""), String("\t\tCG_TestLine( point1, point2, time, color, 1 );"), String("\t\tCG_TestLine( point2, point3, time, color, 1 );"), String("\t\tCG_TestLine( point1, point4, time, color, 1 );"), String("\t\tCG_TestLine( point4, point1, time, color, 1 );"), String("\t}"), String("}"), String(""), String("void CG_Line( vec3_t start, vec3_t end, vec3_t color, float alpha ) "), String("{"), String("\t/*FX_AddLine( start,"), String("\t\t\t\tend,"), String("\t\t\t\t1.0f,"), String("\t\t\t\t1.0,"), String("\t\t\t\t1.0f,"), String("\t\t\t\talpha,"), String("\t\t\t\talpha,"), String("\t\t\t\tcolor, "), String("\t\t\t\tcolor, "), String("\t\t\t\t100.0f,"), String("\t\t\t\tcgs.media.whiteShader );*/"), String("}"), String(""), String("/*"), String("==============="), String("CG_Portal"), String("==============="), String("*/"), String("static void CG_Portal( centity_t *cent ) {"), String("\trefEntity_t\t\t\tent;"), String("\tentityState_t\t\t*s1;"), String(""), String("\ts1 = &cent->currentState;"), String(""), String("\t//FIXME: this tends to give a bad axis[1], perhaps we"), String("\t//should just do the VectorSubtraction here rather than"), String("\t//on the game side.  Would also allow camera to follow"), String("\t//a moving target."), String(""), String("\t// create the render entity"), String("\tmemset (&ent, 0, sizeof(ent));"), String("\tVectorCopy( cent->lerpOrigin, ent.origin );"), String("\tVectorCopy( s1->origin2, ent.oldorigin );"), String("\tByteToDir( s1->eventParm, ent.axis[0] );"), String("\tPerpendicularVector( ent.axis[1], ent.axis[0] );"), String(""), String("\t// negating this tends to get the directions like they want"), String("\t// we really should have a camera roll value"), String("\tVectorSubtract( vec3_origin, ent.axis[1], ent.axis[1] );"), String(""), String("\tCrossProduct( ent.axis[0], ent.axis[1], ent.axis[2] );"), String("\tent.reType = RT_PORTALSURFACE;"), String("\tent.frame = s1->frame;\t\t// rotation speed"), String("\tent.skinNum = (int)(s1->clientNum/256.0 * 360);\t// roll offset"), String(""), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("\tCG_SetGhoul2Info(&ent, cent);  "), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String(""), String("\t// add to refresh list"), String("\tcgi_R_AddRefEntityToScene(&ent);"), String("}"), String(""), String(""), String("/*"), String("========================="), String("CG_AdjustPositionForMover"), String(""), String("Also called by client movement prediction code"), String("========================="), String("*/"), String("void CG_AdjustPositionForMover( const vec3_t in, int moverNum, int atTime, vec3_t out ) {"), String("\tcentity_t\t*cent;"), String("\tvec3_t\toldOrigin, origin, deltaOrigin;"), String("//\tvec3_t\toldAngles, angles, deltaAngles;"), String(""), String("\tif ( moverNum <= 0 ) {"), String("\t\tVectorCopy( in, out );"), String("\t\treturn;"), String("\t}"), String(""), String("\tcent = &cg_entities[ moverNum ];"), String("\tif ( cent->currentState.eType != ET_MOVER ) {"), String("\t\tVectorCopy( in, out );"), String("\t\treturn;"), String("\t}"), String(""), String("\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, oldOrigin );"), String("//\tEvaluateTrajectory( &cent->currentState.apos, cg.snap->serverTime, oldAngles );"), String(""), String("\tEvaluateTrajectory( &cent->currentState.pos, atTime, origin );"), String("//\tEvaluateTrajectory( &cent->currentState.apos, atTime, angles );"), String(""), String("\tVectorSubtract( origin, oldOrigin, deltaOrigin );"), String("//\tVectorSubtract( angles, oldAngles, deltaAngles );"), String(""), String(""), String("\tVectorAdd( in, deltaOrigin, out );"), String(""), String("\t// FIXME: origin change when on a rotating object"), String("}"), String("/*"), String("==============="), String("CG_CalcEntityLerpPositions"), String(""), String("==============="), String("*/"), String("extern char\t*vtos( const vec3_t v );"), String("#if 1"), String("void CG_CalcEntityLerpPositions( centity_t *cent ) {"), String("\tif ( cent->gent && cent->gent->client && cent->gent->client->NPC_class == CLASS_VEHICLE && cent->nextState ) //cent->currentState.vehicleIndex != VEHICLE_NONE )"), String("\t{"), String("\t\tfloat\t\tf = cg.frameInterpolation;"), String(""), String("\t\tcent->currentState.vehicleAngles[0] = LerpAngle( cent->currentState.vehicleAngles[0], cent->nextState->vehicleAngles[0], f );"), String("\t\tcent->currentState.vehicleAngles[1] = LerpAngle( cent->currentState.vehicleAngles[1], cent->nextState->vehicleAngles[1], f );"), String("\t\tcent->currentState.vehicleAngles[2] = LerpAngle( cent->currentState.vehicleAngles[2], cent->nextState->vehicleAngles[2], f );"), String("\t}"), String(""), String("\tif ( cent->currentState.number == cg.snap->ps.clientNum)"), String("\t{"), String("\t\t// if the player, take position from prediction"), String("\t\tVectorCopy( cg.predicted_player_state.origin, cent->lerpOrigin );"), String("\t\tVectorCopy( cg.predicted_player_state.viewangles, cent->lerpAngles );"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("//\t\tLerpBoneAngleOverrides(cent);"), String("/*"), String("Ghoul2 Insert End"), String("*/"), String("\t\treturn;"), String("\t}"), String("\t"), String("\t//FIXME: prediction on clients in timescale results in jerky positional translation"), String("\tif ( cent->interpolate )"), String("\t{"), String("\t\t// if the entity has a valid next state, interpolate a value between the frames"), String("\t\t// unless it is a mover with a known start and stop"), String("\t\tvec3_t\t\tcurrent, next;"), String("\t\tfloat\t\tf;"), String(""), String("\t\t// it would be an internal error to find an entity that interpolates without"), String("\t\t// a snapshot ahead of the current one"), String("\t\tif ( cg.nextSnap == NULL ) {"), String("\t\t\tCG_Error( \"CG_AddCEntity: cg.nextSnap == NULL\" );"), String("\t\t}"), String(""), String("\t\tf = cg.frameInterpolation;"), String(""), String("\t\tif ( cent->currentState.apos.trType == TR_INTERPOLATE && cent->nextState )"), String("\t\t{"), String("\t\t\tEvaluateTrajectory( &cent->currentState.apos, cg.snap->serverTime, current );"), String("\t\t\tEvaluateTrajectory( &cent->nextState->apos, cg.nextSnap->serverTime, next );"), String(""), String("\t\t\tcent->lerpAngles[0] = LerpAngle( current[0], next[0], f );"), String("\t\t\tcent->lerpAngles[1] = LerpAngle( current[1], next[1], f );"), String("\t\t\tcent->lerpAngles[2] = LerpAngle( current[2], next[2], f );"), String(""), String("\t\t\t/*"), String("\t\t\tif(cent->gent && cent->currentState.clientNum != 0 && !VectorCompare(current, next))"), String("\t\t\t{"), String("\t\t\t\tCom_Printf(\"%s last/next/lerp apos %s/%s/%s, f = %4.2f\\n\", cent->gent->script_targetname, vtos(current), vtos(next), vtos(cent->lerpAngles), f);"), String("\t\t\t}"), String("\t\t\t*/"), String("\t/*"), String("\tGhoul2 Insert Start"), String("\t*/"), String("\t\t\t// now the nasty stuff - this will interpolate all ghoul2 models bone angle overrides per model attached to this cent"), String("\t\t\t/*"), String("\t\t\tif (cent->gent->ghoul2.size())"), String("\t\t\t{"), String("\t\t\t\tLerpBoneAngleOverrides(cent);"), String("\t\t\t}"), String("\t\t\t*/"), String("\t/*"), String("\tGhoul2 Insert End"), String("\t*/"), String("\t\t}"), String("\t\tif ( cent->currentState.pos.trType == TR_INTERPOLATE && cent->nextState ) "), String("\t\t{"), String("\t\t\t// this will linearize a sine or parabolic curve, but it is important"), String("\t\t\t// to not extrapolate player positions if more recent data is available"), String("\t\t\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, current );"), String("\t\t\tEvaluateTrajectory( &cent->nextState->pos, cg.nextSnap->serverTime, next );"), String(""), String("\t\t\tcent->lerpOrigin[0] = current[0] + f * ( next[0] - current[0] );"), String("\t\t\tcent->lerpOrigin[1] = current[1] + f * ( next[1] - current[1] );"), String("\t\t\tcent->lerpOrigin[2] = current[2] + f * ( next[2] - current[2] );"), String(""), String("\t\t\t/*"), String("\t\t\tif ( cent->gent && cent->currentState.clientNum != 0 )"), String("\t\t\t{"), String("\t\t\t\tCom_Printf(\"%s last/next/lerp pos %s/%s/%s, f = %4.2f\\n\", cent->gent->script_targetname, vtos(current), vtos(next), vtos(cent->lerpOrigin), f);"), String("\t\t\t}"), String("\t\t\t*/"), String("\t\t\treturn;//FIXME: should this be outside this if?"), String("\t\t}"), String("\t}"), String("\telse"), String("\t{"), String("\t\tif ( cent->currentState.apos.trType == TR_INTERPOLATE )"), String("\t\t{"), String("\t\t\tEvaluateTrajectory( &cent->currentState.apos, cg.snap->serverTime, cent->lerpAngles );"), String("\t\t}"), String("\t\tif ( cent->currentState.pos.trType == TR_INTERPOLATE ) "), String("\t\t{"), String("\t\t\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, cent->lerpOrigin );"), String("\t\t\t/*"), String("\t\t\tif(cent->gent && cent->currentState.clientNum != 0 )"), String("\t\t\t{"), String("\t\t\t\tCom_Printf(\"%s last/next/lerp pos %s, f = 1.0\\n\", cent->gent->script_targetname, vtos(cent->lerpOrigin) );"), String("\t\t\t}"), String("\t\t\t*/"), String("\t\t\treturn;"), String("\t\t}"), String("\t}"), String("\t"), String("\t// FIXME: if it\'s blocked, it wigs out, draws it in a predicted spot, but never"), String("\t// makes it there - we need to predict it in the right place if this is happens..."), String(""), String("\t// just use the current frame and evaluate as best we can"), String("\ttrajectory_t *posData = &cent->currentState.pos;"), String("\t{"), String("\t\tgentity_t *ent = &g_entities[cent->currentState.number];"), String(""), String("\t\tif ( ent && ent->inuse)"), String("\t\t{"), String("\t\t\tif ( ent->s.eFlags & EF_BLOCKED_MOVER || ent->s.pos.trType == TR_STATIONARY )"), String("\t\t\t{//this mover has stopped moving and is going to wig out if we predict it"), String("\t\t\t\t//based on last frame\'s info- cut across the network and use the currentOrigin"), String("\t\t\t\tVectorCopy( ent->currentOrigin, cent->lerpOrigin );"), String("\t\t\t\tposData = NULL;"), String("\t\t\t}"), String("\t\t\telse"), String("\t\t\t{"), String("\t\t\t\tposData = &ent->s.pos;"), String("\t\t\t}"), String("\t\t}"), String("\t}"), String(""), String("\tif ( posData )"), String("\t{"), String("\t\tEvaluateTrajectory( posData, cg.time, cent->lerpOrigin );"), String("\t}"), String(""), String("\t// FIXME: this will stomp an apos trType of TR_INTERPOLATE!!"), String("\tEvaluateTrajectory( &cent->currentState.apos, cg.time, cent->lerpAngles );"), String(""), String("\t// adjust for riding a mover"), String("\tCG_AdjustPositionForMover( cent->lerpOrigin, cent->currentState.groundEntityNum, cg.time, cent->lerpOrigin );"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("\t\t// now the nasty stuff - this will interpolate all ghoul2 models bone angle overrides per model attached to this cent"), String("\t/*"), String("\tif (cent->gent->ghoul2.size())"), String("\t{"), String("\t\tLerpBoneAngleOverrides(cent);"), String("\t}"), String("\t*/"), String("/*"), String("Ghoul2 Insert End"), String("*/"), String("\t// FIXME: perform general error decay?"), String("}"), String("#else"), String("void CG_CalcEntityLerpPositions( centity_t *cent ) "), String("{"), String("\tif ( cent->currentState.number == cg.snap->ps.clientNum)"), String("\t{"), String("\t\t// if the player, take position from prediction"), String("\t\tVectorCopy( cg.predicted_player_state.origin, cent->lerpOrigin );"), String("\t\tVectorCopy( cg.predicted_player_state.viewangles, cent->lerpAngles );"), String("OutputDebugString(va(\"b=(%6.2f,%6.2f,%6.2f)\\n\",cent->lerpOrigin[0],cent->lerpOrigin[1],cent->lerpOrigin[2]));"), String("\t\treturn;"), String("\t}"), String(""), String(""), String("if (cent->currentState.number != cg.snap->ps.clientNum&&cent->interpolate && cent->currentState.pos.trType == TR_INTERPOLATE)"), String("{"), String("\tif (cent->interpolate)"), String("\t{"), String("OutputDebugString(va(\"[%3d] interp %4.2f t=%6d  st = %6d  nst = %6d     b=%6.2f   nb=%6.2f\\n\","), String("\t\tcent->currentState.number,"), String("\t\tcg.frameInterpolation,"), String("\t\tcg.time,"), String("\t\tcg.snap->serverTime,"), String("\t\tcg.nextSnap->serverTime,"), String("\t\tcent->currentState.pos.trBase[0],"), String("\t\tcent->nextState.pos.trBase[0]));"), String("\t}"), String("\telse"), String("\t{"), String("OutputDebugString(va(\"[%3d] nonext %4.2f t=%6d  st = %6d  nst = %6d     b=%6.2f   nb=%6.2f\\n\","), String("\t\tcent->currentState.number,"), String("\t\tcg.frameInterpolation,"), String("\t\tcg.time,"), String("\t\tcg.snap->serverTime,"), String("\t\t0,"), String("\t\tcent->currentState.pos.trBase[0],"), String("\t\t0.0f));"), String("\t}"), String("}"), String(""), String("\t//FIXME: prediction on clients in timescale results in jerky positional translation"), String("\tif (cent->interpolate && "), String("\t\t(cent->currentState.number == cg.snap->ps.clientNum ||"), String("\t\tcent->interpolate && cent->currentState.pos.trType == TR_INTERPOLATE ) )"), String("\t{"), String("\t\tvec3_t\t\tcurrent, next;"), String("\t\tfloat\t\tf;"), String(""), String("\t\t// it would be an internal error to find an entity that interpolates without"), String("\t\t// a snapshot ahead of the current one"), String("\t\tif ( cg.nextSnap == NULL ) "), String("\t\t{"), String("\t\t\tCG_Error( \"CG_AddCEntity: cg.nextSnap == NULL\" );"), String("\t\t}"), String(""), String("\t\tf = cg.frameInterpolation;"), String(""), String("\t\tEvaluateTrajectory( &cent->currentState.apos, cg.snap->serverTime, current );"), String("\t\tEvaluateTrajectory( &cent->nextState.apos, cg.nextSnap->serverTime, next );"), String(""), String("\t\tcent->lerpAngles[0] = LerpAngle( current[0], next[0], f );"), String("\t\tcent->lerpAngles[1] = LerpAngle( current[1], next[1], f );"), String("\t\tcent->lerpAngles[2] = LerpAngle( current[2], next[2], f );"), String(""), String("\t\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, current );"), String("\t\tEvaluateTrajectory( &cent->nextState.pos, cg.nextSnap->serverTime, next );"), String(""), String("\t\tcent->lerpOrigin[0] = current[0] + f * ( next[0] - current[0] );"), String("\t\tcent->lerpOrigin[1] = current[1] + f * ( next[1] - current[1] );"), String("\t\tcent->lerpOrigin[2] = current[2] + f * ( next[2] - current[2] );"), String("\t\treturn;"), String("\t}"), String("\t// just use the current frame and evaluate as best we can"), String("\ttrajectory_t *posData = &cent->currentState.pos;"), String("\t{"), String("\t\tgentity_t *ent = &g_entities[cent->currentState.number];"), String(""), String("\t\tif ( ent && ent->inuse)"), String("\t\t{"), String("\t\t\tif ( ent->s.eFlags & EF_BLOCKED_MOVER || ent->s.pos.trType == TR_STATIONARY )"), String("\t\t\t{//this mover has stopped moving and is going to wig out if we predict it"), String("\t\t\t\t//based on last frame\'s info- cut across the network and use the currentOrigin"), String("\t\t\t\tVectorCopy( ent->currentOrigin, cent->lerpOrigin );"), String("\t\t\t\tposData = NULL;"), String("\t\t\t}"), String("\t\t\telse"), String("\t\t\t{"), String("\t\t\t\tposData = &ent->s.pos;"), String("\t\t\t\tEvaluateTrajectory(&ent->s.pos,cg.time, cent->lerpOrigin );"), String("\t\t\t}"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("\t\t\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, cent->lerpOrigin );"), String("\t\t}"), String("\t}"), String("\tEvaluateTrajectory( &cent->currentState.apos, cg.time, cent->lerpAngles );"), String(""), String("\t// adjust for riding a mover"), String("\tCG_AdjustPositionForMover( cent->lerpOrigin, cent->currentState.groundEntityNum, cg.time, cent->lerpOrigin );"), String("}"), String("#endif"), String("/*"), String("==============="), String("CG_AddLocalSet"), String("==============="), String("*/"), String(""), String("static void CG_AddLocalSet( centity_t *cent )"), String("{"), String("\tcent->gent->setTime = cgi_S_AddLocalSet( cent->gent->soundSet, cg.refdef.vieworg, cent->lerpOrigin, cent->gent->s.number, cent->gent->setTime );"), String("}"), String(""), String("/*"), String("-------------------------"), String("CAS_GetBModelSound"), String("-------------------------"), String("*/"), String(""), String("sfxHandle_t CAS_GetBModelSound( const char *name, int stage )"), String("{"), String("\treturn cgi_AS_GetBModelSound( name, stage );"), String("}"), String(""), String("void CG_DLightThink ( centity_t *cent )"), String("{"), String("\tif(cent->gent)"), String("\t{"), String("\t\tfloat\ttDelta = cg.time - cent->gent->painDebounceTime;"), String("\t\tfloat\tpercentage = ( tDelta/((float)cent->gent->speed) );"), String("\t\tvec3_t\torg;"), String("\t\tvec4_t\tcurrentRGBA;"), String("\t\tgentity_t\t*owner = NULL;"), String("\t\tint\t\ti;"), String("\t\t"), String("\t\tif ( percentage >= 1.0f )"), String("\t\t{//We hit the end"), String("\t\t\tpercentage = 1.0f;"), String("\t\t\tswitch( cent->gent->pushDebounceTime )"), String("\t\t\t{"), String("\t\t\tcase 0://Fading from start to final"), String("\t\t\t\tif ( cent->gent->spawnflags & 8 )"), String("\t\t\t\t{//PULSER"), String("\t\t\t\t\tif ( tDelta - cent->gent->speed - cent->gent->wait >= 0 )"), String("\t\t\t\t\t{//Time to start fading down"), String("\t\t\t\t\t\tcent->gent->painDebounceTime = cg.time;"), String("\t\t\t\t\t\tcent->gent->pushDebounceTime = 1;"), String("\t\t\t\t\t\tpercentage = 0.0f;"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String("\t\t\t\telse"), String("\t\t\t\t{//Stick on startRGBA"), String("\t\t\t\t\tpercentage = 0.0f;"), String("\t\t\t\t}"), String("\t\t\t\tbreak;"), String("\t\t\tcase 1://Fading from final to start"), String("\t\t\t\tif ( tDelta - cent->gent->speed - cent->gent->radius >= 0 )"), String("\t\t\t\t{//Time to start fading up"), String("\t\t\t\t\tcent->gent->painDebounceTime = cg.time;"), String("\t\t\t\t\tcent->gent->pushDebounceTime = 0;"), String("\t\t\t\t\tpercentage = 0.0f;"), String("\t\t\t\t}"), String("\t\t\t\tbreak;"), String("\t\t\tcase 2://Fading from 0 intensity to start intensity"), String("\t\t\t\t//Time to start fading from start to final"), String("\t\t\t\tcent->gent->painDebounceTime = cg.time;"), String("\t\t\t\tcent->gent->pushDebounceTime = 0;"), String("\t\t\t\tpercentage = 0.0f;"), String("\t\t\t\tbreak;"), String("\t\t\tcase 3://Fading from current intensity to 0 intensity"), String("\t\t\t\t//Time to turn off"), String("\t\t\t\tcent->gent->misc_dlight_active = qfalse;"), String("\t\t\t\tcent->gent->e_clThinkFunc = clThinkF_NULL;"), String("\t\t\t\tcent->gent->s.eType = ET_GENERAL;"), String("\t\t\t\tcent->gent->svFlags &= ~SVF_BROADCAST;"), String("\t\t\t\treturn;\t\t"), String("\t\t\t\tbreak;"), String("\t\t\tdefault:"), String("\t\t\t\tbreak;"), String("\t\t\t}"), String("\t\t}"), String(""), String("\t\tswitch( cent->gent->pushDebounceTime )"), String("\t\t{"), String("\t\tcase 0://Fading from start to final"), String("\t\t\tfor ( i = 0; i < 4; i++ )"), String("\t\t\t{"), String("\t\t\t\tcurrentRGBA[i] = cent->gent->startRGBA[i] + ( (cent->gent->finalRGBA[i] - cent->gent->startRGBA[i]) * percentage );"), String("\t\t\t}"), String("\t\t\tbreak;"), String("\t\tcase 1://Fading from final to start"), String("\t\t\tfor ( i = 0; i < 4; i++ )"), String("\t\t\t{"), String("\t\t\t\tcurrentRGBA[i] = cent->gent->finalRGBA[i] + ( (cent->gent->startRGBA[i] - cent->gent->finalRGBA[i]) * percentage );"), String("\t\t\t}"), String("\t\t\tbreak;"), String("\t\tcase 2://Fading from 0 intensity to start"), String("\t\t\tfor ( i = 0; i < 3; i++ )"), String("\t\t\t{"), String("\t\t\t\tcurrentRGBA[i] = cent->gent->startRGBA[i];"), String("\t\t\t}"), String("\t\t\tcurrentRGBA[3] = cent->gent->startRGBA[3] * percentage;"), String("\t\t\tbreak;"), String("\t\tcase 3://Fading from current intensity to 0"), String("\t\t\tfor ( i = 0; i < 3; i++ )"), String("\t\t\t{//FIXME: use last"), String("\t\t\t\tcurrentRGBA[i] = cent->gent->startRGBA[i];"), String("\t\t\t}"), String("\t\t\tcurrentRGBA[3] = cent->gent->startRGBA[3] - (cent->gent->startRGBA[3] * percentage);"), String("\t\t\tbreak;"), String("\t\tdefault:"), String("\t\t\treturn;"), String("\t\t\tbreak;"), String("\t\t}"), String(""), String("\t\tif ( cent->gent->owner )"), String("\t\t{"), String("\t\t\towner = cent->gent->owner;"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("\t\t\towner = cent->gent;"), String("\t\t}"), String(""), String("\t\tif ( owner->s.pos.trType == TR_INTERPOLATE )"), String("\t\t{"), String("\t\t\tVectorCopy( cg_entities[owner->s.number].lerpOrigin, org );"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("\t\t\tVectorCopy( owner->currentOrigin, org );"), String("\t\t}"), String(""), String("\t\tcgi_R_AddLightToScene(org, currentRGBA[3]*10, currentRGBA[0], currentRGBA[1], currentRGBA[2] );"), String("\t}"), String("}"), String(""), String("void CG_Limb ( centity_t *cent )"), String("{//first time we\'re drawn, remove us from the owner ent"), String("\tif ( cent->gent && cent->gent->owner && cent->gent->owner->ghoul2.size() )"), String("\t{"), String("\t\tgentity_t\t*owner = cent->gent->owner;"), String("\t\tif ( cent->gent->aimDebounceTime )"), String("\t\t{//done with dismemberment, just waiting to mark owner dismemberable again"), String("\t\t\tif ( cent->gent->aimDebounceTime > cg.time )"), String("\t\t\t{//still waiting"), String("\t\t\t\treturn;"), String("\t\t\t}"), String("\t\t\t//done!"), String("\t\t\towner->client->dismembered = false;"), String("\t\t\t//done!"), String("\t\t\tcent->gent->e_clThinkFunc = clThinkF_NULL;"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("extern cvar_t\t*g_dismemberment;"), String("extern cvar_t\t*g_saberRealisticCombat;"), String("\t\t\t//3) turn off w/descendants that surf in original model"), String("\t\t\tif ( cent->gent->target )//stubTagName )"), String("\t\t\t{//add smoke to cap surf, spawn effect"), String("\t\t\t\tif ( cent->gent->delay <= cg.time )"), String("\t\t\t\t{//debounced so it only plays effect once every 50ms"), String("\t\t\t\t\tint newBolt = gi.G2API_AddBolt( &owner->ghoul2[owner->playerModel], cent->gent->target );"), String("\t\t\t\t\tif ( newBolt != -1 )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tcent->gent->delay = cg.time + 50;"), String("\t\t\t\t\t\t //LAvaPort - file is missing in Steam files"), String("\t\t\t\t\t\t//CG_PlayEffectBolted( \"saber/limb_bolton\", owner->playerModel, newBolt, owner->s.number, owner->s.origin );\t//ent origin used to make FX culling work"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String("\t\t\t}"), String("\t\t\tif ( cent->gent->target2 )//limbName"), String("\t\t\t{//turn the limb off"), String("\t\t\t\t//NOTE: MUST use G2SURFACEFLAG_NODESCENDANTS"), String("\t\t\t\tgi.G2API_SetSurfaceOnOff( &owner->ghoul2[owner->playerModel], cent->gent->target2, 0x00000100 );//G2SURFACEFLAG_NODESCENDANTS"), String("\t\t\t}"), String("\t\t\tif ( cent->gent->target3 )//stubCapName )"), String("\t\t\t{//turn on caps"), String("\t\t\t\tgi.G2API_SetSurfaceOnOff( &owner->ghoul2[owner->playerModel], cent->gent->target3, 0 );"), String("\t\t\t}"), String("\t\t\tif ( owner->weaponModel[0] > 0 )"), String("\t\t\t{//the corpse hasn\'t dropped their weapon"), String("\t\t\t\tif ( cent->gent->count == BOTH_DISMEMBER_RARM || cent->gent->count == BOTH_DISMEMBER_TORSO1 )//&& ent->s.weapon == WP_SABER && ent->weaponModel[0] != -1 )"), String("\t\t\t\t{//FIXME: is this first check needed with this lower one?"), String("\t\t\t\t\tgi.G2API_RemoveGhoul2Model( owner->ghoul2, owner->weaponModel[0] );"), String("\t\t\t\t\towner->weaponModel[0] = -1;"), String("\t\t\t\t}"), String("\t\t\t}"), String("\t\t\tif ( owner->client->NPC_class == CLASS_PROTOCOL "), String("\t\t\t\t|| debug_subdivision->integer"), String("\t\t\t\t|| g_saberRealisticCombat->integer )"), String("\t\t\t{"), String("\t\t\t\t//wait 100ms before allowing owner to be dismembered again"), String("\t\t\t\tcent->gent->aimDebounceTime = cg.time + 100;"), String("\t\t\t\treturn;"), String("\t\t\t}"), String("\t\t\telse"), String("\t\t\t{"), String("\t\t\t\t//done!"), String("\t\t\t\tcent->gent->e_clThinkFunc = clThinkF_NULL;"), String("\t\t\t}"), String("\t\t}"), String("\t}"), String("}"), String(""), String("extern Vehicle_t *G_IsRidingVehicle( gentity_t *ent );"), String("qboolean\tMatrixMode = qfalse;"), String("extern cvar_t\t*g_skippingcin;"), String("void CG_MatrixEffect ( centity_t *cent )"), String("{"), String("\tfloat\tMATRIX_EFFECT_TIME = 1000.0f;"), String("\tif ( (cent->currentState.boltInfo&MEF_MULTI_SPIN) )"), String("\t{//multiple spins"), String("\t\tif ( cent->currentState.time2 > 0 )"), String("\t\t{//with a custom amount of time per spin"), String("\t\t\tMATRIX_EFFECT_TIME = cent->currentState.time2;"), String("\t\t}"), String("\t}"), String("\telse"), String("\t{"), String("\t\tif ( cent->currentState.eventParm "), String("\t\t\t&& cent->currentState.eventParm != MATRIX_EFFECT_TIME )"), String("\t\t{//not a falling multi-spin, so stretch out the effect over the whole desired length (or: condenses it, too)"), String("\t\t\tMATRIX_EFFECT_TIME = cent->currentState.eventParm;"), String("\t\t}"), String("\t}"), String("\t//VectorCopy( cent->lerpOrigin, cg.refdef.vieworg );"), String("\tfloat totalElapsedTime = (float)(cg.time - cent->currentState.time);"), String("\tfloat elapsedTime = totalElapsedTime;"), String("\tbool\tstopEffect = ((totalElapsedTime > cent->currentState.eventParm) || cg.missionStatusShow || in_camera);"), String(""), String("\tif (!stopEffect && (cent->currentState.boltInfo&MEF_HIT_GROUND_STOP) && g_entities[cent->currentState.otherEntityNum].client)"), String("\t{"), String("\t\tif (g_entities[cent->currentState.otherEntityNum].client->ps.groundEntityNum!=ENTITYNUM_NONE)"), String("\t\t{"), String("\t\t\tstopEffect = true;"), String("\t\t}"), String("\t\telse if (g_entities[cent->currentState.otherEntityNum].client->NPC_class == CLASS_VEHICLE)"), String("\t\t{"), String("\t\t\tVehicle_t*\tpVeh = g_entities[cent->currentState.otherEntityNum].m_pVehicle;"), String("\t\t\tif (pVeh && !(pVeh->m_ulFlags&VEH_FLYING))"), String("\t\t\t{"), String("\t\t\t\tstopEffect = true;"), String("\t\t\t}"), String("\t\t}"), String("\t}"), String("\tif (!stopEffect && (cent->currentState.boltInfo&MEF_LOOK_AT_ENEMY))"), String("\t{"), String("\t\tif (!g_entities[cent->currentState.otherEntityNum].lastEnemy || "), String("\t\t\t!g_entities[cent->currentState.otherEntityNum].lastEnemy->inuse)"), String("\t\t{"), String("\t\t\tstopEffect = true;"), String("\t\t}"), String("\t}"), String(""), String("\tif (stopEffect)"), String("\t{//time is up or this is a falling spin and they hit the ground or mission end screen is up"), String("\t\tcg.overrides.active &= ~(/*CG_OVERRIDE_3RD_PERSON_ENT|*/CG_OVERRIDE_3RD_PERSON_RNG|CG_OVERRIDE_3RD_PERSON_ANG|CG_OVERRIDE_3RD_PERSON_POF);"), String("\t\t//cg.overrides.thirdPersonEntity = 0;"), String("\t\tcg.overrides.thirdPersonAngle = 0;"), String("\t\tcg.overrides.thirdPersonPitchOffset = 0;"), String("\t\tcg.overrides.thirdPersonRange = 0;"), String("\t\tif ( g_skippingcin->integer )"), String("\t\t{//skipping?  don\'t mess with timescale"), String("\t\t\t/*"), String("\t\t\tif ( g_timescale->integer < 100 )"), String("\t\t\t{//something messed up timescale, reset it?"), String("\t\t\t\tcgi_Cvar_Set( \"timescale\", \"100\" );"), String("\t\t\t}"), String("\t\t\t*/"), String("\t\t}"), String("\t\telse"), String("\t\t{//set it back to 1"), String("\t\t\tcgi_Cvar_Set( \"timescale\", \"1.0\" );"), String("\t\t}"), String("\t\tMatrixMode = qfalse;"), String("\t\tcent->gent->e_clThinkFunc = clThinkF_NULL;"), String("\t\tcent->gent->e_ThinkFunc = thinkF_G_FreeEntity;"), String("\t\tcent->gent->nextthink = cg.time + 500;"), String("\t\treturn;"), String("\t}"), String("\telse "), String("\t{"), String("\t\twhile ( elapsedTime > MATRIX_EFFECT_TIME )"), String("\t\t{"), String("\t\t\telapsedTime -= MATRIX_EFFECT_TIME;"), String("\t\t}"), String("\t}"), String("\t"), String("\tMatrixMode = qtrue;"), String(""), String("\t//FIXME: move the position towards them and back?"), String("\t//cg.overrides.active |= CG_OVERRIDE_3RD_PERSON_ENT;"), String("\t//cg.overrides.thirdPersonEntity = cent->currentState.otherEntityNum;"), String(""), String("\tif (cent->currentState.boltInfo&MEF_LOOK_AT_ENEMY)"), String("\t{"), String("\t\tvec3_t\ttoEnemy;"), String("\t\tvec3_t\ttoEnemyAngles;"), String(""), String("\t\tVectorCopy(cg_entities[g_entities[cent->currentState.otherEntityNum].lastEnemy->s.number].lerpOrigin, toEnemy);"), String("//\t\tCG_DrawEdge(cg_entities[cent->currentState.otherEntityNum].lerpOrigin, toEnemy, EDGE_NORMAL);"), String("\t\tVectorSubtract(cg_entities[cent->currentState.otherEntityNum].lerpOrigin, toEnemy, toEnemy);"), String("\t\tvectoangles(toEnemy, toEnemyAngles);"), String(""), String(""), String("\t\tcg.overrides.active\t\t\t\t\t|= CG_OVERRIDE_3RD_PERSON_ANG;"), String("  \t \tcg.overrides.thirdPersonAngle\t\t = "), String("\t\t\ttoEnemyAngles[1] - "), String("\t\t\tcg_entities[cent->currentState.otherEntityNum].lerpAngles[1] + "), String(" \t\t\t145.0f;"), String("\t \tcg.overrides.thirdPersonAngle = AngleNormalize180(cg.overrides.thirdPersonAngle);"), String(""), String("\t\tfloat\tMATRIX_EFFECT_TIME_HALF = MATRIX_EFFECT_TIME/2.0f;"), String("\t\tfloat\tX = 1.0f;"), String("\t\tif (elapsedTime>MATRIX_EFFECT_TIME_HALF)"), String("\t\t{"), String("\t\t\tX -= ((elapsedTime - MATRIX_EFFECT_TIME_HALF)/MATRIX_EFFECT_TIME_HALF);"), String("\t\t}"), String("\t\tcg.overrides.thirdPersonAngle\t\t*= X;"), String(""), String(" //\t\tgi.Printf(\"%f\\n\", cg.overrides.thirdPersonAngle);"), String("\t\tcg.overrides.thirdPersonPitchOffset\t = 0.0f;"), String("\t\tcg.overrides.thirdPersonRange\t\t = cg_thirdPersonRange.value * 3.0f;"), String("\t}"), String(""), String("\tif ( !(cent->currentState.boltInfo&MEF_NO_SPIN) )"), String("\t{//rotate around them"), String("\t\t//rotate"), String("\t\tcg.overrides.active |= CG_OVERRIDE_3RD_PERSON_ANG;"), String("\t\tcg.overrides.thirdPersonAngle = 360.0f*elapsedTime/MATRIX_EFFECT_TIME;"), String("\t\tif ( (cent->currentState.boltInfo&MEF_REVERSE_SPIN) )"), String("\t\t{"), String("\t\t\tcg.overrides.thirdPersonAngle *= -1;"), String("\t\t}"), String("\t}"), String(""), String("\t//do all the slowdown and vert bob stuff"), String("\tif ( cent->currentState.angles2[0] )"), String("\t{"), String("\t\tcgi_Cvar_Set( \"timescale\", va(\"%4.2f\",cent->currentState.angles2[0]) );"), String("\t}"), String("\telse if ( !(cent->currentState.boltInfo&MEF_NO_TIMESCALE) )"), String("\t{//ramp the timescale"), String("\t\t//slowdown"), String("\t\tfloat timescale = (elapsedTime/MATRIX_EFFECT_TIME);"), String("\t\tif ( timescale < 0.01f )"), String("\t\t{"), String("\t\t\ttimescale = 0.01f;"), String("\t\t}"), String("\t\tcgi_Cvar_Set( \"timescale\", va(\"%4.2f\",timescale) );"), String("\t}"), String("\telse"), String("\t{//FIXME: MEF_HIT_GROUND_STOP: if they\'re on the ground, stop spinning and stop timescale"), String("\t\t//FIXME: if they go to the menu, restore timescale?"), String("\t\t//cgi_Cvar_Set( \"timescale\", \"1.0ff\" );"), String("\t}"), String(""), String("\tif ( !(cent->currentState.boltInfo&MEF_NO_VERTBOB) )"), String("\t{//bob the pitch"), String("\t\t//pitch"), String("\t\t//dip - FIXME: use pitchOffet?"), String("\t\tcg.overrides.active |= CG_OVERRIDE_3RD_PERSON_POF;"), String("\t\tcg.overrides.thirdPersonPitchOffset = cg_thirdPersonPitchOffset.value;"), String("\t\tif ( elapsedTime < MATRIX_EFFECT_TIME*0.33f )"), String("\t\t{"), String("\t\t\tcg.overrides.thirdPersonPitchOffset -= 30.0f*elapsedTime/(MATRIX_EFFECT_TIME*0.33);"), String("\t\t}"), String("\t\telse if ( elapsedTime > MATRIX_EFFECT_TIME*0.66f )"), String("\t\t{"), String("\t\t\tcg.overrides.thirdPersonPitchOffset -= 30.0f*(MATRIX_EFFECT_TIME-elapsedTime)/(MATRIX_EFFECT_TIME*0.33);"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("\t\t\tcg.overrides.thirdPersonPitchOffset -= 30.0f;"), String("\t\t}"), String("\t}"), String(""), String("\tif ( !(cent->currentState.boltInfo&MEF_NO_RANGEVAR) )"), String("\t{//vary the camera range"), String("\t\t//pull back"), String("\t\tcg.overrides.active |= CG_OVERRIDE_3RD_PERSON_RNG;"), String("\t\tcg.overrides.thirdPersonRange = cg_thirdPersonRange.value;"), String("\t\tif ( elapsedTime < MATRIX_EFFECT_TIME*0.33 )"), String("\t\t{"), String("\t\t\tcg.overrides.thirdPersonRange += 80.0f*elapsedTime/(MATRIX_EFFECT_TIME*0.33);"), String("\t\t}"), String("\t\telse if ( elapsedTime > MATRIX_EFFECT_TIME*0.66 )"), String("\t\t{"), String("\t\t\tcg.overrides.thirdPersonRange += 80.0f*(MATRIX_EFFECT_TIME-elapsedTime)/(MATRIX_EFFECT_TIME*0.33);"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("\t\t\tcg.overrides.thirdPersonRange += 80.0f;"), String("\t\t}"), String("\t}"), String("}"), String(""), String("static void CG_Think ( centity_t *cent )"), String("{"), String("\tif(!cent->gent)"), String("\t{"), String("\t\treturn;"), String("\t}"), String(""), String("\tCEntity_ThinkFunc(cent);\t//\tcent->gent->clThink(cent);"), String("}"), String(""), String("static void CG_Clouds( centity_t *cent )"), String("{"), String("\trefEntity_t\t\tent;"), String("\tentityState_t\t*s1;"), String(""), String("\ts1 = &cent->currentState;"), String(""), String("\t// create the render entity"), String("\tmemset( &ent, 0, sizeof( ent ));"), String(""), String("\tVectorCopy( cent->lerpOrigin, ent.origin );"), String(""), String("\tent.shaderRGBA[0] = ent.shaderRGBA[1] = ent.shaderRGBA[2] = ent.shaderRGBA[3] = 255;"), String(""), String("\tent.radius = cent->gent->radius;"), String("\tent.backlerp = cent->gent->wait;"), String(""), String("\tent.reType = RT_CLOUDS;"), String(""), String("\tif ( cent->gent->spawnflags & 1 ) // TUBE type, the one with a hole in the middle"), String("\t{"), String("\t\tent.rotation = cent->gent->random;"), String("\t\tent.renderfx = RF_GROW;// tube flag "), String("\t}"), String(""), String("\tif ( cent->gent->spawnflags & 2 ) // ALT type, uses a different shader"), String("\t{"), String("\t\tent.customShader = cgi_R_RegisterShader( \"gfx/world/haze2\" );"), String("\t}"), String("\telse"), String("\t{"), String("\t\tent.customShader = cgi_R_RegisterShader( \"gfx/world/haze\" );"), String("\t}"), String("\t"), String("\tcgi_R_AddRefEntityToScene( &ent );"), String("}"), String(""), String("/*"), String("==============="), String("CG_AddCEntity"), String(""), String("==============="), String("*/"), String("static void CG_AddCEntity( centity_t *cent ) "), String("{"), String("\t// event-only entities will have been dealt with already"), String("\tif ( cent->currentState.eType >= ET_EVENTS ) {"), String("\t\treturn;"), String("\t}"), String(""), String("\t//we must have restarted the game"), String("\tif (!cent->gent)"), String("\t{"), String("\t\treturn;"), String("\t}"), String(""), String("\tcent->snapShotTime = cg.time;"), String(""), String("\t// calculate the current origin"), String("\tCG_CalcEntityLerpPositions( cent );"), String(""), String("\t// add automatic effects"), String("\tCG_EntityEffects( cent );"), String(""), String("\t// add local sound set if any"), String("\tif ( cent->gent && cent->gent->soundSet && cent->gent->soundSet[0] && cent->currentState.eType != ET_MOVER )"), String("\t{"), String("\t\tCG_AddLocalSet( cent );"), String("\t}"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("\t// do this before we copy the data to refEnts"), String("\tif (cent->gent->ghoul2.IsValid())"), String("\t{"), String("\t\ttrap_G2_SetGhoul2ModelIndexes(cent->gent->ghoul2, cgs.model_draw, cgs.skins);"), String("\t}"), String(""), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("\tswitch ( cent->currentState.eType ) {"), String("\tdefault:"), String("\t\tCG_Error( \"Bad entity type: %i\\n\", cent->currentState.eType );"), String("\t\tbreak;"), String("\tcase ET_INVISIBLE:"), String("\tcase ET_PUSH_TRIGGER:"), String("\tcase ET_TELEPORT_TRIGGER:"), String("\tcase ET_TERRAIN:"), String("\t\tbreak;"), String("\tcase ET_GENERAL:"), String("\t\tCG_General( cent );"), String("\t\tbreak;"), String("\tcase ET_PLAYER:"), String("\t\tCG_Player( cent );"), String("\t\tbreak;"), String("\tcase ET_ITEM:"), String("\t\tCG_Item( cent );"), String("\t\tbreak;"), String("\tcase ET_MISSILE:"), String("\t\tCG_Missile( cent );"), String("\t\tbreak;"), String("\tcase ET_MOVER:"), String("\t\tCG_Mover( cent );"), String("\t\tbreak;"), String("\tcase ET_BEAM:"), String("\t\tCG_Beam( cent, 0 );"), String("\t\tbreak;"), String("\tcase ET_PORTAL:"), String("\t\tCG_Portal( cent );"), String("\t\tbreak;"), String("\tcase ET_SPEAKER:"), String("\t\tif ( cent->gent && cent->gent->soundSet && cent->gent->soundSet[0] )"), String("\t\t{"), String("\t\t\tbreak;"), String("\t\t}"), String("\t\tCG_Speaker( cent );"), String("\t\tbreak;"), String("\tcase ET_THINKER:"), String("\t\tCG_General( cent );"), String("\t\tCG_Think( cent );"), String("\t\tbreak;"), String("\tcase ET_CLOUD: // dumb"), String("\t\tCG_Clouds( cent );"), String("\t\tbreak;"), String("\t}"), String("}"), String(""), String("/*"), String("==============="), String("CG_AddPacketEntities"), String(""), String("==============="), String("*/"), String("void CG_AddPacketEntities( qboolean isPortal ) {"), String("\tint\t\t\t\t\tnum;"), String("\tcentity_t\t\t\t*cent;"), String("\tplayerState_t\t\t*ps;"), String(""), String("\tif (isPortal)"), String("\t{"), String("\t\tfor ( num = 0 ; num < cg.snap->numEntities ; num++ )"), String("\t\t{"), String("\t\t\tcent = &cg_entities[ cg.snap->entities[ num ].number ];"), String(""), String("\t\t\tif (cent->currentState.isPortalEnt)"), String("\t\t\t{"), String("\t\t\t\tCG_AddCEntity( cent );"), String("\t\t\t}"), String("\t\t}"), String("\t\treturn;"), String("\t}"), String(""), String("\t// set cg.frameInterpolation"), String("\tif ( cg.nextSnap ) "), String("\t{"), String("\t\tint\t\tdelta;"), String(""), String("\t\tdelta = (cg.nextSnap->serverTime - cg.snap->serverTime);"), String("\t\tif ( delta == 0 ) "), String("\t\t{"), String("\t\t\tcg.frameInterpolation = 0;"), String("\t\t} "), String("\t\telse "), String("\t\t{"), String("\t\t\tcg.frameInterpolation = (float)( cg.time - cg.snap->serverTime ) / delta;"), String("\t\t}"), String("//OutputDebugString(va(\"interp %4.2f ct=%6d nt=%6d st=%6d\\n\",cg.frameInterpolation,cg.time,cg.nextSnap->serverTime,cg.snap->serverTime));"), String("\t} "), String("\telse "), String("\t{"), String("\t\tcg.frameInterpolation = 0;\t// actually, it should never be used, because "), String("\t\t\t\t\t\t\t\t\t// no entities should be marked as interpolating"), String("//OutputDebugString(va(\"noterp %4.2f ct=%6d nt=%6d st=%6d\\n\",cg.frameInterpolation,cg.time,0,cg.snap->serverTime));"), String("\t}"), String(""), String("\t// the auto-rotating items will all have the same axis"), String("\tcg.autoAngles[0] = 0;"), String("\tcg.autoAngles[1] = ( cg.time & 2047 ) * 360 / 2048.0f;"), String("\tcg.autoAngles[2] = 0;"), String(""), String("\tcg.autoAnglesFast[0] = 0;"), String("\tcg.autoAnglesFast[1] = ( cg.time & 1023 ) * 360 / 1024.0f;"), String("\tcg.autoAnglesFast[2] = 0;"), String(""), String("\tAnglesToAxis( cg.autoAngles, cg.autoAxis );"), String("\tAnglesToAxis( cg.autoAnglesFast, cg.autoAxisFast );"), String(""), String("\t// generate and add the entity from the playerstate"), String("\tps = &cg.predicted_player_state;"), String("\tPlayerStateToEntityState( ps, &cg_entities[ ps->clientNum ].currentState );"), String("\t"), String("//\tcent = &cg_entities[ ps->clientNum ];\t// not needed now that player is in the snap packet"), String("//\tCG_AddCEntity( cent );\t\t\t\t\t//"), String(""), String("\t// add each entity sent over by the server"), String("\tfor ( num = 0 ; num < cg.snap->numEntities ; num++ ) {"), String("\t\tcent = &cg_entities[ cg.snap->entities[ num ].number ];"), String(""), String("\t\tCG_AddCEntity( cent );"), String("\t}"), String(""), String("\tfor(num=0;num<cg_numpermanents;num++)"), String("\t{"), String("\t\tcent = cg_permanents[num];"), String("\t\tif (cent->currentValid)"), String("\t\t{"), String("\t\t\tCG_AddCEntity( cent );"), String("\t\t}"), String("\t}"), String("}"), String(""), String("//rww - This function is not currently called. Use it as the client-side ROFF"), String("//callback once that\'s implemented fully."), String("void CG_ROFF_NotetrackCallback( centity_t *cent, const char *notetrack)"), String("{"), String("\tint i = 0, r = 0, objectID = 0, anglesGathered = 0, posoffsetGathered = 0;"), String("\tchar type[256];"), String("\tchar argument[512];"), String("\tchar addlArg[512];"), String("\tchar errMsg[256];"), String("\tchar t[64];"), String("\tint addlArgs = 0;"), String("\tvec3_t parsedAngles, parsedOffset, useAngles, useOrigin, forward, right, up;"), String(""), String("\tif (!cent || !notetrack)"), String("\t{"), String("\t\treturn;"), String("\t}"), String(""), String("\t//notetrack = \"effect effects/explosion1.efx 0+0+64 0-0-1\";"), String(""), String("\twhile (notetrack[i] && notetrack[i] != \' \')"), String("\t{"), String("\t\ttype[i] = notetrack[i];"), String("\t\ti++;"), String("\t}"), String(""), String("\ttype[i] = \'\\0\';"), String(""), String("\tif (notetrack[i] != \' \')"), String("\t{ //didn\'t pass in a valid notetrack type, or forgot the argument for it"), String("\t\treturn;"), String("\t}"), String(""), String("\ti++;"), String(""), String("\twhile (notetrack[i] && notetrack[i] != \' \')"), String("\t{"), String("\t\targument[r] = notetrack[i];"), String("\t\tr++;"), String("\t\ti++;"), String("\t}"), String("\targument[r] = \'\\0\';"), String(""), String("\tif (!r)"), String("\t{"), String("\t\treturn;"), String("\t}"), String(""), String("\tif (notetrack[i] == \' \')"), String("\t{ //additional arguments..."), String("\t\taddlArgs = 1;"), String(""), String("\t\ti++;"), String("\t\tr = 0;"), String("\t\twhile (notetrack[i])"), String("\t\t{"), String("\t\t\taddlArg[r] = notetrack[i];"), String("\t\t\tr++;"), String("\t\t\ti++;"), String("\t\t}"), String("\t\taddlArg[r] = \'\\0\';"), String("\t}"), String(""), String("\tif (strcmp(type, \"effect\") == 0)"), String("\t{"), String("\t\tif (!addlArgs)"), String("\t\t{"), String("\t\t\t//sprintf(errMsg, \"Offset position argument for \'effect\' type is invalid.\");"), String("\t\t\t//goto functionend;"), String("\t\t\tVectorClear(parsedOffset);"), String("\t\t\tgoto defaultoffsetposition;"), String("\t\t}"), String(""), String("\t\ti = 0;"), String(""), String("\t\twhile (posoffsetGathered < 3)"), String("\t\t{"), String("\t\t\tr = 0;"), String("\t\t\twhile (addlArg[i] && addlArg[i] != \'+\' && addlArg[i] != \' \')"), String("\t\t\t{"), String("\t\t\t\tt[r] = addlArg[i];"), String("\t\t\t\tr++;"), String("\t\t\t\ti++;"), String("\t\t\t}"), String("\t\t\tt[r] = \'\\0\';"), String("\t\t\ti++;"), String("\t\t\tif (!r)"), String("\t\t\t{ //failure.."), String("\t\t\t\t//sprintf(errMsg, \"Offset position argument for \'effect\' type is invalid.\");"), String("\t\t\t\t//goto functionend;"), String("\t\t\t\tVectorClear(parsedOffset);"), String("\t\t\t\ti = 0;"), String("\t\t\t\tgoto defaultoffsetposition;"), String("\t\t\t}"), String("\t\t\tparsedOffset[posoffsetGathered] = atof(t);"), String("\t\t\tposoffsetGathered++;"), String("\t\t}"), String(""), String("\t\tif (posoffsetGathered < 3)"), String("\t\t{"), String("\t\t\tsprintf(errMsg, \"Offset position argument for \'effect\' type is invalid.\");"), String("\t\t\tgoto functionend;"), String("\t\t}"), String(""), String("\t\ti--;"), String(""), String("\t\tif (addlArg[i] != \' \')"), String("\t\t{"), String("\t\t\taddlArgs = 0;"), String("\t\t}"), String(""), String("defaultoffsetposition:"), String(""), String("\t\tobjectID = theFxScheduler.RegisterEffect(argument);"), String(""), String("\t\tif (objectID)"), String("\t\t{"), String("\t\t\tif (addlArgs)"), String("\t\t\t{ //if there is an additional argument for an effect it is expected to be XANGLE-YANGLE-ZANGLE"), String("\t\t\t\ti++;"), String("\t\t\t\twhile (anglesGathered < 3)"), String("\t\t\t\t{"), String("\t\t\t\t\tr = 0;"), String("\t\t\t\t\twhile (addlArg[i] && addlArg[i] != \'-\')"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tt[r] = addlArg[i];"), String("\t\t\t\t\t\tr++;"), String("\t\t\t\t\t\ti++;"), String("\t\t\t\t\t}"), String("\t\t\t\t\tt[r] = \'\\0\';"), String("\t\t\t\t\ti++;"), String(""), String("\t\t\t\t\tif (!r)"), String("\t\t\t\t\t{ //failed to get a new part of the vector"), String("\t\t\t\t\t\tanglesGathered = 0;"), String("\t\t\t\t\t\tbreak;"), String("\t\t\t\t\t}"), String(""), String("\t\t\t\t\tparsedAngles[anglesGathered] = atof(t);"), String("\t\t\t\t\tanglesGathered++;"), String("\t\t\t\t}"), String(""), String("\t\t\t\tif (anglesGathered)"), String("\t\t\t\t{"), String("\t\t\t\t\tVectorCopy(parsedAngles, useAngles);"), String("\t\t\t\t}"), String("\t\t\t\telse"), String("\t\t\t\t{ //failed to parse angles from the extra argument provided.."), String("\t\t\t\t\tVectorCopy(cent->lerpAngles, useAngles);"), String("\t\t\t\t}"), String("\t\t\t}"), String("\t\t\telse"), String("\t\t\t{ //if no constant angles, play in direction entity is facing"), String("\t\t\t\tVectorCopy(cent->lerpAngles, useAngles);"), String("\t\t\t}"), String(""), String("\t\t\tAngleVectors(useAngles, forward, right, up);"), String(""), String("\t\t\tVectorCopy(cent->lerpOrigin, useOrigin);"), String(""), String("\t\t\t//forward"), String("\t\t\tuseOrigin[0] += forward[0]*parsedOffset[0];"), String("\t\t\tuseOrigin[1] += forward[1]*parsedOffset[0];"), String("\t\t\tuseOrigin[2] += forward[2]*parsedOffset[0];"), String(""), String("\t\t\t//right"), String("\t\t\tuseOrigin[0] += right[0]*parsedOffset[1];"), String("\t\t\tuseOrigin[1] += right[1]*parsedOffset[1];"), String("\t\t\tuseOrigin[2] += right[2]*parsedOffset[1];"), String(""), String("\t\t\t//up"), String("\t\t\tuseOrigin[0] += up[0]*parsedOffset[2];"), String("\t\t\tuseOrigin[1] += up[1]*parsedOffset[2];"), String("\t\t\tuseOrigin[2] += up[2]*parsedOffset[2];"), String(""), String("\t\t\ttheFxScheduler.PlayEffect(objectID, useOrigin, useAngles);"), String("\t\t}"), String("\t}"), String("\telse if (strcmp(type, \"sound\") == 0)"), String("\t{"), String("\t\tobjectID = cgi_S_RegisterSound(argument);"), String("\t\tcgi_S_StartSound(cent->lerpOrigin, cent->currentState.number, CHAN_BODY, objectID);"), String("\t}"), String("\telse if (strcmp(type, \"loop\") == 0)"), String("\t{ //handled server-side"), String("\t\treturn;"), String("\t}"), String("\t//else if ..."), String("\telse"), String("\t{"), String("\t\tif (type[0])"), String("\t\t{"), String("\t\t\tCom_Printf(\"^3Warning: \\\"%s\\\" is an invalid ROFF notetrack function\\n\", type);"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("\t\t\tCom_Printf(\"^3Warning: Notetrack is missing function and/or arguments\\n\");"), String("\t\t}"), String("\t}"), String(""), String("\treturn;"), String(""), String("functionend:"), String("\tCom_Printf(\"^3Type-specific notetrack error: %s\\n\", errMsg);"), String("\treturn;"), String("}"), String("======="), String("// cg_ents.c -- present snapshot entities, happens every single frame\r"), String("\r"), String("// this line must stay at top so the whole PCH thing works...\r"), String("#include \"cg_headers.h\"\r"), String("\r"), String("//#include \"cg_local.h\"\r"), String("#include \"cg_media.h\"\r"), String("#include \"..\\game\\g_functions.h\"\r"), String("#include \"..\\ghoul2\\g2.h\"\r"), String("#include \"FxScheduler.h\"\r"), String("#include \"..\\game\\wp_saber.h\"\r"), String("#include \"..\\game\\g_vehicles.h\"\r"), String("\r"), String("extern void CG_AddSaberBlade( centity_t *cent, centity_t *scent, refEntity_t *saber, int renderfx, int modelIndex, vec3_t origin, vec3_t angles);\r"), String("extern void CG_CheckSaberInWater( centity_t *cent, centity_t *scent, int saberNum, int modelIndex, vec3_t origin, vec3_t angles );\r"), String("extern void CG_ForcePushBlur( const vec3_t org, qboolean darkSide = qfalse );\r"), String("extern void CG_AddForceSightShell( refEntity_t *ent, centity_t *cent );\r"), String("extern qboolean CG_PlayerCanSeeCent( centity_t *cent );\r"), String("extern cvar_t\t*debug_subdivision;\r"), String("\r"), String("/*\r"), String("======================\r"), String("CG_PositionEntityOnTag\r"), String("\r"), String("Modifies the entities position and axis by the given\r"), String("tag location\r"), String("======================\r"), String("*/\r"), String("void CG_PositionEntityOnTag( refEntity_t *entity, const refEntity_t *parent, \r"), String("\t\t\t\t\t\t\tqhandle_t parentModel, char *tagName ) {\r"), String("\tint\t\t\t\ti;\r"), String("\torientation_t\tlerped;\r"), String("\t\r"), String("\t// lerp the tag\r"), String("\tcgi_R_LerpTag( &lerped, parentModel, parent->oldframe, parent->frame,\r"), String("\t\t1.0f - parent->backlerp, tagName );\r"), String("\r"), String("\t// FIXME: allow origin offsets along tag?\r"), String("\tVectorCopy( parent->origin, entity->origin );\r"), String("\tfor ( i = 0 ; i < 3 ; i++ ) \r"), String("\t{\r"), String("\t\tVectorMA( entity->origin, lerped.origin[i], parent->axis[i], entity->origin );\r"), String("\t}\r"), String("\r"), String("\t// had to cast away the const to avoid compiler problems...\r"), String("\tMatrixMultiply( lerped.axis, ((refEntity_t *)parent)->axis, entity->axis );\r"), String("\tentity->backlerp = parent->backlerp;\r"), String("}\r"), String("\r"), String("/*\r"), String("======================\r"), String("CG_PositionRotatedEntityOnTag\r"), String("\r"), String("Modifies the entities position and axis by the given\r"), String("tag location\r"), String("======================\r"), String("*/\r"), String("void CG_PositionRotatedEntityOnTag( refEntity_t *entity, const refEntity_t *parent, \r"), String("\t\t\t\t\t\t\tqhandle_t parentModel, char *tagName, orientation_t *tagOrient ) {\r"), String("\tint\t\t\t\ti;\r"), String("\torientation_t\tlerped;\r"), String("\tvec3_t\t\t\ttempAxis[3];\r"), String("\r"), String("\t// lerp the tag\r"), String("\tcgi_R_LerpTag( &lerped, parentModel, parent->oldframe, parent->frame,\r"), String("\t\t1.0f - parent->backlerp, tagName );\r"), String("\r"), String("\tif ( tagOrient )\r"), String("\t{\r"), String("\t\tVectorCopy( lerped.origin, tagOrient->origin );\r"), String("\t\tfor ( i = 0 ; i < 3 ; i++ ) \r"), String("\t\t{\r"), String("\t\t\tVectorCopy( lerped.axis[i], tagOrient->axis[i] );\r"), String("\t\t}\r"), String("\t}\r"), String("\r"), String("\t// FIXME: allow origin offsets along tag?\r"), String("\tVectorCopy( parent->origin, entity->origin );\r"), String("\tfor ( i = 0 ; i < 3 ; i++ ) {\r"), String("\t\tVectorMA( entity->origin, lerped.origin[i], parent->axis[i], entity->origin );\r"), String("\t}\r"), String("\r"), String("\tMatrixMultiply( entity->axis, lerped.axis, tempAxis );\r"), String("\tMatrixMultiply( tempAxis, ((refEntity_t *)parent)->axis, entity->axis );\r"), String("}\r"), String("\r"), String("\r"), String("\r"), String("/*\r"), String("==========================================================================\r"), String("\r"), String("FUNCTIONS CALLED EACH FRAME\r"), String("\r"), String("==========================================================================\r"), String("*/\r"), String("\r"), String("/*\r"), String("======================\r"), String("CG_SetEntitySoundPosition\r"), String("\r"), String("Also called by event processing code\r"), String("======================\r"), String("*/\r"), String("vec3_t *CG_SetEntitySoundPosition( centity_t *cent ) {\r"), String("\tstatic vec3_t v3Return;\r"), String("\tif ( cent->currentState.solid == SOLID_BMODEL ) {\r"), String("\t\tvec3_t\torigin;\r"), String("\t\tfloat\t*v;\r"), String("\r"), String("\t\tv = cgs.inlineModelMidpoints[ cent->currentState.modelindex ];\r"), String("\t\tVectorAdd( cent->lerpOrigin, v, origin );\r"), String("\t\tcgi_S_UpdateEntityPosition( cent->currentState.number, origin );\r"), String("\t\tVectorCopy(origin, v3Return);\r"), String("\t} else {\r"), String("\t\tif ( cent->currentState.eType == ET_PLAYER\r"), String("\t\t\t&& cent->gent\r"), String("\t\t\t&& cent->gent->client\r"), String("\t\t\t&& cent->gent->ghoul2.IsValid() \r"), String("\t\t\t&& cent->gent->ghoul2[0].animModelIndexOffset )//If it has an animOffset it\'s a cinematic anim\r"), String("\t\t{//I might be running out of my bounding box, so use my headPoint from the last render frame...?\r"), String("\t\t\t//NOTE: if I\'m not rendered, will this not update correctly?  Would cent->lerpOrigin be any more updated?\r"), String("\t\t\tVectorCopy(cent->gent->client->renderInfo.eyePoint, v3Return);\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{//just use my org\r"), String("\t\t\tVectorCopy(cent->lerpOrigin, v3Return);\r"), String("\t\t}\r"), String("\t\tcgi_S_UpdateEntityPosition( cent->currentState.number, v3Return );\r"), String("\t}\r"), String("\r"), String("\treturn &v3Return;\r"), String("}\r"), String("\r"), String("/*\r"), String("==================\r"), String("CG_EntityEffects\r"), String("\r"), String("Add continuous entity effects, like local entity emission and lighting\r"), String("==================\r"), String("*/\r"), String("static void CG_EntityEffects( centity_t *cent ) {\r"), String("\r"), String("\t// update sound origins\r"), String("\tvec3_t v3Origin;\r"), String("\tVectorCopy(*CG_SetEntitySoundPosition( cent ),v3Origin);\r"), String("\r"), String("\t// add loop sound\r"), String("\tif ( cent->currentState.loopSound ) \r"), String("\t{\r"), String("\t\tsoundChannel_t chan = CHAN_AUTO;\r"), String("\r"), String("\t\tgentity_t *ent = cent->gent;\r"), String("\r"), String("\t\tif ( ent->s.eFlags & EF_LESS_ATTEN )\r"), String("\t\t{\r"), String("\t\t\tchan = CHAN_LESS_ATTEN;\r"), String("\t\t}\r"), String("\t\t\r"), String("\t\tsfxHandle_t\tsfx = ( cent->currentState.eType == ET_MOVER ) ? cent->currentState.loopSound : cgs.sound_precache[ cent->currentState.loopSound ];\r"), String("\r"), String("\t\t// Only play sound if being drawn.\r"), String("\t\tif ( !( ent->s.eFlags & EF_NODRAW ) )\r"), String("\t\t{\r"), String("\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, v3Origin/*cent->lerpOrigin*/, vec3_origin, sfx, chan );\r"), String("\t\t}\r"), String("\t}\r"), String("\r"), String("\t// constant light glow\r"), String("\tif ( cent->currentState.constantLight ) {\r"), String("\t\tint\t\tcl;\r"), String("\t\tint\t\ti, r, g, b;\r"), String("\r"), String("\t\tcl = cent->currentState.constantLight;\r"), String("\t\tr = cl & 255;\r"), String("\t\tg = ( cl >> 8 ) & 255;\r"), String("\t\tb = ( cl >> 16 ) & 255;\r"), String("\t\ti = ( ( cl >> 24 ) & 255 ) * 4;\r"), String("\t\tcgi_R_AddLightToScene( cent->lerpOrigin, (float)i, (float)r, (float)g, (float)b );\r"), String("\t}\r"), String("}\r"), String("\r"), String("void CG_AddRefEntWithTransportEffect ( centity_t *cent, refEntity_t *ent )\r"), String("{\r"), String("\t// We are a normal thing....\r"), String("\tcgi_R_AddRefEntityToScene (ent);\r"), String("\r"), String("\tif ( ent->renderfx & RF_PULSATE && cent->gent->owner && cent->gent->owner->health &&\r"), String("\t\t!cent->gent->owner->s.number && cent->gent->owner->client && //only for player\r"), String("\t\t\tcent->gent->owner->client->ps.saberEntityState == SES_RETURNING && \r"), String("\t\t\tcent->currentState.saberActive == qfalse )\r"), String("\t{\r"), String("\t\t// if we are the saber and we have been dropped, do a glow so it can be spotted easier\r"), String("\t\tfloat\twv;\r"), String("\t\tvec3_t\torg;\r"), String("\r"), String("\t\tent->customShader = cgi_R_RegisterShader( \"gfx/effects/solidWhite_cull\" );\r"), String("\t\tent->renderfx = RF_RGB_TINT;\r"), String("\t\twv = sin( cg.time * 0.003f ) * 0.08f + 0.1f;\r"), String("\t\tent->shaderRGBA[0] = wv * 255;\r"), String("\t\tent->shaderRGBA[1] = wv * 255;\r"), String("\t\tent->shaderRGBA[2] = wv * 0;\r"), String("\t\tcgi_R_AddRefEntityToScene (ent);\r"), String("\r"), String("\t\tfor ( int i = -4; i < 10; i += 1 )\r"), String("\t\t{\r"), String("\t\t\tVectorMA( ent->origin, -i, ent->axis[2], org );\r"), String("\r"), String("\t\t\tFX_AddSprite( org, NULL, NULL, 5.5f, 5.5f, wv, wv, 0.0f, 0.0f, 1.0f, cgs.media.yellowDroppedSaberShader, 0x08000000 );\r"), String("\t\t}\r"), String("\t\tif ( cent->gent->owner->s.weapon == WP_SABER )\r"), String("\t\t{//he\'s still controlling me\r"), String("\t\t\tFX_AddSprite( cent->gent->owner->client->renderInfo.handRPoint, NULL, NULL, 8.0f, 8.0f, wv, wv, 0.0f, 0.0f, 1.0f, cgs.media.yellowDroppedSaberShader, 0x08000000 );\r"), String("\t\t}\r"), String("\t}\r"), String("}\r"), String("\r"), String("\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\r"), String("// Copy the ghoul2 data into the ref ent correctly\r"), String("void CG_SetGhoul2Info( refEntity_t *ent, centity_t *cent)\r"), String("{\r"), String("\tent->ghoul2 = &cent->gent->ghoul2;\r"), String("\tVectorCopy( cent->currentState.modelScale, ent->modelScale);\r"), String("\tent->radius = cent->currentState.radius;\r"), String("\tVectorCopy (cent->lerpAngles, ent->angles);\r"), String("}\r"), String("\r"), String("\r"), String("// write in the axis and stuff\r"), String("void G2_BoltToGhoul2Model(centity_t *cent, refEntity_t *ent)\r"), String("{\r"), String("\t\t// extract the wraith ID from the bolt info\r"), String("\tint modelNum = cent->currentState.boltInfo >> MODEL_SHIFT;\r"), String("\tmodelNum &= MODEL_AND;\r"), String("\tint boltNum\t= cent->currentState.boltInfo >> BOLT_SHIFT;\r"), String("\tboltNum &= BOLT_AND;\r"), String("\tint\tentNum = cent->currentState.boltInfo >> ENTITY_SHIFT;\r"), String("\tentNum &= ENTITY_AND;\r"), String("\r"), String(" \tmdxaBone_t \t\tboltMatrix;\r"), String("\r"), String(" \t// go away and get me the bolt position for this frame please\r"), String(" \tgi.G2API_GetBoltMatrix(cent->gent->ghoul2, modelNum, boltNum, &boltMatrix, cg_entities[entNum].currentState.angles, cg_entities[entNum].currentState.origin, cg.time, cgs.model_draw, cent->currentState.modelScale);\r"), String("\r"), String("\t// set up the axis and origin we need for the actual effect spawning\r"), String(" \tent->origin[0] = boltMatrix.matrix[0][3];\r"), String(" \tent->origin[1] = boltMatrix.matrix[1][3];\r"), String(" \tent->origin[2] = boltMatrix.matrix[2][3];\r"), String("\r"), String(" \tent->axis[0][0] = boltMatrix.matrix[0][0];\r"), String(" \tent->axis[0][1] = boltMatrix.matrix[1][0];\r"), String(" \tent->axis[0][2] = boltMatrix.matrix[2][0];\r"), String("\r"), String(" \tent->axis[1][0] = boltMatrix.matrix[0][1];\r"), String(" \tent->axis[1][1] = boltMatrix.matrix[1][1];\r"), String(" \tent->axis[1][2] = boltMatrix.matrix[2][1];\r"), String("\r"), String(" \tent->axis[2][0] = boltMatrix.matrix[0][2];\r"), String(" \tent->axis[2][1] = boltMatrix.matrix[1][2];\r"), String(" \tent->axis[2][2] = boltMatrix.matrix[2][2];\r"), String("}\r"), String("\r"), String("void ScaleModelAxis(refEntity_t\t*ent)\r"), String("\r"), String("{\t\t// scale the model should we need to\r"), String("\t\tif (ent->modelScale[0] && ent->modelScale[0] != 1.0f)\r"), String("\t\t{\r"), String("\t\t\tVectorScale( ent->axis[0], ent->modelScale[0] , ent->axis[0] );\r"), String("\t\t\tent->nonNormalizedAxes = qtrue;\r"), String("\t\t}\r"), String("\t\tif (ent->modelScale[1] && ent->modelScale[1] != 1.0f)\r"), String("\t\t{\r"), String("\t\t\tVectorScale( ent->axis[1], ent->modelScale[1] , ent->axis[1] );\r"), String("\t\t\tent->nonNormalizedAxes = qtrue;\r"), String("\t\t}\r"), String("\t\tif (ent->modelScale[2] && ent->modelScale[2] != 1.0f)\r"), String("\t\t{\r"), String("\t\t\tVectorScale( ent->axis[2], ent->modelScale[2] , ent->axis[2] );\r"), String("\t\t\tent->nonNormalizedAxes = qtrue;\r"), String("\t\t}\r"), String("}\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("/*\r"), String("==================\r"), String("CG_General\r"), String("==================\r"), String("*/\r"), String("static void CG_General( centity_t *cent ) \r"), String("{\r"), String("\trefEntity_t\t\t\tent;\r"), String("\tentityState_t\t\t*s1;\r"), String("\r"), String("\ts1 = &cent->currentState;\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\r"), String("\t// if set to invisible, skip\r"), String("\tif (!s1->modelindex && !cent->gent->ghoul2.IsValid() ) {\r"), String("\t\treturn;\r"), String("\t}\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\tif ( s1->eFlags & EF_NODRAW )\r"), String("\t{\r"), String("\t\t// If you don\'t like it doing NODRAW, then don\'t set the flag\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tmemset (&ent, 0, sizeof(ent));\r"), String("\r"), String("\t// set frame\r"), String("\r"), String("\tif ( cent->currentState.eFlags & EF_DISABLE_SHADER_ANIM )\r"), String("\t{\r"), String("\t\t// by setting the shader time to the current time, we can force an animating shader to not animate\r"), String("\t\tent.shaderTime = cg.time * 0.001f;\r"), String("\t}\r"), String("\r"), String("\tif ( s1->eFlags & EF_SHADER_ANIM )\r"), String("\t{\r"), String("\t\t// Deliberately setting it up so that shader anim will completely override any kind of model animation frame setting.\r"), String("\t\tent.renderfx|=RF_SETANIMINDEX;\r"), String("\t\tent.skinNum = s1->frame;\r"), String("\t}\r"), String("\telse if ( s1->eFlags & EF_ANIM_ONCE )\r"), String("\t{\r"), String("\t\t//s1->frame++;\r"), String("\t\t//ent.frame = s1->frame;\r"), String("\t\tent.frame = cent->gent->s.frame;\r"), String("\t\tent.renderfx|=RF_CAP_FRAMES;\r"), String("\t}\r"), String("\telse if ( s1->eFlags & EF_ANIM_ALLFAST )\r"), String("\t{\r"), String("\t\tent.frame = (cg.time / 100);\r"), String("\t\tent.renderfx|=RF_WRAP_FRAMES;\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\tent.frame = s1->frame;\r"), String("\t}\r"), String("\tent.oldframe = ent.frame;\r"), String("\tent.backlerp = 0;\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\tCG_SetGhoul2Info(&ent, cent);\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\tVectorCopy( cent->lerpOrigin, ent.origin);\r"), String("\tVectorCopy( cent->lerpOrigin, ent.oldorigin);\r"), String("\r"), String("\tent.hModel = cgs.model_draw[s1->modelindex];\r"), String("\r"), String("\tif ( !ent.radius )\r"), String("\t{// Set default g2 cull radius.\r"), String("\t\tent.radius = 60;\r"), String("\t}\r"), String("\r"), String("\tif ( s1->eFlags & EF_AUTO_SIZE && cent->gent )\r"), String("\t{\r"), String("\t\tcgi_R_ModelBounds( ent.hModel, cent->gent->mins, cent->gent->maxs );\r"), String("\t\t//Only do this once\r"), String("\t\tcent->gent->s.eFlags &= ~EF_AUTO_SIZE;\r"), String("\t}\r"), String("\r"), String("\t// player model\r"), String("\tif (s1->number == cg.snap->ps.clientNum) \r"), String("\t{\r"), String("\t\tent.renderfx |= RF_THIRD_PERSON;\t// only draw from mirrors\r"), String("\t}\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\t// are we bolted to a Ghoul2 model?\r"), String("\tif (s1->boltInfo)\r"), String("\t{\r"), String("\t\tG2_BoltToGhoul2Model(cent, &ent);\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\t//-------------------------------------------------------\r"), String("\t\t// Start of chair\r"), String("\t\t//-------------------------------------------------------\r"), String("\t\tif ( cent->gent->s.weapon == WP_EMPLACED_GUN || ( cent->gent->activator && cent->gent->activator->owner && \r"), String("\t\t\t\tcent->gent->activator->s.eFlags & EF_LOCKED_TO_WEAPON ))\r"), String("\t\t{\r"), String("\t\t\tvec3_t\ttemp;\r"), String("\r"), String("\t\t\tif ( cent->gent->health <= 0 && cent->gent->e_ThinkFunc == thinkF_NULL )\r"), String("\t\t\t{\r"), String("\t\t\t\tif ( !cent->gent->bounceCount )\r"), String("\t\t\t\t{//not an EWeb\r"), String("\t\t\t\t\tent.customShader = cgi_R_RegisterShader( \"models/map_objects/imp_mine/turret_chair_dmg\" );\r"), String("\t\t\t\t}\r"), String("\r"), String("\t\t\t\tVectorSet( temp, 0, 0, 1 );\r"), String("\r"), String("\t\t\t\t// add a big scorch mark under the gun\r"), String("\t\t\t\tCG_ImpactMark( cgs.media.scavMarkShader, cent->lerpOrigin, temp, \r"), String("\t\t\t\t\t0, 1,1,1, 1.0f, qfalse, 92, qtrue );\r"), String("\t\t\t\tCG_ImpactMark( cgs.media.scavMarkShader, cent->lerpOrigin, temp, \r"), String("\t\t\t\t\t90, 1,1,1, 1.0f, qfalse, 48, qtrue );\r"), String("\t\t\t}\r"), String("\t\t\telse\r"), String("\t\t\t{\r"), String("\t\t\t\tVectorSet( temp, 0, 0, 1 );\r"), String("\r"), String("\t\t\t\tif ( !( cent->gent->svFlags & SVF_INACTIVE ))\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tif ( !cent->gent->bounceCount )\r"), String("\t\t\t\t\t{//not an EWeb\r"), String("\t\t\t\t\t\tent.customShader = cgi_R_RegisterShader( \"models/map_objects/imp_mine/turret_chair_on\" );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\r"), String("\t\t\t\t// shadow under the gun\r"), String("\t\t\t\tCG_ImpactMark( cgs.media.shadowMarkShader, cent->lerpOrigin, temp, \r"), String("\t\t\t\t\t0, 1,1,1, 1.0f, qfalse, 32, qtrue );\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\r"), String("\t\tif ( cent->gent->activator && cent->gent->activator->owner && \r"), String("\t\t\t\tcent->gent->activator->s.eFlags & EF_LOCKED_TO_WEAPON && \r"), String("\t\t\t\tcent->gent->activator->owner->s.number == cent->currentState.number ) // gun number must be same as current entities number\r"), String("\t\t{\r"), String("\t\t\tcentity_t *cc = &cg_entities[cent->gent->activator->s.number];\r"), String("\r"), String("const weaponData_t  *wData = NULL;\r"), String("\r"), String("\t\t\tif ( cc->currentState.weapon )\r"), String("\t\t\t{\r"), String("\t\t\t\twData = &weaponData[cc->currentState.weapon];\r"), String("\t\t\t}\r"), String("\r"), String("\t\t\tif ( !( cc->currentState.eFlags & EF_FIRING ) && !( cc->currentState.eFlags & EF_ALT_FIRING ))\r"), String("\t\t\t{\r"), String("\t\t\t\t// not animating..pausing was leaving the barrels in a bad state\r"), String("\t\t\t\tgi.G2API_PauseBoneAnim( &cent->gent->ghoul2[cent->gent->playerModel], \"model_root\", cg.time );\r"), String("\r"), String("//\t\t\t\tgi.G2API_SetBoneAnimIndex( &cent->gent->ghoul2[cent->gent->playerModel], cent->gent->rootBone, \r"), String("//\t\t\t\t\t\t0, 0, BONE_ANIM_OVERRIDE, 1.0f, cg.time );\r"), String("\t\t\t}\r"), String("\r"), String("\t\t\t// get alternating muzzle end bolts\r"), String("\t\t\tint\t\t\tbolt = cent->gent->handRBolt;\r"), String("\t\t\tmdxaBone_t\tboltMatrix;\r"), String("\r"), String("\t\t\tif ( !cc->gent->fxID || bolt == -1 )\r"), String("\t\t\t{\r"), String("\t\t\t\tbolt = cent->gent->handLBolt;\r"), String("\t\t\t}\r"), String("\r"), String("\t\t\tif ( bolt == -1 )\r"), String("\t\t\t{\r"), String("\t\t\t\tbolt = 0;\r"), String("\t\t\t}\r"), String("\t\t\tgi.G2API_GetBoltMatrix( cent->gent->ghoul2, 0, bolt, \r"), String("\t\t\t\t&boltMatrix, cent->lerpAngles, cent->lerpOrigin, cg.time,\r"), String("\t\t\t\tcgs.model_draw, cent->currentState.modelScale );\r"), String("\r"), String("\t\t\t// store the muzzle point and direction so that we can fire in the right direction\r"), String("\t\t\tgi.G2API_GiveMeVectorFromMatrix( boltMatrix, ORIGIN, cc->gent->client->renderInfo.muzzlePoint );\r"), String("\t\t\tif ( cent->gent->bounceCount )\r"), String("\t\t\t{//EWeb - *sigh* the muzzle tag on this is not aligned like th eone on the emplaced gun... consistency anyone...?\r"), String("\t\t\t\tgi.G2API_GiveMeVectorFromMatrix( boltMatrix, NEGATIVE_X, cc->gent->client->renderInfo.muzzleDir );\r"), String("\t\t\t}\r"), String("\t\t\telse\r"), String("\t\t\t{//Emplaced gun\r"), String("\t\t\t\tgi.G2API_GiveMeVectorFromMatrix( boltMatrix, POSITIVE_Y, cc->gent->client->renderInfo.muzzleDir );\r"), String("\t\t\t}\r"), String("\t\t\tcc->gent->client->renderInfo.mPCalcTime = cg.time;\r"), String("\r"), String("\t\t\t// HACK: adding in muzzle flashes\r"), String("\t\t\tif ( cc->muzzleFlashTime > 0 && wData )\r"), String("\t\t\t{\r"), String("\t\t\t\tconst char *effect = NULL;\r"), String("\t\t\t\tcc->muzzleFlashTime = 0;\r"), String("\r"), String("\t\t\t\t// Try and get a default muzzle so we have one to fall back on\r"), String("\t\t\t\tif ( wData->mMuzzleEffect[0] )\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\teffect = &wData->mMuzzleEffect[0];\r"), String("\t\t\t\t}\r"), String("\r"), String("\t\t\t\tif ( cc->currentState.eFlags & EF_ALT_FIRING )\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\t// We\'re alt-firing, so see if we need to override with a custom alt-fire effect\r"), String("\t\t\t\t\tif ( wData->mAltMuzzleEffect[0] )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\teffect = &wData->mAltMuzzleEffect[0];\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\r"), String("\t\t\t\tif ( cc->currentState.eFlags & EF_FIRING || cc->currentState.eFlags & EF_ALT_FIRING )\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tif ( cent->gent->bounceCount )\r"), String("\t\t\t\t\t{//EWeb\r"), String("\t\t\t\t\t\tgi.G2API_SetBoneAnimIndex( &cent->gent->ghoul2[cent->gent->playerModel], cent->gent->rootBone, \r"), String("\t\t\t\t\t\t\t2, 4, BONE_ANIM_OVERRIDE_FREEZE, 0.6f, cg.time, -1, -1 );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\telse\r"), String("\t\t\t\t\t{//Emplaced Gun\r"), String("\t\t\t\t\t\tgi.G2API_SetBoneAnimIndex( &cent->gent->ghoul2[cent->gent->playerModel], cent->gent->rootBone, \r"), String("\t\t\t\t\t\t\t0, 3, BONE_ANIM_OVERRIDE_FREEZE, 0.6f, cg.time, -1, -1 );\r"), String("\t\t\t\t\t}\r"), String("\t\t\r"), String("\t\t\t\t\tif ( effect )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\t// We got an effect and we\'re firing, so let \'er rip.\r"), String("\t\t\t\t\t\ttheFxScheduler.PlayEffect( effect, cc->gent->client->renderInfo.muzzlePoint, \r"), String("\t\t\t\t\t\t\t\t\t\t\t\t\tcc->gent->client->renderInfo.muzzleDir );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\r"), String("\t\t\tVectorCopy( cent->gent->s.apos.trBase, cent->lerpAngles );\r"), String("\t\t}\r"), String("\t\t//-------------------------------------------------------\r"), String("\t\t// End of chair\r"), String("\t\t//-------------------------------------------------------\r"), String("\r"), String("\t\tAnglesToAxis( cent->lerpAngles, ent.axis );\r"), String("\t}\r"), String("\r"), String("\t//copy modelscale, if any\r"), String("\tVectorCopy( cent->currentState.modelScale, ent.modelScale );\r"), String("\t//apply modelscale, if any\r"), String("\tScaleModelAxis(&ent);\r"), String("\r"), String("\tif (cent->gent->ghoul2.size())\r"), String("\t{\r"), String("\t\t//FIXME: use a flag for this, not a strcmp\r"), String("\t\tif ( cent->gent->classname && Q_stricmp( \"limb\", cent->gent->classname ) == 0 )\r"), String("\t\t{//limb, copy RGB\r"), String("\t\t\tent.shaderRGBA[0] = cent->gent->startRGBA[0];\r"), String("\t\t\tent.shaderRGBA[1] = cent->gent->startRGBA[1];\r"), String("\t\t\tent.shaderRGBA[2] = cent->gent->startRGBA[2];\r"), String("\t\t}\r"), String("\t\tif ( s1->weapon == WP_SABER && cent->gent && cent->gent->owner && cent->gent->owner->inuse )\r"), String("\t\t{//flying lightsaber\r"), String("\t\t\t//FIXME: better way to tell what it is would be nice\r"), String("\t\t\tif ( cent->gent->classname && !Q_stricmp( \"limb\", cent->gent->classname ) )\r"), String("\t\t\t{//limb, just add blade\r"), String("\t\t\t\tif ( cent->gent->owner->client )\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tif ( cent->gent->owner->client->ps.saber[0].Length() > 0 )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tCG_AddSaberBlade( &cg_entities[cent->gent->owner->s.number], \r"), String("\t\t\t\t\t\t\t&cg_entities[cent->gent->s.number], NULL, ent.renderfx, \r"), String("\t\t\t\t\t\t\tcent->gent->weaponModel[0], cent->lerpOrigin, cent->lerpAngles );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\telse if ( cent->gent->owner->client->ps.saberEventFlags & SEF_INWATER )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tCG_CheckSaberInWater( &cg_entities[cent->gent->owner->s.number], \r"), String("\t\t\t\t\t\t\t&cg_entities[cent->gent->s.number], 0, cent->gent->weaponModel[0], \r"), String("\t\t\t\t\t\t\tcent->lerpOrigin, cent->lerpAngles );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\t\t\telse\r"), String("\t\t\t{//thrown saber\r"), String("\t\t\t\t//light?  sound?\r"), String("\t\t\t\tif ( cent->gent->owner->client && g_entities[cent->currentState.otherEntityNum].client && g_entities[cent->currentState.otherEntityNum].client->ps.saber[0].Active() )\r"), String("\t\t\t\t{//saber is in-flight and active, play a sound on it\r"), String("\t\t\t\t\tif ( cent->gent->owner->client->ps.saberEntityState == SES_RETURNING \r"), String("\t\t\t\t\t\t&& cent->gent->owner->client->ps.saber[0].type != SABER_STAR )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, \r"), String("\t\t\t\t\t\t\tcent->lerpOrigin, vec3_origin, \r"), String("\t\t\t\t\t\t\tcgs.sound_precache[g_entities[cent->currentState.clientNum].client->ps.saber[0].soundLoop] );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\telse\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tint spinSound;\r"), String("\t\t\t\t\t\tif ( cent->gent->owner->client->ps.saber[0].spinSound \r"), String("\t\t\t\t\t\t\t&& cgs.sound_precache[cent->gent->owner->client->ps.saber[0].spinSound] )\r"), String("\t\t\t\t\t\t{\r"), String("\t\t\t\t\t\t\tspinSound = cgs.sound_precache[cent->gent->owner->client->ps.saber[0].spinSound];\r"), String("\t\t\t\t\t\t}\r"), String("\t\t\t\t\t\telse if ( cent->gent->owner->client->ps.saber[0].type == SABER_SITH_SWORD )\r"), String("\t\t\t\t\t\t{\r"), String("\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspinoff.wav\" );\r"), String("\t\t\t\t\t\t}\r"), String("\t\t\t\t\t\telse\r"), String("\t\t\t\t\t\t{\r"), String("\t\t\t\t\t\t\tswitch ( cent->gent->owner->client->ps.forcePowerLevel[FP_SABERTHROW] )\r"), String("\t\t\t\t\t\t\t{\r"), String("\t\t\t\t\t\t\tcase FORCE_LEVEL_1:\r"), String("\t\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin3.wav\" );\r"), String("\t\t\t\t\t\t\t\tbreak;\r"), String("\t\t\t\t\t\t\tcase FORCE_LEVEL_2:\r"), String("\t\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin2.wav\" );\r"), String("\t\t\t\t\t\t\t\tbreak;\r"), String("\t\t\t\t\t\t\tdefault:\r"), String("\t\t\t\t\t\t\tcase FORCE_LEVEL_3:\r"), String("\t\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin1.wav\" );\r"), String("\t\t\t\t\t\t\t\tbreak;\r"), String("\t\t\t\t\t\t\t}\r"), String("\t\t\t\t\t\t}\r"), String("\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, \r"), String("\t\t\t\t\t\t\tvec3_origin, spinSound );\r"), String("\t\t\t\t\t\t/*\r"), String("\t\t\t\t\t\tif ( cg_weapons[WP_SABER].missileSound )\r"), String("\t\t\t\t\t\t{\r"), String("\t\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, cg_weapons[WP_SABER].missileSound );\r"), String("\t\t\t\t\t\t}\r"), String("\t\t\t\t\t\t*/\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\t\t\t\tif ( cent->gent->owner->client )\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tif ( cent->gent->owner->client->ps.saber[0].Length() > 0 )\r"), String("\t\t\t\t\t{//only add the blade if it\'s on\r"), String("\t\t\t\t\t\tCG_AddSaberBlade( &cg_entities[cent->gent->owner->s.number], \r"), String("\t\t\t\t\t\t\t&cg_entities[cent->gent->s.number], NULL, ent.renderfx, \r"), String("\t\t\t\t\t\t\t0, cent->lerpOrigin, cent->lerpAngles );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\telse if ( cent->gent->owner->client->ps.saberEventFlags & SEF_INWATER )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tCG_CheckSaberInWater( &cg_entities[cent->gent->owner->s.number], \r"), String("\t\t\t\t\t\t\t&cg_entities[cent->gent->s.number], 0, 0, cent->lerpOrigin, \r"), String("\t\t\t\t\t\t\tcent->lerpAngles );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\t\t\t\tif ( cent->gent->owner->health )\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\t//make sure we can always be seen\r"), String("\t\t\t\t\tent.renderfx |= RF_PULSATE;\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\tif ( s1->weapon == WP_SABER && cent->gent && cent->gent->owner )\r"), String("\t\t{//flying lightsaber\r"), String("\t\t\t//light?  sound?\r"), String("\t\t\tif ( cent->gent->owner->client && cent->currentState.saberActive )\r"), String("\t\t\t{//saber is in-flight and active, play a sound on it\r"), String("\t\t\t\tif ( cent->gent->owner->client->ps.saberEntityState == SES_RETURNING \r"), String("\t\t\t\t\t&& cent->gent->owner->client->ps.saber[0].type != SABER_STAR )\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tif ( cg_weapons[WP_SABER].firingSound )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, \r"), String("\t\t\t\t\t\t\tcent->lerpOrigin, vec3_origin, cg_weapons[WP_SABER].firingSound );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\t\t\t\telse\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tint spinSound;\r"), String("\t\t\t\t\tif ( cent->gent->owner->client->ps.saber[0].spinSound \r"), String("\t\t\t\t\t\t&& cgs.sound_precache[cent->gent->owner->client->ps.saber[0].spinSound] )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tspinSound = cgs.sound_precache[cent->gent->owner->client->ps.saber[0].spinSound];\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\telse if ( cent->gent->owner->client->ps.saber[0].type == SABER_SITH_SWORD )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspinoff.wav\" );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\telse\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tswitch ( cent->gent->owner->client->ps.forcePowerLevel[FP_SABERTHROW] )\r"), String("\t\t\t\t\t\t{\r"), String("\t\t\t\t\t\tcase FORCE_LEVEL_1:\r"), String("\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin3.wav\" );\r"), String("\t\t\t\t\t\t\tbreak;\r"), String("\t\t\t\t\t\tcase FORCE_LEVEL_2:\r"), String("\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin2.wav\" );\r"), String("\t\t\t\t\t\t\tbreak;\r"), String("\t\t\t\t\t\tdefault:\r"), String("\t\t\t\t\t\tcase FORCE_LEVEL_3:\r"), String("\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin1.wav\" );\r"), String("\t\t\t\t\t\t\tbreak;\r"), String("\t\t\t\t\t\t}\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, \r"), String("\t\t\t\t\t\tvec3_origin, spinSound );\r"), String("\t\t\t\t\t/*\r"), String("\t\t\t\t\tif ( cg_weapons[WP_SABER].missileSound )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, cg_weapons[WP_SABER].missileSound );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\t*/\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\t\t\tCG_AddSaberBlade( &cg_entities[cent->gent->owner->s.number], \r"), String("\t\t\t\tNULL, &ent, ent.renderfx, 0, NULL, NULL );\r"), String("\r"), String("\t\t\tif ( cent->gent->owner->health )\r"), String("\t\t\t{\r"), String("\t\t\t\t//make sure we can always be seen\r"), String("\t\t\t\tent.renderfx |= RF_PULSATE;\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t}\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\tif ( cent->gent && cent->gent->forcePushTime > cg.time )\r"), String("\t{//FIXME: if I\'m a rather large model, this will look kind of stupid...\r"), String("\t\tCG_ForcePushBlur( cent->lerpOrigin );\r"), String("\t}\r"), String("\tCG_AddRefEntWithTransportEffect( cent, &ent );\r"), String("\r"), String("\tif ( cent->gent->health <= 0 \r"), String("\t\t&& cent->gent->s.weapon == WP_EMPLACED_GUN \r"), String("\t\t&& cent->gent->e_ThinkFunc )\r"), String("\t{\r"), String("\t\t// make the gun pulse red to warn about it exploding\r"), String("\t\tfloat val = (1.0f - (float)(cent->gent->nextthink - cg.time) / 3200.0f ) * 0.3f;\r"), String("\r"), String("\t\tent.customShader = cgi_R_RegisterShader( \"gfx/effects/solidWhite\" );\r"), String("\t\tent.shaderRGBA[0] = (sin( cg.time * 0.04f ) * val * 0.4f + val) * 255;\r"), String("\t\tent.shaderRGBA[1] = ent.shaderRGBA[2] = 0;\r"), String("\t\tent.renderfx |= RF_RGB_TINT;\r"), String("\t\tcgi_R_AddRefEntityToScene( &ent );\r"), String("\t}\r"), String("\r"), String("\t//--------------------------\r"), String("\tif ( s1->eFlags & EF_FIRING && cent->gent->inuse )\r"), String("\t{\r"), String("\t\t//special code for adding the beam to the attached tripwire mine\r"), String("\t\tvec3_t\t\t\tbeamOrg;\r"), String("\t\tint\t\t\t\thandle = 0;\r"), String("\t\tSEffectTemplate\t*temp;\r"), String("\r"), String("\t\tVectorMA( ent.origin, 6.6f, ent.axis[0], beamOrg );// forward\r"), String("\r"), String("\t\t// overriding the effect, so give us a copy first\r"), String("\t\ttemp = theFxScheduler.GetEffectCopy( \"tripMine/laser\", &handle );\t\r"), String("\r"), String("\t\tif ( temp )\r"), String("\t\t{\r"), String("\t\t\t// have a copy, so get the line element out of there\r"), String("\t\t\tCPrimitiveTemplate *prim = theFxScheduler.GetPrimitiveCopy( temp, \"line1\" );\r"), String("\r"), String("\t\t\tif ( prim )\r"), String("\t\t\t{\r"), String("\t\t\t\t// we have the primitive, so modify the endpoint\r"), String("\t\t\t\tprim->mOrigin2X.SetRange( cent->gent->pos4[0], cent->gent->pos4[0] );\r"), String("\t\t\t\tprim->mOrigin2Y.SetRange( cent->gent->pos4[1], cent->gent->pos4[1] );\r"), String("\t\t\t\tprim->mOrigin2Z.SetRange( cent->gent->pos4[2], cent->gent->pos4[2] );\r"), String("\r"), String("\t\t\t\t// have a copy, so get the line element out of there\r"), String("\t\t\t\tCPrimitiveTemplate *prim = theFxScheduler.GetPrimitiveCopy( temp, \"line2\" );\r"), String("\r"), String("\t\t\t\tif ( prim )\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\t// we have the primitive, so modify the cent->gent->pos3point\r"), String("\t\t\t\t\tprim->mOrigin2X.SetRange( cent->gent->pos4[0], cent->gent->pos4[0] );\r"), String("\t\t\t\t\tprim->mOrigin2Y.SetRange( cent->gent->pos4[1], cent->gent->pos4[1] );\r"), String("\t\t\t\t\tprim->mOrigin2Z.SetRange( cent->gent->pos4[2], cent->gent->pos4[2] );\r"), String("\r"), String("\t\t\t\t\t// play the modified effect\r"), String("\t\t\t\t\ttheFxScheduler.PlayEffect( handle, beamOrg, ent.axis[0] );\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\r"), String("\t\ttheFxScheduler.PlayEffect( \"tripMine/laserImpactGlow\", cent->gent->pos4, ent.axis[0] );\r"), String("\t}\r"), String("\r"), String("\r"), String("\tif ( s1->eFlags & EF_PROX_TRIP )\r"), String("\t{\r"), String("\t\t//special code for adding the glow end to proximity tripmine\r"), String("\t\tvec3_t\tbeamOrg;\r"), String("\r"), String("\t\tVectorMA( ent.origin, 6.6f, ent.axis[0], beamOrg );// forward\r"), String("\t\ttheFxScheduler.PlayEffect( \"tripMine/glowBit\", beamOrg, ent.axis[0] );\r"), String("\t}\r"), String("\r"), String("\tif ( s1->eFlags & EF_ALT_FIRING )\r"), String("\t{\r"), String("\t\t// hack for the spotlight\r"), String("\t\tvec3_t\torg, axis[3], dir;\r"), String("\r"), String("\t\tAngleVectors( cent->lerpAngles, dir, NULL, NULL );\r"), String("\r"), String("\t\tCG_GetTagWorldPosition( &ent, \"tag_flash\", org, axis );\r"), String("\r"), String("\t\ttheFxScheduler.PlayEffect( \"env/light_cone\", org, axis[0] );\r"), String("\r"), String("\t\tVectorMA( cent->lerpOrigin, cent->gent->radius - 5, dir, org ); // stay a bit back from the impact point...this may not be enough?\r"), String("\r"), String("\t\tcgi_R_AddLightToScene( org, 225, 1.0f, 1.0f, 1.0f );\r"), String("\t}\r"), String("\r"), String("\t//-----------------------------------------------------------\r"), String("\tif ( cent->gent->flags & (FL_DMG_BY_HEAVY_WEAP_ONLY | FL_SHIELDED ))\r"), String("\t{\r"), String("\t\t// Dumb assumption, but I guess we must be a shielded ion_cannon??  We should probably verify\r"), String("\t\t// if it\'s an ion_cannon that\'s Heavy Weapon only, we don\'t want to make it shielded do we...?\r"), String("\t\tif ( (!strcmp( \"misc_ion_cannon\", cent->gent->classname )) && (cent->gent->flags & FL_SHIELDED ))\r"), String("\t\t{\r"), String("\t\t\t// must be doing \"pain\"....er, impact\r"), String("\t\t\tif ( cent->gent->painDebounceTime > cg.time )\r"), String("\t\t\t{\r"), String("\t\t\t\tfloat t = (float)(cent->gent->painDebounceTime - cg.time ) / 1000.0f;\r"), String("\r"), String("\t\t\t\t// Only display when we have damage\r"), String("\t\t\t\tif ( t >= 0.0f && t <= 1.0f ) \r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tt *= random();\r"), String("\r"), String("\t\t\t\t\tent.shaderRGBA[0] = ent.shaderRGBA[1] = ent.shaderRGBA[2] = 255.0f * t;\r"), String("\t\t\t\t\tent.shaderRGBA[3] = 255;\r"), String("\t\t\t\t\tent.renderfx &= ~RF_ALPHA_FADE;\r"), String("\t\t\t\t\tent.renderfx |= RF_RGB_TINT;\r"), String("\t\t\t\t\tent.customShader = cgi_R_RegisterShader( \"gfx/misc/ion_shield\" );\r"), String("\t\t\t\t\r"), String("\t\t\t\t\tcgi_R_AddRefEntityToScene( &ent );\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t}\r"), String("\r"), String("\t//draw force sight shell around it, too\r"), String("\tif ((cg.snap->ps.forcePowersActive & (1 << FP_SEE)) \r"), String("\t\t&& cg.snap->ps.clientNum != cent->currentState.number \r"), String("\t\t&& CG_PlayerCanSeeCent( cent ) )\r"), String("\t{//so player can see dark missiles/explosives\r"), String("\t\tif ( s1->weapon == WP_THERMAL\r"), String("\t\t\t|| s1->weapon == WP_DET_PACK\r"), String("\t\t\t|| s1->weapon == WP_TRIP_MINE\r"), String("\t\t\t|| (cent->gent&&cent->gent->e_UseFunc==useF_ammo_power_converter_use)\r"), String("\t\t\t|| (cent->gent&&cent->gent->e_UseFunc==useF_shield_power_converter_use)\r"), String("\t\t\t|| (s1->eFlags&EF_FORCE_VISIBLE) )\r"), String("\t\t{//really, we only need to do this for things like thermals, detpacks and tripmines, no?\r"), String("\t\t\tCG_AddForceSightShell( &ent, cent );\r"), String("\t\t}\r"), String("\t}\r"), String("}\r"), String("\r"), String("/*\r"), String("==================\r"), String("CG_Speaker\r"), String("\r"), String("Speaker entities can automatically play sounds\r"), String("==================\r"), String("*/\r"), String("static void CG_Speaker( centity_t *cent ) {\r"), String("\tif ( ! cent->currentState.clientNum ) {\t// FIXME: use something other than clientNum...\r"), String("\t\treturn;\t\t// not auto triggering\r"), String("\t}\r"), String("\r"), String("\tif ( cg.time < cent->miscTime ) {\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tcgi_S_StartSound (NULL, cent->currentState.number, CHAN_ITEM, cgs.sound_precache[cent->currentState.eventParm] );\r"), String("\r"), String("\t//\tent->s.frame = ent->wait * 10;\r"), String("\t//\tent->s.clientNum = ent->random * 10;\r"), String("\tcent->miscTime = (int)(cg.time + cent->currentState.frame * 100 + cent->currentState.clientNum * 100 * crandom());\r"), String("}\r"), String("\r"), String("/*\r"), String("==================\r"), String("CG_Item\r"), String("==================\r"), String("*/\r"), String("static void CG_Item( centity_t *cent ) \r"), String("{\r"), String("\trefEntity_t\t\t\tent;\r"), String("\tentityState_t\t\t*es;\r"), String("\tgitem_t\t\t\t\t*item;\r"), String("//\tint\t\t\t\t\tmsec;\r"), String("//\tfloat\t\t\t\tfrac;\r"), String("\tfloat\t\t\t\tscale;\r"), String("\r"), String("\tes = &cent->currentState;\r"), String("\tif ( es->modelindex >= bg_numItems ) \r"), String("\t{\r"), String("\t\tCG_Error( \"Bad item index %i on entity\", es->modelindex );\r"), String("\t}\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\r"), String("\t// if set to invisible, skip\r"), String("\tif ( (!es->modelindex && !cent->gent->ghoul2.IsValid() ) || ( es->eFlags & EF_NODRAW ) ) \r"), String("\t{\r"), String("\t\treturn;\r"), String("\t}\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\tif ( cent->gent && !cent->gent->inuse )\r"), String("\t{\r"), String("\t\t// Yeah, I know....items were being freed on touch, but it could still get here and draw incorrectly...\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\titem = &bg_itemlist[ es->modelindex ];\r"), String("\r"), String("\tif ( cg_simpleItems.integer ) \r"), String("\t{\r"), String("\t\tmemset( &ent, 0, sizeof( ent ) );\r"), String("\t\tent.reType = RT_SPRITE;\r"), String("\t\tVectorCopy( cent->lerpOrigin, ent.origin );\r"), String("\t\tent.radius = 14;\r"), String("\t\tent.customShader = cg_items[es->modelindex].icon;\r"), String("\t\tent.shaderRGBA[0] = 255;\r"), String("\t\tent.shaderRGBA[1] = 255;\r"), String("\t\tent.shaderRGBA[2] = 255;\r"), String("\t\tent.shaderRGBA[3] = 255;\r"), String("\t\tcgi_R_AddRefEntityToScene(&ent);\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tmemset (&ent, 0, sizeof(ent));\r"), String("\r"), String("\t// items bob up and down continuously\r"), String("\tif( item->giType == IT_HOLOCRON )\r"), String("\t{\r"), String("\t\tscale = 0.005f + cent->currentState.number * 0.00001f;\r"), String("\t\tcent->lerpOrigin[2] += (float)(4 + cos( ( cg.time + 1000 ) *  scale ) * 3)+8; // just raised them up a bit\r"), String("\t}\r"), String("\r"), String("\r"), String("\r"), String("\t// autorotate at one of two speeds\r"), String("//\tif ( item->giType == IT_HEALTH ) {\r"), String("//\t\tVectorCopy( cg.autoAnglesFast, cent->lerpAngles );\r"), String("//\t\tAxisCopy( cg.autoAxisFast, ent.axis );\r"), String("//\t} else {\r"), String("\tif( item->giType == IT_HOLOCRON )\r"), String("\t{\r"), String("\t\tVectorCopy( cg.autoAngles, cent->lerpAngles );\r"), String("\t\tAxisCopy( cg.autoAxis, ent.axis );\r"), String("\t}\r"), String("\r"), String("\r"), String("\t// the weapons have their origin where they attatch to player\r"), String("\t// models, so we need to offset them or they will rotate\r"), String("\t// eccentricly\r"), String("//\tif ( item->giType == IT_WEAPON ) {\r"), String("//\t\tweaponInfo_t\t*wi;\r"), String("//\r"), String("//\t\twi = &cg_weapons[item->giTag];\r"), String("//\t\tcent->lerpOrigin[0] -= \r"), String("//\t\t\twi->weaponMidpoint[0] * ent.axis[0][0] +\r"), String("//\t\t\twi->weaponMidpoint[1] * ent.axis[1][0] +\r"), String("//\t\t\twi->weaponMidpoint[2] * ent.axis[2][0];\r"), String("//\t\tcent->lerpOrigin[1] -= \r"), String("//\t\t\twi->weaponMidpoint[0] * ent.axis[0][1] +\r"), String("//\t\t\twi->weaponMidpoint[1] * ent.axis[1][1] +\r"), String("//\t\t\twi->weaponMidpoint[2] * ent.axis[2][1];\r"), String("//\t\tcent->lerpOrigin[2] -= \r"), String("//\t\t\twi->weaponMidpoint[0] * ent.axis[0][2] +\r"), String("//\t\t\twi->weaponMidpoint[1] * ent.axis[1][2] +\r"), String("//\t\t\twi->weaponMidpoint[2] * ent.axis[2][2];\r"), String("\r"), String("//\t\tcent->lerpOrigin[2] += 8;\t// an extra height boost\r"), String("//\t}\r"), String("\tvec3_t spinAngles;\r"), String("\r"), String("\t//AxisClear( ent.axis );\r"), String("\tVectorCopy( cent->gent->s.angles, spinAngles );\r"), String("\r"), String("\tif ( cent->gent->ghoul2.IsValid()\r"), String("\t\t&& cent->gent->ghoul2.size() )\r"), String("\t{//since modelindex is used by items as an index into items(not models), we need to ignore the hModel here to force it to use the ghoul2 model if we have one\r"), String("\t\tent.hModel = cgs.model_draw[0];\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\tent.hModel = cg_items[es->modelindex].models;\r"), String("\t}\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\tCG_SetGhoul2Info(&ent, cent);  \r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\tVectorCopy( cent->lerpOrigin, ent.origin);\r"), String("\tVectorCopy( cent->lerpOrigin, ent.oldorigin);\r"), String("\r"), String("\tent.nonNormalizedAxes = qfalse;\r"), String("\r"), String("\t// lovely...this is for weapons that should be oriented vertically.  For weapons lockers and such.\r"), String("\tif ( cent->gent->spawnflags & 16 )\r"), String("\t{\t//VectorClear( spinAngles );\r"), String("\t\tif ( item->giType == IT_WEAPON \r"), String("\t\t\t&& item->giTag == WP_SABER )\r"), String("\t\t{\r"), String("\t\t\tif ( cent->gent->random )\r"), String("\t\t\t{//pitch specified\r"), String("\t\t\t\tspinAngles[PITCH] += cent->gent->random;\r"), String("\t\t\t}\r"), String("\t\t\telse\r"), String("\t\t\t{\r"), String("\t\t\t\tspinAngles[PITCH] -= 20;\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("\t\t\tspinAngles[PITCH] -= 75;\r"), String("\t\t}\r"), String("\t}\r"), String("\t\r"), String("\tif( item->giType != IT_HOLOCRON )\r"), String("\t{\r"), String("\t\tAnglesToAxis( spinAngles, ent.axis );\r"), String("\t}\r"), String("\r"), String("\t// items without glow textures need to keep a minimum light value\r"), String("\t// so they are always visible\r"), String("/*\tif (( item->giType == IT_WEAPON ) || ( item->giType == IT_ARMOR )) \r"), String("\t{\r"), String("\t\tent.renderfx |= RF_MINLIGHT;\r"), String("\t}\r"), String("*/\r"), String("\t// increase the size of the weapons when they are presented as items\r"), String("//\tif ( item->giType == IT_WEAPON ) {\r"), String("//\t\tVectorScale( ent.axis[0], 1.5f, ent.axis[0] );\r"), String("//\t\tVectorScale( ent.axis[1], 1.5f, ent.axis[1] );\r"), String("//\t\tVectorScale( ent.axis[2], 1.5f, ent.axis[2] );\r"), String("//\t\tent.nonNormalizedAxes = qtrue;\r"), String("//\t}\r"), String("\r"), String("\t// add to refresh list\r"), String("\tcgi_R_AddRefEntityToScene(&ent);\r"), String("\r"), String("\tif ((cg.snap->ps.forcePowersActive & (1 << FP_SEE)) \r"), String("\t\t&& cg.snap->ps.clientNum != cent->currentState.number \r"), String("\t\t&& CG_PlayerCanSeeCent( cent ) )\r"), String("\t{\r"), String("\t\tCG_AddForceSightShell( &ent, cent );\r"), String("\t}\r"), String("\r"), String("\tif ( item->giType == IT_WEAPON \r"), String("\t\t&& item->giTag == WP_SABER \r"), String("\t\t&& (!cent->gent || !(cent->gent->spawnflags&64/*ITMSF_NOGLOW*/)) )\r"), String("\t{\r"), String("\t\t// saber pickup item needs to be more visible\r"), String("\t\tfloat\twv;\r"), String("\t\tvec3_t\torg;\r"), String("\r"), String("\t\tent.customShader = cgi_R_RegisterShader( \"gfx/effects/solidWhite_cull\" );\r"), String("\t\tent.renderfx = RF_RGB_TINT;\r"), String("\t\twv = sin( cg.time * 0.002f ) * 0.08f + 0.2f;\r"), String("\t\tent.shaderRGBA[0] = ent.shaderRGBA[1] = wv * 255;\r"), String("\t\tent.shaderRGBA[2] = 0;\r"), String("\t\tcgi_R_AddRefEntityToScene(&ent);\r"), String("\r"), String("\t\tfor ( int i = -4; i < 10; i += 1 )\r"), String("\t\t{\r"), String("\t\t\tVectorMA( ent.origin, -i, ent.axis[2], org );\r"), String("\r"), String("\t\t\tFX_AddSprite( org, NULL, NULL, 10.0f, 10.0f, wv * 0.5f, wv * 0.5f, 0.0f, 0.0f, 1.0f, cgs.media.yellowDroppedSaberShader, 0x08000000 );\r"), String("\t\t}\r"), String("\r"), String("\t\t// THIS light looks crappy...maybe it should just be removed...\r"), String("\t\tcgi_R_AddLightToScene( ent.origin, wv * 350 + 180, 1.0f, 1.0f, 0.0f );\r"), String("\t}\r"), String("}\r"), String("\r"), String("//============================================================================\r"), String("\r"), String("/*\r"), String("===============\r"), String("CG_Missile\r"), String("===============\r"), String("*/\r"), String("static void CG_Missile( centity_t *cent ) {\r"), String("\trefEntity_t\t\t\tent;\r"), String("\tentityState_t\t\t*s1;\r"), String("\tconst weaponInfo_t\t*weapon;\r"), String("\tconst weaponData_t  *wData;\r"), String("\r"), String("\tif ( !cent->gent->inuse )\r"), String("\t\treturn;\r"), String("\r"), String("\ts1 = &cent->currentState;\r"), String("\tif ( s1->weapon >= WP_NUM_WEAPONS ) {\r"), String("\t\ts1->weapon = 0;\r"), String("\t}\r"), String("\tweapon = &cg_weapons[s1->weapon];\r"), String("\twData = &weaponData[s1->weapon];\r"), String("\r"), String("\tif ( s1->pos.trType != TR_INTERPOLATE )\r"), String("\t{\r"), String("\t\t// calculate the axis\r"), String("\t\tVectorCopy( s1->angles, cent->lerpAngles );\r"), String("\t}\r"), String("\r"), String("\tif ( cent->gent->alt_fire )\r"), String("\t{\r"), String("\t\t// add trails\r"), String("\t\tif ( weapon->alt_missileTrailFunc )  \r"), String("\t\t\tweapon->alt_missileTrailFunc( cent, weapon );\r"), String("\r"), String("\t\t// add dynamic light\r"), String("\t\tif ( wData->alt_missileDlight )\r"), String("\t\t\t\tcgi_R_AddLightToScene(cent->lerpOrigin, wData->alt_missileDlight, \r"), String("\t\t\t\t\twData->alt_missileDlightColor[0], wData->alt_missileDlightColor[1], wData->alt_missileDlightColor[2] );\r"), String("\r"), String("\t\t// add missile sound\r"), String("\t\tif ( weapon->alt_missileSound )\r"), String("\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->alt_missileSound );\r"), String("\r"), String("\t\t//Don\'t draw something without a model\r"), String("\t\tif ( weapon->alt_missileModel == NULL )\r"), String("\t\t\treturn;\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\t// add trails\r"), String("\t\tif ( weapon->missileTrailFunc )  \r"), String("\t\t\tweapon->missileTrailFunc( cent, weapon );\r"), String("\r"), String("\t\t// add dynamic light\r"), String("\t\tif ( wData->missileDlight )\r"), String("\t\t\tcgi_R_AddLightToScene(cent->lerpOrigin, wData->missileDlight, \r"), String("\t\t\t\twData->missileDlightColor[0], wData->missileDlightColor[1], wData->missileDlightColor[2] );\r"), String("\r"), String("\t\t// add missile sound\r"), String("\t\tif ( weapon->missileSound )\r"), String("\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->missileSound );\r"), String("\r"), String("\t\t//Don\'t draw something without a model\r"), String("\t\tif ( weapon->missileModel == NULL )\r"), String("\t\t\treturn;\r"), String("\t}\r"), String("\r"), String("\t// create the render entity\r"), String("\tmemset (&ent, 0, sizeof(ent));\r"), String("\tVectorCopy( cent->lerpOrigin, ent.origin);\r"), String("\tVectorCopy( cent->lerpOrigin, ent.oldorigin);\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\tCG_SetGhoul2Info(&ent, cent);  \r"), String("\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\t// flicker between two skins\r"), String("\tent.skinNum = cg.clientFrame & 1;\r"), String("\tent.renderfx = /*weapon->missileRenderfx | */RF_NOSHADOW;\r"), String("\r"), String("\tif ( cent->gent->alt_fire )\r"), String("\t\tent.hModel = weapon->alt_missileModel;\r"), String("\telse\r"), String("\t\tent.hModel = weapon->missileModel;\r"), String("\r"), String("\t// spin as it moves\r"), String("\tif ( s1->apos.trType != TR_INTERPOLATE)\r"), String("\t{\r"), String("\r"), String("\t\t// convert direction of travel into axis\r"), String("\t\tif ( VectorNormalize2( s1->pos.trDelta, ent.axis[0] ) == 0 ) {\r"), String("\t\t\tent.axis[0][2] = 1;\r"), String("\t\t}\r"), String("\t\tif ( s1->pos.trType != TR_STATIONARY )\r"), String("\t\t{\r"), String("\t\t\tif ( s1->eFlags & EF_MISSILE_STICK )\r"), String("\t\t\t\tRotateAroundDirection( ent.axis, cg.time * 0.5f );//Did this so regular missiles don\'t get broken\r"), String("\t\t\telse\r"), String("\t\t\t\tRotateAroundDirection( ent.axis, cg.time * 0.25f );//JFM:FLOAT FIX\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("\t\t\tif ( s1->eFlags & EF_MISSILE_STICK )\r"), String("\t\t\t\tRotateAroundDirection( ent.axis, (float)s1->pos.trTime * 0.5f );\r"), String("\t\t\telse\r"), String("\t\t\t\tRotateAroundDirection( ent.axis, (float)s1->time );\r"), String("\t\t}\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\tAnglesToAxis( cent->lerpAngles, ent.axis );\r"), String("\t}\r"), String("\r"), String("\t// add to refresh list, possibly with quad glow\r"), String("\tCG_AddRefEntityWithPowerups( &ent, s1->powerups, NULL );\r"), String("\r"), String("\tif ((cg.snap->ps.forcePowersActive & (1 << FP_SEE)) \r"), String("\t\t&& cg.snap->ps.clientNum != cent->currentState.number \r"), String("\t\t&& CG_PlayerCanSeeCent( cent ) )\r"), String("\t{//so player can see dark missiles/explosives\r"), String("\t\tif ( s1->weapon == WP_THERMAL\r"), String("\t\t\t|| s1->weapon == WP_DET_PACK\r"), String("\t\t\t|| s1->weapon == WP_TRIP_MINE\r"), String("\t\t\t|| (s1->eFlags&EF_FORCE_VISIBLE) )\r"), String("\t\t{//really, we only need to do this for things like thermals, detpacks and tripmines, no?\r"), String("\t\t\tCG_AddForceSightShell( &ent, cent );\r"), String("\t\t}\r"), String("\t}\r"), String("}\r"), String("\r"), String("/*\r"), String("===============\r"), String("CG_Mover\r"), String("===============\r"), String("*/\r"), String("\r"), String("#define DOOR_OPENING\t1\r"), String("#define DOOR_CLOSING\t2\r"), String("#define DOOR_OPEN\t\t3\r"), String("#define DOOR_CLOSED\t\t4\r"), String("\r"), String("static void CG_Mover( centity_t *cent ) {\r"), String("\trefEntity_t\t\t\tent;\r"), String("\tentityState_t\t\t*s1;\r"), String("\r"), String("\ts1 = &cent->currentState;\r"), String("\r"), String("\t// create the render entity\r"), String("\tmemset (&ent, 0, sizeof(ent));\r"), String("\t//FIXME: why are these always 0, 0, 0???!\r"), String("\tVectorCopy( cent->lerpOrigin, ent.origin);\r"), String("\tVectorCopy( cent->lerpOrigin, ent.oldorigin);\r"), String("\tAnglesToAxis( cent->lerpAngles, ent.axis );\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\r"), String("\tCG_SetGhoul2Info(&ent, cent);  \r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\tent.renderfx = RF_NOSHADOW;\r"), String("\r"), String("\t// flicker between two skins (FIXME?)\r"), String("\tent.skinNum = ( cg.time >> 6 ) & 1;\r"), String("\r"), String("\t// get the model, either as a bmodel or a modelindex\r"), String("\tif ( s1->solid == SOLID_BMODEL ) {\r"), String("\t\tent.hModel = cgs.inlineDrawModel[s1->modelindex];\r"), String("\t} else {\r"), String("\t\tent.hModel = cgs.model_draw[s1->modelindex];\r"), String("\t}\r"), String("\r"), String("\t// If there isn\'t an hModel for this mover, an RGB axis model will get drawn.\r"), String("\tif ( !ent.hModel )\r"), String("\t{\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tif ( cent->currentState.eFlags & EF_DISABLE_SHADER_ANIM )\r"), String("\t{\r"), String("\t\t// by setting the shader time to the current time, we can force an animating shader to not animate\r"), String("\t\tent.shaderTime = cg.time * 0.001f;\r"), String("\t}\r"), String("\r"), String("\t// add the secondary model\r"), String("\tif ( s1->solid == SOLID_BMODEL && s1->modelindex2 ) \r"), String("\t{\r"), String("//\t\tvec3_t\torg;\r"), String("\t\tif ( !(s1->eFlags & EF_NODRAW) )\r"), String("\t\t{\r"), String("\t\t\t// add to refresh list\r"), String("\t\t\tCG_AddRefEntWithTransportEffect( cent, &ent );\r"), String("\t\t}\r"), String("\r"), String("/*\t\t// Um, this does not interpolate nicely?  Not sure why it was here....\r"), String("\t\tVectorAdd(cent->gent->absmin, cent->gent->absmax, org);\r"), String("\t\tVectorScale(org, 0.5, org);\r"), String("\t\tVectorCopy( org, ent.origin);\r"), String("\t\tVectorCopy( org, ent.oldorigin);\r"), String("*/\r"), String("\t\tif ( !VectorCompare( vec3_origin, cent->gent->modelAngles ) )\r"), String("\t\t{//we have a rotational offset for the model for this brush\r"), String("\t\t\tvec3_t modelAngles;\r"), String("\t\t\tVectorAdd( cent->lerpAngles, cent->gent->modelAngles, modelAngles );\r"), String("\t\t\tAnglesToAxis( modelAngles, ent.axis );\r"), String("\t\t}\r"), String("\t\tent.hModel = cgs.model_draw[s1->modelindex2];\r"), String("\t}\r"), String("\r"), String("\t// I changed it to always do it because nodraw seemed like it should actually do what it says. Be aware that if you change this,\r"), String("\t//\tthe movers for the shooting gallery on doom_detention will break.\r"), String("\tif ( (s1->eFlags & EF_NODRAW) )\r"), String("\t{\r"), String("\t\treturn;\r"), String("\t}\r"), String("\t//fall through and render the hModel or...\r"), String("\r"), String("\t//We\'re a normal model being moved, animate our model\r"), String("\tent.skinNum = 0;\r"), String("\tif ( s1->eFlags & EF_ANIM_ONCE )\r"), String("\t{//FIXME: needs to anim at once per 100 ms\r"), String("\t\tent.frame = cent->gent->s.frame;\r"), String("\t\tent.renderfx|=RF_CAP_FRAMES;\r"), String("\t}\r"), String("\telse if ( s1->eFlags & EF_ANIM_ALLFAST )\r"), String("\t{\r"), String("\t\tent.frame = (cg.time / 100);\r"), String("\t\tent.renderfx|=RF_WRAP_FRAMES;\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\tent.frame = s1->frame;\r"), String("\t}\r"), String("\r"), String("\tif ( s1->eFlags & EF_SHADER_ANIM )\r"), String("\t{\r"), String("\t\tent.renderfx|=RF_SETANIMINDEX;\r"), String("\t\tent.skinNum = s1->frame;\r"), String("\t\t//ent.shaderTime = cg.time*0.001f - s1->frame/s1->time;//NOTE: s1->time is number of frames\r"), String("\t}\r"), String("\r"), String("\t// add to refresh list\r"), String("\tCG_AddRefEntWithTransportEffect( cent, &ent );\r"), String("\r"), String("\tif ((cg.snap->ps.forcePowersActive & (1 << FP_SEE)) \r"), String("\t\t&& cg.snap->ps.clientNum != cent->currentState.number \r"), String("\t\t&& (s1->eFlags&EF_FORCE_VISIBLE) )\r"), String("\t{//so player can see func_breakables\r"), String("\t\tCG_AddForceSightShell( &ent, cent );\r"), String("\t}\r"), String("}\r"), String("\r"), String("/*\r"), String("===============\r"), String("CG_Beam\r"), String("\r"), String("Also called as an event\r"), String("===============\r"), String("*/\r"), String("void CG_Beam( centity_t *cent, int color ) {\r"), String("\trefEntity_t\t\t\tent;\r"), String("\tentityState_t\t\t*s1;\r"), String("\r"), String("\ts1 = &cent->currentState;\r"), String("\r"), String("\t// create the render entity\r"), String("\tmemset (&ent, 0, sizeof(ent));\r"), String("\tVectorCopy( s1->pos.trBase, ent.origin );\r"), String("\tVectorCopy( s1->origin2, ent.oldorigin );\r"), String("\tAxisClear( ent.axis );\r"), String("\tent.reType = RT_BEAM;\r"), String("\tent.skinNum = color;\r"), String("\r"), String("\tent.renderfx = RF_NOSHADOW;\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\tCG_SetGhoul2Info(&ent, cent);  \r"), String("\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\t// add to refresh list\r"), String("\tcgi_R_AddRefEntityToScene(&ent);\r"), String("}\r"), String("\r"), String("/*\r"), String("===============\r"), String("CG_Cylinder\r"), String("===============\r"), String("*/\r"), String("void CG_Cylinder( vec3_t start, vec3_t end, float radius, vec3_t color ) \r"), String("{\r"), String("\tvec3_t\tdir;\r"), String("\tfloat\tlength;\r"), String("\r"), String("\tVectorSubtract( end, start, dir );\r"), String("\tlength = VectorNormalize( dir );\r"), String("\r"), String("/*\tFX_AddCylinder( -1, start, \r"), String("\t\t\t\t\tdir, \r"), String("\t\t\t\t\tlength, \r"), String("\t\t\t\t\t0.0f, \r"), String("\t\t\t\t\tradius,\r"), String("\t\t\t\t\t0.0f,\r"), String("\t\t\t\t\tradius,\r"), String("\t\t\t\t\t0.0f,\r"), String("\t\t\t\t\t1.0f,\r"), String("\t\t\t\t\t1.0f,\r"), String("\t\t\t\t\tcolor,\r"), String("\t\t\t\t\tcolor,\r"), String("\t\t\t\t\t100.0f,\r"), String("\t\t\t\t\tcgs.media.waterDropShader\r"), String("\t\t\t\t\t0, -1, -1 );*/\r"), String("}\r"), String("\r"), String("static vec2_t st[] = \r"), String("{\r"), String("\t0.0f, 0.0f,\r"), String("\t1.0f, 0.0f,\r"), String("\t1.0f, 1.0f,\r"), String("\t0.0f, 1.0f\r"), String("};\r"), String("\r"), String("void CG_Cube( vec3_t mins, vec3_t maxs, vec3_t color, float alpha ) \r"), String("{\r"), String("\tvec3_t\tpoint[4], rot={0,0,0};\r"), String("\tvec2_t\tst[4];\r"), String("\tint\t\tvec[3];\r"), String("\tint\t\taxis, i;\r"), String("\r"), String("\tfor ( axis = 0, vec[0] = 0, vec[1] = 1, vec[2] = 2; axis < 3; axis++, vec[0]++, vec[1]++, vec[2]++ )\r"), String("\t{\r"), String("\t\tfor ( i = 0; i < 3; i++ )\r"), String("\t\t{\r"), String("\t\t\tif ( vec[i] > 2 )\r"), String("\t\t\t{\r"), String("\t\t\t\tvec[i] = 0;\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\r"), String("\t\tpoint[0][vec[1]] = mins[vec[1]];\r"), String("\t\tpoint[0][vec[2]] = mins[vec[2]];\r"), String("\r"), String("\t\tpoint[1][vec[1]] = mins[vec[1]];\r"), String("\t\tpoint[1][vec[2]] = maxs[vec[2]];\r"), String("\r"), String("\t\tpoint[2][vec[1]] = maxs[vec[1]];\r"), String("\t\tpoint[2][vec[2]] = maxs[vec[2]];\r"), String("\t\t\r"), String("\t\tpoint[3][vec[1]] = maxs[vec[1]];\r"), String("\t\tpoint[3][vec[2]] = mins[vec[2]];\r"), String("\r"), String("\t\t//- face\r"), String("\t\tpoint[0][vec[0]] = point[1][vec[0]] = point[2][vec[0]] = point[3][vec[0]] = mins[vec[0]];\r"), String("\r"), String("\t\tFX_AddPoly( point, st, 4, NULL, NULL, alpha, alpha, 0.0f, \r"), String("\t\t\t\t\t\tcolor, color, 0.0f, rot, 0.0f, 0.0f, \r"), String("\t\t\t\t\t\t100, cgs.media.solidWhiteShader, 0 );\r"), String("\r"), String("\t\t//+ face\r"), String("\t\tpoint[0][vec[0]] = point[1][vec[0]] = point[2][vec[0]] = point[3][vec[0]] = maxs[vec[0]];\r"), String("\r"), String("\t\tFX_AddPoly( point, st, 4, NULL, NULL, alpha, alpha, 0.0f, \r"), String("\t\t\t\t\t\tcolor, color, 0.0f, rot, 0.0f, 0.0f, \r"), String("\t\t\t\t\t\t100, cgs.media.solidWhiteShader, 0 );\r"), String("\t}\r"), String("}\r"), String("\r"), String("void CG_CubeOutline( vec3_t mins, vec3_t maxs, int time, unsigned int color, float alpha )\r"), String("{\r"), String("\tvec3_t\tpoint1, point2, point3, point4;\r"), String("\tint\t\tvec[3];\r"), String("\tint\t\taxis, i;\r"), String("\r"), String("\tfor ( axis = 0, vec[0] = 0, vec[1] = 1, vec[2] = 2; axis < 3; axis++, vec[0]++, vec[1]++, vec[2]++ )\r"), String("\t{\r"), String("\t\tfor ( i = 0; i < 3; i++ )\r"), String("\t\t{\r"), String("\t\t\tif ( vec[i] > 2 )\r"), String("\t\t\t{\r"), String("\t\t\t\tvec[i] = 0;\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\r"), String("\t\tpoint1[vec[1]] = mins[vec[1]];\r"), String("\t\tpoint1[vec[2]] = mins[vec[2]];\r"), String("\r"), String("\t\tpoint2[vec[1]] = mins[vec[1]];\r"), String("\t\tpoint2[vec[2]] = maxs[vec[2]];\r"), String("\r"), String("\t\tpoint3[vec[1]] = maxs[vec[1]];\r"), String("\t\tpoint3[vec[2]] = maxs[vec[2]];\r"), String("\t\t\r"), String("\t\tpoint4[vec[1]] = maxs[vec[1]];\r"), String("\t\tpoint4[vec[2]] = mins[vec[2]];\r"), String("\r"), String("\t\t//- face\r"), String("\t\tpoint1[vec[0]] = point2[vec[0]] = point3[vec[0]] = point4[vec[0]] = mins[vec[0]];\r"), String("\r"), String("\t\tCG_TestLine( point1, point2, time, color, 1 );\r"), String("\t\tCG_TestLine( point2, point3, time, color, 1 );\r"), String("\t\tCG_TestLine( point1, point4, time, color, 1 );\r"), String("\t\tCG_TestLine( point4, point3, time, color, 1 );\r"), String("\r"), String("\t\t//+ face\r"), String("\t\tpoint1[vec[0]] = point2[vec[0]] = point3[vec[0]] = point4[vec[0]] = maxs[vec[0]];\r"), String("\r"), String("\t\tCG_TestLine( point1, point2, time, color, 1 );\r"), String("\t\tCG_TestLine( point2, point3, time, color, 1 );\r"), String("\t\tCG_TestLine( point1, point4, time, color, 1 );\r"), String("\t\tCG_TestLine( point4, point1, time, color, 1 );\r"), String("\t}\r"), String("}\r"), String("\r"), String("void CG_Line( vec3_t start, vec3_t end, vec3_t color, float alpha ) \r"), String("{\r"), String("\t/*FX_AddLine( start,\r"), String("\t\t\t\tend,\r"), String("\t\t\t\t1.0f,\r"), String("\t\t\t\t1.0,\r"), String("\t\t\t\t1.0f,\r"), String("\t\t\t\talpha,\r"), String("\t\t\t\talpha,\r"), String("\t\t\t\tcolor, \r"), String("\t\t\t\tcolor, \r"), String("\t\t\t\t100.0f,\r"), String("\t\t\t\tcgs.media.whiteShader );*/\r"), String("}\r"), String("\r"), String("/*\r"), String("===============\r"), String("CG_Portal\r"), String("===============\r"), String("*/\r"), String("static void CG_Portal( centity_t *cent ) {\r"), String("\trefEntity_t\t\t\tent;\r"), String("\tentityState_t\t\t*s1;\r"), String("\r"), String("\ts1 = &cent->currentState;\r"), String("\r"), String("\t//FIXME: this tends to give a bad axis[1], perhaps we\r"), String("\t//should just do the VectorSubtraction here rather than\r"), String("\t//on the game side.  Would also allow camera to follow\r"), String("\t//a moving target.\r"), String("\r"), String("\t// create the render entity\r"), String("\tmemset (&ent, 0, sizeof(ent));\r"), String("\tVectorCopy( cent->lerpOrigin, ent.origin );\r"), String("\tVectorCopy( s1->origin2, ent.oldorigin );\r"), String("\tByteToDir( s1->eventParm, ent.axis[0] );\r"), String("\tPerpendicularVector( ent.axis[1], ent.axis[0] );\r"), String("\r"), String("\t// negating this tends to get the directions like they want\r"), String("\t// we really should have a camera roll value\r"), String("\tVectorSubtract( vec3_origin, ent.axis[1], ent.axis[1] );\r"), String("\r"), String("\tCrossProduct( ent.axis[0], ent.axis[1], ent.axis[2] );\r"), String("\tent.reType = RT_PORTALSURFACE;\r"), String("\tent.frame = s1->frame;\t\t// rotation speed\r"), String("\tent.skinNum = (int)(s1->clientNum/256.0 * 360);\t// roll offset\r"), String("\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\tCG_SetGhoul2Info(&ent, cent);  \r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\r"), String("\t// add to refresh list\r"), String("\tcgi_R_AddRefEntityToScene(&ent);\r"), String("}\r"), String("\r"), String("\r"), String("/*\r"), String("=========================\r"), String("CG_AdjustPositionForMover\r"), String("\r"), String("Also called by client movement prediction code\r"), String("=========================\r"), String("*/\r"), String("void CG_AdjustPositionForMover( const vec3_t in, int moverNum, int atTime, vec3_t out ) {\r"), String("\tcentity_t\t*cent;\r"), String("\tvec3_t\toldOrigin, origin, deltaOrigin;\r"), String("//\tvec3_t\toldAngles, angles, deltaAngles;\r"), String("\r"), String("\tif ( moverNum <= 0 ) {\r"), String("\t\tVectorCopy( in, out );\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tcent = &cg_entities[ moverNum ];\r"), String("\tif ( cent->currentState.eType != ET_MOVER ) {\r"), String("\t\tVectorCopy( in, out );\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, oldOrigin );\r"), String("//\tEvaluateTrajectory( &cent->currentState.apos, cg.snap->serverTime, oldAngles );\r"), String("\r"), String("\tEvaluateTrajectory( &cent->currentState.pos, atTime, origin );\r"), String("//\tEvaluateTrajectory( &cent->currentState.apos, atTime, angles );\r"), String("\r"), String("\tVectorSubtract( origin, oldOrigin, deltaOrigin );\r"), String("//\tVectorSubtract( angles, oldAngles, deltaAngles );\r"), String("\r"), String("\r"), String("\tVectorAdd( in, deltaOrigin, out );\r"), String("\r"), String("\t// FIXME: origin change when on a rotating object\r"), String("}\r"), String("/*\r"), String("===============\r"), String("CG_CalcEntityLerpPositions\r"), String("\r"), String("===============\r"), String("*/\r"), String("extern char\t*vtos( const vec3_t v );\r"), String("#if 1\r"), String("void CG_CalcEntityLerpPositions( centity_t *cent ) {\r"), String("\tif ( cent->gent && cent->gent->client && cent->gent->client->NPC_class == CLASS_VEHICLE && cent->nextState ) //cent->currentState.vehicleIndex != VEHICLE_NONE )\r"), String("\t{\r"), String("\t\tfloat\t\tf = cg.frameInterpolation;\r"), String("\r"), String("\t\tcent->currentState.vehicleAngles[0] = LerpAngle( cent->currentState.vehicleAngles[0], cent->nextState->vehicleAngles[0], f );\r"), String("\t\tcent->currentState.vehicleAngles[1] = LerpAngle( cent->currentState.vehicleAngles[1], cent->nextState->vehicleAngles[1], f );\r"), String("\t\tcent->currentState.vehicleAngles[2] = LerpAngle( cent->currentState.vehicleAngles[2], cent->nextState->vehicleAngles[2], f );\r"), String("\t}\r"), String("\r"), String("\tif ( cent->currentState.number == cg.snap->ps.clientNum)\r"), String("\t{\r"), String("\t\t// if the player, take position from prediction\r"), String("\t\tVectorCopy( cg.predicted_player_state.origin, cent->lerpOrigin );\r"), String("\t\tVectorCopy( cg.predicted_player_state.viewangles, cent->lerpAngles );\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("//\t\tLerpBoneAngleOverrides(cent);\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\t\treturn;\r"), String("\t}\r"), String("\t\r"), String("\t//FIXME: prediction on clients in timescale results in jerky positional translation\r"), String("\tif ( cent->interpolate )\r"), String("\t{\r"), String("\t\t// if the entity has a valid next state, interpolate a value between the frames\r"), String("\t\t// unless it is a mover with a known start and stop\r"), String("\t\tvec3_t\t\tcurrent, next;\r"), String("\t\tfloat\t\tf;\r"), String("\r"), String("\t\t// it would be an internal error to find an entity that interpolates without\r"), String("\t\t// a snapshot ahead of the current one\r"), String("\t\tif ( cg.nextSnap == NULL ) {\r"), String("\t\t\tCG_Error( \"CG_AddCEntity: cg.nextSnap == NULL\" );\r"), String("\t\t}\r"), String("\r"), String("\t\tf = cg.frameInterpolation;\r"), String("\r"), String("\t\tif ( cent->currentState.apos.trType == TR_INTERPOLATE && cent->nextState )\r"), String("\t\t{\r"), String("\t\t\tEvaluateTrajectory( &cent->currentState.apos, cg.snap->serverTime, current );\r"), String("\t\t\tEvaluateTrajectory( &cent->nextState->apos, cg.nextSnap->serverTime, next );\r"), String("\r"), String("\t\t\tcent->lerpAngles[0] = LerpAngle( current[0], next[0], f );\r"), String("\t\t\tcent->lerpAngles[1] = LerpAngle( current[1], next[1], f );\r"), String("\t\t\tcent->lerpAngles[2] = LerpAngle( current[2], next[2], f );\r"), String("\r"), String("\t\t\t/*\r"), String("\t\t\tif(cent->gent && cent->currentState.clientNum != 0 && !VectorCompare(current, next))\r"), String("\t\t\t{\r"), String("\t\t\t\tCom_Printf(\"%s last/next/lerp apos %s/%s/%s, f = %4.2f\\n\", cent->gent->script_targetname, vtos(current), vtos(next), vtos(cent->lerpAngles), f);\r"), String("\t\t\t}\r"), String("\t\t\t*/\r"), String("\t/*\r"), String("\tGhoul2 Insert Start\r"), String("\t*/\r"), String("\t\t\t// now the nasty stuff - this will interpolate all ghoul2 models bone angle overrides per model attached to this cent\r"), String("\t\t\t/*\r"), String("\t\t\tif (cent->gent->ghoul2.size())\r"), String("\t\t\t{\r"), String("\t\t\t\tLerpBoneAngleOverrides(cent);\r"), String("\t\t\t}\r"), String("\t\t\t*/\r"), String("\t/*\r"), String("\tGhoul2 Insert End\r"), String("\t*/\r"), String("\t\t}\r"), String("\t\tif ( cent->currentState.pos.trType == TR_INTERPOLATE && cent->nextState ) \r"), String("\t\t{\r"), String("\t\t\t// this will linearize a sine or parabolic curve, but it is important\r"), String("\t\t\t// to not extrapolate player positions if more recent data is available\r"), String("\t\t\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, current );\r"), String("\t\t\tEvaluateTrajectory( &cent->nextState->pos, cg.nextSnap->serverTime, next );\r"), String("\r"), String("\t\t\tcent->lerpOrigin[0] = current[0] + f * ( next[0] - current[0] );\r"), String("\t\t\tcent->lerpOrigin[1] = current[1] + f * ( next[1] - current[1] );\r"), String("\t\t\tcent->lerpOrigin[2] = current[2] + f * ( next[2] - current[2] );\r"), String("\r"), String("\t\t\t/*\r"), String("\t\t\tif ( cent->gent && cent->currentState.clientNum != 0 )\r"), String("\t\t\t{\r"), String("\t\t\t\tCom_Printf(\"%s last/next/lerp pos %s/%s/%s, f = %4.2f\\n\", cent->gent->script_targetname, vtos(current), vtos(next), vtos(cent->lerpOrigin), f);\r"), String("\t\t\t}\r"), String("\t\t\t*/\r"), String("\t\t\treturn;//FIXME: should this be outside this if?\r"), String("\t\t}\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\tif ( cent->currentState.apos.trType == TR_INTERPOLATE )\r"), String("\t\t{\r"), String("\t\t\tEvaluateTrajectory( &cent->currentState.apos, cg.snap->serverTime, cent->lerpAngles );\r"), String("\t\t}\r"), String("\t\tif ( cent->currentState.pos.trType == TR_INTERPOLATE ) \r"), String("\t\t{\r"), String("\t\t\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, cent->lerpOrigin );\r"), String("\t\t\t/*\r"), String("\t\t\tif(cent->gent && cent->currentState.clientNum != 0 )\r"), String("\t\t\t{\r"), String("\t\t\t\tCom_Printf(\"%s last/next/lerp pos %s, f = 1.0\\n\", cent->gent->script_targetname, vtos(cent->lerpOrigin) );\r"), String("\t\t\t}\r"), String("\t\t\t*/\r"), String("\t\t\treturn;\r"), String("\t\t}\r"), String("\t}\r"), String("\t\r"), String("\t// FIXME: if it\'s blocked, it wigs out, draws it in a predicted spot, but never\r"), String("\t// makes it there - we need to predict it in the right place if this is happens...\r"), String("\r"), String("\t// just use the current frame and evaluate as best we can\r"), String("\ttrajectory_t *posData = &cent->currentState.pos;\r"), String("\t{\r"), String("\t\tgentity_t *ent = &g_entities[cent->currentState.number];\r"), String("\r"), String("\t\tif ( ent && ent->inuse)\r"), String("\t\t{\r"), String("\t\t\tif ( ent->s.eFlags & EF_BLOCKED_MOVER || ent->s.pos.trType == TR_STATIONARY )\r"), String("\t\t\t{//this mover has stopped moving and is going to wig out if we predict it\r"), String("\t\t\t\t//based on last frame\'s info- cut across the network and use the currentOrigin\r"), String("\t\t\t\tVectorCopy( ent->currentOrigin, cent->lerpOrigin );\r"), String("\t\t\t\tposData = NULL;\r"), String("\t\t\t}\r"), String("\t\t\telse\r"), String("\t\t\t{\r"), String("\t\t\t\tposData = &ent->s.pos;\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t}\r"), String("\r"), String("\tif ( posData )\r"), String("\t{\r"), String("\t\tEvaluateTrajectory( posData, cg.time, cent->lerpOrigin );\r"), String("\t}\r"), String("\r"), String("\t// FIXME: this will stomp an apos trType of TR_INTERPOLATE!!\r"), String("\tEvaluateTrajectory( &cent->currentState.apos, cg.time, cent->lerpAngles );\r"), String("\r"), String("\t// adjust for riding a mover\r"), String("\tCG_AdjustPositionForMover( cent->lerpOrigin, cent->currentState.groundEntityNum, cg.time, cent->lerpOrigin );\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\t\t// now the nasty stuff - this will interpolate all ghoul2 models bone angle overrides per model attached to this cent\r"), String("\t/*\r"), String("\tif (cent->gent->ghoul2.size())\r"), String("\t{\r"), String("\t\tLerpBoneAngleOverrides(cent);\r"), String("\t}\r"), String("\t*/\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\t// FIXME: perform general error decay?\r"), String("}\r"), String("#else\r"), String("void CG_CalcEntityLerpPositions( centity_t *cent ) \r"), String("{\r"), String("\tif ( cent->currentState.number == cg.snap->ps.clientNum)\r"), String("\t{\r"), String("\t\t// if the player, take position from prediction\r"), String("\t\tVectorCopy( cg.predicted_player_state.origin, cent->lerpOrigin );\r"), String("\t\tVectorCopy( cg.predicted_player_state.viewangles, cent->lerpAngles );\r"), String("OutputDebugString(va(\"b=(%6.2f,%6.2f,%6.2f)\\n\",cent->lerpOrigin[0],cent->lerpOrigin[1],cent->lerpOrigin[2]));\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\r"), String("if (cent->currentState.number != cg.snap->ps.clientNum&&cent->interpolate && cent->currentState.pos.trType == TR_INTERPOLATE)\r"), String("{\r"), String("\tif (cent->interpolate)\r"), String("\t{\r"), String("OutputDebugString(va(\"[%3d] interp %4.2f t=%6d  st = %6d  nst = %6d     b=%6.2f   nb=%6.2f\\n\",\r"), String("\t\tcent->currentState.number,\r"), String("\t\tcg.frameInterpolation,\r"), String("\t\tcg.time,\r"), String("\t\tcg.snap->serverTime,\r"), String("\t\tcg.nextSnap->serverTime,\r"), String("\t\tcent->currentState.pos.trBase[0],\r"), String("\t\tcent->nextState.pos.trBase[0]));\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("OutputDebugString(va(\"[%3d] nonext %4.2f t=%6d  st = %6d  nst = %6d     b=%6.2f   nb=%6.2f\\n\",\r"), String("\t\tcent->currentState.number,\r"), String("\t\tcg.frameInterpolation,\r"), String("\t\tcg.time,\r"), String("\t\tcg.snap->serverTime,\r"), String("\t\t0,\r"), String("\t\tcent->currentState.pos.trBase[0],\r"), String("\t\t0.0f));\r"), String("\t}\r"), String("}\r"), String("\r"), String("\t//FIXME: prediction on clients in timescale results in jerky positional translation\r"), String("\tif (cent->interpolate && \r"), String("\t\t(cent->currentState.number == cg.snap->ps.clientNum ||\r"), String("\t\tcent->interpolate && cent->currentState.pos.trType == TR_INTERPOLATE ) )\r"), String("\t{\r"), String("\t\tvec3_t\t\tcurrent, next;\r"), String("\t\tfloat\t\tf;\r"), String("\r"), String("\t\t// it would be an internal error to find an entity that interpolates without\r"), String("\t\t// a snapshot ahead of the current one\r"), String("\t\tif ( cg.nextSnap == NULL ) \r"), String("\t\t{\r"), String("\t\t\tCG_Error( \"CG_AddCEntity: cg.nextSnap == NULL\" );\r"), String("\t\t}\r"), String("\r"), String("\t\tf = cg.frameInterpolation;\r"), String("\r"), String("\t\tEvaluateTrajectory( &cent->currentState.apos, cg.snap->serverTime, current );\r"), String("\t\tEvaluateTrajectory( &cent->nextState.apos, cg.nextSnap->serverTime, next );\r"), String("\r"), String("\t\tcent->lerpAngles[0] = LerpAngle( current[0], next[0], f );\r"), String("\t\tcent->lerpAngles[1] = LerpAngle( current[1], next[1], f );\r"), String("\t\tcent->lerpAngles[2] = LerpAngle( current[2], next[2], f );\r"), String("\r"), String("\t\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, current );\r"), String("\t\tEvaluateTrajectory( &cent->nextState.pos, cg.nextSnap->serverTime, next );\r"), String("\r"), String("\t\tcent->lerpOrigin[0] = current[0] + f * ( next[0] - current[0] );\r"), String("\t\tcent->lerpOrigin[1] = current[1] + f * ( next[1] - current[1] );\r"), String("\t\tcent->lerpOrigin[2] = current[2] + f * ( next[2] - current[2] );\r"), String("\t\treturn;\r"), String("\t}\r"), String("\t// just use the current frame and evaluate as best we can\r"), String("\ttrajectory_t *posData = &cent->currentState.pos;\r"), String("\t{\r"), String("\t\tgentity_t *ent = &g_entities[cent->currentState.number];\r"), String("\r"), String("\t\tif ( ent && ent->inuse)\r"), String("\t\t{\r"), String("\t\t\tif ( ent->s.eFlags & EF_BLOCKED_MOVER || ent->s.pos.trType == TR_STATIONARY )\r"), String("\t\t\t{//this mover has stopped moving and is going to wig out if we predict it\r"), String("\t\t\t\t//based on last frame\'s info- cut across the network and use the currentOrigin\r"), String("\t\t\t\tVectorCopy( ent->currentOrigin, cent->lerpOrigin );\r"), String("\t\t\t\tposData = NULL;\r"), String("\t\t\t}\r"), String("\t\t\telse\r"), String("\t\t\t{\r"), String("\t\t\t\tposData = &ent->s.pos;\r"), String("\t\t\t\tEvaluateTrajectory(&ent->s.pos,cg.time, cent->lerpOrigin );\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("\t\t\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, cent->lerpOrigin );\r"), String("\t\t}\r"), String("\t}\r"), String("\tEvaluateTrajectory( &cent->currentState.apos, cg.time, cent->lerpAngles );\r"), String("\r"), String("\t// adjust for riding a mover\r"), String("\tCG_AdjustPositionForMover( cent->lerpOrigin, cent->currentState.groundEntityNum, cg.time, cent->lerpOrigin );\r"), String("}\r"), String("#endif\r"), String("/*\r"), String("===============\r"), String("CG_AddLocalSet\r"), String("===============\r"), String("*/\r"), String("\r"), String("static void CG_AddLocalSet( centity_t *cent )\r"), String("{\r"), String("\tcent->gent->setTime = cgi_S_AddLocalSet( cent->gent->soundSet, cg.refdef.vieworg, cent->lerpOrigin, cent->gent->s.number, cent->gent->setTime );\r"), String("}\r"), String("\r"), String("/*\r"), String("-------------------------\r"), String("CAS_GetBModelSound\r"), String("-------------------------\r"), String("*/\r"), String("\r"), String("sfxHandle_t CAS_GetBModelSound( const char *name, int stage )\r"), String("{\r"), String("\treturn cgi_AS_GetBModelSound( name, stage );\r"), String("}\r"), String("\r"), String("void CG_DLightThink ( centity_t *cent )\r"), String("{\r"), String("\tif(cent->gent)\r"), String("\t{\r"), String("\t\tfloat\ttDelta = cg.time - cent->gent->painDebounceTime;\r"), String("\t\tfloat\tpercentage = ( tDelta/((float)cent->gent->speed) );\r"), String("\t\tvec3_t\torg;\r"), String("\t\tvec4_t\tcurrentRGBA;\r"), String("\t\tgentity_t\t*owner = NULL;\r"), String("\t\tint\t\ti;\r"), String("\t\t\r"), String("\t\tif ( percentage >= 1.0f )\r"), String("\t\t{//We hit the end\r"), String("\t\t\tpercentage = 1.0f;\r"), String("\t\t\tswitch( cent->gent->pushDebounceTime )\r"), String("\t\t\t{\r"), String("\t\t\tcase 0://Fading from start to final\r"), String("\t\t\t\tif ( cent->gent->spawnflags & 8 )\r"), String("\t\t\t\t{//PULSER\r"), String("\t\t\t\t\tif ( tDelta - cent->gent->speed - cent->gent->wait >= 0 )\r"), String("\t\t\t\t\t{//Time to start fading down\r"), String("\t\t\t\t\t\tcent->gent->painDebounceTime = cg.time;\r"), String("\t\t\t\t\t\tcent->gent->pushDebounceTime = 1;\r"), String("\t\t\t\t\t\tpercentage = 0.0f;\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\t\t\t\telse\r"), String("\t\t\t\t{//Stick on startRGBA\r"), String("\t\t\t\t\tpercentage = 0.0f;\r"), String("\t\t\t\t}\r"), String("\t\t\t\tbreak;\r"), String("\t\t\tcase 1://Fading from final to start\r"), String("\t\t\t\tif ( tDelta - cent->gent->speed - cent->gent->radius >= 0 )\r"), String("\t\t\t\t{//Time to start fading up\r"), String("\t\t\t\t\tcent->gent->painDebounceTime = cg.time;\r"), String("\t\t\t\t\tcent->gent->pushDebounceTime = 0;\r"), String("\t\t\t\t\tpercentage = 0.0f;\r"), String("\t\t\t\t}\r"), String("\t\t\t\tbreak;\r"), String("\t\t\tcase 2://Fading from 0 intensity to start intensity\r"), String("\t\t\t\t//Time to start fading from start to final\r"), String("\t\t\t\tcent->gent->painDebounceTime = cg.time;\r"), String("\t\t\t\tcent->gent->pushDebounceTime = 0;\r"), String("\t\t\t\tpercentage = 0.0f;\r"), String("\t\t\t\tbreak;\r"), String("\t\t\tcase 3://Fading from current intensity to 0 intensity\r"), String("\t\t\t\t//Time to turn off\r"), String("\t\t\t\tcent->gent->misc_dlight_active = qfalse;\r"), String("\t\t\t\tcent->gent->e_clThinkFunc = clThinkF_NULL;\r"), String("\t\t\t\tcent->gent->s.eType = ET_GENERAL;\r"), String("\t\t\t\tcent->gent->svFlags &= ~SVF_BROADCAST;\r"), String("\t\t\t\treturn;\t\t\r"), String("\t\t\t\tbreak;\r"), String("\t\t\tdefault:\r"), String("\t\t\t\tbreak;\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\r"), String("\t\tswitch( cent->gent->pushDebounceTime )\r"), String("\t\t{\r"), String("\t\tcase 0://Fading from start to final\r"), String("\t\t\tfor ( i = 0; i < 4; i++ )\r"), String("\t\t\t{\r"), String("\t\t\t\tcurrentRGBA[i] = cent->gent->startRGBA[i] + ( (cent->gent->finalRGBA[i] - cent->gent->startRGBA[i]) * percentage );\r"), String("\t\t\t}\r"), String("\t\t\tbreak;\r"), String("\t\tcase 1://Fading from final to start\r"), String("\t\t\tfor ( i = 0; i < 4; i++ )\r"), String("\t\t\t{\r"), String("\t\t\t\tcurrentRGBA[i] = cent->gent->finalRGBA[i] + ( (cent->gent->startRGBA[i] - cent->gent->finalRGBA[i]) * percentage );\r"), String("\t\t\t}\r"), String("\t\t\tbreak;\r"), String("\t\tcase 2://Fading from 0 intensity to start\r"), String("\t\t\tfor ( i = 0; i < 3; i++ )\r"), String("\t\t\t{\r"), String("\t\t\t\tcurrentRGBA[i] = cent->gent->startRGBA[i];\r"), String("\t\t\t}\r"), String("\t\t\tcurrentRGBA[3] = cent->gent->startRGBA[3] * percentage;\r"), String("\t\t\tbreak;\r"), String("\t\tcase 3://Fading from current intensity to 0\r"), String("\t\t\tfor ( i = 0; i < 3; i++ )\r"), String("\t\t\t{//FIXME: use last\r"), String("\t\t\t\tcurrentRGBA[i] = cent->gent->startRGBA[i];\r"), String("\t\t\t}\r"), String("\t\t\tcurrentRGBA[3] = cent->gent->startRGBA[3] - (cent->gent->startRGBA[3] * percentage);\r"), String("\t\t\tbreak;\r"), String("\t\tdefault:\r"), String("\t\t\treturn;\r"), String("\t\t\tbreak;\r"), String("\t\t}\r"), String("\r"), String("\t\tif ( cent->gent->owner )\r"), String("\t\t{\r"), String("\t\t\towner = cent->gent->owner;\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("\t\t\towner = cent->gent;\r"), String("\t\t}\r"), String("\r"), String("\t\tif ( owner->s.pos.trType == TR_INTERPOLATE )\r"), String("\t\t{\r"), String("\t\t\tVectorCopy( cg_entities[owner->s.number].lerpOrigin, org );\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("\t\t\tVectorCopy( owner->currentOrigin, org );\r"), String("\t\t}\r"), String("\r"), String("\t\tcgi_R_AddLightToScene(org, currentRGBA[3]*10, currentRGBA[0], currentRGBA[1], currentRGBA[2] );\r"), String("\t}\r"), String("}\r"), String("\r"), String("void CG_Limb ( centity_t *cent )\r"), String("{//first time we\'re drawn, remove us from the owner ent\r"), String("\tif ( cent->gent && cent->gent->owner && cent->gent->owner->ghoul2.size() )\r"), String("\t{\r"), String("\t\tgentity_t\t*owner = cent->gent->owner;\r"), String("\t\tif ( cent->gent->aimDebounceTime )\r"), String("\t\t{//done with dismemberment, just waiting to mark owner dismemberable again\r"), String("\t\t\tif ( cent->gent->aimDebounceTime > cg.time )\r"), String("\t\t\t{//still waiting\r"), String("\t\t\t\treturn;\r"), String("\t\t\t}\r"), String("\t\t\t//done!\r"), String("\t\t\towner->client->dismembered = false;\r"), String("\t\t\t//done!\r"), String("\t\t\tcent->gent->e_clThinkFunc = clThinkF_NULL;\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("extern cvar_t\t*g_dismemberment;\r"), String("extern cvar_t\t*g_saberRealisticCombat;\r"), String("\t\t\t//3) turn off w/descendants that surf in original model\r"), String("\t\t\tif ( cent->gent->target )//stubTagName )\r"), String("\t\t\t{//add smoke to cap surf, spawn effect\r"), String("\t\t\t\tif ( cent->gent->delay <= cg.time )\r"), String("\t\t\t\t{//debounced so it only plays effect once every 50ms\r"), String("\t\t\t\t\tint newBolt = gi.G2API_AddBolt( &owner->ghoul2[owner->playerModel], cent->gent->target );\r"), String("\t\t\t\t\tif ( newBolt != -1 )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tcent->gent->delay = cg.time + 50;\r"), String("\t\t\t\t\t\tCG_PlayEffectBolted( \"saber/limb_bolton\", owner->playerModel, newBolt, owner->s.number, owner->s.origin );\t//ent origin used to make FX culling work\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\t\t\tif ( cent->gent->target2 )//limbName\r"), String("\t\t\t{//turn the limb off\r"), String("\t\t\t\t//NOTE: MUST use G2SURFACEFLAG_NODESCENDANTS\r"), String("\t\t\t\tgi.G2API_SetSurfaceOnOff( &owner->ghoul2[owner->playerModel], cent->gent->target2, 0x00000100 );//G2SURFACEFLAG_NODESCENDANTS\r"), String("\t\t\t}\r"), String("\t\t\tif ( cent->gent->target3 )//stubCapName )\r"), String("\t\t\t{//turn on caps\r"), String("\t\t\t\tgi.G2API_SetSurfaceOnOff( &owner->ghoul2[owner->playerModel], cent->gent->target3, 0 );\r"), String("\t\t\t}\r"), String("\t\t\tif ( owner->weaponModel[0] > 0 )\r"), String("\t\t\t{//the corpse hasn\'t dropped their weapon\r"), String("\t\t\t\tif ( cent->gent->count == BOTH_DISMEMBER_RARM || cent->gent->count == BOTH_DISMEMBER_TORSO1 )//&& ent->s.weapon == WP_SABER && ent->weaponModel[0] != -1 )\r"), String("\t\t\t\t{//FIXME: is this first check needed with this lower one?\r"), String("\t\t\t\t\tgi.G2API_RemoveGhoul2Model( owner->ghoul2, owner->weaponModel[0] );\r"), String("\t\t\t\t\towner->weaponModel[0] = -1;\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\t\t\tif ( owner->client->NPC_class == CLASS_PROTOCOL \r"), String("\t\t\t\t|| debug_subdivision->integer\r"), String("\t\t\t\t|| g_saberRealisticCombat->integer )\r"), String("\t\t\t{\r"), String("\t\t\t\t//wait 100ms before allowing owner to be dismembered again\r"), String("\t\t\t\tcent->gent->aimDebounceTime = cg.time + 100;\r"), String("\t\t\t\treturn;\r"), String("\t\t\t}\r"), String("\t\t\telse\r"), String("\t\t\t{\r"), String("\t\t\t\t//done!\r"), String("\t\t\t\tcent->gent->e_clThinkFunc = clThinkF_NULL;\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t}\r"), String("}\r"), String("\r"), String("extern Vehicle_t *G_IsRidingVehicle( gentity_t *ent );\r"), String("qboolean\tMatrixMode = qfalse;\r"), String("extern cvar_t\t*g_skippingcin;\r"), String("void CG_MatrixEffect ( centity_t *cent )\r"), String("{\r"), String("\tfloat\tMATRIX_EFFECT_TIME = 1000.0f;\r"), String("\tif ( (cent->currentState.boltInfo&MEF_MULTI_SPIN) )\r"), String("\t{//multiple spins\r"), String("\t\tif ( cent->currentState.time2 > 0 )\r"), String("\t\t{//with a custom amount of time per spin\r"), String("\t\t\tMATRIX_EFFECT_TIME = cent->currentState.time2;\r"), String("\t\t}\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\tif ( cent->currentState.eventParm \r"), String("\t\t\t&& cent->currentState.eventParm != MATRIX_EFFECT_TIME )\r"), String("\t\t{//not a falling multi-spin, so stretch out the effect over the whole desired length (or: condenses it, too)\r"), String("\t\t\tMATRIX_EFFECT_TIME = cent->currentState.eventParm;\r"), String("\t\t}\r"), String("\t}\r"), String("\t//VectorCopy( cent->lerpOrigin, cg.refdef.vieworg );\r"), String("\tfloat totalElapsedTime = (float)(cg.time - cent->currentState.time);\r"), String("\tfloat elapsedTime = totalElapsedTime;\r"), String("\tbool\tstopEffect = ((totalElapsedTime > cent->currentState.eventParm) || cg.missionStatusShow || in_camera);\r"), String("\r"), String("\tif (!stopEffect && (cent->currentState.boltInfo&MEF_HIT_GROUND_STOP) && g_entities[cent->currentState.otherEntityNum].client)\r"), String("\t{\r"), String("\t\tif (g_entities[cent->currentState.otherEntityNum].client->ps.groundEntityNum!=ENTITYNUM_NONE)\r"), String("\t\t{\r"), String("\t\t\tstopEffect = true;\r"), String("\t\t}\r"), String("\t\telse if (g_entities[cent->currentState.otherEntityNum].client->NPC_class == CLASS_VEHICLE)\r"), String("\t\t{\r"), String("\t\t\tVehicle_t*\tpVeh = g_entities[cent->currentState.otherEntityNum].m_pVehicle;\r"), String("\t\t\tif (pVeh && !(pVeh->m_ulFlags&VEH_FLYING))\r"), String("\t\t\t{\r"), String("\t\t\t\tstopEffect = true;\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t}\r"), String("\tif (!stopEffect && (cent->currentState.boltInfo&MEF_LOOK_AT_ENEMY))\r"), String("\t{\r"), String("\t\tif (!g_entities[cent->currentState.otherEntityNum].lastEnemy || \r"), String("\t\t\t!g_entities[cent->currentState.otherEntityNum].lastEnemy->inuse)\r"), String("\t\t{\r"), String("\t\t\tstopEffect = true;\r"), String("\t\t}\r"), String("\t}\r"), String("\r"), String("\tif (stopEffect)\r"), String("\t{//time is up or this is a falling spin and they hit the ground or mission end screen is up\r"), String("\t\tcg.overrides.active &= ~(/*CG_OVERRIDE_3RD_PERSON_ENT|*/CG_OVERRIDE_3RD_PERSON_RNG|CG_OVERRIDE_3RD_PERSON_ANG|CG_OVERRIDE_3RD_PERSON_POF);\r"), String("\t\t//cg.overrides.thirdPersonEntity = 0;\r"), String("\t\tcg.overrides.thirdPersonAngle = 0;\r"), String("\t\tcg.overrides.thirdPersonPitchOffset = 0;\r"), String("\t\tcg.overrides.thirdPersonRange = 0;\r"), String("\t\tif ( g_skippingcin->integer )\r"), String("\t\t{//skipping?  don\'t mess with timescale\r"), String("\t\t\t/*\r"), String("\t\t\tif ( g_timescale->integer < 100 )\r"), String("\t\t\t{//something messed up timescale, reset it?\r"), String("\t\t\t\tcgi_Cvar_Set( \"timescale\", \"100\" );\r"), String("\t\t\t}\r"), String("\t\t\t*/\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{//set it back to 1\r"), String("\t\t\tcgi_Cvar_Set( \"timescale\", \"1.0\" );\r"), String("\t\t}\r"), String("\t\tMatrixMode = qfalse;\r"), String("\t\tcent->gent->e_clThinkFunc = clThinkF_NULL;\r"), String("\t\tcent->gent->e_ThinkFunc = thinkF_G_FreeEntity;\r"), String("\t\tcent->gent->nextthink = cg.time + 500;\r"), String("\t\treturn;\r"), String("\t}\r"), String("\telse \r"), String("\t{\r"), String("\t\twhile ( elapsedTime > MATRIX_EFFECT_TIME )\r"), String("\t\t{\r"), String("\t\t\telapsedTime -= MATRIX_EFFECT_TIME;\r"), String("\t\t}\r"), String("\t}\r"), String("\t\r"), String("\tMatrixMode = qtrue;\r"), String("\r"), String("\t//FIXME: move the position towards them and back?\r"), String("\t//cg.overrides.active |= CG_OVERRIDE_3RD_PERSON_ENT;\r"), String("\t//cg.overrides.thirdPersonEntity = cent->currentState.otherEntityNum;\r"), String("\r"), String("\tif (cent->currentState.boltInfo&MEF_LOOK_AT_ENEMY)\r"), String("\t{\r"), String("\t\tvec3_t\ttoEnemy;\r"), String("\t\tvec3_t\ttoEnemyAngles;\r"), String("\r"), String("\t\tVectorCopy(cg_entities[g_entities[cent->currentState.otherEntityNum].lastEnemy->s.number].lerpOrigin, toEnemy);\r"), String("//\t\tCG_DrawEdge(cg_entities[cent->currentState.otherEntityNum].lerpOrigin, toEnemy, EDGE_NORMAL);\r"), String("\t\tVectorSubtract(cg_entities[cent->currentState.otherEntityNum].lerpOrigin, toEnemy, toEnemy);\r"), String("\t\tvectoangles(toEnemy, toEnemyAngles);\r"), String("\r"), String("\r"), String("\t\tcg.overrides.active\t\t\t\t\t|= CG_OVERRIDE_3RD_PERSON_ANG;\r"), String("  \t \tcg.overrides.thirdPersonAngle\t\t = \r"), String("\t\t\ttoEnemyAngles[1] - \r"), String("\t\t\tcg_entities[cent->currentState.otherEntityNum].lerpAngles[1] + \r"), String(" \t\t\t145.0f;\r"), String("\t \tcg.overrides.thirdPersonAngle = AngleNormalize180(cg.overrides.thirdPersonAngle);\r"), String("\r"), String("\t\tfloat\tMATRIX_EFFECT_TIME_HALF = MATRIX_EFFECT_TIME/2.0f;\r"), String("\t\tfloat\tX = 1.0f;\r"), String("\t\tif (elapsedTime>MATRIX_EFFECT_TIME_HALF)\r"), String("\t\t{\r"), String("\t\t\tX -= ((elapsedTime - MATRIX_EFFECT_TIME_HALF)/MATRIX_EFFECT_TIME_HALF);\r"), String("\t\t}\r"), String("\t\tcg.overrides.thirdPersonAngle\t\t*= X;\r"), String("\r"), String(" //\t\tgi.Printf(\"%f\\n\", cg.overrides.thirdPersonAngle);\r"), String("\t\tcg.overrides.thirdPersonPitchOffset\t = 0.0f;\r"), String("\t\tcg.overrides.thirdPersonRange\t\t = cg_thirdPersonRange.value * 3.0f;\r"), String("\t}\r"), String("\r"), String("\tif ( !(cent->currentState.boltInfo&MEF_NO_SPIN) )\r"), String("\t{//rotate around them\r"), String("\t\t//rotate\r"), String("\t\tcg.overrides.active |= CG_OVERRIDE_3RD_PERSON_ANG;\r"), String("\t\tcg.overrides.thirdPersonAngle = 360.0f*elapsedTime/MATRIX_EFFECT_TIME;\r"), String("\t\tif ( (cent->currentState.boltInfo&MEF_REVERSE_SPIN) )\r"), String("\t\t{\r"), String("\t\t\tcg.overrides.thirdPersonAngle *= -1;\r"), String("\t\t}\r"), String("\t}\r"), String("\r"), String("\t//do all the slowdown and vert bob stuff\r"), String("\tif ( cent->currentState.angles2[0] )\r"), String("\t{\r"), String("\t\tcgi_Cvar_Set( \"timescale\", va(\"%4.2f\",cent->currentState.angles2[0]) );\r"), String("\t}\r"), String("\telse if ( !(cent->currentState.boltInfo&MEF_NO_TIMESCALE) )\r"), String("\t{//ramp the timescale\r"), String("\t\t//slowdown\r"), String("\t\tfloat timescale = (elapsedTime/MATRIX_EFFECT_TIME);\r"), String("\t\tif ( timescale < 0.01f )\r"), String("\t\t{\r"), String("\t\t\ttimescale = 0.01f;\r"), String("\t\t}\r"), String("\t\tcgi_Cvar_Set( \"timescale\", va(\"%4.2f\",timescale) );\r"), String("\t}\r"), String("\telse\r"), String("\t{//FIXME: MEF_HIT_GROUND_STOP: if they\'re on the ground, stop spinning and stop timescale\r"), String("\t\t//FIXME: if they go to the menu, restore timescale?\r"), String("\t\t//cgi_Cvar_Set( \"timescale\", \"1.0ff\" );\r"), String("\t}\r"), String("\r"), String("\tif ( !(cent->currentState.boltInfo&MEF_NO_VERTBOB) )\r"), String("\t{//bob the pitch\r"), String("\t\t//pitch\r"), String("\t\t//dip - FIXME: use pitchOffet?\r"), String("\t\tcg.overrides.active |= CG_OVERRIDE_3RD_PERSON_POF;\r"), String("\t\tcg.overrides.thirdPersonPitchOffset = cg_thirdPersonPitchOffset.value;\r"), String("\t\tif ( elapsedTime < MATRIX_EFFECT_TIME*0.33f )\r"), String("\t\t{\r"), String("\t\t\tcg.overrides.thirdPersonPitchOffset -= 30.0f*elapsedTime/(MATRIX_EFFECT_TIME*0.33);\r"), String("\t\t}\r"), String("\t\telse if ( elapsedTime > MATRIX_EFFECT_TIME*0.66f )\r"), String("\t\t{\r"), String("\t\t\tcg.overrides.thirdPersonPitchOffset -= 30.0f*(MATRIX_EFFECT_TIME-elapsedTime)/(MATRIX_EFFECT_TIME*0.33);\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("\t\t\tcg.overrides.thirdPersonPitchOffset -= 30.0f;\r"), String("\t\t}\r"), String("\t}\r"), String("\r"), String("\tif ( !(cent->currentState.boltInfo&MEF_NO_RANGEVAR) )\r"), String("\t{//vary the camera range\r"), String("\t\t//pull back\r"), String("\t\tcg.overrides.active |= CG_OVERRIDE_3RD_PERSON_RNG;\r"), String("\t\tcg.overrides.thirdPersonRange = cg_thirdPersonRange.value;\r"), String("\t\tif ( elapsedTime < MATRIX_EFFECT_TIME*0.33 )\r"), String("\t\t{\r"), String("\t\t\tcg.overrides.thirdPersonRange += 80.0f*elapsedTime/(MATRIX_EFFECT_TIME*0.33);\r"), String("\t\t}\r"), String("\t\telse if ( elapsedTime > MATRIX_EFFECT_TIME*0.66 )\r"), String("\t\t{\r"), String("\t\t\tcg.overrides.thirdPersonRange += 80.0f*(MATRIX_EFFECT_TIME-elapsedTime)/(MATRIX_EFFECT_TIME*0.33);\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("\t\t\tcg.overrides.thirdPersonRange += 80.0f;\r"), String("\t\t}\r"), String("\t}\r"), String("}\r"), String("\r"), String("static void CG_Think ( centity_t *cent )\r"), String("{\r"), String("\tif(!cent->gent)\r"), String("\t{\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tCEntity_ThinkFunc(cent);\t//\tcent->gent->clThink(cent);\r"), String("}\r"), String("\r"), String("static void CG_Clouds( centity_t *cent )\r"), String("{\r"), String("\trefEntity_t\t\tent;\r"), String("\tentityState_t\t*s1;\r"), String("\r"), String("\ts1 = &cent->currentState;\r"), String("\r"), String("\t// create the render entity\r"), String("\tmemset( &ent, 0, sizeof( ent ));\r"), String("\r"), String("\tVectorCopy( cent->lerpOrigin, ent.origin );\r"), String("\r"), String("\tent.shaderRGBA[0] = ent.shaderRGBA[1] = ent.shaderRGBA[2] = ent.shaderRGBA[3] = 255;\r"), String("\r"), String("\tent.radius = cent->gent->radius;\r"), String("\tent.backlerp = cent->gent->wait;\r"), String("\r"), String("\tent.reType = RT_CLOUDS;\r"), String("\r"), String("\tif ( cent->gent->spawnflags & 1 ) // TUBE type, the one with a hole in the middle\r"), String("\t{\r"), String("\t\tent.rotation = cent->gent->random;\r"), String("\t\tent.renderfx = RF_GROW;// tube flag \r"), String("\t}\r"), String("\r"), String("\tif ( cent->gent->spawnflags & 2 ) // ALT type, uses a different shader\r"), String("\t{\r"), String("\t\tent.customShader = cgi_R_RegisterShader( \"gfx/world/haze2\" );\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\tent.customShader = cgi_R_RegisterShader( \"gfx/world/haze\" );\r"), String("\t}\r"), String("\t\r"), String("\tcgi_R_AddRefEntityToScene( &ent );\r"), String("}\r"), String("\r"), String("/*\r"), String("===============\r"), String("CG_AddCEntity\r"), String("\r"), String("===============\r"), String("*/\r"), String("static void CG_AddCEntity( centity_t *cent ) \r"), String("{\r"), String("\t// event-only entities will have been dealt with already\r"), String("\tif ( cent->currentState.eType >= ET_EVENTS ) {\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\t//we must have restarted the game\r"), String("\tif (!cent->gent)\r"), String("\t{\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tcent->snapShotTime = cg.time;\r"), String("\r"), String("\t// calculate the current origin\r"), String("\tCG_CalcEntityLerpPositions( cent );\r"), String("\r"), String("\t// add automatic effects\r"), String("\tCG_EntityEffects( cent );\r"), String("\r"), String("\t// add local sound set if any\r"), String("\tif ( cent->gent && cent->gent->soundSet && cent->gent->soundSet[0] && cent->currentState.eType != ET_MOVER )\r"), String("\t{\r"), String("\t\tCG_AddLocalSet( cent );\r"), String("\t}\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\t// do this before we copy the data to refEnts\r"), String("\tif (cent->gent->ghoul2.IsValid())\r"), String("\t{\r"), String("\t\ttrap_G2_SetGhoul2ModelIndexes(cent->gent->ghoul2, cgs.model_draw, cgs.skins);\r"), String("\t}\r"), String("\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\tswitch ( cent->currentState.eType ) {\r"), String("\tdefault:\r"), String("\t\tCG_Error( \"Bad entity type: %i\\n\", cent->currentState.eType );\r"), String("\t\tbreak;\r"), String("\tcase ET_INVISIBLE:\r"), String("\tcase ET_PUSH_TRIGGER:\r"), String("\tcase ET_TELEPORT_TRIGGER:\r"), String("\tcase ET_TERRAIN:\r"), String("\t\tbreak;\r"), String("\tcase ET_GENERAL:\r"), String("\t\tCG_General( cent );\r"), String("\t\tbreak;\r"), String("\tcase ET_PLAYER:\r"), String("\t\tCG_Player( cent );\r"), String("\t\tbreak;\r"), String("\tcase ET_ITEM:\r"), String("\t\tCG_Item( cent );\r"), String("\t\tbreak;\r"), String("\tcase ET_MISSILE:\r"), String("\t\tCG_Missile( cent );\r"), String("\t\tbreak;\r"), String("\tcase ET_MOVER:\r"), String("\t\tCG_Mover( cent );\r"), String("\t\tbreak;\r"), String("\tcase ET_BEAM:\r"), String("\t\tCG_Beam( cent, 0 );\r"), String("\t\tbreak;\r"), String("\tcase ET_PORTAL:\r"), String("\t\tCG_Portal( cent );\r"), String("\t\tbreak;\r"), String("\tcase ET_SPEAKER:\r"), String("\t\tif ( cent->gent && cent->gent->soundSet && cent->gent->soundSet[0] )\r"), String("\t\t{\r"), String("\t\t\tbreak;\r"), String("\t\t}\r"), String("\t\tCG_Speaker( cent );\r"), String("\t\tbreak;\r"), String("\tcase ET_THINKER:\r"), String("\t\tCG_General( cent );\r"), String("\t\tCG_Think( cent );\r"), String("\t\tbreak;\r"), String("\tcase ET_CLOUD: // dumb\r"), String("\t\tCG_Clouds( cent );\r"), String("\t\tbreak;\r"), String("\t}\r"), String("}\r"), String("\r"), String("/*\r"), String("===============\r"), String("CG_AddPacketEntities\r"), String("\r"), String("===============\r"), String("*/\r"), String("void CG_AddPacketEntities( qboolean isPortal ) {\r"), String("\tint\t\t\t\t\tnum;\r"), String("\tcentity_t\t\t\t*cent;\r"), String("\tplayerState_t\t\t*ps;\r"), String("\r"), String("\tif (isPortal)\r"), String("\t{\r"), String("\t\tfor ( num = 0 ; num < cg.snap->numEntities ; num++ )\r"), String("\t\t{\r"), String("\t\t\tcent = &cg_entities[ cg.snap->entities[ num ].number ];\r"), String("\r"), String("\t\t\tif (cent->currentState.isPortalEnt)\r"), String("\t\t\t{\r"), String("\t\t\t\tCG_AddCEntity( cent );\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\t// set cg.frameInterpolation\r"), String("\tif ( cg.nextSnap ) \r"), String("\t{\r"), String("\t\tint\t\tdelta;\r"), String("\r"), String("\t\tdelta = (cg.nextSnap->serverTime - cg.snap->serverTime);\r"), String("\t\tif ( delta == 0 ) \r"), String("\t\t{\r"), String("\t\t\tcg.frameInterpolation = 0;\r"), String("\t\t} \r"), String("\t\telse \r"), String("\t\t{\r"), String("\t\t\tcg.frameInterpolation = (float)( cg.time - cg.snap->serverTime ) / delta;\r"), String("\t\t}\r"), String("//OutputDebugString(va(\"interp %4.2f ct=%6d nt=%6d st=%6d\\n\",cg.frameInterpolation,cg.time,cg.nextSnap->serverTime,cg.snap->serverTime));\r"), String("\t} \r"), String("\telse \r"), String("\t{\r"), String("\t\tcg.frameInterpolation = 0;\t// actually, it should never be used, because \r"), String("\t\t\t\t\t\t\t\t\t// no entities should be marked as interpolating\r"), String("//OutputDebugString(va(\"noterp %4.2f ct=%6d nt=%6d st=%6d\\n\",cg.frameInterpolation,cg.time,0,cg.snap->serverTime));\r"), String("\t}\r"), String("\r"), String("\t// the auto-rotating items will all have the same axis\r"), String("\tcg.autoAngles[0] = 0;\r"), String("\tcg.autoAngles[1] = ( cg.time & 2047 ) * 360 / 2048.0f;\r"), String("\tcg.autoAngles[2] = 0;\r"), String("\r"), String("\tcg.autoAnglesFast[0] = 0;\r"), String("\tcg.autoAnglesFast[1] = ( cg.time & 1023 ) * 360 / 1024.0f;\r"), String("\tcg.autoAnglesFast[2] = 0;\r"), String("\r"), String("\tAnglesToAxis( cg.autoAngles, cg.autoAxis );\r"), String("\tAnglesToAxis( cg.autoAnglesFast, cg.autoAxisFast );\r"), String("\r"), String("\t// generate and add the entity from the playerstate\r"), String("\tps = &cg.predicted_player_state;\r"), String("\tPlayerStateToEntityState( ps, &cg_entities[ ps->clientNum ].currentState );\r"), String("//\tcent = &cg_entities[ ps->clientNum ];\t// not needed now that player is in the snap packet\r"), String("//\tCG_AddCEntity( cent );\t\t\t\t\t//\r"), String("\r"), String("\t// add each entity sent over by the server\r"), String("\tfor ( num = 0 ; num < cg.snap->numEntities ; num++ ) {\r"), String("\t\tcent = &cg_entities[ cg.snap->entities[ num ].number ];\r"), String("\r"), String("\t\tCG_AddCEntity( cent );\r"), String("\t}\r"), String("\r"), String("\tfor(num=0;num<cg_numpermanents;num++)\r"), String("\t{\r"), String("\t\tcent = cg_permanents[num];\r"), String("\t\tif (cent->currentValid)\r"), String("\t\t{\r"), String("\t\t\tCG_AddCEntity( cent );\r"), String("\t\t}\r"), String("\t}\r"), String("}\r"), String("\r"), String("//rww - This function is not currently called. Use it as the client-side ROFF\r"), String("//callback once that\'s implemented fully.\r"), String("void CG_ROFF_NotetrackCallback( centity_t *cent, const char *notetrack)\r"), String("{\r"), String("\tint i = 0, r = 0, objectID = 0, anglesGathered = 0, posoffsetGathered = 0;\r"), String("\tchar type[256];\r"), String("\tchar argument[512];\r"), String("\tchar addlArg[512];\r"), String("\tchar errMsg[256];\r"), String("\tchar t[64];\r"), String("\tint addlArgs = 0;\r"), String("\tvec3_t parsedAngles, parsedOffset, useAngles, useOrigin, forward, right, up;\r"), String("\r"), String("\tif (!cent || !notetrack)\r"), String("\t{\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\t//notetrack = \"effect effects/explosion1.efx 0+0+64 0-0-1\";\r"), String("\r"), String("\twhile (notetrack[i] && notetrack[i] != \' \')\r"), String("\t{\r"), String("\t\ttype[i] = notetrack[i];\r"), String("\t\ti++;\r"), String("\t}\r"), String("\r"), String("\ttype[i] = \'\\0\';\r"), String("\r"), String("\tif (notetrack[i] != \' \')\r"), String("\t{ //didn\'t pass in a valid notetrack type, or forgot the argument for it\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\ti++;\r"), String("\r"), String("\twhile (notetrack[i] && notetrack[i] != \' \')\r"), String("\t{\r"), String("\t\targument[r] = notetrack[i];\r"), String("\t\tr++;\r"), String("\t\ti++;\r"), String("\t}\r"), String("\targument[r] = \'\\0\';\r"), String("\r"), String("\tif (!r)\r"), String("\t{\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tif (notetrack[i] == \' \')\r"), String("\t{ //additional arguments...\r"), String("\t\taddlArgs = 1;\r"), String("\r"), String("\t\ti++;\r"), String("\t\tr = 0;\r"), String("\t\twhile (notetrack[i])\r"), String("\t\t{\r"), String("\t\t\taddlArg[r] = notetrack[i];\r"), String("\t\t\tr++;\r"), String("\t\t\ti++;\r"), String("\t\t}\r"), String("\t\taddlArg[r] = \'\\0\';\r"), String("\t}\r"), String("\r"), String("\tif (strcmp(type, \"effect\") == 0)\r"), String("\t{\r"), String("\t\tif (!addlArgs)\r"), String("\t\t{\r"), String("\t\t\t//sprintf(errMsg, \"Offset position argument for \'effect\' type is invalid.\");\r"), String("\t\t\t//goto functionend;\r"), String("\t\t\tVectorClear(parsedOffset);\r"), String("\t\t\tgoto defaultoffsetposition;\r"), String("\t\t}\r"), String("\r"), String("\t\ti = 0;\r"), String("\r"), String("\t\twhile (posoffsetGathered < 3)\r"), String("\t\t{\r"), String("\t\t\tr = 0;\r"), String("\t\t\twhile (addlArg[i] && addlArg[i] != \'+\' && addlArg[i] != \' \')\r"), String("\t\t\t{\r"), String("\t\t\t\tt[r] = addlArg[i];\r"), String("\t\t\t\tr++;\r"), String("\t\t\t\ti++;\r"), String("\t\t\t}\r"), String("\t\t\tt[r] = \'\\0\';\r"), String("\t\t\ti++;\r"), String("\t\t\tif (!r)\r"), String("\t\t\t{ //failure..\r"), String("\t\t\t\t//sprintf(errMsg, \"Offset position argument for \'effect\' type is invalid.\");\r"), String("\t\t\t\t//goto functionend;\r"), String("\t\t\t\tVectorClear(parsedOffset);\r"), String("\t\t\t\ti = 0;\r"), String("\t\t\t\tgoto defaultoffsetposition;\r"), String("\t\t\t}\r"), String("\t\t\tparsedOffset[posoffsetGathered] = atof(t);\r"), String("\t\t\tposoffsetGathered++;\r"), String("\t\t}\r"), String("\r"), String("\t\tif (posoffsetGathered < 3)\r"), String("\t\t{\r"), String("\t\t\tsprintf(errMsg, \"Offset position argument for \'effect\' type is invalid.\");\r"), String("\t\t\tgoto functionend;\r"), String("\t\t}\r"), String("\r"), String("\t\ti--;\r"), String("\r"), String("\t\tif (addlArg[i] != \' \')\r"), String("\t\t{\r"), String("\t\t\taddlArgs = 0;\r"), String("\t\t}\r"), String("\r"), String("defaultoffsetposition:\r"), String("\r"), String("\t\tobjectID = theFxScheduler.RegisterEffect(argument);\r"), String("\r"), String("\t\tif (objectID)\r"), String("\t\t{\r"), String("\t\t\tif (addlArgs)\r"), String("\t\t\t{ //if there is an additional argument for an effect it is expected to be XANGLE-YANGLE-ZANGLE\r"), String("\t\t\t\ti++;\r"), String("\t\t\t\twhile (anglesGathered < 3)\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tr = 0;\r"), String("\t\t\t\t\twhile (addlArg[i] && addlArg[i] != \'-\')\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tt[r] = addlArg[i];\r"), String("\t\t\t\t\t\tr++;\r"), String("\t\t\t\t\t\ti++;\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\tt[r] = \'\\0\';\r"), String("\t\t\t\t\ti++;\r"), String("\r"), String("\t\t\t\t\tif (!r)\r"), String("\t\t\t\t\t{ //failed to get a new part of the vector\r"), String("\t\t\t\t\t\tanglesGathered = 0;\r"), String("\t\t\t\t\t\tbreak;\r"), String("\t\t\t\t\t}\r"), String("\r"), String("\t\t\t\t\tparsedAngles[anglesGathered] = atof(t);\r"), String("\t\t\t\t\tanglesGathered++;\r"), String("\t\t\t\t}\r"), String("\r"), String("\t\t\t\tif (anglesGathered)\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tVectorCopy(parsedAngles, useAngles);\r"), String("\t\t\t\t}\r"), String("\t\t\t\telse\r"), String("\t\t\t\t{ //failed to parse angles from the extra argument provided..\r"), String("\t\t\t\t\tVectorCopy(cent->lerpAngles, useAngles);\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\t\t\telse\r"), String("\t\t\t{ //if no constant angles, play in direction entity is facing\r"), String("\t\t\t\tVectorCopy(cent->lerpAngles, useAngles);\r"), String("\t\t\t}\r"), String("\r"), String("\t\t\tAngleVectors(useAngles, forward, right, up);\r"), String("\r"), String("\t\t\tVectorCopy(cent->lerpOrigin, useOrigin);\r"), String("\r"), String("\t\t\t//forward\r"), String("\t\t\tuseOrigin[0] += forward[0]*parsedOffset[0];\r"), String("\t\t\tuseOrigin[1] += forward[1]*parsedOffset[0];\r"), String("\t\t\tuseOrigin[2] += forward[2]*parsedOffset[0];\r"), String("\r"), String("\t\t\t//right\r"), String("\t\t\tuseOrigin[0] += right[0]*parsedOffset[1];\r"), String("\t\t\tuseOrigin[1] += right[1]*parsedOffset[1];\r"), String("\t\t\tuseOrigin[2] += right[2]*parsedOffset[1];\r"), String("\r"), String("\t\t\t//up\r"), String("\t\t\tuseOrigin[0] += up[0]*parsedOffset[2];\r"), String("\t\t\tuseOrigin[1] += up[1]*parsedOffset[2];\r"), String("\t\t\tuseOrigin[2] += up[2]*parsedOffset[2];\r"), String("\r"), String("\t\t\ttheFxScheduler.PlayEffect(objectID, useOrigin, useAngles);\r"), String("\t\t}\r"), String("\t}\r"), String("\telse if (strcmp(type, \"sound\") == 0)\r"), String("\t{\r"), String("\t\tobjectID = cgi_S_RegisterSound(argument);\r"), String("\t\tcgi_S_StartSound(cent->lerpOrigin, cent->currentState.number, CHAN_BODY, objectID);\r"), String("\t}\r"), String("\telse if (strcmp(type, \"loop\") == 0)\r"), String("\t{ //handled server-side\r"), String("\t\treturn;\r"), String("\t}\r"), String("\t//else if ...\r"), String("\telse\r"), String("\t{\r"), String("\t\tif (type[0])\r"), String("\t\t{\r"), String("\t\t\tCom_Printf(\"^3Warning: \\\"%s\\\" is an invalid ROFF notetrack function\\n\", type);\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("\t\t\tCom_Printf(\"^3Warning: Notetrack is missing function and/or arguments\\n\");\r"), String("\t\t}\r"), String("\t}\r"), String("\r"), String("\treturn;\r"), String("\r"), String("functionend:\r"), String("\tCom_Printf(\"^3Type-specific notetrack error: %s\\n\", errMsg);\r"), String("\treturn;\r"), String("}\r"), String(">>>>>>> master"), String("")])})
11:11:50 INFO unnamed src/language_server_protocol.rs:1993 text_document_did_change; params=Object({"bufnr": Number(1), "character": Number(11), "filename": String("/home/ys/Code/project/project-jka/src/code/cgame/cg_ents.cpp"), "gotoCmd": Null, "handle": Bool(true), "languageId": String("cpp"), "line": Number(818), "method": String("textDocument/definition"), "text": Array([String("<<<<<<< HEAD"), String("// cg_ents.c -- present snapshot entities, happens every single frame"), String(""), String("// this line must stay at top so the whole PCH thing works..."), String("#include \"cg_headers.h\""), String(""), String("//#include \"cg_local.h\""), String("#include \"cg_media.h\""), String("#include \"../game/g_functions.h\""), String("#include \"../ghoul2/G2.h\""), String("#include \"FxScheduler.h\""), String("#include \"../game/wp_saber.h\""), String("#include \"../game/g_vehicles.h\""), String("#include \"../game/g_local.h\""), String(""), String("extern void CG_AddSaberBlade( centity_t *cent, centity_t *scent, refEntity_t *saber, int renderfx, int modelIndex, vec3_t origin, vec3_t angles);"), String("extern void CG_CheckSaberInWater( centity_t *cent, centity_t *scent, int saberNum, int modelIndex, vec3_t origin, vec3_t angles );"), String("extern void CG_ForcePushBlur( const vec3_t org, qboolean darkSide = qfalse );"), String("extern void CG_AddForceSightShell( refEntity_t *ent, centity_t *cent );"), String("extern qboolean CG_PlayerCanSeeCent( centity_t *cent );"), String("extern cvar_t\t*debug_subdivision;"), String(""), String("/*"), String("======================"), String("CG_PositionEntityOnTag"), String(""), String("Modifies the entities position and axis by the given"), String("tag location"), String("======================"), String("*/"), String("void CG_PositionEntityOnTag( refEntity_t *entity, const refEntity_t *parent, "), String("\t\t\t\t\t\t\tqhandle_t parentModel, char *tagName ) {"), String("\tint\t\t\t\ti;"), String("\torientation_t\tlerped;"), String("\t"), String("\t// lerp the tag"), String("\tcgi_R_LerpTag( &lerped, parentModel, parent->oldframe, parent->frame,"), String("\t\t1.0f - parent->backlerp, tagName );"), String(""), String("\t// FIXME: allow origin offsets along tag?"), String("\tVectorCopy( parent->origin, entity->origin );"), String("\tfor ( i = 0 ; i < 3 ; i++ ) "), String("\t{"), String("\t\tVectorMA( entity->origin, lerped.origin[i], parent->axis[i], entity->origin );"), String("\t}"), String(""), String("\t// had to cast away the const to avoid compiler problems..."), String("\tMatrixMultiply( lerped.axis, ((refEntity_t *)parent)->axis, entity->axis );"), String("\tentity->backlerp = parent->backlerp;"), String("}"), String(""), String("/*"), String("======================"), String("CG_PositionRotatedEntityOnTag"), String(""), String("Modifies the entities position and axis by the given"), String("tag location"), String("======================"), String("*/"), String("void CG_PositionRotatedEntityOnTag( refEntity_t *entity, const refEntity_t *parent, "), String("\t\t\t\t\t\t\tqhandle_t parentModel, char *tagName, orientation_t *tagOrient ) {"), String("\tint\t\t\t\ti;"), String("\torientation_t\tlerped;"), String("\tvec3_t\t\t\ttempAxis[3];"), String(""), String("\t// lerp the tag"), String("\tcgi_R_LerpTag( &lerped, parentModel, parent->oldframe, parent->frame,"), String("\t\t1.0f - parent->backlerp, tagName );"), String(""), String("\tif ( tagOrient )"), String("\t{"), String("\t\tVectorCopy( lerped.origin, tagOrient->origin );"), String("\t\tfor ( i = 0 ; i < 3 ; i++ ) "), String("\t\t{"), String("\t\t\tVectorCopy( lerped.axis[i], tagOrient->axis[i] );"), String("\t\t}"), String("\t}"), String(""), String("\t// FIXME: allow origin offsets along tag?"), String("\tVectorCopy( parent->origin, entity->origin );"), String("\tfor ( i = 0 ; i < 3 ; i++ ) {"), String("\t\tVectorMA( entity->origin, lerped.origin[i], parent->axis[i], entity->origin );"), String("\t}"), String(""), String("\tMatrixMultiply( entity->axis, lerped.axis, tempAxis );"), String("\tMatrixMultiply( tempAxis, ((refEntity_t *)parent)->axis, entity->axis );"), String("}"), String(""), String(""), String(""), String("/*"), String("=========================================================================="), String(""), String("FUNCTIONS CALLED EACH FRAME"), String(""), String("=========================================================================="), String("*/"), String(""), String("/*"), String("======================"), String("CG_SetEntitySoundPosition"), String(""), String("Also called by event processing code"), String("======================"), String("*/"), String("vec3_t *CG_SetEntitySoundPosition( centity_t *cent ) {"), String("\tstatic vec3_t v3Return;"), String("\tif ( cent->currentState.solid == SOLID_BMODEL ) {"), String("\t\tvec3_t\torigin;"), String("\t\tfloat\t*v;"), String(""), String("\t\tv = cgs.inlineModelMidpoints[ cent->currentState.modelindex ];"), String("\t\tVectorAdd( cent->lerpOrigin, v, origin );"), String("\t\tcgi_S_UpdateEntityPosition( cent->currentState.number, origin );"), String("\t\tVectorCopy(origin, v3Return);"), String("\t} else {"), String("\t\tif ( cent->currentState.eType == ET_PLAYER"), String("\t\t\t&& cent->gent"), String("\t\t\t&& cent->gent->client"), String("\t\t\t&& cent->gent->ghoul2.IsValid() "), String("\t\t\t&& cent->gent->ghoul2[0].animModelIndexOffset )//If it has an animOffset it\'s a cinematic anim"), String("\t\t{//I might be running out of my bounding box, so use my headPoint from the last render frame...?"), String("\t\t\t//NOTE: if I\'m not rendered, will this not update correctly?  Would cent->lerpOrigin be any more updated?"), String("\t\t\tVectorCopy(cent->gent->client->renderInfo.eyePoint, v3Return);"), String("\t\t}"), String("\t\telse"), String("\t\t{//just use my org"), String("\t\t\tVectorCopy(cent->lerpOrigin, v3Return);"), String("\t\t}"), String("\t\tcgi_S_UpdateEntityPosition( cent->currentState.number, v3Return );"), String("\t}"), String(""), String("\treturn &v3Return;"), String("}"), String(""), String("/*"), String("=================="), String("CG_EntityEffects"), String(""), String("Add continuous entity effects, like local entity emission and lighting"), String("=================="), String("*/"), String("static void CG_EntityEffects( centity_t *cent ) {"), String(""), String("\t// update sound origins"), String("\tvec3_t v3Origin;"), String("\tVectorCopy(*CG_SetEntitySoundPosition( cent ),v3Origin);"), String(""), String("\t// add loop sound"), String("\tif ( cent->currentState.loopSound ) "), String("\t{"), String("\t\tsoundChannel_t chan = CHAN_AUTO;"), String(""), String("\t\tgentity_t *ent = cent->gent;"), String(""), String("\t\tif ( ent->s.eFlags & EF_LESS_ATTEN )"), String("\t\t{"), String("\t\t\tchan = CHAN_LESS_ATTEN;"), String("\t\t}"), String("\t\t"), String("\t\tsfxHandle_t\tsfx = ( cent->currentState.eType == ET_MOVER ) ? cent->currentState.loopSound : cgs.sound_precache[ cent->currentState.loopSound ];"), String(""), String("\t\t// Only play sound if being drawn."), String("\t\tif ( !( ent->s.eFlags & EF_NODRAW ) )"), String("\t\t{"), String("\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, v3Origin/*cent->lerpOrigin*/, vec3_origin, sfx, chan );"), String("\t\t}"), String("\t}"), String(""), String("\t// constant light glow"), String("\tif ( cent->currentState.constantLight ) {"), String("\t\tint\t\tcl;"), String("\t\tint\t\ti, r, g, b;"), String(""), String("\t\tcl = cent->currentState.constantLight;"), String("\t\tr = cl & 255;"), String("\t\tg = ( cl >> 8 ) & 255;"), String("\t\tb = ( cl >> 16 ) & 255;"), String("\t\ti = ( ( cl >> 24 ) & 255 ) * 4;"), String("\t\tcgi_R_AddLightToScene( cent->lerpOrigin, (float)i, (float)r, (float)g, (float)b );"), String("\t}"), String("}"), String(""), String("void CG_AddRefEntWithTransportEffect ( centity_t *cent, refEntity_t *ent )"), String("{"), String("\t// We are a normal thing...."), String("\tcgi_R_AddRefEntityToScene (ent);"), String(""), String("\tif ( ent->renderfx & RF_PULSATE && cent->gent->owner && cent->gent->owner->health &&"), String("\t\t!cent->gent->owner->s.number && cent->gent->owner->client && //only for player"), String("\t\t\tcent->gent->owner->client->ps.saberEntityState == SES_RETURNING && "), String("\t\t\tcent->currentState.saberActive == qfalse )"), String("\t{"), String("\t\t// if we are the saber and we have been dropped, do a glow so it can be spotted easier"), String("\t\tfloat\twv;"), String("\t\tvec3_t\torg;"), String(""), String("\t\tent->customShader = cgi_R_RegisterShader( \"gfx/effects/solidWhite_cull\" );"), String("\t\tent->renderfx = RF_RGB_TINT;"), String("\t\twv = sin( cg.time * 0.003f ) * 0.08f + 0.1f;"), String("\t\tent->shaderRGBA[0] = wv * 255;"), String("\t\tent->shaderRGBA[1] = wv * 255;"), String("\t\tent->shaderRGBA[2] = wv * 0;"), String("\t\tcgi_R_AddRefEntityToScene (ent);"), String(""), String("\t\tfor ( int i = -4; i < 10; i += 1 )"), String("\t\t{"), String("\t\t\tVectorMA( ent->origin, -i, ent->axis[2], org );"), String(""), String("\t\t\tFX_AddSprite( org, NULL, NULL, 5.5f, 5.5f, wv, wv, 0.0f, 0.0f, 1.0f, cgs.media.yellowDroppedSaberShader, 0x08000000 );"), String("\t\t}"), String("\t\tif ( cent->gent->owner->s.weapon == WP_SABER )"), String("\t\t{//he\'s still controlling me"), String("\t\t\tFX_AddSprite( cent->gent->owner->client->renderInfo.handRPoint, NULL, NULL, 8.0f, 8.0f, wv, wv, 0.0f, 0.0f, 1.0f, cgs.media.yellowDroppedSaberShader, 0x08000000 );"), String("\t\t}"), String("\t}"), String("}"), String(""), String(""), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String(""), String("// Copy the ghoul2 data into the ref ent correctly"), String("void CG_SetGhoul2Info( refEntity_t *ent, centity_t *cent)"), String("{"), String("\tent->ghoul2 = &cent->gent->ghoul2;"), String("\tVectorCopy( cent->currentState.modelScale, ent->modelScale);"), String("\tent->radius = cent->currentState.radius;"), String("\tVectorCopy (cent->lerpAngles, ent->angles);"), String("}"), String(""), String(""), String("// write in the axis and stuff"), String("void G2_BoltToGhoul2Model(centity_t *cent, refEntity_t *ent)"), String("{"), String("\t\t// extract the wraith ID from the bolt info"), String("\tint modelNum = cent->currentState.boltInfo >> MODEL_SHIFT;"), String("\tmodelNum &= MODEL_AND;"), String("\tint boltNum\t= cent->currentState.boltInfo >> BOLT_SHIFT;"), String("\tboltNum &= BOLT_AND;"), String("\tint\tentNum = cent->currentState.boltInfo >> ENTITY_SHIFT;"), String("\tentNum &= ENTITY_AND;"), String(""), String(" \tmdxaBone_t \t\tboltMatrix;"), String(""), String(" \t// go away and get me the bolt position for this frame please"), String(" \tgi.G2API_GetBoltMatrix(cent->gent->ghoul2, modelNum, boltNum, &boltMatrix, cg_entities[entNum].currentState.angles, cg_entities[entNum].currentState.origin, cg.time, cgs.model_draw, cent->currentState.modelScale);"), String(""), String("\t// set up the axis and origin we need for the actual effect spawning"), String(" \tent->origin[0] = boltMatrix.matrix[0][3];"), String(" \tent->origin[1] = boltMatrix.matrix[1][3];"), String(" \tent->origin[2] = boltMatrix.matrix[2][3];"), String(""), String(" \tent->axis[0][0] = boltMatrix.matrix[0][0];"), String(" \tent->axis[0][1] = boltMatrix.matrix[1][0];"), String(" \tent->axis[0][2] = boltMatrix.matrix[2][0];"), String(""), String(" \tent->axis[1][0] = boltMatrix.matrix[0][1];"), String(" \tent->axis[1][1] = boltMatrix.matrix[1][1];"), String(" \tent->axis[1][2] = boltMatrix.matrix[2][1];"), String(""), String(" \tent->axis[2][0] = boltMatrix.matrix[0][2];"), String(" \tent->axis[2][1] = boltMatrix.matrix[1][2];"), String(" \tent->axis[2][2] = boltMatrix.matrix[2][2];"), String("}"), String(""), String("void ScaleModelAxis(refEntity_t\t*ent)"), String(""), String("{\t\t// scale the model should we need to"), String("\t\tif (ent->modelScale[0] && ent->modelScale[0] != 1.0f)"), String("\t\t{"), String("\t\t\tVectorScale( ent->axis[0], ent->modelScale[0] , ent->axis[0] );"), String("\t\t\tent->nonNormalizedAxes = qtrue;"), String("\t\t}"), String("\t\tif (ent->modelScale[1] && ent->modelScale[1] != 1.0f)"), String("\t\t{"), String("\t\t\tVectorScale( ent->axis[1], ent->modelScale[1] , ent->axis[1] );"), String("\t\t\tent->nonNormalizedAxes = qtrue;"), String("\t\t}"), String("\t\tif (ent->modelScale[2] && ent->modelScale[2] != 1.0f)"), String("\t\t{"), String("\t\t\tVectorScale( ent->axis[2], ent->modelScale[2] , ent->axis[2] );"), String("\t\t\tent->nonNormalizedAxes = qtrue;"), String("\t\t}"), String("}"), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("/*"), String("=================="), String("CG_General"), String("=================="), String("*/"), String("static void CG_General( centity_t *cent ) "), String("{"), String("\trefEntity_t\t\t\tent;"), String("\tentityState_t\t\t*s1;"), String(""), String("\ts1 = &cent->currentState;"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String(""), String("\t// if set to invisible, skip"), String("\tif (!s1->modelindex && !cent->gent->ghoul2.IsValid() ) {"), String("\t\treturn;"), String("\t}"), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("\tif ( s1->eFlags & EF_NODRAW )"), String("\t{"), String("\t\t// If you don\'t like it doing NODRAW, then don\'t set the flag"), String("\t\treturn;"), String("\t}"), String(""), String("\tmemset (&ent, 0, sizeof(ent));"), String(""), String("\t// set frame"), String(""), String("\tif ( cent->currentState.eFlags & EF_DISABLE_SHADER_ANIM )"), String("\t{"), String("\t\t// by setting the shader time to the current time, we can force an animating shader to not animate"), String("\t\tent.shaderTime = cg.time * 0.001f;"), String("\t}"), String(""), String("\tif ( s1->eFlags & EF_SHADER_ANIM )"), String("\t{"), String("\t\t// Deliberately setting it up so that shader anim will completely override any kind of model animation frame setting."), String("\t\tent.renderfx|=RF_SETANIMINDEX;"), String("\t\tent.skinNum = s1->frame;"), String("\t}"), String("\telse if ( s1->eFlags & EF_ANIM_ONCE )"), String("\t{"), String("\t\t//s1->frame++;"), String("\t\t//ent.frame = s1->frame;"), String("\t\tent.frame = cent->gent->s.frame;"), String("\t\tent.renderfx|=RF_CAP_FRAMES;"), String("\t}"), String("\telse if ( s1->eFlags & EF_ANIM_ALLFAST )"), String("\t{"), String("\t\tent.frame = (cg.time / 100);"), String("\t\tent.renderfx|=RF_WRAP_FRAMES;"), String("\t}"), String("\telse"), String("\t{"), String("\t\tent.frame = s1->frame;"), String("\t}"), String("\tent.oldframe = ent.frame;"), String("\tent.backlerp = 0;"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("\tCG_SetGhoul2Info(&ent, cent);"), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("\tVectorCopy( cent->lerpOrigin, ent.origin);"), String("\tVectorCopy( cent->lerpOrigin, ent.oldorigin);"), String(""), String("\tent.hModel = cgs.model_draw[s1->modelindex];"), String(""), String("\tif ( !ent.radius )"), String("\t{// Set default g2 cull radius."), String("\t\tent.radius = 60;"), String("\t}"), String(""), String("\tif ( s1->eFlags & EF_AUTO_SIZE && cent->gent )"), String("\t{"), String("\t\tcgi_R_ModelBounds( ent.hModel, cent->gent->mins, cent->gent->maxs );"), String("\t\t//Only do this once"), String("\t\tcent->gent->s.eFlags &= ~EF_AUTO_SIZE;"), String("\t}"), String(""), String("\t// player model"), String("\tif (s1->number == cg.snap->ps.clientNum) "), String("\t{"), String("\t\tent.renderfx |= RF_THIRD_PERSON;\t// only draw from mirrors"), String("\t}"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("\t// are we bolted to a Ghoul2 model?"), String("\tif (s1->boltInfo)"), String("\t{"), String("\t\tG2_BoltToGhoul2Model(cent, &ent);"), String("\t}"), String("\telse"), String("\t{"), String("\t\t//-------------------------------------------------------"), String("\t\t// Start of chair"), String("\t\t//-------------------------------------------------------"), String("\t\tif ( cent->gent->s.weapon == WP_EMPLACED_GUN || ( cent->gent->activator && cent->gent->activator->owner && "), String("\t\t\t\tcent->gent->activator->s.eFlags & EF_LOCKED_TO_WEAPON ))"), String("\t\t{"), String("\t\t\tvec3_t\ttemp;"), String(""), String("\t\t\tif ( cent->gent->health <= 0 && cent->gent->e_ThinkFunc == thinkF_NULL )"), String("\t\t\t{"), String("\t\t\t\tif ( !cent->gent->bounceCount )"), String("\t\t\t\t{//not an EWeb"), String("\t\t\t\t\tent.customShader = cgi_R_RegisterShader( \"models/map_objects/imp_mine/turret_chair_dmg\" );"), String("\t\t\t\t}"), String(""), String("\t\t\t\tVectorSet( temp, 0, 0, 1 );"), String(""), String("\t\t\t\t// add a big scorch mark under the gun"), String("\t\t\t\tCG_ImpactMark( cgs.media.scavMarkShader, cent->lerpOrigin, temp, "), String("\t\t\t\t\t0, 1,1,1, 1.0f, qfalse, 92, qtrue );"), String("\t\t\t\tCG_ImpactMark( cgs.media.scavMarkShader, cent->lerpOrigin, temp, "), String("\t\t\t\t\t90, 1,1,1, 1.0f, qfalse, 48, qtrue );"), String("\t\t\t}"), String("\t\t\telse"), String("\t\t\t{"), String("\t\t\t\tVectorSet( temp, 0, 0, 1 );"), String(""), String("\t\t\t\tif ( !( cent->gent->svFlags & SVF_INACTIVE ))"), String("\t\t\t\t{"), String("\t\t\t\t\tif ( !cent->gent->bounceCount )"), String("\t\t\t\t\t{//not an EWeb"), String("\t\t\t\t\t\tent.customShader = cgi_R_RegisterShader( \"models/map_objects/imp_mine/turret_chair_on\" );"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String(""), String("\t\t\t\t// shadow under the gun"), String("\t\t\t\tCG_ImpactMark( cgs.media.shadowMarkShader, cent->lerpOrigin, temp, "), String("\t\t\t\t\t0, 1,1,1, 1.0f, qfalse, 32, qtrue );"), String("\t\t\t}"), String("\t\t}"), String(""), String("\t\tif ( cent->gent->activator && cent->gent->activator->owner && "), String("\t\t\t\tcent->gent->activator->s.eFlags & EF_LOCKED_TO_WEAPON && "), String("\t\t\t\tcent->gent->activator->owner->s.number == cent->currentState.number ) // gun number must be same as current entities number"), String("\t\t{"), String("\t\t\tcentity_t *cc = &cg_entities[cent->gent->activator->s.number];"), String(""), String("const weaponData_t  *wData = NULL;"), String(""), String("\t\t\tif ( cc->currentState.weapon )"), String("\t\t\t{"), String("\t\t\t\twData = &weaponData[cc->currentState.weapon];"), String("\t\t\t}"), String(""), String("\t\t\tif ( !( cc->currentState.eFlags & EF_FIRING ) && !( cc->currentState.eFlags & EF_ALT_FIRING ))"), String("\t\t\t{"), String("\t\t\t\t// not animating..pausing was leaving the barrels in a bad state"), String("\t\t\t\tgi.G2API_PauseBoneAnim( &cent->gent->ghoul2[cent->gent->playerModel], \"model_root\", cg.time );"), String(""), String("//\t\t\t\tgi.G2API_SetBoneAnimIndex( &cent->gent->ghoul2[cent->gent->playerModel], cent->gent->rootBone, "), String("//\t\t\t\t\t\t0, 0, BONE_ANIM_OVERRIDE, 1.0f, cg.time );"), String("\t\t\t}"), String(""), String("\t\t\t// get alternating muzzle end bolts"), String("\t\t\tint\t\t\tbolt = cent->gent->handRBolt;"), String("\t\t\tmdxaBone_t\tboltMatrix;"), String(""), String("\t\t\tif ( !cc->gent->fxID || bolt == -1 )"), String("\t\t\t{"), String("\t\t\t\tbolt = cent->gent->handLBolt;"), String("\t\t\t}"), String(""), String("\t\t\tif ( bolt == -1 )"), String("\t\t\t{"), String("\t\t\t\tbolt = 0;"), String("\t\t\t}"), String("\t\t\tgi.G2API_GetBoltMatrix( cent->gent->ghoul2, 0, bolt, "), String("\t\t\t\t&boltMatrix, cent->lerpAngles, cent->lerpOrigin, cg.time,"), String("\t\t\t\tcgs.model_draw, cent->currentState.modelScale );"), String(""), String("\t\t\t// store the muzzle point and direction so that we can fire in the right direction"), String("\t\t\tgi.G2API_GiveMeVectorFromMatrix( boltMatrix, ORIGIN, cc->gent->client->renderInfo.muzzlePoint );"), String("\t\t\tif ( cent->gent->bounceCount )"), String("\t\t\t{//EWeb - *sigh* the muzzle tag on this is not aligned like th eone on the emplaced gun... consistency anyone...?"), String("\t\t\t\tgi.G2API_GiveMeVectorFromMatrix( boltMatrix, NEGATIVE_X, cc->gent->client->renderInfo.muzzleDir );"), String("\t\t\t}"), String("\t\t\telse"), String("\t\t\t{//Emplaced gun"), String("\t\t\t\tgi.G2API_GiveMeVectorFromMatrix( boltMatrix, POSITIVE_Y, cc->gent->client->renderInfo.muzzleDir );"), String("\t\t\t}"), String("\t\t\tcc->gent->client->renderInfo.mPCalcTime = cg.time;"), String(""), String("\t\t\t// HACK: adding in muzzle flashes"), String("\t\t\tif ( cc->muzzleFlashTime > 0 && wData )"), String("\t\t\t{"), String("\t\t\t\tconst char *effect = NULL;"), String("\t\t\t\tcc->muzzleFlashTime = 0;"), String(""), String("\t\t\t\t// Try and get a default muzzle so we have one to fall back on"), String("\t\t\t\tif ( wData->mMuzzleEffect[0] )"), String("\t\t\t\t{"), String("\t\t\t\t\teffect = &wData->mMuzzleEffect[0];"), String("\t\t\t\t}"), String(""), String("\t\t\t\tif ( cc->currentState.eFlags & EF_ALT_FIRING )"), String("\t\t\t\t{"), String("\t\t\t\t\t// We\'re alt-firing, so see if we need to override with a custom alt-fire effect"), String("\t\t\t\t\tif ( wData->mAltMuzzleEffect[0] )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\teffect = &wData->mAltMuzzleEffect[0];"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String(""), String("\t\t\t\tif ( cc->currentState.eFlags & EF_FIRING || cc->currentState.eFlags & EF_ALT_FIRING )"), String("\t\t\t\t{"), String("\t\t\t\t\tif ( cent->gent->bounceCount )"), String("\t\t\t\t\t{//EWeb"), String("\t\t\t\t\t\tgi.G2API_SetBoneAnimIndex( &cent->gent->ghoul2[cent->gent->playerModel], cent->gent->rootBone, "), String("\t\t\t\t\t\t\t2, 4, BONE_ANIM_OVERRIDE_FREEZE, 0.6f, cg.time, -1, -1 );"), String("\t\t\t\t\t}"), String("\t\t\t\t\telse"), String("\t\t\t\t\t{//Emplaced Gun"), String("\t\t\t\t\t\tgi.G2API_SetBoneAnimIndex( &cent->gent->ghoul2[cent->gent->playerModel], cent->gent->rootBone, "), String("\t\t\t\t\t\t\t0, 3, BONE_ANIM_OVERRIDE_FREEZE, 0.6f, cg.time, -1, -1 );"), String("\t\t\t\t\t}"), String("\t\t"), String("\t\t\t\t\tif ( effect )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\t// We got an effect and we\'re firing, so let \'er rip."), String("\t\t\t\t\t\ttheFxScheduler.PlayEffect( effect, cc->gent->client->renderInfo.muzzlePoint, "), String("\t\t\t\t\t\t\t\t\t\t\t\t\tcc->gent->client->renderInfo.muzzleDir );"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String("\t\t\t}"), String(""), String("\t\t\tVectorCopy( cent->gent->s.apos.trBase, cent->lerpAngles );"), String("\t\t}"), String("\t\t//-------------------------------------------------------"), String("\t\t// End of chair"), String("\t\t//-------------------------------------------------------"), String(""), String("\t\tAnglesToAxis( cent->lerpAngles, ent.axis );"), String("\t}"), String(""), String("\t//copy modelscale, if any"), String("\tVectorCopy( cent->currentState.modelScale, ent.modelScale );"), String("\t//apply modelscale, if any"), String("\tScaleModelAxis(&ent);"), String(""), String("\tif (cent->gent->ghoul2.size())"), String("\t{"), String("\t\t//FIXME: use a flag for this, not a strcmp"), String("\t\tif ( cent->gent->classname && Q_stricmp( \"limb\", cent->gent->classname ) == 0 )"), String("\t\t{//limb, copy RGB"), String("\t\t\tent.shaderRGBA[0] = cent->gent->startRGBA[0];"), String("\t\t\tent.shaderRGBA[1] = cent->gent->startRGBA[1];"), String("\t\t\tent.shaderRGBA[2] = cent->gent->startRGBA[2];"), String("\t\t}"), String("\t\tif ( s1->weapon == WP_SABER && cent->gent && cent->gent->owner && cent->gent->owner->inuse )"), String("\t\t{//flying lightsaber"), String("\t\t\t//FIXME: better way to tell what it is would be nice"), String("\t\t\tif ( cent->gent->classname && !Q_stricmp( \"limb\", cent->gent->classname ) )"), String("\t\t\t{//limb, just add blade"), String("\t\t\t\tif ( cent->gent->owner->client )"), String("\t\t\t\t{"), String("\t\t\t\t\tif ( cent->gent->owner->client->ps.saber[0].Length() > 0 )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tCG_AddSaberBlade( &cg_entities[cent->gent->owner->s.number], "), String("\t\t\t\t\t\t\t&cg_entities[cent->gent->s.number], NULL, ent.renderfx, "), String("\t\t\t\t\t\t\tcent->gent->weaponModel[0], cent->lerpOrigin, cent->lerpAngles );"), String("\t\t\t\t\t}"), String("\t\t\t\t\telse if ( cent->gent->owner->client->ps.saberEventFlags & SEF_INWATER )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tCG_CheckSaberInWater( &cg_entities[cent->gent->owner->s.number], "), String("\t\t\t\t\t\t\t&cg_entities[cent->gent->s.number], 0, cent->gent->weaponModel[0], "), String("\t\t\t\t\t\t\tcent->lerpOrigin, cent->lerpAngles );"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String("\t\t\t}"), String("\t\t\telse"), String("\t\t\t{//thrown saber"), String("\t\t\t\t//light?  sound?"), String("\t\t\t\tif ( cent->gent->owner->client && g_entities[cent->currentState.otherEntityNum].client && g_entities[cent->currentState.otherEntityNum].client->ps.saber[0].Active() )"), String("\t\t\t\t{//saber is in-flight and active, play a sound on it"), String("\t\t\t\t\tif ( cent->gent->owner->client->ps.saberEntityState == SES_RETURNING "), String("\t\t\t\t\t\t&& cent->gent->owner->client->ps.saber[0].type != SABER_STAR )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, "), String("\t\t\t\t\t\t\tcent->lerpOrigin, vec3_origin, "), String("\t\t\t\t\t\t\tcgs.sound_precache[g_entities[cent->currentState.clientNum].client->ps.saber[0].soundLoop] );"), String("\t\t\t\t\t}"), String("\t\t\t\t\telse"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tint spinSound;"), String("\t\t\t\t\t\tif ( cent->gent->owner->client->ps.saber[0].spinSound "), String("\t\t\t\t\t\t\t&& cgs.sound_precache[cent->gent->owner->client->ps.saber[0].spinSound] )"), String("\t\t\t\t\t\t{"), String("\t\t\t\t\t\t\tspinSound = cgs.sound_precache[cent->gent->owner->client->ps.saber[0].spinSound];"), String("\t\t\t\t\t\t}"), String("\t\t\t\t\t\telse if ( cent->gent->owner->client->ps.saber[0].type == SABER_SITH_SWORD )"), String("\t\t\t\t\t\t{"), String("\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspinoff.wav\" );"), String("\t\t\t\t\t\t}"), String("\t\t\t\t\t\telse"), String("\t\t\t\t\t\t{"), String("\t\t\t\t\t\t\tswitch ( cent->gent->owner->client->ps.forcePowerLevel[FP_SABERTHROW] )"), String("\t\t\t\t\t\t\t{"), String("\t\t\t\t\t\t\tcase FORCE_LEVEL_1:"), String("\t\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin3.wav\" );"), String("\t\t\t\t\t\t\t\tbreak;"), String("\t\t\t\t\t\t\tcase FORCE_LEVEL_2:"), String("\t\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin2.wav\" );"), String("\t\t\t\t\t\t\t\tbreak;"), String("\t\t\t\t\t\t\tdefault:"), String("\t\t\t\t\t\t\tcase FORCE_LEVEL_3:"), String("\t\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin1.wav\" );"), String("\t\t\t\t\t\t\t\tbreak;"), String("\t\t\t\t\t\t\t}"), String("\t\t\t\t\t\t}"), String("\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, "), String("\t\t\t\t\t\t\tvec3_origin, spinSound );"), String("\t\t\t\t\t\t/*"), String("\t\t\t\t\t\tif ( cg_weapons[WP_SABER].missileSound )"), String("\t\t\t\t\t\t{"), String("\t\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, cg_weapons[WP_SABER].missileSound );"), String("\t\t\t\t\t\t}"), String("\t\t\t\t\t\t*/"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String("\t\t\t\tif ( cent->gent->owner->client )"), String("\t\t\t\t{"), String("\t\t\t\t\tif ( cent->gent->owner->client->ps.saber[0].Length() > 0 )"), String("\t\t\t\t\t{//only add the blade if it\'s on"), String("\t\t\t\t\t\tCG_AddSaberBlade( &cg_entities[cent->gent->owner->s.number], "), String("\t\t\t\t\t\t\t&cg_entities[cent->gent->s.number], NULL, ent.renderfx, "), String("\t\t\t\t\t\t\t0, cent->lerpOrigin, cent->lerpAngles );"), String("\t\t\t\t\t}"), String("\t\t\t\t\telse if ( cent->gent->owner->client->ps.saberEventFlags & SEF_INWATER )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tCG_CheckSaberInWater( &cg_entities[cent->gent->owner->s.number], "), String("\t\t\t\t\t\t\t&cg_entities[cent->gent->s.number], 0, 0, cent->lerpOrigin, "), String("\t\t\t\t\t\t\tcent->lerpAngles );"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String("\t\t\t\tif ( cent->gent->owner->health )"), String("\t\t\t\t{"), String("\t\t\t\t\t//make sure we can always be seen"), String("\t\t\t\t\tent.renderfx |= RF_PULSATE;"), String("\t\t\t\t}"), String("\t\t\t}"), String("\t\t}"), String("\t}"), String("\telse"), String("\t{"), String("\t\tif ( s1->weapon == WP_SABER && cent->gent && cent->gent->owner )"), String("\t\t{//flying lightsaber"), String("\t\t\t//light?  sound?"), String("\t\t\tif ( cent->gent->owner->client && cent->currentState.saberActive )"), String("\t\t\t{//saber is in-flight and active, play a sound on it"), String("\t\t\t\tif ( cent->gent->owner->client->ps.saberEntityState == SES_RETURNING "), String("\t\t\t\t\t&& cent->gent->owner->client->ps.saber[0].type != SABER_STAR )"), String("\t\t\t\t{"), String("\t\t\t\t\tif ( cg_weapons[WP_SABER].firingSound )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, "), String("\t\t\t\t\t\t\tcent->lerpOrigin, vec3_origin, cg_weapons[WP_SABER].firingSound );"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String("\t\t\t\telse"), String("\t\t\t\t{"), String("\t\t\t\t\tint spinSound;"), String("\t\t\t\t\tif ( cent->gent->owner->client->ps.saber[0].spinSound "), String("\t\t\t\t\t\t&& cgs.sound_precache[cent->gent->owner->client->ps.saber[0].spinSound] )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tspinSound = cgs.sound_precache[cent->gent->owner->client->ps.saber[0].spinSound];"), String("\t\t\t\t\t}"), String("\t\t\t\t\telse if ( cent->gent->owner->client->ps.saber[0].type == SABER_SITH_SWORD )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspinoff.wav\" );"), String("\t\t\t\t\t}"), String("\t\t\t\t\telse"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tswitch ( cent->gent->owner->client->ps.forcePowerLevel[FP_SABERTHROW] )"), String("\t\t\t\t\t\t{"), String("\t\t\t\t\t\tcase FORCE_LEVEL_1:"), String("\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin3.wav\" );"), String("\t\t\t\t\t\t\tbreak;"), String("\t\t\t\t\t\tcase FORCE_LEVEL_2:"), String("\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin2.wav\" );"), String("\t\t\t\t\t\t\tbreak;"), String("\t\t\t\t\t\tdefault:"), String("\t\t\t\t\t\tcase FORCE_LEVEL_3:"), String("\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin1.wav\" );"), String("\t\t\t\t\t\t\tbreak;"), String("\t\t\t\t\t\t}"), String("\t\t\t\t\t}"), String("\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, "), String("\t\t\t\t\t\tvec3_origin, spinSound );"), String("\t\t\t\t\t/*"), String("\t\t\t\t\tif ( cg_weapons[WP_SABER].missileSound )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, cg_weapons[WP_SABER].missileSound );"), String("\t\t\t\t\t}"), String("\t\t\t\t\t*/"), String("\t\t\t\t}"), String("\t\t\t}"), String("\t\t\tCG_AddSaberBlade( &cg_entities[cent->gent->owner->s.number], "), String("\t\t\t\tNULL, &ent, ent.renderfx, 0, NULL, NULL );"), String(""), String("\t\t\tif ( cent->gent->owner->health )"), String("\t\t\t{"), String("\t\t\t\t//make sure we can always be seen"), String("\t\t\t\tent.renderfx |= RF_PULSATE;"), String("\t\t\t}"), String("\t\t}"), String("\t}"), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("\tif ( cent->gent && cent->gent->forcePushTime > cg.time )"), String("\t{//FIXME: if I\'m a rather large model, this will look kind of stupid..."), String("\t\tCG_ForcePushBlur( cent->lerpOrigin );"), String("\t}"), String("\tCG_AddRefEntWithTransportEffect( cent, &ent );"), String(""), String("\tif ( cent->gent->health <= 0 "), String("\t\t&& cent->gent->s.weapon == WP_EMPLACED_GUN "), String("\t\t&& cent->gent->e_ThinkFunc )"), String("\t{"), String("\t\t// make the gun pulse red to warn about it exploding"), String("\t\tfloat val = (1.0f - (float)(cent->gent->nextthink - cg.time) / 3200.0f ) * 0.3f;"), String(""), String("\t\tent.customShader = cgi_R_RegisterShader( \"gfx/effects/solidWhite\" );"), String("\t\tent.shaderRGBA[0] = (sin( cg.time * 0.04f ) * val * 0.4f + val) * 255;"), String("\t\tent.shaderRGBA[1] = ent.shaderRGBA[2] = 0;"), String("\t\tent.renderfx |= RF_RGB_TINT;"), String("\t\tcgi_R_AddRefEntityToScene( &ent );"), String("\t}"), String(""), String("\t//--------------------------"), String("\tif ( s1->eFlags & EF_FIRING && cent->gent->inuse )"), String("\t{"), String("\t\t//special code for adding the beam to the attached tripwire mine"), String("\t\tvec3_t\t\t\tbeamOrg;"), String("\t\tint\t\t\t\thandle = 0;"), String("\t\tSEffectTemplate\t*temp;"), String(""), String("\t\tVectorMA( ent.origin, 6.6f, ent.axis[0], beamOrg );// forward"), String(""), String("\t\t// overriding the effect, so give us a copy first"), String("\t\ttemp = theFxScheduler.GetEffectCopy( \"tripMine/laser\", &handle );\t"), String(""), String("\t\tif ( temp )"), String("\t\t{"), String("\t\t\t// have a copy, so get the line element out of there"), String("\t\t\tCPrimitiveTemplate *prim = theFxScheduler.GetPrimitiveCopy( temp, \"line1\" );"), String(""), String("\t\t\tif ( prim )"), String("\t\t\t{"), String("\t\t\t\t// we have the primitive, so modify the endpoint"), String("\t\t\t\tprim->mOrigin2X.SetRange( cent->gent->pos4[0], cent->gent->pos4[0] );"), String("\t\t\t\tprim->mOrigin2Y.SetRange( cent->gent->pos4[1], cent->gent->pos4[1] );"), String("\t\t\t\tprim->mOrigin2Z.SetRange( cent->gent->pos4[2], cent->gent->pos4[2] );"), String(""), String("\t\t\t\t// have a copy, so get the line element out of there"), String("\t\t\t\tCPrimitiveTemplate *prim = theFxScheduler.GetPrimitiveCopy( temp, \"line2\" );"), String(""), String("\t\t\t\tif ( prim )"), String("\t\t\t\t{"), String("\t\t\t\t\t// we have the primitive, so modify the cent->gent->pos3point"), String("\t\t\t\t\tprim->mOrigin2X.SetRange( cent->gent->pos4[0], cent->gent->pos4[0] );"), String("\t\t\t\t\tprim->mOrigin2Y.SetRange( cent->gent->pos4[1], cent->gent->pos4[1] );"), String("\t\t\t\t\tprim->mOrigin2Z.SetRange( cent->gent->pos4[2], cent->gent->pos4[2] );"), String(""), String("\t\t\t\t\t// play the modified effect"), String("\t\t\t\t\ttheFxScheduler.PlayEffect( handle, beamOrg, ent.axis[0] );"), String("\t\t\t\t}"), String("\t\t\t}"), String("\t\t}"), String(""), String("\t\ttheFxScheduler.PlayEffect( \"tripMine/laserImpactGlow\", cent->gent->pos4, ent.axis[0] );"), String("\t}"), String(""), String(""), String("\tif ( s1->eFlags & EF_PROX_TRIP )"), String("\t{"), String("\t\t//special code for adding the glow end to proximity tripmine"), String("\t\tvec3_t\tbeamOrg;"), String(""), String("\t\tVectorMA( ent.origin, 6.6f, ent.axis[0], beamOrg );// forward"), String("\t\ttheFxScheduler.PlayEffect( \"tripMine/glowBit\", beamOrg, ent.axis[0] );"), String("\t}"), String(""), String("\tif ( s1->eFlags & EF_ALT_FIRING )"), String("\t{"), String("\t\t// hack for the spotlight"), String("\t\tvec3_t\torg, axis[3], dir;"), String(""), String("\t\tAngleVectors( cent->lerpAngles, dir, NULL, NULL );"), String(""), String("\t\tCG_GetTagWorldPosition( &ent, \"tag_flash\", org, axis );"), String(""), String("\t\ttheFxScheduler.PlayEffect( \"env/light_cone\", org, axis[0] );"), String(""), String("\t\tVectorMA( cent->lerpOrigin, cent->gent->radius - 5, dir, org ); // stay a bit back from the impact point...this may not be enough?"), String(""), String("\t\tcgi_R_AddLightToScene( org, 225, 1.0f, 1.0f, 1.0f );"), String("\t}"), String(""), String("\t//-----------------------------------------------------------"), String("\tif ( cent->gent->flags & (FL_DMG_BY_HEAVY_WEAP_ONLY | FL_SHIELDED ))"), String("\t{"), String("\t\t// Dumb assumption, but I guess we must be a shielded ion_cannon??  We should probably verify"), String("\t\t// if it\'s an ion_cannon that\'s Heavy Weapon only, we don\'t want to make it shielded do we...?"), String("\t\tif ( (!strcmp( \"misc_ion_cannon\", cent->gent->classname )) && (cent->gent->flags & FL_SHIELDED ))"), String("\t\t{"), String("\t\t\t// must be doing \"pain\"....er, impact"), String("\t\t\tif ( cent->gent->painDebounceTime > cg.time )"), String("\t\t\t{"), String("\t\t\t\tfloat t = (float)(cent->gent->painDebounceTime - cg.time ) / 1000.0f;"), String(""), String("\t\t\t\t// Only display when we have damage"), String("\t\t\t\tif ( t >= 0.0f && t <= 1.0f ) "), String("\t\t\t\t{"), String("\t\t\t\t\tt *= randomLava();"), String(""), String("\t\t\t\t\tent.shaderRGBA[0] = ent.shaderRGBA[1] = ent.shaderRGBA[2] = 255.0f * t;"), String("\t\t\t\t\tent.shaderRGBA[3] = 255;"), String("\t\t\t\t\tent.renderfx &= ~RF_ALPHA_FADE;"), String("\t\t\t\t\tent.renderfx |= RF_RGB_TINT;"), String("\t\t\t\t\tent.customShader = cgi_R_RegisterShader( \"gfx/misc/ion_shield\" );"), String("\t\t\t\t"), String("\t\t\t\t\tcgi_R_AddRefEntityToScene( &ent );"), String("\t\t\t\t}"), String("\t\t\t}"), String("\t\t}"), String("\t}"), String(""), String("\t//draw force sight shell around it, too"), String("\tif ((cg.snap->ps.forcePowersActive & (1 << FP_SEE)) "), String("\t\t&& cg.snap->ps.clientNum != cent->currentState.number "), String("\t\t&& CG_PlayerCanSeeCent( cent ) )"), String("\t{//so player can see dark missiles/explosives"), String("\t\tif ( s1->weapon == WP_THERMAL"), String("\t\t\t|| s1->weapon == WP_DET_PACK"), String("\t\t\t|| s1->weapon == WP_TRIP_MINE"), String("\t\t\t|| (cent->gent&&cent->gent->e_UseFunc==useF_ammo_power_converter_use)"), String("\t\t\t|| (cent->gent&&cent->gent->e_UseFunc==useF_shield_power_converter_use)"), String("\t\t\t|| (s1->eFlags&EF_FORCE_VISIBLE) )"), String("\t\t{//really, we only need to do this for things like thermals, detpacks and tripmines, no?"), String("\t\t\tCG_AddForceSightShell( &ent, cent );"), String("\t\t}"), String("\t}"), String("}"), String(""), String("/*"), String("=================="), String("CG_Speaker"), String(""), String("Speaker entities can automatically play sounds"), String("=================="), String("*/"), String("static void CG_Speaker( centity_t *cent ) {"), String("\tif ( ! cent->currentState.clientNum ) {\t// FIXME: use something other than clientNum..."), String("\t\treturn;\t\t// not auto triggering"), String("\t}"), String(""), String("\tif ( cg.time < cent->miscTime ) {"), String("\t\treturn;"), String("\t}"), String(""), String("\tcgi_S_StartSound (NULL, cent->currentState.number, CHAN_ITEM, cgs.sound_precache[cent->currentState.eventParm] );"), String(""), String("\t//\tent->s.frame = ent->wait * 10;"), String("\t//\tent->s.clientNum = ent->random * 10;"), String("\tcent->miscTime = (int)(cg.time + cent->currentState.frame * 100 + cent->currentState.clientNum * 100 * crandom());"), String("}"), String(""), String("/*"), String("=================="), String("CG_Item"), String("=================="), String("*/"), String("static void CG_Item( centity_t *cent ) "), String("{"), String("\trefEntity_t\t\t\tent;"), String("\tentityState_t\t\t*es;"), String("\tgitem_t\t\t\t\t*item;"), String("//\tint\t\t\t\t\tmsec;"), String("//\tfloat\t\t\t\tfrac;"), String("\tfloat\t\t\t\tscale;"), String(""), String("\tes = &cent->currentState;"), String("\tif ( es->modelindex >= bg_numItems ) "), String("\t{"), String("\t\tCG_Error( \"Bad item index %i on entity\", es->modelindex );"), String("\t}"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String(""), String("\t// if set to invisible, skip"), String("\tif ( (!es->modelindex && !cent->gent->ghoul2.IsValid() ) || ( es->eFlags & EF_NODRAW ) ) "), String("\t{"), String("\t\treturn;"), String("\t}"), String("/*"), String("Ghoul2 Insert End"), String("*/"), String("\tif ( cent->gent && !cent->gent->inuse )"), String("\t{"), String("\t\t// Yeah, I know....items were being freed on touch, but it could still get here and draw incorrectly..."), String("\t\treturn;"), String("\t}"), String(""), String("\titem = &bg_itemlist[ es->modelindex ];"), String(""), String("\tif ( cg_simpleItems.integer ) "), String("\t{"), String("\t\tmemset( &ent, 0, sizeof( ent ) );"), String("\t\tent.reType = RT_SPRITE;"), String("\t\tVectorCopy( cent->lerpOrigin, ent.origin );"), String("\t\tent.radius = 14;"), String("\t\tent.customShader = cg_items[es->modelindex].icon;"), String("\t\tent.shaderRGBA[0] = 255;"), String("\t\tent.shaderRGBA[1] = 255;"), String("\t\tent.shaderRGBA[2] = 255;"), String("\t\tent.shaderRGBA[3] = 255;"), String("\t\tcgi_R_AddRefEntityToScene(&ent);"), String("\t\treturn;"), String("\t}"), String(""), String("\tmemset (&ent, 0, sizeof(ent));"), String(""), String("\t// items bob up and down continuously"), String("\tif( item->giType == IT_HOLOCRON )"), String("\t{"), String("\t\tscale = 0.005f + cent->currentState.number * 0.00001f;"), String("\t\tcent->lerpOrigin[2] += (float)(4 + cos( ( cg.time + 1000 ) *  scale ) * 3)+8; // just raised them up a bit"), String("\t}"), String(""), String(""), String(""), String("\t// autorotate at one of two speeds"), String("//\tif ( item->giType == IT_HEALTH ) {"), String("//\t\tVectorCopy( cg.autoAnglesFast, cent->lerpAngles );"), String("//\t\tAxisCopy( cg.autoAxisFast, ent.axis );"), String("//\t} else {"), String("\tif( item->giType == IT_HOLOCRON )"), String("\t{"), String("\t\tVectorCopy( cg.autoAngles, cent->lerpAngles );"), String("\t\tAxisCopy( cg.autoAxis, ent.axis );"), String("\t}"), String(""), String(""), String("\t// the weapons have their origin where they attatch to player"), String("\t// models, so we need to offset them or they will rotate"), String("\t// eccentricly"), String("//\tif ( item->giType == IT_WEAPON ) {"), String("//\t\tweaponInfo_t\t*wi;"), String("//"), String("//\t\twi = &cg_weapons[item->giTag];"), String("//\t\tcent->lerpOrigin[0] -= "), String("//\t\t\twi->weaponMidpoint[0] * ent.axis[0][0] +"), String("//\t\t\twi->weaponMidpoint[1] * ent.axis[1][0] +"), String("//\t\t\twi->weaponMidpoint[2] * ent.axis[2][0];"), String("//\t\tcent->lerpOrigin[1] -= "), String("//\t\t\twi->weaponMidpoint[0] * ent.axis[0][1] +"), String("//\t\t\twi->weaponMidpoint[1] * ent.axis[1][1] +"), String("//\t\t\twi->weaponMidpoint[2] * ent.axis[2][1];"), String("//\t\tcent->lerpOrigin[2] -= "), String("//\t\t\twi->weaponMidpoint[0] * ent.axis[0][2] +"), String("//\t\t\twi->weaponMidpoint[1] * ent.axis[1][2] +"), String("//\t\t\twi->weaponMidpoint[2] * ent.axis[2][2];"), String(""), String("//\t\tcent->lerpOrigin[2] += 8;\t// an extra height boost"), String("//\t}"), String("\tvec3_t spinAngles;"), String(""), String("\t//AxisClear( ent.axis );"), String("\tVectorCopy( cent->gent->s.angles, spinAngles );"), String(""), String("\tif ( cent->gent->ghoul2.IsValid()"), String("\t\t&& cent->gent->ghoul2.size() )"), String("\t{//since modelindex is used by items as an index into items(not models), we need to ignore the hModel here to force it to use the ghoul2 model if we have one"), String("\t\tent.hModel = cgs.model_draw[0];"), String("\t}"), String("\telse"), String("\t{"), String("\t\tent.hModel = cg_items[es->modelindex].models;"), String("\t}"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("\tCG_SetGhoul2Info(&ent, cent);  "), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("\tVectorCopy( cent->lerpOrigin, ent.origin);"), String("\tVectorCopy( cent->lerpOrigin, ent.oldorigin);"), String(""), String("\tent.nonNormalizedAxes = qfalse;"), String(""), String("\t// lovely...this is for weapons that should be oriented vertically.  For weapons lockers and such."), String("\tif ( cent->gent->spawnflags & 16 )"), String("\t{\t//VectorClear( spinAngles );"), String("\t\tif ( item->giType == IT_WEAPON "), String("\t\t\t&& item->giTag == WP_SABER )"), String("\t\t{"), String("\t\t\tif ( cent->gent->random )"), String("\t\t\t{//pitch specified"), String("\t\t\t\tspinAngles[PITCH] += cent->gent->random;"), String("\t\t\t}"), String("\t\t\telse"), String("\t\t\t{"), String("\t\t\t\tspinAngles[PITCH] -= 20;"), String("\t\t\t}"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("\t\t\tspinAngles[PITCH] -= 75;"), String("\t\t}"), String("\t}"), String("\t"), String("\tif( item->giType != IT_HOLOCRON )"), String("\t{"), String("\t\tAnglesToAxis( spinAngles, ent.axis );"), String("\t}"), String(""), String("\t// items without glow textures need to keep a minimum light value"), String("\t// so they are always visible"), String("/*\tif (( item->giType == IT_WEAPON ) || ( item->giType == IT_ARMOR )) "), String("\t{"), String("\t\tent.renderfx |= RF_MINLIGHT;"), String("\t}"), String("*/"), String("\t// increase the size of the weapons when they are presented as items"), String("//\tif ( item->giType == IT_WEAPON ) {"), String("//\t\tVectorScale( ent.axis[0], 1.5f, ent.axis[0] );"), String("//\t\tVectorScale( ent.axis[1], 1.5f, ent.axis[1] );"), String("//\t\tVectorScale( ent.axis[2], 1.5f, ent.axis[2] );"), String("//\t\tent.nonNormalizedAxes = qtrue;"), String("//\t}"), String(""), String("\t// add to refresh list"), String("\tcgi_R_AddRefEntityToScene(&ent);"), String(""), String("\tif ((cg.snap->ps.forcePowersActive & (1 << FP_SEE)) "), String("\t\t&& cg.snap->ps.clientNum != cent->currentState.number "), String("\t\t&& CG_PlayerCanSeeCent( cent ) )"), String("\t{"), String("\t\tCG_AddForceSightShell( &ent, cent );"), String("\t}"), String(""), String("\tif ( item->giType == IT_WEAPON "), String("\t\t&& item->giTag == WP_SABER "), String("\t\t&& (!cent->gent || !(cent->gent->spawnflags&64/*ITMSF_NOGLOW*/)) )"), String("\t{"), String("\t\t// saber pickup item needs to be more visible"), String("\t\tfloat\twv;"), String("\t\tvec3_t\torg;"), String(""), String("\t\tent.customShader = cgi_R_RegisterShader( \"gfx/effects/solidWhite_cull\" );"), String("\t\tent.renderfx = RF_RGB_TINT;"), String("\t\twv = sin( cg.time * 0.002f ) * 0.08f + 0.2f;"), String("\t\tent.shaderRGBA[0] = ent.shaderRGBA[1] = wv * 255;"), String("\t\tent.shaderRGBA[2] = 0;"), String("\t\tcgi_R_AddRefEntityToScene(&ent);"), String(""), String("\t\tfor ( int i = -4; i < 10; i += 1 )"), String("\t\t{"), String("\t\t\tVectorMA( ent.origin, -i, ent.axis[2], org );"), String(""), String("\t\t\tFX_AddSprite( org, NULL, NULL, 10.0f, 10.0f, wv * 0.5f, wv * 0.5f, 0.0f, 0.0f, 1.0f, cgs.media.yellowDroppedSaberShader, 0x08000000 );"), String("\t\t}"), String(""), String("\t\t// THIS light looks crappy...maybe it should just be removed..."), String("\t\tcgi_R_AddLightToScene( ent.origin, wv * 350 + 180, 1.0f, 1.0f, 0.0f );"), String("\t}"), String("}"), String(""), String("//============================================================================"), String(""), String("/*"), String("==============="), String("CG_Missile"), String("==============="), String("*/"), String("static void CG_Missile( centity_t *cent ) {"), String("\trefEntity_t\t\t\tent;"), String("\tentityState_t\t\t*s1;"), String("\tconst weaponInfo_t\t*weapon;"), String("\tconst weaponData_t  *wData;"), String(""), String("\tif ( !cent->gent->inuse )"), String("\t\treturn;"), String(""), String("\ts1 = &cent->currentState;"), String("\tif ( s1->weapon >= WP_NUM_WEAPONS ) {"), String("\t\ts1->weapon = 0;"), String("\t}"), String("\tweapon = &cg_weapons[s1->weapon];"), String("\twData = &weaponData[s1->weapon];"), String(""), String("\tif ( s1->pos.trType != TR_INTERPOLATE )"), String("\t{"), String("\t\t// calculate the axis"), String("\t\tVectorCopy( s1->angles, cent->lerpAngles );"), String("\t}"), String(""), String("\tif ( cent->gent->alt_fire )"), String("\t{"), String("\t\t// add trails"), String("\t\tif ( weapon->alt_missileTrailFunc )  "), String("\t\t\tweapon->alt_missileTrailFunc( cent, weapon );"), String(""), String("\t\t// add dynamic light"), String("\t\tif ( wData->alt_missileDlight )"), String("\t\t\t\tcgi_R_AddLightToScene(cent->lerpOrigin, wData->alt_missileDlight, "), String("\t\t\t\t\twData->alt_missileDlightColor[0], wData->alt_missileDlightColor[1], wData->alt_missileDlightColor[2] );"), String(""), String("\t\t// add missile sound"), String("\t\tif ( weapon->alt_missileSound )"), String("\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->alt_missileSound );"), String(""), String("\t\t//Don\'t draw something without a model"), String("\t\tif ( weapon->alt_missileModel == NULL )"), String("\t\t\treturn;"), String("\t}"), String("\telse"), String("\t{"), String("\t\t// add trails"), String("\t\tif ( weapon->missileTrailFunc )  "), String("\t\t\tweapon->missileTrailFunc( cent, weapon );"), String(""), String("\t\t// add dynamic light"), String("\t\tif ( wData->missileDlight )"), String("\t\t\tcgi_R_AddLightToScene(cent->lerpOrigin, wData->missileDlight, "), String("\t\t\t\twData->missileDlightColor[0], wData->missileDlightColor[1], wData->missileDlightColor[2] );"), String(""), String("\t\t// add missile sound"), String("\t\tif ( weapon->missileSound )"), String("\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->missileSound );"), String(""), String("\t\t//Don\'t draw something without a model"), String("\t\tif ( weapon->missileModel == NULL )"), String("\t\t\treturn;"), String("\t}"), String(""), String("\t// create the render entity"), String("\tmemset (&ent, 0, sizeof(ent));"), String("\tVectorCopy( cent->lerpOrigin, ent.origin);"), String("\tVectorCopy( cent->lerpOrigin, ent.oldorigin);"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("\tCG_SetGhoul2Info(&ent, cent);  "), String(""), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("\t// flicker between two skins"), String("\tent.skinNum = cg.clientFrame & 1;"), String("\tent.renderfx = /*weapon->missileRenderfx | */RF_NOSHADOW;"), String(""), String("\tif ( cent->gent->alt_fire )"), String("\t\tent.hModel = weapon->alt_missileModel;"), String("\telse"), String("\t\tent.hModel = weapon->missileModel;"), String(""), String("\t// spin as it moves"), String("\tif ( s1->apos.trType != TR_INTERPOLATE)"), String("\t{"), String(""), String("\t\t// convert direction of travel into axis"), String("\t\tif ( VectorNormalize2( s1->pos.trDelta, ent.axis[0] ) == 0 ) {"), String("\t\t\tent.axis[0][2] = 1;"), String("\t\t}"), String("\t\tif ( s1->pos.trType != TR_STATIONARY )"), String("\t\t{"), String("\t\t\tif ( s1->eFlags & EF_MISSILE_STICK )"), String("\t\t\t\tRotateAroundDirection( ent.axis, cg.time * 0.5f );//Did this so regular missiles don\'t get broken"), String("\t\t\telse"), String("\t\t\t\tRotateAroundDirection( ent.axis, cg.time * 0.25f );//JFM:FLOAT FIX"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("\t\t\tif ( s1->eFlags & EF_MISSILE_STICK )"), String("\t\t\t\tRotateAroundDirection( ent.axis, (float)s1->pos.trTime * 0.5f );"), String("\t\t\telse"), String("\t\t\t\tRotateAroundDirection( ent.axis, (float)s1->time );"), String("\t\t}"), String("\t}"), String("\telse"), String("\t{"), String("\t\tAnglesToAxis( cent->lerpAngles, ent.axis );"), String("\t}"), String(""), String("\t// add to refresh list, possibly with quad glow"), String("\tCG_AddRefEntityWithPowerups( &ent, s1->powerups, NULL );"), String(""), String("\tif ((cg.snap->ps.forcePowersActive & (1 << FP_SEE)) "), String("\t\t&& cg.snap->ps.clientNum != cent->currentState.number "), String("\t\t&& CG_PlayerCanSeeCent( cent ) )"), String("\t{//so player can see dark missiles/explosives"), String("\t\tif ( s1->weapon == WP_THERMAL"), String("\t\t\t|| s1->weapon == WP_DET_PACK"), String("\t\t\t|| s1->weapon == WP_TRIP_MINE"), String("\t\t\t|| (s1->eFlags&EF_FORCE_VISIBLE) )"), String("\t\t{//really, we only need to do this for things like thermals, detpacks and tripmines, no?"), String("\t\t\tCG_AddForceSightShell( &ent, cent );"), String("\t\t}"), String("\t}"), String("}"), String(""), String("/*"), String("==============="), String("CG_Mover"), String("==============="), String("*/"), String(""), String("#define DOOR_OPENING\t1"), String("#define DOOR_CLOSING\t2"), String("#define DOOR_OPEN\t\t3"), String("#define DOOR_CLOSED\t\t4"), String(""), String("static void CG_Mover( centity_t *cent ) {"), String("\trefEntity_t\t\t\tent;"), String("\tentityState_t\t\t*s1;"), String(""), String("\ts1 = &cent->currentState;"), String(""), String("\t// create the render entity"), String("\tmemset (&ent, 0, sizeof(ent));"), String("\t//FIXME: why are these always 0, 0, 0???!"), String("\tVectorCopy( cent->lerpOrigin, ent.origin);"), String("\tVectorCopy( cent->lerpOrigin, ent.oldorigin);"), String("\tAnglesToAxis( cent->lerpAngles, ent.axis );"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String(""), String("\tCG_SetGhoul2Info(&ent, cent);  "), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("\tent.renderfx = RF_NOSHADOW;"), String(""), String("\t// flicker between two skins (FIXME?)"), String("\tent.skinNum = ( cg.time >> 6 ) & 1;"), String(""), String("\t// get the model, either as a bmodel or a modelindex"), String("\tif ( s1->solid == SOLID_BMODEL ) {"), String("\t\tent.hModel = cgs.inlineDrawModel[s1->modelindex];"), String("\t} else {"), String("\t\tent.hModel = cgs.model_draw[s1->modelindex];"), String("\t}"), String(""), String("\t// If there isn\'t an hModel for this mover, an RGB axis model will get drawn."), String("\tif ( !ent.hModel )"), String("\t{"), String("\t\treturn;"), String("\t}"), String(""), String("\tif ( cent->currentState.eFlags & EF_DISABLE_SHADER_ANIM )"), String("\t{"), String("\t\t// by setting the shader time to the current time, we can force an animating shader to not animate"), String("\t\tent.shaderTime = cg.time * 0.001f;"), String("\t}"), String(""), String("\t// add the secondary model"), String("\tif ( s1->solid == SOLID_BMODEL && s1->modelindex2 ) "), String("\t{"), String("//\t\tvec3_t\torg;"), String("\t\tif ( !(s1->eFlags & EF_NODRAW) )"), String("\t\t{"), String("\t\t\t// add to refresh list"), String("\t\t\tCG_AddRefEntWithTransportEffect( cent, &ent );"), String("\t\t}"), String(""), String("/*\t\t// Um, this does not interpolate nicely?  Not sure why it was here...."), String("\t\tVectorAdd(cent->gent->absmin, cent->gent->absmax, org);"), String("\t\tVectorScale(org, 0.5, org);"), String("\t\tVectorCopy( org, ent.origin);"), String("\t\tVectorCopy( org, ent.oldorigin);"), String("*/"), String("\t\tif ( !VectorCompare( vec3_origin, cent->gent->modelAngles ) )"), String("\t\t{//we have a rotational offset for the model for this brush"), String("\t\t\tvec3_t modelAngles;"), String("\t\t\tVectorAdd( cent->lerpAngles, cent->gent->modelAngles, modelAngles );"), String("\t\t\tAnglesToAxis( modelAngles, ent.axis );"), String("\t\t}"), String("\t\tent.hModel = cgs.model_draw[s1->modelindex2];"), String("\t}"), String(""), String("\t// I changed it to always do it because nodraw seemed like it should actually do what it says. Be aware that if you change this,"), String("\t//\tthe movers for the shooting gallery on doom_detention will break."), String("\tif ( (s1->eFlags & EF_NODRAW) )"), String("\t{"), String("\t\treturn;"), String("\t}"), String("\t//fall through and render the hModel or..."), String(""), String("\t//We\'re a normal model being moved, animate our model"), String("\tent.skinNum = 0;"), String("\tif ( s1->eFlags & EF_ANIM_ONCE )"), String("\t{//FIXME: needs to anim at once per 100 ms"), String("\t\tent.frame = cent->gent->s.frame;"), String("\t\tent.renderfx|=RF_CAP_FRAMES;"), String("\t}"), String("\telse if ( s1->eFlags & EF_ANIM_ALLFAST )"), String("\t{"), String("\t\tent.frame = (cg.time / 100);"), String("\t\tent.renderfx|=RF_WRAP_FRAMES;"), String("\t}"), String("\telse"), String("\t{"), String("\t\tent.frame = s1->frame;"), String("\t}"), String(""), String("\tif ( s1->eFlags & EF_SHADER_ANIM )"), String("\t{"), String("\t\tent.renderfx|=RF_SETANIMINDEX;"), String("\t\tent.skinNum = s1->frame;"), String("\t\t//ent.shaderTime = cg.time*0.001f - s1->frame/s1->time;//NOTE: s1->time is number of frames"), String("\t}"), String(""), String("\t// add to refresh list"), String("\tCG_AddRefEntWithTransportEffect( cent, &ent );"), String(""), String("\tif ((cg.snap->ps.forcePowersActive & (1 << FP_SEE)) "), String("\t\t&& cg.snap->ps.clientNum != cent->currentState.number "), String("\t\t&& (s1->eFlags&EF_FORCE_VISIBLE) )"), String("\t{//so player can see func_breakables"), String("\t\tCG_AddForceSightShell( &ent, cent );"), String("\t}"), String("}"), String(""), String("/*"), String("==============="), String("CG_Beam"), String(""), String("Also called as an event"), String("==============="), String("*/"), String("void CG_Beam( centity_t *cent, int color ) {"), String("\trefEntity_t\t\t\tent;"), String("\tentityState_t\t\t*s1;"), String(""), String("\ts1 = &cent->currentState;"), String(""), String("\t// create the render entity"), String("\tmemset (&ent, 0, sizeof(ent));"), String("\tVectorCopy( s1->pos.trBase, ent.origin );"), String("\tVectorCopy( s1->origin2, ent.oldorigin );"), String("\tAxisClear( ent.axis );"), String("\tent.reType = RT_BEAM;"), String("\tent.skinNum = color;"), String(""), String("\tent.renderfx = RF_NOSHADOW;"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("\tCG_SetGhoul2Info(&ent, cent);  "), String(""), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("\t// add to refresh list"), String("\tcgi_R_AddRefEntityToScene(&ent);"), String("}"), String(""), String("/*"), String("==============="), String("CG_Cylinder"), String("==============="), String("*/"), String("void CG_Cylinder( vec3_t start, vec3_t end, float radius, vec3_t color ) "), String("{"), String("\tvec3_t\tdir;"), String("\tfloat\tlength;"), String(""), String("\tVectorSubtract( end, start, dir );"), String("\tlength = VectorNormalize( dir );"), String(""), String("/*\tFX_AddCylinder( -1, start, "), String("\t\t\t\t\tdir, "), String("\t\t\t\t\tlength, "), String("\t\t\t\t\t0.0f, "), String("\t\t\t\t\tradius,"), String("\t\t\t\t\t0.0f,"), String("\t\t\t\t\tradius,"), String("\t\t\t\t\t0.0f,"), String("\t\t\t\t\t1.0f,"), String("\t\t\t\t\t1.0f,"), String("\t\t\t\t\tcolor,"), String("\t\t\t\t\tcolor,"), String("\t\t\t\t\t100.0f,"), String("\t\t\t\t\tcgs.media.waterDropShader"), String("\t\t\t\t\t0, -1, -1 );*/"), String("}"), String(""), String("static vec2_t st[] = "), String("{"), String("\t0.0f, 0.0f,"), String("\t1.0f, 0.0f,"), String("\t1.0f, 1.0f,"), String("\t0.0f, 1.0f"), String("};"), String(""), String("void CG_Cube( vec3_t mins, vec3_t maxs, vec3_t color, float alpha ) "), String("{"), String("\tvec3_t\tpoint[4], rot={0,0,0};"), String("\tvec2_t\tst[4];"), String("\tint\t\tvec[3];"), String("\tint\t\taxis, i;"), String(""), String("\tfor ( axis = 0, vec[0] = 0, vec[1] = 1, vec[2] = 2; axis < 3; axis++, vec[0]++, vec[1]++, vec[2]++ )"), String("\t{"), String("\t\tfor ( i = 0; i < 3; i++ )"), String("\t\t{"), String("\t\t\tif ( vec[i] > 2 )"), String("\t\t\t{"), String("\t\t\t\tvec[i] = 0;"), String("\t\t\t}"), String("\t\t}"), String(""), String("\t\tpoint[0][vec[1]] = mins[vec[1]];"), String("\t\tpoint[0][vec[2]] = mins[vec[2]];"), String(""), String("\t\tpoint[1][vec[1]] = mins[vec[1]];"), String("\t\tpoint[1][vec[2]] = maxs[vec[2]];"), String(""), String("\t\tpoint[2][vec[1]] = maxs[vec[1]];"), String("\t\tpoint[2][vec[2]] = maxs[vec[2]];"), String("\t\t"), String("\t\tpoint[3][vec[1]] = maxs[vec[1]];"), String("\t\tpoint[3][vec[2]] = mins[vec[2]];"), String(""), String("\t\t//- face"), String("\t\tpoint[0][vec[0]] = point[1][vec[0]] = point[2][vec[0]] = point[3][vec[0]] = mins[vec[0]];"), String(""), String("\t\tFX_AddPoly( point, st, 4, NULL, NULL, alpha, alpha, 0.0f, "), String("\t\t\t\t\t\tcolor, color, 0.0f, rot, 0.0f, 0.0f, "), String("\t\t\t\t\t\t100, cgs.media.solidWhiteShader, 0 );"), String(""), String("\t\t//+ face"), String("\t\tpoint[0][vec[0]] = point[1][vec[0]] = point[2][vec[0]] = point[3][vec[0]] = maxs[vec[0]];"), String(""), String("\t\tFX_AddPoly( point, st, 4, NULL, NULL, alpha, alpha, 0.0f, "), String("\t\t\t\t\t\tcolor, color, 0.0f, rot, 0.0f, 0.0f, "), String("\t\t\t\t\t\t100, cgs.media.solidWhiteShader, 0 );"), String("\t}"), String("}"), String(""), String("void CG_CubeOutline( vec3_t mins, vec3_t maxs, int time, unsigned int color, float alpha )"), String("{"), String("\tvec3_t\tpoint1, point2, point3, point4;"), String("\tint\t\tvec[3];"), String("\tint\t\taxis, i;"), String(""), String("\tfor ( axis = 0, vec[0] = 0, vec[1] = 1, vec[2] = 2; axis < 3; axis++, vec[0]++, vec[1]++, vec[2]++ )"), String("\t{"), String("\t\tfor ( i = 0; i < 3; i++ )"), String("\t\t{"), String("\t\t\tif ( vec[i] > 2 )"), String("\t\t\t{"), String("\t\t\t\tvec[i] = 0;"), String("\t\t\t}"), String("\t\t}"), String(""), String("\t\tpoint1[vec[1]] = mins[vec[1]];"), String("\t\tpoint1[vec[2]] = mins[vec[2]];"), String(""), String("\t\tpoint2[vec[1]] = mins[vec[1]];"), String("\t\tpoint2[vec[2]] = maxs[vec[2]];"), String(""), String("\t\tpoint3[vec[1]] = maxs[vec[1]];"), String("\t\tpoint3[vec[2]] = maxs[vec[2]];"), String("\t\t"), String("\t\tpoint4[vec[1]] = maxs[vec[1]];"), String("\t\tpoint4[vec[2]] = mins[vec[2]];"), String(""), String("\t\t//- face"), String("\t\tpoint1[vec[0]] = point2[vec[0]] = point3[vec[0]] = point4[vec[0]] = mins[vec[0]];"), String(""), String("\t\tCG_TestLine( point1, point2, time, color, 1 );"), String("\t\tCG_TestLine( point2, point3, time, color, 1 );"), String("\t\tCG_TestLine( point1, point4, time, color, 1 );"), String("\t\tCG_TestLine( point4, point3, time, color, 1 );"), String(""), String("\t\t//+ face"), String("\t\tpoint1[vec[0]] = point2[vec[0]] = point3[vec[0]] = point4[vec[0]] = maxs[vec[0]];"), String(""), String("\t\tCG_TestLine( point1, point2, time, color, 1 );"), String("\t\tCG_TestLine( point2, point3, time, color, 1 );"), String("\t\tCG_TestLine( point1, point4, time, color, 1 );"), String("\t\tCG_TestLine( point4, point1, time, color, 1 );"), String("\t}"), String("}"), String(""), String("void CG_Line( vec3_t start, vec3_t end, vec3_t color, float alpha ) "), String("{"), String("\t/*FX_AddLine( start,"), String("\t\t\t\tend,"), String("\t\t\t\t1.0f,"), String("\t\t\t\t1.0,"), String("\t\t\t\t1.0f,"), String("\t\t\t\talpha,"), String("\t\t\t\talpha,"), String("\t\t\t\tcolor, "), String("\t\t\t\tcolor, "), String("\t\t\t\t100.0f,"), String("\t\t\t\tcgs.media.whiteShader );*/"), String("}"), String(""), String("/*"), String("==============="), String("CG_Portal"), String("==============="), String("*/"), String("static void CG_Portal( centity_t *cent ) {"), String("\trefEntity_t\t\t\tent;"), String("\tentityState_t\t\t*s1;"), String(""), String("\ts1 = &cent->currentState;"), String(""), String("\t//FIXME: this tends to give a bad axis[1], perhaps we"), String("\t//should just do the VectorSubtraction here rather than"), String("\t//on the game side.  Would also allow camera to follow"), String("\t//a moving target."), String(""), String("\t// create the render entity"), String("\tmemset (&ent, 0, sizeof(ent));"), String("\tVectorCopy( cent->lerpOrigin, ent.origin );"), String("\tVectorCopy( s1->origin2, ent.oldorigin );"), String("\tByteToDir( s1->eventParm, ent.axis[0] );"), String("\tPerpendicularVector( ent.axis[1], ent.axis[0] );"), String(""), String("\t// negating this tends to get the directions like they want"), String("\t// we really should have a camera roll value"), String("\tVectorSubtract( vec3_origin, ent.axis[1], ent.axis[1] );"), String(""), String("\tCrossProduct( ent.axis[0], ent.axis[1], ent.axis[2] );"), String("\tent.reType = RT_PORTALSURFACE;"), String("\tent.frame = s1->frame;\t\t// rotation speed"), String("\tent.skinNum = (int)(s1->clientNum/256.0 * 360);\t// roll offset"), String(""), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("\tCG_SetGhoul2Info(&ent, cent);  "), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String(""), String("\t// add to refresh list"), String("\tcgi_R_AddRefEntityToScene(&ent);"), String("}"), String(""), String(""), String("/*"), String("========================="), String("CG_AdjustPositionForMover"), String(""), String("Also called by client movement prediction code"), String("========================="), String("*/"), String("void CG_AdjustPositionForMover( const vec3_t in, int moverNum, int atTime, vec3_t out ) {"), String("\tcentity_t\t*cent;"), String("\tvec3_t\toldOrigin, origin, deltaOrigin;"), String("//\tvec3_t\toldAngles, angles, deltaAngles;"), String(""), String("\tif ( moverNum <= 0 ) {"), String("\t\tVectorCopy( in, out );"), String("\t\treturn;"), String("\t}"), String(""), String("\tcent = &cg_entities[ moverNum ];"), String("\tif ( cent->currentState.eType != ET_MOVER ) {"), String("\t\tVectorCopy( in, out );"), String("\t\treturn;"), String("\t}"), String(""), String("\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, oldOrigin );"), String("//\tEvaluateTrajectory( &cent->currentState.apos, cg.snap->serverTime, oldAngles );"), String(""), String("\tEvaluateTrajectory( &cent->currentState.pos, atTime, origin );"), String("//\tEvaluateTrajectory( &cent->currentState.apos, atTime, angles );"), String(""), String("\tVectorSubtract( origin, oldOrigin, deltaOrigin );"), String("//\tVectorSubtract( angles, oldAngles, deltaAngles );"), String(""), String(""), String("\tVectorAdd( in, deltaOrigin, out );"), String(""), String("\t// FIXME: origin change when on a rotating object"), String("}"), String("/*"), String("==============="), String("CG_CalcEntityLerpPositions"), String(""), String("==============="), String("*/"), String("extern char\t*vtos( const vec3_t v );"), String("#if 1"), String("void CG_CalcEntityLerpPositions( centity_t *cent ) {"), String("\tif ( cent->gent && cent->gent->client && cent->gent->client->NPC_class == CLASS_VEHICLE && cent->nextState ) //cent->currentState.vehicleIndex != VEHICLE_NONE )"), String("\t{"), String("\t\tfloat\t\tf = cg.frameInterpolation;"), String(""), String("\t\tcent->currentState.vehicleAngles[0] = LerpAngle( cent->currentState.vehicleAngles[0], cent->nextState->vehicleAngles[0], f );"), String("\t\tcent->currentState.vehicleAngles[1] = LerpAngle( cent->currentState.vehicleAngles[1], cent->nextState->vehicleAngles[1], f );"), String("\t\tcent->currentState.vehicleAngles[2] = LerpAngle( cent->currentState.vehicleAngles[2], cent->nextState->vehicleAngles[2], f );"), String("\t}"), String(""), String("\tif ( cent->currentState.number == cg.snap->ps.clientNum)"), String("\t{"), String("\t\t// if the player, take position from prediction"), String("\t\tVectorCopy( cg.predicted_player_state.origin, cent->lerpOrigin );"), String("\t\tVectorCopy( cg.predicted_player_state.viewangles, cent->lerpAngles );"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("//\t\tLerpBoneAngleOverrides(cent);"), String("/*"), String("Ghoul2 Insert End"), String("*/"), String("\t\treturn;"), String("\t}"), String("\t"), String("\t//FIXME: prediction on clients in timescale results in jerky positional translation"), String("\tif ( cent->interpolate )"), String("\t{"), String("\t\t// if the entity has a valid next state, interpolate a value between the frames"), String("\t\t// unless it is a mover with a known start and stop"), String("\t\tvec3_t\t\tcurrent, next;"), String("\t\tfloat\t\tf;"), String(""), String("\t\t// it would be an internal error to find an entity that interpolates without"), String("\t\t// a snapshot ahead of the current one"), String("\t\tif ( cg.nextSnap == NULL ) {"), String("\t\t\tCG_Error( \"CG_AddCEntity: cg.nextSnap == NULL\" );"), String("\t\t}"), String(""), String("\t\tf = cg.frameInterpolation;"), String(""), String("\t\tif ( cent->currentState.apos.trType == TR_INTERPOLATE && cent->nextState )"), String("\t\t{"), String("\t\t\tEvaluateTrajectory( &cent->currentState.apos, cg.snap->serverTime, current );"), String("\t\t\tEvaluateTrajectory( &cent->nextState->apos, cg.nextSnap->serverTime, next );"), String(""), String("\t\t\tcent->lerpAngles[0] = LerpAngle( current[0], next[0], f );"), String("\t\t\tcent->lerpAngles[1] = LerpAngle( current[1], next[1], f );"), String("\t\t\tcent->lerpAngles[2] = LerpAngle( current[2], next[2], f );"), String(""), String("\t\t\t/*"), String("\t\t\tif(cent->gent && cent->currentState.clientNum != 0 && !VectorCompare(current, next))"), String("\t\t\t{"), String("\t\t\t\tCom_Printf(\"%s last/next/lerp apos %s/%s/%s, f = %4.2f\\n\", cent->gent->script_targetname, vtos(current), vtos(next), vtos(cent->lerpAngles), f);"), String("\t\t\t}"), String("\t\t\t*/"), String("\t/*"), String("\tGhoul2 Insert Start"), String("\t*/"), String("\t\t\t// now the nasty stuff - this will interpolate all ghoul2 models bone angle overrides per model attached to this cent"), String("\t\t\t/*"), String("\t\t\tif (cent->gent->ghoul2.size())"), String("\t\t\t{"), String("\t\t\t\tLerpBoneAngleOverrides(cent);"), String("\t\t\t}"), String("\t\t\t*/"), String("\t/*"), String("\tGhoul2 Insert End"), String("\t*/"), String("\t\t}"), String("\t\tif ( cent->currentState.pos.trType == TR_INTERPOLATE && cent->nextState ) "), String("\t\t{"), String("\t\t\t// this will linearize a sine or parabolic curve, but it is important"), String("\t\t\t// to not extrapolate player positions if more recent data is available"), String("\t\t\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, current );"), String("\t\t\tEvaluateTrajectory( &cent->nextState->pos, cg.nextSnap->serverTime, next );"), String(""), String("\t\t\tcent->lerpOrigin[0] = current[0] + f * ( next[0] - current[0] );"), String("\t\t\tcent->lerpOrigin[1] = current[1] + f * ( next[1] - current[1] );"), String("\t\t\tcent->lerpOrigin[2] = current[2] + f * ( next[2] - current[2] );"), String(""), String("\t\t\t/*"), String("\t\t\tif ( cent->gent && cent->currentState.clientNum != 0 )"), String("\t\t\t{"), String("\t\t\t\tCom_Printf(\"%s last/next/lerp pos %s/%s/%s, f = %4.2f\\n\", cent->gent->script_targetname, vtos(current), vtos(next), vtos(cent->lerpOrigin), f);"), String("\t\t\t}"), String("\t\t\t*/"), String("\t\t\treturn;//FIXME: should this be outside this if?"), String("\t\t}"), String("\t}"), String("\telse"), String("\t{"), String("\t\tif ( cent->currentState.apos.trType == TR_INTERPOLATE )"), String("\t\t{"), String("\t\t\tEvaluateTrajectory( &cent->currentState.apos, cg.snap->serverTime, cent->lerpAngles );"), String("\t\t}"), String("\t\tif ( cent->currentState.pos.trType == TR_INTERPOLATE ) "), String("\t\t{"), String("\t\t\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, cent->lerpOrigin );"), String("\t\t\t/*"), String("\t\t\tif(cent->gent && cent->currentState.clientNum != 0 )"), String("\t\t\t{"), String("\t\t\t\tCom_Printf(\"%s last/next/lerp pos %s, f = 1.0\\n\", cent->gent->script_targetname, vtos(cent->lerpOrigin) );"), String("\t\t\t}"), String("\t\t\t*/"), String("\t\t\treturn;"), String("\t\t}"), String("\t}"), String("\t"), String("\t// FIXME: if it\'s blocked, it wigs out, draws it in a predicted spot, but never"), String("\t// makes it there - we need to predict it in the right place if this is happens..."), String(""), String("\t// just use the current frame and evaluate as best we can"), String("\ttrajectory_t *posData = &cent->currentState.pos;"), String("\t{"), String("\t\tgentity_t *ent = &g_entities[cent->currentState.number];"), String(""), String("\t\tif ( ent && ent->inuse)"), String("\t\t{"), String("\t\t\tif ( ent->s.eFlags & EF_BLOCKED_MOVER || ent->s.pos.trType == TR_STATIONARY )"), String("\t\t\t{//this mover has stopped moving and is going to wig out if we predict it"), String("\t\t\t\t//based on last frame\'s info- cut across the network and use the currentOrigin"), String("\t\t\t\tVectorCopy( ent->currentOrigin, cent->lerpOrigin );"), String("\t\t\t\tposData = NULL;"), String("\t\t\t}"), String("\t\t\telse"), String("\t\t\t{"), String("\t\t\t\tposData = &ent->s.pos;"), String("\t\t\t}"), String("\t\t}"), String("\t}"), String(""), String("\tif ( posData )"), String("\t{"), String("\t\tEvaluateTrajectory( posData, cg.time, cent->lerpOrigin );"), String("\t}"), String(""), String("\t// FIXME: this will stomp an apos trType of TR_INTERPOLATE!!"), String("\tEvaluateTrajectory( &cent->currentState.apos, cg.time, cent->lerpAngles );"), String(""), String("\t// adjust for riding a mover"), String("\tCG_AdjustPositionForMover( cent->lerpOrigin, cent->currentState.groundEntityNum, cg.time, cent->lerpOrigin );"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("\t\t// now the nasty stuff - this will interpolate all ghoul2 models bone angle overrides per model attached to this cent"), String("\t/*"), String("\tif (cent->gent->ghoul2.size())"), String("\t{"), String("\t\tLerpBoneAngleOverrides(cent);"), String("\t}"), String("\t*/"), String("/*"), String("Ghoul2 Insert End"), String("*/"), String("\t// FIXME: perform general error decay?"), String("}"), String("#else"), String("void CG_CalcEntityLerpPositions( centity_t *cent ) "), String("{"), String("\tif ( cent->currentState.number == cg.snap->ps.clientNum)"), String("\t{"), String("\t\t// if the player, take position from prediction"), String("\t\tVectorCopy( cg.predicted_player_state.origin, cent->lerpOrigin );"), String("\t\tVectorCopy( cg.predicted_player_state.viewangles, cent->lerpAngles );"), String("OutputDebugString(va(\"b=(%6.2f,%6.2f,%6.2f)\\n\",cent->lerpOrigin[0],cent->lerpOrigin[1],cent->lerpOrigin[2]));"), String("\t\treturn;"), String("\t}"), String(""), String(""), String("if (cent->currentState.number != cg.snap->ps.clientNum&&cent->interpolate && cent->currentState.pos.trType == TR_INTERPOLATE)"), String("{"), String("\tif (cent->interpolate)"), String("\t{"), String("OutputDebugString(va(\"[%3d] interp %4.2f t=%6d  st = %6d  nst = %6d     b=%6.2f   nb=%6.2f\\n\","), String("\t\tcent->currentState.number,"), String("\t\tcg.frameInterpolation,"), String("\t\tcg.time,"), String("\t\tcg.snap->serverTime,"), String("\t\tcg.nextSnap->serverTime,"), String("\t\tcent->currentState.pos.trBase[0],"), String("\t\tcent->nextState.pos.trBase[0]));"), String("\t}"), String("\telse"), String("\t{"), String("OutputDebugString(va(\"[%3d] nonext %4.2f t=%6d  st = %6d  nst = %6d     b=%6.2f   nb=%6.2f\\n\","), String("\t\tcent->currentState.number,"), String("\t\tcg.frameInterpolation,"), String("\t\tcg.time,"), String("\t\tcg.snap->serverTime,"), String("\t\t0,"), String("\t\tcent->currentState.pos.trBase[0],"), String("\t\t0.0f));"), String("\t}"), String("}"), String(""), String("\t//FIXME: prediction on clients in timescale results in jerky positional translation"), String("\tif (cent->interpolate && "), String("\t\t(cent->currentState.number == cg.snap->ps.clientNum ||"), String("\t\tcent->interpolate && cent->currentState.pos.trType == TR_INTERPOLATE ) )"), String("\t{"), String("\t\tvec3_t\t\tcurrent, next;"), String("\t\tfloat\t\tf;"), String(""), String("\t\t// it would be an internal error to find an entity that interpolates without"), String("\t\t// a snapshot ahead of the current one"), String("\t\tif ( cg.nextSnap == NULL ) "), String("\t\t{"), String("\t\t\tCG_Error( \"CG_AddCEntity: cg.nextSnap == NULL\" );"), String("\t\t}"), String(""), String("\t\tf = cg.frameInterpolation;"), String(""), String("\t\tEvaluateTrajectory( &cent->currentState.apos, cg.snap->serverTime, current );"), String("\t\tEvaluateTrajectory( &cent->nextState.apos, cg.nextSnap->serverTime, next );"), String(""), String("\t\tcent->lerpAngles[0] = LerpAngle( current[0], next[0], f );"), String("\t\tcent->lerpAngles[1] = LerpAngle( current[1], next[1], f );"), String("\t\tcent->lerpAngles[2] = LerpAngle( current[2], next[2], f );"), String(""), String("\t\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, current );"), String("\t\tEvaluateTrajectory( &cent->nextState.pos, cg.nextSnap->serverTime, next );"), String(""), String("\t\tcent->lerpOrigin[0] = current[0] + f * ( next[0] - current[0] );"), String("\t\tcent->lerpOrigin[1] = current[1] + f * ( next[1] - current[1] );"), String("\t\tcent->lerpOrigin[2] = current[2] + f * ( next[2] - current[2] );"), String("\t\treturn;"), String("\t}"), String("\t// just use the current frame and evaluate as best we can"), String("\ttrajectory_t *posData = &cent->currentState.pos;"), String("\t{"), String("\t\tgentity_t *ent = &g_entities[cent->currentState.number];"), String(""), String("\t\tif ( ent && ent->inuse)"), String("\t\t{"), String("\t\t\tif ( ent->s.eFlags & EF_BLOCKED_MOVER || ent->s.pos.trType == TR_STATIONARY )"), String("\t\t\t{//this mover has stopped moving and is going to wig out if we predict it"), String("\t\t\t\t//based on last frame\'s info- cut across the network and use the currentOrigin"), String("\t\t\t\tVectorCopy( ent->currentOrigin, cent->lerpOrigin );"), String("\t\t\t\tposData = NULL;"), String("\t\t\t}"), String("\t\t\telse"), String("\t\t\t{"), String("\t\t\t\tposData = &ent->s.pos;"), String("\t\t\t\tEvaluateTrajectory(&ent->s.pos,cg.time, cent->lerpOrigin );"), String("\t\t\t}"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("\t\t\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, cent->lerpOrigin );"), String("\t\t}"), String("\t}"), String("\tEvaluateTrajectory( &cent->currentState.apos, cg.time, cent->lerpAngles );"), String(""), String("\t// adjust for riding a mover"), String("\tCG_AdjustPositionForMover( cent->lerpOrigin, cent->currentState.groundEntityNum, cg.time, cent->lerpOrigin );"), String("}"), String("#endif"), String("/*"), String("==============="), String("CG_AddLocalSet"), String("==============="), String("*/"), String(""), String("static void CG_AddLocalSet( centity_t *cent )"), String("{"), String("\tcent->gent->setTime = cgi_S_AddLocalSet( cent->gent->soundSet, cg.refdef.vieworg, cent->lerpOrigin, cent->gent->s.number, cent->gent->setTime );"), String("}"), String(""), String("/*"), String("-------------------------"), String("CAS_GetBModelSound"), String("-------------------------"), String("*/"), String(""), String("sfxHandle_t CAS_GetBModelSound( const char *name, int stage )"), String("{"), String("\treturn cgi_AS_GetBModelSound( name, stage );"), String("}"), String(""), String("void CG_DLightThink ( centity_t *cent )"), String("{"), String("\tif(cent->gent)"), String("\t{"), String("\t\tfloat\ttDelta = cg.time - cent->gent->painDebounceTime;"), String("\t\tfloat\tpercentage = ( tDelta/((float)cent->gent->speed) );"), String("\t\tvec3_t\torg;"), String("\t\tvec4_t\tcurrentRGBA;"), String("\t\tgentity_t\t*owner = NULL;"), String("\t\tint\t\ti;"), String("\t\t"), String("\t\tif ( percentage >= 1.0f )"), String("\t\t{//We hit the end"), String("\t\t\tpercentage = 1.0f;"), String("\t\t\tswitch( cent->gent->pushDebounceTime )"), String("\t\t\t{"), String("\t\t\tcase 0://Fading from start to final"), String("\t\t\t\tif ( cent->gent->spawnflags & 8 )"), String("\t\t\t\t{//PULSER"), String("\t\t\t\t\tif ( tDelta - cent->gent->speed - cent->gent->wait >= 0 )"), String("\t\t\t\t\t{//Time to start fading down"), String("\t\t\t\t\t\tcent->gent->painDebounceTime = cg.time;"), String("\t\t\t\t\t\tcent->gent->pushDebounceTime = 1;"), String("\t\t\t\t\t\tpercentage = 0.0f;"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String("\t\t\t\telse"), String("\t\t\t\t{//Stick on startRGBA"), String("\t\t\t\t\tpercentage = 0.0f;"), String("\t\t\t\t}"), String("\t\t\t\tbreak;"), String("\t\t\tcase 1://Fading from final to start"), String("\t\t\t\tif ( tDelta - cent->gent->speed - cent->gent->radius >= 0 )"), String("\t\t\t\t{//Time to start fading up"), String("\t\t\t\t\tcent->gent->painDebounceTime = cg.time;"), String("\t\t\t\t\tcent->gent->pushDebounceTime = 0;"), String("\t\t\t\t\tpercentage = 0.0f;"), String("\t\t\t\t}"), String("\t\t\t\tbreak;"), String("\t\t\tcase 2://Fading from 0 intensity to start intensity"), String("\t\t\t\t//Time to start fading from start to final"), String("\t\t\t\tcent->gent->painDebounceTime = cg.time;"), String("\t\t\t\tcent->gent->pushDebounceTime = 0;"), String("\t\t\t\tpercentage = 0.0f;"), String("\t\t\t\tbreak;"), String("\t\t\tcase 3://Fading from current intensity to 0 intensity"), String("\t\t\t\t//Time to turn off"), String("\t\t\t\tcent->gent->misc_dlight_active = qfalse;"), String("\t\t\t\tcent->gent->e_clThinkFunc = clThinkF_NULL;"), String("\t\t\t\tcent->gent->s.eType = ET_GENERAL;"), String("\t\t\t\tcent->gent->svFlags &= ~SVF_BROADCAST;"), String("\t\t\t\treturn;\t\t"), String("\t\t\t\tbreak;"), String("\t\t\tdefault:"), String("\t\t\t\tbreak;"), String("\t\t\t}"), String("\t\t}"), String(""), String("\t\tswitch( cent->gent->pushDebounceTime )"), String("\t\t{"), String("\t\tcase 0://Fading from start to final"), String("\t\t\tfor ( i = 0; i < 4; i++ )"), String("\t\t\t{"), String("\t\t\t\tcurrentRGBA[i] = cent->gent->startRGBA[i] + ( (cent->gent->finalRGBA[i] - cent->gent->startRGBA[i]) * percentage );"), String("\t\t\t}"), String("\t\t\tbreak;"), String("\t\tcase 1://Fading from final to start"), String("\t\t\tfor ( i = 0; i < 4; i++ )"), String("\t\t\t{"), String("\t\t\t\tcurrentRGBA[i] = cent->gent->finalRGBA[i] + ( (cent->gent->startRGBA[i] - cent->gent->finalRGBA[i]) * percentage );"), String("\t\t\t}"), String("\t\t\tbreak;"), String("\t\tcase 2://Fading from 0 intensity to start"), String("\t\t\tfor ( i = 0; i < 3; i++ )"), String("\t\t\t{"), String("\t\t\t\tcurrentRGBA[i] = cent->gent->startRGBA[i];"), String("\t\t\t}"), String("\t\t\tcurrentRGBA[3] = cent->gent->startRGBA[3] * percentage;"), String("\t\t\tbreak;"), String("\t\tcase 3://Fading from current intensity to 0"), String("\t\t\tfor ( i = 0; i < 3; i++ )"), String("\t\t\t{//FIXME: use last"), String("\t\t\t\tcurrentRGBA[i] = cent->gent->startRGBA[i];"), String("\t\t\t}"), String("\t\t\tcurrentRGBA[3] = cent->gent->startRGBA[3] - (cent->gent->startRGBA[3] * percentage);"), String("\t\t\tbreak;"), String("\t\tdefault:"), String("\t\t\treturn;"), String("\t\t\tbreak;"), String("\t\t}"), String(""), String("\t\tif ( cent->gent->owner )"), String("\t\t{"), String("\t\t\towner = cent->gent->owner;"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("\t\t\towner = cent->gent;"), String("\t\t}"), String(""), String("\t\tif ( owner->s.pos.trType == TR_INTERPOLATE )"), String("\t\t{"), String("\t\t\tVectorCopy( cg_entities[owner->s.number].lerpOrigin, org );"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("\t\t\tVectorCopy( owner->currentOrigin, org );"), String("\t\t}"), String(""), String("\t\tcgi_R_AddLightToScene(org, currentRGBA[3]*10, currentRGBA[0], currentRGBA[1], currentRGBA[2] );"), String("\t}"), String("}"), String(""), String("void CG_Limb ( centity_t *cent )"), String("{//first time we\'re drawn, remove us from the owner ent"), String("\tif ( cent->gent && cent->gent->owner && cent->gent->owner->ghoul2.size() )"), String("\t{"), String("\t\tgentity_t\t*owner = cent->gent->owner;"), String("\t\tif ( cent->gent->aimDebounceTime )"), String("\t\t{//done with dismemberment, just waiting to mark owner dismemberable again"), String("\t\t\tif ( cent->gent->aimDebounceTime > cg.time )"), String("\t\t\t{//still waiting"), String("\t\t\t\treturn;"), String("\t\t\t}"), String("\t\t\t//done!"), String("\t\t\towner->client->dismembered = false;"), String("\t\t\t//done!"), String("\t\t\tcent->gent->e_clThinkFunc = clThinkF_NULL;"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("extern cvar_t\t*g_dismemberment;"), String("extern cvar_t\t*g_saberRealisticCombat;"), String("\t\t\t//3) turn off w/descendants that surf in original model"), String("\t\t\tif ( cent->gent->target )//stubTagName )"), String("\t\t\t{//add smoke to cap surf, spawn effect"), String("\t\t\t\tif ( cent->gent->delay <= cg.time )"), String("\t\t\t\t{//debounced so it only plays effect once every 50ms"), String("\t\t\t\t\tint newBolt = gi.G2API_AddBolt( &owner->ghoul2[owner->playerModel], cent->gent->target );"), String("\t\t\t\t\tif ( newBolt != -1 )"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tcent->gent->delay = cg.time + 50;"), String("\t\t\t\t\t\t //LAvaPort - file is missing in Steam files"), String("\t\t\t\t\t\t//CG_PlayEffectBolted( \"saber/limb_bolton\", owner->playerModel, newBolt, owner->s.number, owner->s.origin );\t//ent origin used to make FX culling work"), String("\t\t\t\t\t}"), String("\t\t\t\t}"), String("\t\t\t}"), String("\t\t\tif ( cent->gent->target2 )//limbName"), String("\t\t\t{//turn the limb off"), String("\t\t\t\t//NOTE: MUST use G2SURFACEFLAG_NODESCENDANTS"), String("\t\t\t\tgi.G2API_SetSurfaceOnOff( &owner->ghoul2[owner->playerModel], cent->gent->target2, 0x00000100 );//G2SURFACEFLAG_NODESCENDANTS"), String("\t\t\t}"), String("\t\t\tif ( cent->gent->target3 )//stubCapName )"), String("\t\t\t{//turn on caps"), String("\t\t\t\tgi.G2API_SetSurfaceOnOff( &owner->ghoul2[owner->playerModel], cent->gent->target3, 0 );"), String("\t\t\t}"), String("\t\t\tif ( owner->weaponModel[0] > 0 )"), String("\t\t\t{//the corpse hasn\'t dropped their weapon"), String("\t\t\t\tif ( cent->gent->count == BOTH_DISMEMBER_RARM || cent->gent->count == BOTH_DISMEMBER_TORSO1 )//&& ent->s.weapon == WP_SABER && ent->weaponModel[0] != -1 )"), String("\t\t\t\t{//FIXME: is this first check needed with this lower one?"), String("\t\t\t\t\tgi.G2API_RemoveGhoul2Model( owner->ghoul2, owner->weaponModel[0] );"), String("\t\t\t\t\towner->weaponModel[0] = -1;"), String("\t\t\t\t}"), String("\t\t\t}"), String("\t\t\tif ( owner->client->NPC_class == CLASS_PROTOCOL "), String("\t\t\t\t|| debug_subdivision->integer"), String("\t\t\t\t|| g_saberRealisticCombat->integer )"), String("\t\t\t{"), String("\t\t\t\t//wait 100ms before allowing owner to be dismembered again"), String("\t\t\t\tcent->gent->aimDebounceTime = cg.time + 100;"), String("\t\t\t\treturn;"), String("\t\t\t}"), String("\t\t\telse"), String("\t\t\t{"), String("\t\t\t\t//done!"), String("\t\t\t\tcent->gent->e_clThinkFunc = clThinkF_NULL;"), String("\t\t\t}"), String("\t\t}"), String("\t}"), String("}"), String(""), String("extern Vehicle_t *G_IsRidingVehicle( gentity_t *ent );"), String("qboolean\tMatrixMode = qfalse;"), String("extern cvar_t\t*g_skippingcin;"), String("void CG_MatrixEffect ( centity_t *cent )"), String("{"), String("\tfloat\tMATRIX_EFFECT_TIME = 1000.0f;"), String("\tif ( (cent->currentState.boltInfo&MEF_MULTI_SPIN) )"), String("\t{//multiple spins"), String("\t\tif ( cent->currentState.time2 > 0 )"), String("\t\t{//with a custom amount of time per spin"), String("\t\t\tMATRIX_EFFECT_TIME = cent->currentState.time2;"), String("\t\t}"), String("\t}"), String("\telse"), String("\t{"), String("\t\tif ( cent->currentState.eventParm "), String("\t\t\t&& cent->currentState.eventParm != MATRIX_EFFECT_TIME )"), String("\t\t{//not a falling multi-spin, so stretch out the effect over the whole desired length (or: condenses it, too)"), String("\t\t\tMATRIX_EFFECT_TIME = cent->currentState.eventParm;"), String("\t\t}"), String("\t}"), String("\t//VectorCopy( cent->lerpOrigin, cg.refdef.vieworg );"), String("\tfloat totalElapsedTime = (float)(cg.time - cent->currentState.time);"), String("\tfloat elapsedTime = totalElapsedTime;"), String("\tbool\tstopEffect = ((totalElapsedTime > cent->currentState.eventParm) || cg.missionStatusShow || in_camera);"), String(""), String("\tif (!stopEffect && (cent->currentState.boltInfo&MEF_HIT_GROUND_STOP) && g_entities[cent->currentState.otherEntityNum].client)"), String("\t{"), String("\t\tif (g_entities[cent->currentState.otherEntityNum].client->ps.groundEntityNum!=ENTITYNUM_NONE)"), String("\t\t{"), String("\t\t\tstopEffect = true;"), String("\t\t}"), String("\t\telse if (g_entities[cent->currentState.otherEntityNum].client->NPC_class == CLASS_VEHICLE)"), String("\t\t{"), String("\t\t\tVehicle_t*\tpVeh = g_entities[cent->currentState.otherEntityNum].m_pVehicle;"), String("\t\t\tif (pVeh && !(pVeh->m_ulFlags&VEH_FLYING))"), String("\t\t\t{"), String("\t\t\t\tstopEffect = true;"), String("\t\t\t}"), String("\t\t}"), String("\t}"), String("\tif (!stopEffect && (cent->currentState.boltInfo&MEF_LOOK_AT_ENEMY))"), String("\t{"), String("\t\tif (!g_entities[cent->currentState.otherEntityNum].lastEnemy || "), String("\t\t\t!g_entities[cent->currentState.otherEntityNum].lastEnemy->inuse)"), String("\t\t{"), String("\t\t\tstopEffect = true;"), String("\t\t}"), String("\t}"), String(""), String("\tif (stopEffect)"), String("\t{//time is up or this is a falling spin and they hit the ground or mission end screen is up"), String("\t\tcg.overrides.active &= ~(/*CG_OVERRIDE_3RD_PERSON_ENT|*/CG_OVERRIDE_3RD_PERSON_RNG|CG_OVERRIDE_3RD_PERSON_ANG|CG_OVERRIDE_3RD_PERSON_POF);"), String("\t\t//cg.overrides.thirdPersonEntity = 0;"), String("\t\tcg.overrides.thirdPersonAngle = 0;"), String("\t\tcg.overrides.thirdPersonPitchOffset = 0;"), String("\t\tcg.overrides.thirdPersonRange = 0;"), String("\t\tif ( g_skippingcin->integer )"), String("\t\t{//skipping?  don\'t mess with timescale"), String("\t\t\t/*"), String("\t\t\tif ( g_timescale->integer < 100 )"), String("\t\t\t{//something messed up timescale, reset it?"), String("\t\t\t\tcgi_Cvar_Set( \"timescale\", \"100\" );"), String("\t\t\t}"), String("\t\t\t*/"), String("\t\t}"), String("\t\telse"), String("\t\t{//set it back to 1"), String("\t\t\tcgi_Cvar_Set( \"timescale\", \"1.0\" );"), String("\t\t}"), String("\t\tMatrixMode = qfalse;"), String("\t\tcent->gent->e_clThinkFunc = clThinkF_NULL;"), String("\t\tcent->gent->e_ThinkFunc = thinkF_G_FreeEntity;"), String("\t\tcent->gent->nextthink = cg.time + 500;"), String("\t\treturn;"), String("\t}"), String("\telse "), String("\t{"), String("\t\twhile ( elapsedTime > MATRIX_EFFECT_TIME )"), String("\t\t{"), String("\t\t\telapsedTime -= MATRIX_EFFECT_TIME;"), String("\t\t}"), String("\t}"), String("\t"), String("\tMatrixMode = qtrue;"), String(""), String("\t//FIXME: move the position towards them and back?"), String("\t//cg.overrides.active |= CG_OVERRIDE_3RD_PERSON_ENT;"), String("\t//cg.overrides.thirdPersonEntity = cent->currentState.otherEntityNum;"), String(""), String("\tif (cent->currentState.boltInfo&MEF_LOOK_AT_ENEMY)"), String("\t{"), String("\t\tvec3_t\ttoEnemy;"), String("\t\tvec3_t\ttoEnemyAngles;"), String(""), String("\t\tVectorCopy(cg_entities[g_entities[cent->currentState.otherEntityNum].lastEnemy->s.number].lerpOrigin, toEnemy);"), String("//\t\tCG_DrawEdge(cg_entities[cent->currentState.otherEntityNum].lerpOrigin, toEnemy, EDGE_NORMAL);"), String("\t\tVectorSubtract(cg_entities[cent->currentState.otherEntityNum].lerpOrigin, toEnemy, toEnemy);"), String("\t\tvectoangles(toEnemy, toEnemyAngles);"), String(""), String(""), String("\t\tcg.overrides.active\t\t\t\t\t|= CG_OVERRIDE_3RD_PERSON_ANG;"), String("  \t \tcg.overrides.thirdPersonAngle\t\t = "), String("\t\t\ttoEnemyAngles[1] - "), String("\t\t\tcg_entities[cent->currentState.otherEntityNum].lerpAngles[1] + "), String(" \t\t\t145.0f;"), String("\t \tcg.overrides.thirdPersonAngle = AngleNormalize180(cg.overrides.thirdPersonAngle);"), String(""), String("\t\tfloat\tMATRIX_EFFECT_TIME_HALF = MATRIX_EFFECT_TIME/2.0f;"), String("\t\tfloat\tX = 1.0f;"), String("\t\tif (elapsedTime>MATRIX_EFFECT_TIME_HALF)"), String("\t\t{"), String("\t\t\tX -= ((elapsedTime - MATRIX_EFFECT_TIME_HALF)/MATRIX_EFFECT_TIME_HALF);"), String("\t\t}"), String("\t\tcg.overrides.thirdPersonAngle\t\t*= X;"), String(""), String(" //\t\tgi.Printf(\"%f\\n\", cg.overrides.thirdPersonAngle);"), String("\t\tcg.overrides.thirdPersonPitchOffset\t = 0.0f;"), String("\t\tcg.overrides.thirdPersonRange\t\t = cg_thirdPersonRange.value * 3.0f;"), String("\t}"), String(""), String("\tif ( !(cent->currentState.boltInfo&MEF_NO_SPIN) )"), String("\t{//rotate around them"), String("\t\t//rotate"), String("\t\tcg.overrides.active |= CG_OVERRIDE_3RD_PERSON_ANG;"), String("\t\tcg.overrides.thirdPersonAngle = 360.0f*elapsedTime/MATRIX_EFFECT_TIME;"), String("\t\tif ( (cent->currentState.boltInfo&MEF_REVERSE_SPIN) )"), String("\t\t{"), String("\t\t\tcg.overrides.thirdPersonAngle *= -1;"), String("\t\t}"), String("\t}"), String(""), String("\t//do all the slowdown and vert bob stuff"), String("\tif ( cent->currentState.angles2[0] )"), String("\t{"), String("\t\tcgi_Cvar_Set( \"timescale\", va(\"%4.2f\",cent->currentState.angles2[0]) );"), String("\t}"), String("\telse if ( !(cent->currentState.boltInfo&MEF_NO_TIMESCALE) )"), String("\t{//ramp the timescale"), String("\t\t//slowdown"), String("\t\tfloat timescale = (elapsedTime/MATRIX_EFFECT_TIME);"), String("\t\tif ( timescale < 0.01f )"), String("\t\t{"), String("\t\t\ttimescale = 0.01f;"), String("\t\t}"), String("\t\tcgi_Cvar_Set( \"timescale\", va(\"%4.2f\",timescale) );"), String("\t}"), String("\telse"), String("\t{//FIXME: MEF_HIT_GROUND_STOP: if they\'re on the ground, stop spinning and stop timescale"), String("\t\t//FIXME: if they go to the menu, restore timescale?"), String("\t\t//cgi_Cvar_Set( \"timescale\", \"1.0ff\" );"), String("\t}"), String(""), String("\tif ( !(cent->currentState.boltInfo&MEF_NO_VERTBOB) )"), String("\t{//bob the pitch"), String("\t\t//pitch"), String("\t\t//dip - FIXME: use pitchOffet?"), String("\t\tcg.overrides.active |= CG_OVERRIDE_3RD_PERSON_POF;"), String("\t\tcg.overrides.thirdPersonPitchOffset = cg_thirdPersonPitchOffset.value;"), String("\t\tif ( elapsedTime < MATRIX_EFFECT_TIME*0.33f )"), String("\t\t{"), String("\t\t\tcg.overrides.thirdPersonPitchOffset -= 30.0f*elapsedTime/(MATRIX_EFFECT_TIME*0.33);"), String("\t\t}"), String("\t\telse if ( elapsedTime > MATRIX_EFFECT_TIME*0.66f )"), String("\t\t{"), String("\t\t\tcg.overrides.thirdPersonPitchOffset -= 30.0f*(MATRIX_EFFECT_TIME-elapsedTime)/(MATRIX_EFFECT_TIME*0.33);"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("\t\t\tcg.overrides.thirdPersonPitchOffset -= 30.0f;"), String("\t\t}"), String("\t}"), String(""), String("\tif ( !(cent->currentState.boltInfo&MEF_NO_RANGEVAR) )"), String("\t{//vary the camera range"), String("\t\t//pull back"), String("\t\tcg.overrides.active |= CG_OVERRIDE_3RD_PERSON_RNG;"), String("\t\tcg.overrides.thirdPersonRange = cg_thirdPersonRange.value;"), String("\t\tif ( elapsedTime < MATRIX_EFFECT_TIME*0.33 )"), String("\t\t{"), String("\t\t\tcg.overrides.thirdPersonRange += 80.0f*elapsedTime/(MATRIX_EFFECT_TIME*0.33);"), String("\t\t}"), String("\t\telse if ( elapsedTime > MATRIX_EFFECT_TIME*0.66 )"), String("\t\t{"), String("\t\t\tcg.overrides.thirdPersonRange += 80.0f*(MATRIX_EFFECT_TIME-elapsedTime)/(MATRIX_EFFECT_TIME*0.33);"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("\t\t\tcg.overrides.thirdPersonRange += 80.0f;"), String("\t\t}"), String("\t}"), String("}"), String(""), String("static void CG_Think ( centity_t *cent )"), String("{"), String("\tif(!cent->gent)"), String("\t{"), String("\t\treturn;"), String("\t}"), String(""), String("\tCEntity_ThinkFunc(cent);\t//\tcent->gent->clThink(cent);"), String("}"), String(""), String("static void CG_Clouds( centity_t *cent )"), String("{"), String("\trefEntity_t\t\tent;"), String("\tentityState_t\t*s1;"), String(""), String("\ts1 = &cent->currentState;"), String(""), String("\t// create the render entity"), String("\tmemset( &ent, 0, sizeof( ent ));"), String(""), String("\tVectorCopy( cent->lerpOrigin, ent.origin );"), String(""), String("\tent.shaderRGBA[0] = ent.shaderRGBA[1] = ent.shaderRGBA[2] = ent.shaderRGBA[3] = 255;"), String(""), String("\tent.radius = cent->gent->radius;"), String("\tent.backlerp = cent->gent->wait;"), String(""), String("\tent.reType = RT_CLOUDS;"), String(""), String("\tif ( cent->gent->spawnflags & 1 ) // TUBE type, the one with a hole in the middle"), String("\t{"), String("\t\tent.rotation = cent->gent->random;"), String("\t\tent.renderfx = RF_GROW;// tube flag "), String("\t}"), String(""), String("\tif ( cent->gent->spawnflags & 2 ) // ALT type, uses a different shader"), String("\t{"), String("\t\tent.customShader = cgi_R_RegisterShader( \"gfx/world/haze2\" );"), String("\t}"), String("\telse"), String("\t{"), String("\t\tent.customShader = cgi_R_RegisterShader( \"gfx/world/haze\" );"), String("\t}"), String("\t"), String("\tcgi_R_AddRefEntityToScene( &ent );"), String("}"), String(""), String("/*"), String("==============="), String("CG_AddCEntity"), String(""), String("==============="), String("*/"), String("static void CG_AddCEntity( centity_t *cent ) "), String("{"), String("\t// event-only entities will have been dealt with already"), String("\tif ( cent->currentState.eType >= ET_EVENTS ) {"), String("\t\treturn;"), String("\t}"), String(""), String("\t//we must have restarted the game"), String("\tif (!cent->gent)"), String("\t{"), String("\t\treturn;"), String("\t}"), String(""), String("\tcent->snapShotTime = cg.time;"), String(""), String("\t// calculate the current origin"), String("\tCG_CalcEntityLerpPositions( cent );"), String(""), String("\t// add automatic effects"), String("\tCG_EntityEffects( cent );"), String(""), String("\t// add local sound set if any"), String("\tif ( cent->gent && cent->gent->soundSet && cent->gent->soundSet[0] && cent->currentState.eType != ET_MOVER )"), String("\t{"), String("\t\tCG_AddLocalSet( cent );"), String("\t}"), String("/*"), String("Ghoul2 Insert Start"), String("*/"), String("\t// do this before we copy the data to refEnts"), String("\tif (cent->gent->ghoul2.IsValid())"), String("\t{"), String("\t\ttrap_G2_SetGhoul2ModelIndexes(cent->gent->ghoul2, cgs.model_draw, cgs.skins);"), String("\t}"), String(""), String("/*"), String("Ghoul2 Insert End"), String("*/"), String(""), String("\tswitch ( cent->currentState.eType ) {"), String("\tdefault:"), String("\t\tCG_Error( \"Bad entity type: %i\\n\", cent->currentState.eType );"), String("\t\tbreak;"), String("\tcase ET_INVISIBLE:"), String("\tcase ET_PUSH_TRIGGER:"), String("\tcase ET_TELEPORT_TRIGGER:"), String("\tcase ET_TERRAIN:"), String("\t\tbreak;"), String("\tcase ET_GENERAL:"), String("\t\tCG_General( cent );"), String("\t\tbreak;"), String("\tcase ET_PLAYER:"), String("\t\tCG_Player( cent );"), String("\t\tbreak;"), String("\tcase ET_ITEM:"), String("\t\tCG_Item( cent );"), String("\t\tbreak;"), String("\tcase ET_MISSILE:"), String("\t\tCG_Missile( cent );"), String("\t\tbreak;"), String("\tcase ET_MOVER:"), String("\t\tCG_Mover( cent );"), String("\t\tbreak;"), String("\tcase ET_BEAM:"), String("\t\tCG_Beam( cent, 0 );"), String("\t\tbreak;"), String("\tcase ET_PORTAL:"), String("\t\tCG_Portal( cent );"), String("\t\tbreak;"), String("\tcase ET_SPEAKER:"), String("\t\tif ( cent->gent && cent->gent->soundSet && cent->gent->soundSet[0] )"), String("\t\t{"), String("\t\t\tbreak;"), String("\t\t}"), String("\t\tCG_Speaker( cent );"), String("\t\tbreak;"), String("\tcase ET_THINKER:"), String("\t\tCG_General( cent );"), String("\t\tCG_Think( cent );"), String("\t\tbreak;"), String("\tcase ET_CLOUD: // dumb"), String("\t\tCG_Clouds( cent );"), String("\t\tbreak;"), String("\t}"), String("}"), String(""), String("/*"), String("==============="), String("CG_AddPacketEntities"), String(""), String("==============="), String("*/"), String("void CG_AddPacketEntities( qboolean isPortal ) {"), String("\tint\t\t\t\t\tnum;"), String("\tcentity_t\t\t\t*cent;"), String("\tplayerState_t\t\t*ps;"), String(""), String("\tif (isPortal)"), String("\t{"), String("\t\tfor ( num = 0 ; num < cg.snap->numEntities ; num++ )"), String("\t\t{"), String("\t\t\tcent = &cg_entities[ cg.snap->entities[ num ].number ];"), String(""), String("\t\t\tif (cent->currentState.isPortalEnt)"), String("\t\t\t{"), String("\t\t\t\tCG_AddCEntity( cent );"), String("\t\t\t}"), String("\t\t}"), String("\t\treturn;"), String("\t}"), String(""), String("\t// set cg.frameInterpolation"), String("\tif ( cg.nextSnap ) "), String("\t{"), String("\t\tint\t\tdelta;"), String(""), String("\t\tdelta = (cg.nextSnap->serverTime - cg.snap->serverTime);"), String("\t\tif ( delta == 0 ) "), String("\t\t{"), String("\t\t\tcg.frameInterpolation = 0;"), String("\t\t} "), String("\t\telse "), String("\t\t{"), String("\t\t\tcg.frameInterpolation = (float)( cg.time - cg.snap->serverTime ) / delta;"), String("\t\t}"), String("//OutputDebugString(va(\"interp %4.2f ct=%6d nt=%6d st=%6d\\n\",cg.frameInterpolation,cg.time,cg.nextSnap->serverTime,cg.snap->serverTime));"), String("\t} "), String("\telse "), String("\t{"), String("\t\tcg.frameInterpolation = 0;\t// actually, it should never be used, because "), String("\t\t\t\t\t\t\t\t\t// no entities should be marked as interpolating"), String("//OutputDebugString(va(\"noterp %4.2f ct=%6d nt=%6d st=%6d\\n\",cg.frameInterpolation,cg.time,0,cg.snap->serverTime));"), String("\t}"), String(""), String("\t// the auto-rotating items will all have the same axis"), String("\tcg.autoAngles[0] = 0;"), String("\tcg.autoAngles[1] = ( cg.time & 2047 ) * 360 / 2048.0f;"), String("\tcg.autoAngles[2] = 0;"), String(""), String("\tcg.autoAnglesFast[0] = 0;"), String("\tcg.autoAnglesFast[1] = ( cg.time & 1023 ) * 360 / 1024.0f;"), String("\tcg.autoAnglesFast[2] = 0;"), String(""), String("\tAnglesToAxis( cg.autoAngles, cg.autoAxis );"), String("\tAnglesToAxis( cg.autoAnglesFast, cg.autoAxisFast );"), String(""), String("\t// generate and add the entity from the playerstate"), String("\tps = &cg.predicted_player_state;"), String("\tPlayerStateToEntityState( ps, &cg_entities[ ps->clientNum ].currentState );"), String("\t"), String("//\tcent = &cg_entities[ ps->clientNum ];\t// not needed now that player is in the snap packet"), String("//\tCG_AddCEntity( cent );\t\t\t\t\t//"), String(""), String("\t// add each entity sent over by the server"), String("\tfor ( num = 0 ; num < cg.snap->numEntities ; num++ ) {"), String("\t\tcent = &cg_entities[ cg.snap->entities[ num ].number ];"), String(""), String("\t\tCG_AddCEntity( cent );"), String("\t}"), String(""), String("\tfor(num=0;num<cg_numpermanents;num++)"), String("\t{"), String("\t\tcent = cg_permanents[num];"), String("\t\tif (cent->currentValid)"), String("\t\t{"), String("\t\t\tCG_AddCEntity( cent );"), String("\t\t}"), String("\t}"), String("}"), String(""), String("//rww - This function is not currently called. Use it as the client-side ROFF"), String("//callback once that\'s implemented fully."), String("void CG_ROFF_NotetrackCallback( centity_t *cent, const char *notetrack)"), String("{"), String("\tint i = 0, r = 0, objectID = 0, anglesGathered = 0, posoffsetGathered = 0;"), String("\tchar type[256];"), String("\tchar argument[512];"), String("\tchar addlArg[512];"), String("\tchar errMsg[256];"), String("\tchar t[64];"), String("\tint addlArgs = 0;"), String("\tvec3_t parsedAngles, parsedOffset, useAngles, useOrigin, forward, right, up;"), String(""), String("\tif (!cent || !notetrack)"), String("\t{"), String("\t\treturn;"), String("\t}"), String(""), String("\t//notetrack = \"effect effects/explosion1.efx 0+0+64 0-0-1\";"), String(""), String("\twhile (notetrack[i] && notetrack[i] != \' \')"), String("\t{"), String("\t\ttype[i] = notetrack[i];"), String("\t\ti++;"), String("\t}"), String(""), String("\ttype[i] = \'\\0\';"), String(""), String("\tif (notetrack[i] != \' \')"), String("\t{ //didn\'t pass in a valid notetrack type, or forgot the argument for it"), String("\t\treturn;"), String("\t}"), String(""), String("\ti++;"), String(""), String("\twhile (notetrack[i] && notetrack[i] != \' \')"), String("\t{"), String("\t\targument[r] = notetrack[i];"), String("\t\tr++;"), String("\t\ti++;"), String("\t}"), String("\targument[r] = \'\\0\';"), String(""), String("\tif (!r)"), String("\t{"), String("\t\treturn;"), String("\t}"), String(""), String("\tif (notetrack[i] == \' \')"), String("\t{ //additional arguments..."), String("\t\taddlArgs = 1;"), String(""), String("\t\ti++;"), String("\t\tr = 0;"), String("\t\twhile (notetrack[i])"), String("\t\t{"), String("\t\t\taddlArg[r] = notetrack[i];"), String("\t\t\tr++;"), String("\t\t\ti++;"), String("\t\t}"), String("\t\taddlArg[r] = \'\\0\';"), String("\t}"), String(""), String("\tif (strcmp(type, \"effect\") == 0)"), String("\t{"), String("\t\tif (!addlArgs)"), String("\t\t{"), String("\t\t\t//sprintf(errMsg, \"Offset position argument for \'effect\' type is invalid.\");"), String("\t\t\t//goto functionend;"), String("\t\t\tVectorClear(parsedOffset);"), String("\t\t\tgoto defaultoffsetposition;"), String("\t\t}"), String(""), String("\t\ti = 0;"), String(""), String("\t\twhile (posoffsetGathered < 3)"), String("\t\t{"), String("\t\t\tr = 0;"), String("\t\t\twhile (addlArg[i] && addlArg[i] != \'+\' && addlArg[i] != \' \')"), String("\t\t\t{"), String("\t\t\t\tt[r] = addlArg[i];"), String("\t\t\t\tr++;"), String("\t\t\t\ti++;"), String("\t\t\t}"), String("\t\t\tt[r] = \'\\0\';"), String("\t\t\ti++;"), String("\t\t\tif (!r)"), String("\t\t\t{ //failure.."), String("\t\t\t\t//sprintf(errMsg, \"Offset position argument for \'effect\' type is invalid.\");"), String("\t\t\t\t//goto functionend;"), String("\t\t\t\tVectorClear(parsedOffset);"), String("\t\t\t\ti = 0;"), String("\t\t\t\tgoto defaultoffsetposition;"), String("\t\t\t}"), String("\t\t\tparsedOffset[posoffsetGathered] = atof(t);"), String("\t\t\tposoffsetGathered++;"), String("\t\t}"), String(""), String("\t\tif (posoffsetGathered < 3)"), String("\t\t{"), String("\t\t\tsprintf(errMsg, \"Offset position argument for \'effect\' type is invalid.\");"), String("\t\t\tgoto functionend;"), String("\t\t}"), String(""), String("\t\ti--;"), String(""), String("\t\tif (addlArg[i] != \' \')"), String("\t\t{"), String("\t\t\taddlArgs = 0;"), String("\t\t}"), String(""), String("defaultoffsetposition:"), String(""), String("\t\tobjectID = theFxScheduler.RegisterEffect(argument);"), String(""), String("\t\tif (objectID)"), String("\t\t{"), String("\t\t\tif (addlArgs)"), String("\t\t\t{ //if there is an additional argument for an effect it is expected to be XANGLE-YANGLE-ZANGLE"), String("\t\t\t\ti++;"), String("\t\t\t\twhile (anglesGathered < 3)"), String("\t\t\t\t{"), String("\t\t\t\t\tr = 0;"), String("\t\t\t\t\twhile (addlArg[i] && addlArg[i] != \'-\')"), String("\t\t\t\t\t{"), String("\t\t\t\t\t\tt[r] = addlArg[i];"), String("\t\t\t\t\t\tr++;"), String("\t\t\t\t\t\ti++;"), String("\t\t\t\t\t}"), String("\t\t\t\t\tt[r] = \'\\0\';"), String("\t\t\t\t\ti++;"), String(""), String("\t\t\t\t\tif (!r)"), String("\t\t\t\t\t{ //failed to get a new part of the vector"), String("\t\t\t\t\t\tanglesGathered = 0;"), String("\t\t\t\t\t\tbreak;"), String("\t\t\t\t\t}"), String(""), String("\t\t\t\t\tparsedAngles[anglesGathered] = atof(t);"), String("\t\t\t\t\tanglesGathered++;"), String("\t\t\t\t}"), String(""), String("\t\t\t\tif (anglesGathered)"), String("\t\t\t\t{"), String("\t\t\t\t\tVectorCopy(parsedAngles, useAngles);"), String("\t\t\t\t}"), String("\t\t\t\telse"), String("\t\t\t\t{ //failed to parse angles from the extra argument provided.."), String("\t\t\t\t\tVectorCopy(cent->lerpAngles, useAngles);"), String("\t\t\t\t}"), String("\t\t\t}"), String("\t\t\telse"), String("\t\t\t{ //if no constant angles, play in direction entity is facing"), String("\t\t\t\tVectorCopy(cent->lerpAngles, useAngles);"), String("\t\t\t}"), String(""), String("\t\t\tAngleVectors(useAngles, forward, right, up);"), String(""), String("\t\t\tVectorCopy(cent->lerpOrigin, useOrigin);"), String(""), String("\t\t\t//forward"), String("\t\t\tuseOrigin[0] += forward[0]*parsedOffset[0];"), String("\t\t\tuseOrigin[1] += forward[1]*parsedOffset[0];"), String("\t\t\tuseOrigin[2] += forward[2]*parsedOffset[0];"), String(""), String("\t\t\t//right"), String("\t\t\tuseOrigin[0] += right[0]*parsedOffset[1];"), String("\t\t\tuseOrigin[1] += right[1]*parsedOffset[1];"), String("\t\t\tuseOrigin[2] += right[2]*parsedOffset[1];"), String(""), String("\t\t\t//up"), String("\t\t\tuseOrigin[0] += up[0]*parsedOffset[2];"), String("\t\t\tuseOrigin[1] += up[1]*parsedOffset[2];"), String("\t\t\tuseOrigin[2] += up[2]*parsedOffset[2];"), String(""), String("\t\t\ttheFxScheduler.PlayEffect(objectID, useOrigin, useAngles);"), String("\t\t}"), String("\t}"), String("\telse if (strcmp(type, \"sound\") == 0)"), String("\t{"), String("\t\tobjectID = cgi_S_RegisterSound(argument);"), String("\t\tcgi_S_StartSound(cent->lerpOrigin, cent->currentState.number, CHAN_BODY, objectID);"), String("\t}"), String("\telse if (strcmp(type, \"loop\") == 0)"), String("\t{ //handled server-side"), String("\t\treturn;"), String("\t}"), String("\t//else if ..."), String("\telse"), String("\t{"), String("\t\tif (type[0])"), String("\t\t{"), String("\t\t\tCom_Printf(\"^3Warning: \\\"%s\\\" is an invalid ROFF notetrack function\\n\", type);"), String("\t\t}"), String("\t\telse"), String("\t\t{"), String("\t\t\tCom_Printf(\"^3Warning: Notetrack is missing function and/or arguments\\n\");"), String("\t\t}"), String("\t}"), String(""), String("\treturn;"), String(""), String("functionend:"), String("\tCom_Printf(\"^3Type-specific notetrack error: %s\\n\", errMsg);"), String("\treturn;"), String("}"), String("======="), String("// cg_ents.c -- present snapshot entities, happens every single frame\r"), String("\r"), String("// this line must stay at top so the whole PCH thing works...\r"), String("#include \"cg_headers.h\"\r"), String("\r"), String("//#include \"cg_local.h\"\r"), String("#include \"cg_media.h\"\r"), String("#include \"..\\game\\g_functions.h\"\r"), String("#include \"..\\ghoul2\\g2.h\"\r"), String("#include \"FxScheduler.h\"\r"), String("#include \"..\\game\\wp_saber.h\"\r"), String("#include \"..\\game\\g_vehicles.h\"\r"), String("\r"), String("extern void CG_AddSaberBlade( centity_t *cent, centity_t *scent, refEntity_t *saber, int renderfx, int modelIndex, vec3_t origin, vec3_t angles);\r"), String("extern void CG_CheckSaberInWater( centity_t *cent, centity_t *scent, int saberNum, int modelIndex, vec3_t origin, vec3_t angles );\r"), String("extern void CG_ForcePushBlur( const vec3_t org, qboolean darkSide = qfalse );\r"), String("extern void CG_AddForceSightShell( refEntity_t *ent, centity_t *cent );\r"), String("extern qboolean CG_PlayerCanSeeCent( centity_t *cent );\r"), String("extern cvar_t\t*debug_subdivision;\r"), String("\r"), String("/*\r"), String("======================\r"), String("CG_PositionEntityOnTag\r"), String("\r"), String("Modifies the entities position and axis by the given\r"), String("tag location\r"), String("======================\r"), String("*/\r"), String("void CG_PositionEntityOnTag( refEntity_t *entity, const refEntity_t *parent, \r"), String("\t\t\t\t\t\t\tqhandle_t parentModel, char *tagName ) {\r"), String("\tint\t\t\t\ti;\r"), String("\torientation_t\tlerped;\r"), String("\t\r"), String("\t// lerp the tag\r"), String("\tcgi_R_LerpTag( &lerped, parentModel, parent->oldframe, parent->frame,\r"), String("\t\t1.0f - parent->backlerp, tagName );\r"), String("\r"), String("\t// FIXME: allow origin offsets along tag?\r"), String("\tVectorCopy( parent->origin, entity->origin );\r"), String("\tfor ( i = 0 ; i < 3 ; i++ ) \r"), String("\t{\r"), String("\t\tVectorMA( entity->origin, lerped.origin[i], parent->axis[i], entity->origin );\r"), String("\t}\r"), String("\r"), String("\t// had to cast away the const to avoid compiler problems...\r"), String("\tMatrixMultiply( lerped.axis, ((refEntity_t *)parent)->axis, entity->axis );\r"), String("\tentity->backlerp = parent->backlerp;\r"), String("}\r"), String("\r"), String("/*\r"), String("======================\r"), String("CG_PositionRotatedEntityOnTag\r"), String("\r"), String("Modifies the entities position and axis by the given\r"), String("tag location\r"), String("======================\r"), String("*/\r"), String("void CG_PositionRotatedEntityOnTag( refEntity_t *entity, const refEntity_t *parent, \r"), String("\t\t\t\t\t\t\tqhandle_t parentModel, char *tagName, orientation_t *tagOrient ) {\r"), String("\tint\t\t\t\ti;\r"), String("\torientation_t\tlerped;\r"), String("\tvec3_t\t\t\ttempAxis[3];\r"), String("\r"), String("\t// lerp the tag\r"), String("\tcgi_R_LerpTag( &lerped, parentModel, parent->oldframe, parent->frame,\r"), String("\t\t1.0f - parent->backlerp, tagName );\r"), String("\r"), String("\tif ( tagOrient )\r"), String("\t{\r"), String("\t\tVectorCopy( lerped.origin, tagOrient->origin );\r"), String("\t\tfor ( i = 0 ; i < 3 ; i++ ) \r"), String("\t\t{\r"), String("\t\t\tVectorCopy( lerped.axis[i], tagOrient->axis[i] );\r"), String("\t\t}\r"), String("\t}\r"), String("\r"), String("\t// FIXME: allow origin offsets along tag?\r"), String("\tVectorCopy( parent->origin, entity->origin );\r"), String("\tfor ( i = 0 ; i < 3 ; i++ ) {\r"), String("\t\tVectorMA( entity->origin, lerped.origin[i], parent->axis[i], entity->origin );\r"), String("\t}\r"), String("\r"), String("\tMatrixMultiply( entity->axis, lerped.axis, tempAxis );\r"), String("\tMatrixMultiply( tempAxis, ((refEntity_t *)parent)->axis, entity->axis );\r"), String("}\r"), String("\r"), String("\r"), String("\r"), String("/*\r"), String("==========================================================================\r"), String("\r"), String("FUNCTIONS CALLED EACH FRAME\r"), String("\r"), String("==========================================================================\r"), String("*/\r"), String("\r"), String("/*\r"), String("======================\r"), String("CG_SetEntitySoundPosition\r"), String("\r"), String("Also called by event processing code\r"), String("======================\r"), String("*/\r"), String("vec3_t *CG_SetEntitySoundPosition( centity_t *cent ) {\r"), String("\tstatic vec3_t v3Return;\r"), String("\tif ( cent->currentState.solid == SOLID_BMODEL ) {\r"), String("\t\tvec3_t\torigin;\r"), String("\t\tfloat\t*v;\r"), String("\r"), String("\t\tv = cgs.inlineModelMidpoints[ cent->currentState.modelindex ];\r"), String("\t\tVectorAdd( cent->lerpOrigin, v, origin );\r"), String("\t\tcgi_S_UpdateEntityPosition( cent->currentState.number, origin );\r"), String("\t\tVectorCopy(origin, v3Return);\r"), String("\t} else {\r"), String("\t\tif ( cent->currentState.eType == ET_PLAYER\r"), String("\t\t\t&& cent->gent\r"), String("\t\t\t&& cent->gent->client\r"), String("\t\t\t&& cent->gent->ghoul2.IsValid() \r"), String("\t\t\t&& cent->gent->ghoul2[0].animModelIndexOffset )//If it has an animOffset it\'s a cinematic anim\r"), String("\t\t{//I might be running out of my bounding box, so use my headPoint from the last render frame...?\r"), String("\t\t\t//NOTE: if I\'m not rendered, will this not update correctly?  Would cent->lerpOrigin be any more updated?\r"), String("\t\t\tVectorCopy(cent->gent->client->renderInfo.eyePoint, v3Return);\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{//just use my org\r"), String("\t\t\tVectorCopy(cent->lerpOrigin, v3Return);\r"), String("\t\t}\r"), String("\t\tcgi_S_UpdateEntityPosition( cent->currentState.number, v3Return );\r"), String("\t}\r"), String("\r"), String("\treturn &v3Return;\r"), String("}\r"), String("\r"), String("/*\r"), String("==================\r"), String("CG_EntityEffects\r"), String("\r"), String("Add continuous entity effects, like local entity emission and lighting\r"), String("==================\r"), String("*/\r"), String("static void CG_EntityEffects( centity_t *cent ) {\r"), String("\r"), String("\t// update sound origins\r"), String("\tvec3_t v3Origin;\r"), String("\tVectorCopy(*CG_SetEntitySoundPosition( cent ),v3Origin);\r"), String("\r"), String("\t// add loop sound\r"), String("\tif ( cent->currentState.loopSound ) \r"), String("\t{\r"), String("\t\tsoundChannel_t chan = CHAN_AUTO;\r"), String("\r"), String("\t\tgentity_t *ent = cent->gent;\r"), String("\r"), String("\t\tif ( ent->s.eFlags & EF_LESS_ATTEN )\r"), String("\t\t{\r"), String("\t\t\tchan = CHAN_LESS_ATTEN;\r"), String("\t\t}\r"), String("\t\t\r"), String("\t\tsfxHandle_t\tsfx = ( cent->currentState.eType == ET_MOVER ) ? cent->currentState.loopSound : cgs.sound_precache[ cent->currentState.loopSound ];\r"), String("\r"), String("\t\t// Only play sound if being drawn.\r"), String("\t\tif ( !( ent->s.eFlags & EF_NODRAW ) )\r"), String("\t\t{\r"), String("\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, v3Origin/*cent->lerpOrigin*/, vec3_origin, sfx, chan );\r"), String("\t\t}\r"), String("\t}\r"), String("\r"), String("\t// constant light glow\r"), String("\tif ( cent->currentState.constantLight ) {\r"), String("\t\tint\t\tcl;\r"), String("\t\tint\t\ti, r, g, b;\r"), String("\r"), String("\t\tcl = cent->currentState.constantLight;\r"), String("\t\tr = cl & 255;\r"), String("\t\tg = ( cl >> 8 ) & 255;\r"), String("\t\tb = ( cl >> 16 ) & 255;\r"), String("\t\ti = ( ( cl >> 24 ) & 255 ) * 4;\r"), String("\t\tcgi_R_AddLightToScene( cent->lerpOrigin, (float)i, (float)r, (float)g, (float)b );\r"), String("\t}\r"), String("}\r"), String("\r"), String("void CG_AddRefEntWithTransportEffect ( centity_t *cent, refEntity_t *ent )\r"), String("{\r"), String("\t// We are a normal thing....\r"), String("\tcgi_R_AddRefEntityToScene (ent);\r"), String("\r"), String("\tif ( ent->renderfx & RF_PULSATE && cent->gent->owner && cent->gent->owner->health &&\r"), String("\t\t!cent->gent->owner->s.number && cent->gent->owner->client && //only for player\r"), String("\t\t\tcent->gent->owner->client->ps.saberEntityState == SES_RETURNING && \r"), String("\t\t\tcent->currentState.saberActive == qfalse )\r"), String("\t{\r"), String("\t\t// if we are the saber and we have been dropped, do a glow so it can be spotted easier\r"), String("\t\tfloat\twv;\r"), String("\t\tvec3_t\torg;\r"), String("\r"), String("\t\tent->customShader = cgi_R_RegisterShader( \"gfx/effects/solidWhite_cull\" );\r"), String("\t\tent->renderfx = RF_RGB_TINT;\r"), String("\t\twv = sin( cg.time * 0.003f ) * 0.08f + 0.1f;\r"), String("\t\tent->shaderRGBA[0] = wv * 255;\r"), String("\t\tent->shaderRGBA[1] = wv * 255;\r"), String("\t\tent->shaderRGBA[2] = wv * 0;\r"), String("\t\tcgi_R_AddRefEntityToScene (ent);\r"), String("\r"), String("\t\tfor ( int i = -4; i < 10; i += 1 )\r"), String("\t\t{\r"), String("\t\t\tVectorMA( ent->origin, -i, ent->axis[2], org );\r"), String("\r"), String("\t\t\tFX_AddSprite( org, NULL, NULL, 5.5f, 5.5f, wv, wv, 0.0f, 0.0f, 1.0f, cgs.media.yellowDroppedSaberShader, 0x08000000 );\r"), String("\t\t}\r"), String("\t\tif ( cent->gent->owner->s.weapon == WP_SABER )\r"), String("\t\t{//he\'s still controlling me\r"), String("\t\t\tFX_AddSprite( cent->gent->owner->client->renderInfo.handRPoint, NULL, NULL, 8.0f, 8.0f, wv, wv, 0.0f, 0.0f, 1.0f, cgs.media.yellowDroppedSaberShader, 0x08000000 );\r"), String("\t\t}\r"), String("\t}\r"), String("}\r"), String("\r"), String("\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\r"), String("// Copy the ghoul2 data into the ref ent correctly\r"), String("void CG_SetGhoul2Info( refEntity_t *ent, centity_t *cent)\r"), String("{\r"), String("\tent->ghoul2 = &cent->gent->ghoul2;\r"), String("\tVectorCopy( cent->currentState.modelScale, ent->modelScale);\r"), String("\tent->radius = cent->currentState.radius;\r"), String("\tVectorCopy (cent->lerpAngles, ent->angles);\r"), String("}\r"), String("\r"), String("\r"), String("// write in the axis and stuff\r"), String("void G2_BoltToGhoul2Model(centity_t *cent, refEntity_t *ent)\r"), String("{\r"), String("\t\t// extract the wraith ID from the bolt info\r"), String("\tint modelNum = cent->currentState.boltInfo >> MODEL_SHIFT;\r"), String("\tmodelNum &= MODEL_AND;\r"), String("\tint boltNum\t= cent->currentState.boltInfo >> BOLT_SHIFT;\r"), String("\tboltNum &= BOLT_AND;\r"), String("\tint\tentNum = cent->currentState.boltInfo >> ENTITY_SHIFT;\r"), String("\tentNum &= ENTITY_AND;\r"), String("\r"), String(" \tmdxaBone_t \t\tboltMatrix;\r"), String("\r"), String(" \t// go away and get me the bolt position for this frame please\r"), String(" \tgi.G2API_GetBoltMatrix(cent->gent->ghoul2, modelNum, boltNum, &boltMatrix, cg_entities[entNum].currentState.angles, cg_entities[entNum].currentState.origin, cg.time, cgs.model_draw, cent->currentState.modelScale);\r"), String("\r"), String("\t// set up the axis and origin we need for the actual effect spawning\r"), String(" \tent->origin[0] = boltMatrix.matrix[0][3];\r"), String(" \tent->origin[1] = boltMatrix.matrix[1][3];\r"), String(" \tent->origin[2] = boltMatrix.matrix[2][3];\r"), String("\r"), String(" \tent->axis[0][0] = boltMatrix.matrix[0][0];\r"), String(" \tent->axis[0][1] = boltMatrix.matrix[1][0];\r"), String(" \tent->axis[0][2] = boltMatrix.matrix[2][0];\r"), String("\r"), String(" \tent->axis[1][0] = boltMatrix.matrix[0][1];\r"), String(" \tent->axis[1][1] = boltMatrix.matrix[1][1];\r"), String(" \tent->axis[1][2] = boltMatrix.matrix[2][1];\r"), String("\r"), String(" \tent->axis[2][0] = boltMatrix.matrix[0][2];\r"), String(" \tent->axis[2][1] = boltMatrix.matrix[1][2];\r"), String(" \tent->axis[2][2] = boltMatrix.matrix[2][2];\r"), String("}\r"), String("\r"), String("void ScaleModelAxis(refEntity_t\t*ent)\r"), String("\r"), String("{\t\t// scale the model should we need to\r"), String("\t\tif (ent->modelScale[0] && ent->modelScale[0] != 1.0f)\r"), String("\t\t{\r"), String("\t\t\tVectorScale( ent->axis[0], ent->modelScale[0] , ent->axis[0] );\r"), String("\t\t\tent->nonNormalizedAxes = qtrue;\r"), String("\t\t}\r"), String("\t\tif (ent->modelScale[1] && ent->modelScale[1] != 1.0f)\r"), String("\t\t{\r"), String("\t\t\tVectorScale( ent->axis[1], ent->modelScale[1] , ent->axis[1] );\r"), String("\t\t\tent->nonNormalizedAxes = qtrue;\r"), String("\t\t}\r"), String("\t\tif (ent->modelScale[2] && ent->modelScale[2] != 1.0f)\r"), String("\t\t{\r"), String("\t\t\tVectorScale( ent->axis[2], ent->modelScale[2] , ent->axis[2] );\r"), String("\t\t\tent->nonNormalizedAxes = qtrue;\r"), String("\t\t}\r"), String("}\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("/*\r"), String("==================\r"), String("CG_General\r"), String("==================\r"), String("*/\r"), String("static void CG_General( centity_t *cent ) \r"), String("{\r"), String("\trefEntity_t\t\t\tent;\r"), String("\tentityState_t\t\t*s1;\r"), String("\r"), String("\ts1 = &cent->currentState;\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\r"), String("\t// if set to invisible, skip\r"), String("\tif (!s1->modelindex && !cent->gent->ghoul2.IsValid() ) {\r"), String("\t\treturn;\r"), String("\t}\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\tif ( s1->eFlags & EF_NODRAW )\r"), String("\t{\r"), String("\t\t// If you don\'t like it doing NODRAW, then don\'t set the flag\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tmemset (&ent, 0, sizeof(ent));\r"), String("\r"), String("\t// set frame\r"), String("\r"), String("\tif ( cent->currentState.eFlags & EF_DISABLE_SHADER_ANIM )\r"), String("\t{\r"), String("\t\t// by setting the shader time to the current time, we can force an animating shader to not animate\r"), String("\t\tent.shaderTime = cg.time * 0.001f;\r"), String("\t}\r"), String("\r"), String("\tif ( s1->eFlags & EF_SHADER_ANIM )\r"), String("\t{\r"), String("\t\t// Deliberately setting it up so that shader anim will completely override any kind of model animation frame setting.\r"), String("\t\tent.renderfx|=RF_SETANIMINDEX;\r"), String("\t\tent.skinNum = s1->frame;\r"), String("\t}\r"), String("\telse if ( s1->eFlags & EF_ANIM_ONCE )\r"), String("\t{\r"), String("\t\t//s1->frame++;\r"), String("\t\t//ent.frame = s1->frame;\r"), String("\t\tent.frame = cent->gent->s.frame;\r"), String("\t\tent.renderfx|=RF_CAP_FRAMES;\r"), String("\t}\r"), String("\telse if ( s1->eFlags & EF_ANIM_ALLFAST )\r"), String("\t{\r"), String("\t\tent.frame = (cg.time / 100);\r"), String("\t\tent.renderfx|=RF_WRAP_FRAMES;\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\tent.frame = s1->frame;\r"), String("\t}\r"), String("\tent.oldframe = ent.frame;\r"), String("\tent.backlerp = 0;\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\tCG_SetGhoul2Info(&ent, cent);\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\tVectorCopy( cent->lerpOrigin, ent.origin);\r"), String("\tVectorCopy( cent->lerpOrigin, ent.oldorigin);\r"), String("\r"), String("\tent.hModel = cgs.model_draw[s1->modelindex];\r"), String("\r"), String("\tif ( !ent.radius )\r"), String("\t{// Set default g2 cull radius.\r"), String("\t\tent.radius = 60;\r"), String("\t}\r"), String("\r"), String("\tif ( s1->eFlags & EF_AUTO_SIZE && cent->gent )\r"), String("\t{\r"), String("\t\tcgi_R_ModelBounds( ent.hModel, cent->gent->mins, cent->gent->maxs );\r"), String("\t\t//Only do this once\r"), String("\t\tcent->gent->s.eFlags &= ~EF_AUTO_SIZE;\r"), String("\t}\r"), String("\r"), String("\t// player model\r"), String("\tif (s1->number == cg.snap->ps.clientNum) \r"), String("\t{\r"), String("\t\tent.renderfx |= RF_THIRD_PERSON;\t// only draw from mirrors\r"), String("\t}\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\t// are we bolted to a Ghoul2 model?\r"), String("\tif (s1->boltInfo)\r"), String("\t{\r"), String("\t\tG2_BoltToGhoul2Model(cent, &ent);\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\t//-------------------------------------------------------\r"), String("\t\t// Start of chair\r"), String("\t\t//-------------------------------------------------------\r"), String("\t\tif ( cent->gent->s.weapon == WP_EMPLACED_GUN || ( cent->gent->activator && cent->gent->activator->owner && \r"), String("\t\t\t\tcent->gent->activator->s.eFlags & EF_LOCKED_TO_WEAPON ))\r"), String("\t\t{\r"), String("\t\t\tvec3_t\ttemp;\r"), String("\r"), String("\t\t\tif ( cent->gent->health <= 0 && cent->gent->e_ThinkFunc == thinkF_NULL )\r"), String("\t\t\t{\r"), String("\t\t\t\tif ( !cent->gent->bounceCount )\r"), String("\t\t\t\t{//not an EWeb\r"), String("\t\t\t\t\tent.customShader = cgi_R_RegisterShader( \"models/map_objects/imp_mine/turret_chair_dmg\" );\r"), String("\t\t\t\t}\r"), String("\r"), String("\t\t\t\tVectorSet( temp, 0, 0, 1 );\r"), String("\r"), String("\t\t\t\t// add a big scorch mark under the gun\r"), String("\t\t\t\tCG_ImpactMark( cgs.media.scavMarkShader, cent->lerpOrigin, temp, \r"), String("\t\t\t\t\t0, 1,1,1, 1.0f, qfalse, 92, qtrue );\r"), String("\t\t\t\tCG_ImpactMark( cgs.media.scavMarkShader, cent->lerpOrigin, temp, \r"), String("\t\t\t\t\t90, 1,1,1, 1.0f, qfalse, 48, qtrue );\r"), String("\t\t\t}\r"), String("\t\t\telse\r"), String("\t\t\t{\r"), String("\t\t\t\tVectorSet( temp, 0, 0, 1 );\r"), String("\r"), String("\t\t\t\tif ( !( cent->gent->svFlags & SVF_INACTIVE ))\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tif ( !cent->gent->bounceCount )\r"), String("\t\t\t\t\t{//not an EWeb\r"), String("\t\t\t\t\t\tent.customShader = cgi_R_RegisterShader( \"models/map_objects/imp_mine/turret_chair_on\" );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\r"), String("\t\t\t\t// shadow under the gun\r"), String("\t\t\t\tCG_ImpactMark( cgs.media.shadowMarkShader, cent->lerpOrigin, temp, \r"), String("\t\t\t\t\t0, 1,1,1, 1.0f, qfalse, 32, qtrue );\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\r"), String("\t\tif ( cent->gent->activator && cent->gent->activator->owner && \r"), String("\t\t\t\tcent->gent->activator->s.eFlags & EF_LOCKED_TO_WEAPON && \r"), String("\t\t\t\tcent->gent->activator->owner->s.number == cent->currentState.number ) // gun number must be same as current entities number\r"), String("\t\t{\r"), String("\t\t\tcentity_t *cc = &cg_entities[cent->gent->activator->s.number];\r"), String("\r"), String("const weaponData_t  *wData = NULL;\r"), String("\r"), String("\t\t\tif ( cc->currentState.weapon )\r"), String("\t\t\t{\r"), String("\t\t\t\twData = &weaponData[cc->currentState.weapon];\r"), String("\t\t\t}\r"), String("\r"), String("\t\t\tif ( !( cc->currentState.eFlags & EF_FIRING ) && !( cc->currentState.eFlags & EF_ALT_FIRING ))\r"), String("\t\t\t{\r"), String("\t\t\t\t// not animating..pausing was leaving the barrels in a bad state\r"), String("\t\t\t\tgi.G2API_PauseBoneAnim( &cent->gent->ghoul2[cent->gent->playerModel], \"model_root\", cg.time );\r"), String("\r"), String("//\t\t\t\tgi.G2API_SetBoneAnimIndex( &cent->gent->ghoul2[cent->gent->playerModel], cent->gent->rootBone, \r"), String("//\t\t\t\t\t\t0, 0, BONE_ANIM_OVERRIDE, 1.0f, cg.time );\r"), String("\t\t\t}\r"), String("\r"), String("\t\t\t// get alternating muzzle end bolts\r"), String("\t\t\tint\t\t\tbolt = cent->gent->handRBolt;\r"), String("\t\t\tmdxaBone_t\tboltMatrix;\r"), String("\r"), String("\t\t\tif ( !cc->gent->fxID || bolt == -1 )\r"), String("\t\t\t{\r"), String("\t\t\t\tbolt = cent->gent->handLBolt;\r"), String("\t\t\t}\r"), String("\r"), String("\t\t\tif ( bolt == -1 )\r"), String("\t\t\t{\r"), String("\t\t\t\tbolt = 0;\r"), String("\t\t\t}\r"), String("\t\t\tgi.G2API_GetBoltMatrix( cent->gent->ghoul2, 0, bolt, \r"), String("\t\t\t\t&boltMatrix, cent->lerpAngles, cent->lerpOrigin, cg.time,\r"), String("\t\t\t\tcgs.model_draw, cent->currentState.modelScale );\r"), String("\r"), String("\t\t\t// store the muzzle point and direction so that we can fire in the right direction\r"), String("\t\t\tgi.G2API_GiveMeVectorFromMatrix( boltMatrix, ORIGIN, cc->gent->client->renderInfo.muzzlePoint );\r"), String("\t\t\tif ( cent->gent->bounceCount )\r"), String("\t\t\t{//EWeb - *sigh* the muzzle tag on this is not aligned like th eone on the emplaced gun... consistency anyone...?\r"), String("\t\t\t\tgi.G2API_GiveMeVectorFromMatrix( boltMatrix, NEGATIVE_X, cc->gent->client->renderInfo.muzzleDir );\r"), String("\t\t\t}\r"), String("\t\t\telse\r"), String("\t\t\t{//Emplaced gun\r"), String("\t\t\t\tgi.G2API_GiveMeVectorFromMatrix( boltMatrix, POSITIVE_Y, cc->gent->client->renderInfo.muzzleDir );\r"), String("\t\t\t}\r"), String("\t\t\tcc->gent->client->renderInfo.mPCalcTime = cg.time;\r"), String("\r"), String("\t\t\t// HACK: adding in muzzle flashes\r"), String("\t\t\tif ( cc->muzzleFlashTime > 0 && wData )\r"), String("\t\t\t{\r"), String("\t\t\t\tconst char *effect = NULL;\r"), String("\t\t\t\tcc->muzzleFlashTime = 0;\r"), String("\r"), String("\t\t\t\t// Try and get a default muzzle so we have one to fall back on\r"), String("\t\t\t\tif ( wData->mMuzzleEffect[0] )\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\teffect = &wData->mMuzzleEffect[0];\r"), String("\t\t\t\t}\r"), String("\r"), String("\t\t\t\tif ( cc->currentState.eFlags & EF_ALT_FIRING )\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\t// We\'re alt-firing, so see if we need to override with a custom alt-fire effect\r"), String("\t\t\t\t\tif ( wData->mAltMuzzleEffect[0] )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\teffect = &wData->mAltMuzzleEffect[0];\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\r"), String("\t\t\t\tif ( cc->currentState.eFlags & EF_FIRING || cc->currentState.eFlags & EF_ALT_FIRING )\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tif ( cent->gent->bounceCount )\r"), String("\t\t\t\t\t{//EWeb\r"), String("\t\t\t\t\t\tgi.G2API_SetBoneAnimIndex( &cent->gent->ghoul2[cent->gent->playerModel], cent->gent->rootBone, \r"), String("\t\t\t\t\t\t\t2, 4, BONE_ANIM_OVERRIDE_FREEZE, 0.6f, cg.time, -1, -1 );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\telse\r"), String("\t\t\t\t\t{//Emplaced Gun\r"), String("\t\t\t\t\t\tgi.G2API_SetBoneAnimIndex( &cent->gent->ghoul2[cent->gent->playerModel], cent->gent->rootBone, \r"), String("\t\t\t\t\t\t\t0, 3, BONE_ANIM_OVERRIDE_FREEZE, 0.6f, cg.time, -1, -1 );\r"), String("\t\t\t\t\t}\r"), String("\t\t\r"), String("\t\t\t\t\tif ( effect )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\t// We got an effect and we\'re firing, so let \'er rip.\r"), String("\t\t\t\t\t\ttheFxScheduler.PlayEffect( effect, cc->gent->client->renderInfo.muzzlePoint, \r"), String("\t\t\t\t\t\t\t\t\t\t\t\t\tcc->gent->client->renderInfo.muzzleDir );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\r"), String("\t\t\tVectorCopy( cent->gent->s.apos.trBase, cent->lerpAngles );\r"), String("\t\t}\r"), String("\t\t//-------------------------------------------------------\r"), String("\t\t// End of chair\r"), String("\t\t//-------------------------------------------------------\r"), String("\r"), String("\t\tAnglesToAxis( cent->lerpAngles, ent.axis );\r"), String("\t}\r"), String("\r"), String("\t//copy modelscale, if any\r"), String("\tVectorCopy( cent->currentState.modelScale, ent.modelScale );\r"), String("\t//apply modelscale, if any\r"), String("\tScaleModelAxis(&ent);\r"), String("\r"), String("\tif (cent->gent->ghoul2.size())\r"), String("\t{\r"), String("\t\t//FIXME: use a flag for this, not a strcmp\r"), String("\t\tif ( cent->gent->classname && Q_stricmp( \"limb\", cent->gent->classname ) == 0 )\r"), String("\t\t{//limb, copy RGB\r"), String("\t\t\tent.shaderRGBA[0] = cent->gent->startRGBA[0];\r"), String("\t\t\tent.shaderRGBA[1] = cent->gent->startRGBA[1];\r"), String("\t\t\tent.shaderRGBA[2] = cent->gent->startRGBA[2];\r"), String("\t\t}\r"), String("\t\tif ( s1->weapon == WP_SABER && cent->gent && cent->gent->owner && cent->gent->owner->inuse )\r"), String("\t\t{//flying lightsaber\r"), String("\t\t\t//FIXME: better way to tell what it is would be nice\r"), String("\t\t\tif ( cent->gent->classname && !Q_stricmp( \"limb\", cent->gent->classname ) )\r"), String("\t\t\t{//limb, just add blade\r"), String("\t\t\t\tif ( cent->gent->owner->client )\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tif ( cent->gent->owner->client->ps.saber[0].Length() > 0 )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tCG_AddSaberBlade( &cg_entities[cent->gent->owner->s.number], \r"), String("\t\t\t\t\t\t\t&cg_entities[cent->gent->s.number], NULL, ent.renderfx, \r"), String("\t\t\t\t\t\t\tcent->gent->weaponModel[0], cent->lerpOrigin, cent->lerpAngles );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\telse if ( cent->gent->owner->client->ps.saberEventFlags & SEF_INWATER )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tCG_CheckSaberInWater( &cg_entities[cent->gent->owner->s.number], \r"), String("\t\t\t\t\t\t\t&cg_entities[cent->gent->s.number], 0, cent->gent->weaponModel[0], \r"), String("\t\t\t\t\t\t\tcent->lerpOrigin, cent->lerpAngles );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\t\t\telse\r"), String("\t\t\t{//thrown saber\r"), String("\t\t\t\t//light?  sound?\r"), String("\t\t\t\tif ( cent->gent->owner->client && g_entities[cent->currentState.otherEntityNum].client && g_entities[cent->currentState.otherEntityNum].client->ps.saber[0].Active() )\r"), String("\t\t\t\t{//saber is in-flight and active, play a sound on it\r"), String("\t\t\t\t\tif ( cent->gent->owner->client->ps.saberEntityState == SES_RETURNING \r"), String("\t\t\t\t\t\t&& cent->gent->owner->client->ps.saber[0].type != SABER_STAR )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, \r"), String("\t\t\t\t\t\t\tcent->lerpOrigin, vec3_origin, \r"), String("\t\t\t\t\t\t\tcgs.sound_precache[g_entities[cent->currentState.clientNum].client->ps.saber[0].soundLoop] );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\telse\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tint spinSound;\r"), String("\t\t\t\t\t\tif ( cent->gent->owner->client->ps.saber[0].spinSound \r"), String("\t\t\t\t\t\t\t&& cgs.sound_precache[cent->gent->owner->client->ps.saber[0].spinSound] )\r"), String("\t\t\t\t\t\t{\r"), String("\t\t\t\t\t\t\tspinSound = cgs.sound_precache[cent->gent->owner->client->ps.saber[0].spinSound];\r"), String("\t\t\t\t\t\t}\r"), String("\t\t\t\t\t\telse if ( cent->gent->owner->client->ps.saber[0].type == SABER_SITH_SWORD )\r"), String("\t\t\t\t\t\t{\r"), String("\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspinoff.wav\" );\r"), String("\t\t\t\t\t\t}\r"), String("\t\t\t\t\t\telse\r"), String("\t\t\t\t\t\t{\r"), String("\t\t\t\t\t\t\tswitch ( cent->gent->owner->client->ps.forcePowerLevel[FP_SABERTHROW] )\r"), String("\t\t\t\t\t\t\t{\r"), String("\t\t\t\t\t\t\tcase FORCE_LEVEL_1:\r"), String("\t\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin3.wav\" );\r"), String("\t\t\t\t\t\t\t\tbreak;\r"), String("\t\t\t\t\t\t\tcase FORCE_LEVEL_2:\r"), String("\t\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin2.wav\" );\r"), String("\t\t\t\t\t\t\t\tbreak;\r"), String("\t\t\t\t\t\t\tdefault:\r"), String("\t\t\t\t\t\t\tcase FORCE_LEVEL_3:\r"), String("\t\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin1.wav\" );\r"), String("\t\t\t\t\t\t\t\tbreak;\r"), String("\t\t\t\t\t\t\t}\r"), String("\t\t\t\t\t\t}\r"), String("\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, \r"), String("\t\t\t\t\t\t\tvec3_origin, spinSound );\r"), String("\t\t\t\t\t\t/*\r"), String("\t\t\t\t\t\tif ( cg_weapons[WP_SABER].missileSound )\r"), String("\t\t\t\t\t\t{\r"), String("\t\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, cg_weapons[WP_SABER].missileSound );\r"), String("\t\t\t\t\t\t}\r"), String("\t\t\t\t\t\t*/\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\t\t\t\tif ( cent->gent->owner->client )\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tif ( cent->gent->owner->client->ps.saber[0].Length() > 0 )\r"), String("\t\t\t\t\t{//only add the blade if it\'s on\r"), String("\t\t\t\t\t\tCG_AddSaberBlade( &cg_entities[cent->gent->owner->s.number], \r"), String("\t\t\t\t\t\t\t&cg_entities[cent->gent->s.number], NULL, ent.renderfx, \r"), String("\t\t\t\t\t\t\t0, cent->lerpOrigin, cent->lerpAngles );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\telse if ( cent->gent->owner->client->ps.saberEventFlags & SEF_INWATER )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tCG_CheckSaberInWater( &cg_entities[cent->gent->owner->s.number], \r"), String("\t\t\t\t\t\t\t&cg_entities[cent->gent->s.number], 0, 0, cent->lerpOrigin, \r"), String("\t\t\t\t\t\t\tcent->lerpAngles );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\t\t\t\tif ( cent->gent->owner->health )\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\t//make sure we can always be seen\r"), String("\t\t\t\t\tent.renderfx |= RF_PULSATE;\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\tif ( s1->weapon == WP_SABER && cent->gent && cent->gent->owner )\r"), String("\t\t{//flying lightsaber\r"), String("\t\t\t//light?  sound?\r"), String("\t\t\tif ( cent->gent->owner->client && cent->currentState.saberActive )\r"), String("\t\t\t{//saber is in-flight and active, play a sound on it\r"), String("\t\t\t\tif ( cent->gent->owner->client->ps.saberEntityState == SES_RETURNING \r"), String("\t\t\t\t\t&& cent->gent->owner->client->ps.saber[0].type != SABER_STAR )\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tif ( cg_weapons[WP_SABER].firingSound )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, \r"), String("\t\t\t\t\t\t\tcent->lerpOrigin, vec3_origin, cg_weapons[WP_SABER].firingSound );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\t\t\t\telse\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tint spinSound;\r"), String("\t\t\t\t\tif ( cent->gent->owner->client->ps.saber[0].spinSound \r"), String("\t\t\t\t\t\t&& cgs.sound_precache[cent->gent->owner->client->ps.saber[0].spinSound] )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tspinSound = cgs.sound_precache[cent->gent->owner->client->ps.saber[0].spinSound];\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\telse if ( cent->gent->owner->client->ps.saber[0].type == SABER_SITH_SWORD )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspinoff.wav\" );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\telse\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tswitch ( cent->gent->owner->client->ps.forcePowerLevel[FP_SABERTHROW] )\r"), String("\t\t\t\t\t\t{\r"), String("\t\t\t\t\t\tcase FORCE_LEVEL_1:\r"), String("\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin3.wav\" );\r"), String("\t\t\t\t\t\t\tbreak;\r"), String("\t\t\t\t\t\tcase FORCE_LEVEL_2:\r"), String("\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin2.wav\" );\r"), String("\t\t\t\t\t\t\tbreak;\r"), String("\t\t\t\t\t\tdefault:\r"), String("\t\t\t\t\t\tcase FORCE_LEVEL_3:\r"), String("\t\t\t\t\t\t\tspinSound = cgi_S_RegisterSound( \"sound/weapons/saber/saberspin1.wav\" );\r"), String("\t\t\t\t\t\t\tbreak;\r"), String("\t\t\t\t\t\t}\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, \r"), String("\t\t\t\t\t\tvec3_origin, spinSound );\r"), String("\t\t\t\t\t/*\r"), String("\t\t\t\t\tif ( cg_weapons[WP_SABER].missileSound )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, cg_weapons[WP_SABER].missileSound );\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\t*/\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\t\t\tCG_AddSaberBlade( &cg_entities[cent->gent->owner->s.number], \r"), String("\t\t\t\tNULL, &ent, ent.renderfx, 0, NULL, NULL );\r"), String("\r"), String("\t\t\tif ( cent->gent->owner->health )\r"), String("\t\t\t{\r"), String("\t\t\t\t//make sure we can always be seen\r"), String("\t\t\t\tent.renderfx |= RF_PULSATE;\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t}\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\tif ( cent->gent && cent->gent->forcePushTime > cg.time )\r"), String("\t{//FIXME: if I\'m a rather large model, this will look kind of stupid...\r"), String("\t\tCG_ForcePushBlur( cent->lerpOrigin );\r"), String("\t}\r"), String("\tCG_AddRefEntWithTransportEffect( cent, &ent );\r"), String("\r"), String("\tif ( cent->gent->health <= 0 \r"), String("\t\t&& cent->gent->s.weapon == WP_EMPLACED_GUN \r"), String("\t\t&& cent->gent->e_ThinkFunc )\r"), String("\t{\r"), String("\t\t// make the gun pulse red to warn about it exploding\r"), String("\t\tfloat val = (1.0f - (float)(cent->gent->nextthink - cg.time) / 3200.0f ) * 0.3f;\r"), String("\r"), String("\t\tent.customShader = cgi_R_RegisterShader( \"gfx/effects/solidWhite\" );\r"), String("\t\tent.shaderRGBA[0] = (sin( cg.time * 0.04f ) * val * 0.4f + val) * 255;\r"), String("\t\tent.shaderRGBA[1] = ent.shaderRGBA[2] = 0;\r"), String("\t\tent.renderfx |= RF_RGB_TINT;\r"), String("\t\tcgi_R_AddRefEntityToScene( &ent );\r"), String("\t}\r"), String("\r"), String("\t//--------------------------\r"), String("\tif ( s1->eFlags & EF_FIRING && cent->gent->inuse )\r"), String("\t{\r"), String("\t\t//special code for adding the beam to the attached tripwire mine\r"), String("\t\tvec3_t\t\t\tbeamOrg;\r"), String("\t\tint\t\t\t\thandle = 0;\r"), String("\t\tSEffectTemplate\t*temp;\r"), String("\r"), String("\t\tVectorMA( ent.origin, 6.6f, ent.axis[0], beamOrg );// forward\r"), String("\r"), String("\t\t// overriding the effect, so give us a copy first\r"), String("\t\ttemp = theFxScheduler.GetEffectCopy( \"tripMine/laser\", &handle );\t\r"), String("\r"), String("\t\tif ( temp )\r"), String("\t\t{\r"), String("\t\t\t// have a copy, so get the line element out of there\r"), String("\t\t\tCPrimitiveTemplate *prim = theFxScheduler.GetPrimitiveCopy( temp, \"line1\" );\r"), String("\r"), String("\t\t\tif ( prim )\r"), String("\t\t\t{\r"), String("\t\t\t\t// we have the primitive, so modify the endpoint\r"), String("\t\t\t\tprim->mOrigin2X.SetRange( cent->gent->pos4[0], cent->gent->pos4[0] );\r"), String("\t\t\t\tprim->mOrigin2Y.SetRange( cent->gent->pos4[1], cent->gent->pos4[1] );\r"), String("\t\t\t\tprim->mOrigin2Z.SetRange( cent->gent->pos4[2], cent->gent->pos4[2] );\r"), String("\r"), String("\t\t\t\t// have a copy, so get the line element out of there\r"), String("\t\t\t\tCPrimitiveTemplate *prim = theFxScheduler.GetPrimitiveCopy( temp, \"line2\" );\r"), String("\r"), String("\t\t\t\tif ( prim )\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\t// we have the primitive, so modify the cent->gent->pos3point\r"), String("\t\t\t\t\tprim->mOrigin2X.SetRange( cent->gent->pos4[0], cent->gent->pos4[0] );\r"), String("\t\t\t\t\tprim->mOrigin2Y.SetRange( cent->gent->pos4[1], cent->gent->pos4[1] );\r"), String("\t\t\t\t\tprim->mOrigin2Z.SetRange( cent->gent->pos4[2], cent->gent->pos4[2] );\r"), String("\r"), String("\t\t\t\t\t// play the modified effect\r"), String("\t\t\t\t\ttheFxScheduler.PlayEffect( handle, beamOrg, ent.axis[0] );\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\r"), String("\t\ttheFxScheduler.PlayEffect( \"tripMine/laserImpactGlow\", cent->gent->pos4, ent.axis[0] );\r"), String("\t}\r"), String("\r"), String("\r"), String("\tif ( s1->eFlags & EF_PROX_TRIP )\r"), String("\t{\r"), String("\t\t//special code for adding the glow end to proximity tripmine\r"), String("\t\tvec3_t\tbeamOrg;\r"), String("\r"), String("\t\tVectorMA( ent.origin, 6.6f, ent.axis[0], beamOrg );// forward\r"), String("\t\ttheFxScheduler.PlayEffect( \"tripMine/glowBit\", beamOrg, ent.axis[0] );\r"), String("\t}\r"), String("\r"), String("\tif ( s1->eFlags & EF_ALT_FIRING )\r"), String("\t{\r"), String("\t\t// hack for the spotlight\r"), String("\t\tvec3_t\torg, axis[3], dir;\r"), String("\r"), String("\t\tAngleVectors( cent->lerpAngles, dir, NULL, NULL );\r"), String("\r"), String("\t\tCG_GetTagWorldPosition( &ent, \"tag_flash\", org, axis );\r"), String("\r"), String("\t\ttheFxScheduler.PlayEffect( \"env/light_cone\", org, axis[0] );\r"), String("\r"), String("\t\tVectorMA( cent->lerpOrigin, cent->gent->radius - 5, dir, org ); // stay a bit back from the impact point...this may not be enough?\r"), String("\r"), String("\t\tcgi_R_AddLightToScene( org, 225, 1.0f, 1.0f, 1.0f );\r"), String("\t}\r"), String("\r"), String("\t//-----------------------------------------------------------\r"), String("\tif ( cent->gent->flags & (FL_DMG_BY_HEAVY_WEAP_ONLY | FL_SHIELDED ))\r"), String("\t{\r"), String("\t\t// Dumb assumption, but I guess we must be a shielded ion_cannon??  We should probably verify\r"), String("\t\t// if it\'s an ion_cannon that\'s Heavy Weapon only, we don\'t want to make it shielded do we...?\r"), String("\t\tif ( (!strcmp( \"misc_ion_cannon\", cent->gent->classname )) && (cent->gent->flags & FL_SHIELDED ))\r"), String("\t\t{\r"), String("\t\t\t// must be doing \"pain\"....er, impact\r"), String("\t\t\tif ( cent->gent->painDebounceTime > cg.time )\r"), String("\t\t\t{\r"), String("\t\t\t\tfloat t = (float)(cent->gent->painDebounceTime - cg.time ) / 1000.0f;\r"), String("\r"), String("\t\t\t\t// Only display when we have damage\r"), String("\t\t\t\tif ( t >= 0.0f && t <= 1.0f ) \r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tt *= random();\r"), String("\r"), String("\t\t\t\t\tent.shaderRGBA[0] = ent.shaderRGBA[1] = ent.shaderRGBA[2] = 255.0f * t;\r"), String("\t\t\t\t\tent.shaderRGBA[3] = 255;\r"), String("\t\t\t\t\tent.renderfx &= ~RF_ALPHA_FADE;\r"), String("\t\t\t\t\tent.renderfx |= RF_RGB_TINT;\r"), String("\t\t\t\t\tent.customShader = cgi_R_RegisterShader( \"gfx/misc/ion_shield\" );\r"), String("\t\t\t\t\r"), String("\t\t\t\t\tcgi_R_AddRefEntityToScene( &ent );\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t}\r"), String("\r"), String("\t//draw force sight shell around it, too\r"), String("\tif ((cg.snap->ps.forcePowersActive & (1 << FP_SEE)) \r"), String("\t\t&& cg.snap->ps.clientNum != cent->currentState.number \r"), String("\t\t&& CG_PlayerCanSeeCent( cent ) )\r"), String("\t{//so player can see dark missiles/explosives\r"), String("\t\tif ( s1->weapon == WP_THERMAL\r"), String("\t\t\t|| s1->weapon == WP_DET_PACK\r"), String("\t\t\t|| s1->weapon == WP_TRIP_MINE\r"), String("\t\t\t|| (cent->gent&&cent->gent->e_UseFunc==useF_ammo_power_converter_use)\r"), String("\t\t\t|| (cent->gent&&cent->gent->e_UseFunc==useF_shield_power_converter_use)\r"), String("\t\t\t|| (s1->eFlags&EF_FORCE_VISIBLE) )\r"), String("\t\t{//really, we only need to do this for things like thermals, detpacks and tripmines, no?\r"), String("\t\t\tCG_AddForceSightShell( &ent, cent );\r"), String("\t\t}\r"), String("\t}\r"), String("}\r"), String("\r"), String("/*\r"), String("==================\r"), String("CG_Speaker\r"), String("\r"), String("Speaker entities can automatically play sounds\r"), String("==================\r"), String("*/\r"), String("static void CG_Speaker( centity_t *cent ) {\r"), String("\tif ( ! cent->currentState.clientNum ) {\t// FIXME: use something other than clientNum...\r"), String("\t\treturn;\t\t// not auto triggering\r"), String("\t}\r"), String("\r"), String("\tif ( cg.time < cent->miscTime ) {\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tcgi_S_StartSound (NULL, cent->currentState.number, CHAN_ITEM, cgs.sound_precache[cent->currentState.eventParm] );\r"), String("\r"), String("\t//\tent->s.frame = ent->wait * 10;\r"), String("\t//\tent->s.clientNum = ent->random * 10;\r"), String("\tcent->miscTime = (int)(cg.time + cent->currentState.frame * 100 + cent->currentState.clientNum * 100 * crandom());\r"), String("}\r"), String("\r"), String("/*\r"), String("==================\r"), String("CG_Item\r"), String("==================\r"), String("*/\r"), String("static void CG_Item( centity_t *cent ) \r"), String("{\r"), String("\trefEntity_t\t\t\tent;\r"), String("\tentityState_t\t\t*es;\r"), String("\tgitem_t\t\t\t\t*item;\r"), String("//\tint\t\t\t\t\tmsec;\r"), String("//\tfloat\t\t\t\tfrac;\r"), String("\tfloat\t\t\t\tscale;\r"), String("\r"), String("\tes = &cent->currentState;\r"), String("\tif ( es->modelindex >= bg_numItems ) \r"), String("\t{\r"), String("\t\tCG_Error( \"Bad item index %i on entity\", es->modelindex );\r"), String("\t}\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\r"), String("\t// if set to invisible, skip\r"), String("\tif ( (!es->modelindex && !cent->gent->ghoul2.IsValid() ) || ( es->eFlags & EF_NODRAW ) ) \r"), String("\t{\r"), String("\t\treturn;\r"), String("\t}\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\tif ( cent->gent && !cent->gent->inuse )\r"), String("\t{\r"), String("\t\t// Yeah, I know....items were being freed on touch, but it could still get here and draw incorrectly...\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\titem = &bg_itemlist[ es->modelindex ];\r"), String("\r"), String("\tif ( cg_simpleItems.integer ) \r"), String("\t{\r"), String("\t\tmemset( &ent, 0, sizeof( ent ) );\r"), String("\t\tent.reType = RT_SPRITE;\r"), String("\t\tVectorCopy( cent->lerpOrigin, ent.origin );\r"), String("\t\tent.radius = 14;\r"), String("\t\tent.customShader = cg_items[es->modelindex].icon;\r"), String("\t\tent.shaderRGBA[0] = 255;\r"), String("\t\tent.shaderRGBA[1] = 255;\r"), String("\t\tent.shaderRGBA[2] = 255;\r"), String("\t\tent.shaderRGBA[3] = 255;\r"), String("\t\tcgi_R_AddRefEntityToScene(&ent);\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tmemset (&ent, 0, sizeof(ent));\r"), String("\r"), String("\t// items bob up and down continuously\r"), String("\tif( item->giType == IT_HOLOCRON )\r"), String("\t{\r"), String("\t\tscale = 0.005f + cent->currentState.number * 0.00001f;\r"), String("\t\tcent->lerpOrigin[2] += (float)(4 + cos( ( cg.time + 1000 ) *  scale ) * 3)+8; // just raised them up a bit\r"), String("\t}\r"), String("\r"), String("\r"), String("\r"), String("\t// autorotate at one of two speeds\r"), String("//\tif ( item->giType == IT_HEALTH ) {\r"), String("//\t\tVectorCopy( cg.autoAnglesFast, cent->lerpAngles );\r"), String("//\t\tAxisCopy( cg.autoAxisFast, ent.axis );\r"), String("//\t} else {\r"), String("\tif( item->giType == IT_HOLOCRON )\r"), String("\t{\r"), String("\t\tVectorCopy( cg.autoAngles, cent->lerpAngles );\r"), String("\t\tAxisCopy( cg.autoAxis, ent.axis );\r"), String("\t}\r"), String("\r"), String("\r"), String("\t// the weapons have their origin where they attatch to player\r"), String("\t// models, so we need to offset them or they will rotate\r"), String("\t// eccentricly\r"), String("//\tif ( item->giType == IT_WEAPON ) {\r"), String("//\t\tweaponInfo_t\t*wi;\r"), String("//\r"), String("//\t\twi = &cg_weapons[item->giTag];\r"), String("//\t\tcent->lerpOrigin[0] -= \r"), String("//\t\t\twi->weaponMidpoint[0] * ent.axis[0][0] +\r"), String("//\t\t\twi->weaponMidpoint[1] * ent.axis[1][0] +\r"), String("//\t\t\twi->weaponMidpoint[2] * ent.axis[2][0];\r"), String("//\t\tcent->lerpOrigin[1] -= \r"), String("//\t\t\twi->weaponMidpoint[0] * ent.axis[0][1] +\r"), String("//\t\t\twi->weaponMidpoint[1] * ent.axis[1][1] +\r"), String("//\t\t\twi->weaponMidpoint[2] * ent.axis[2][1];\r"), String("//\t\tcent->lerpOrigin[2] -= \r"), String("//\t\t\twi->weaponMidpoint[0] * ent.axis[0][2] +\r"), String("//\t\t\twi->weaponMidpoint[1] * ent.axis[1][2] +\r"), String("//\t\t\twi->weaponMidpoint[2] * ent.axis[2][2];\r"), String("\r"), String("//\t\tcent->lerpOrigin[2] += 8;\t// an extra height boost\r"), String("//\t}\r"), String("\tvec3_t spinAngles;\r"), String("\r"), String("\t//AxisClear( ent.axis );\r"), String("\tVectorCopy( cent->gent->s.angles, spinAngles );\r"), String("\r"), String("\tif ( cent->gent->ghoul2.IsValid()\r"), String("\t\t&& cent->gent->ghoul2.size() )\r"), String("\t{//since modelindex is used by items as an index into items(not models), we need to ignore the hModel here to force it to use the ghoul2 model if we have one\r"), String("\t\tent.hModel = cgs.model_draw[0];\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\tent.hModel = cg_items[es->modelindex].models;\r"), String("\t}\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\tCG_SetGhoul2Info(&ent, cent);  \r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\tVectorCopy( cent->lerpOrigin, ent.origin);\r"), String("\tVectorCopy( cent->lerpOrigin, ent.oldorigin);\r"), String("\r"), String("\tent.nonNormalizedAxes = qfalse;\r"), String("\r"), String("\t// lovely...this is for weapons that should be oriented vertically.  For weapons lockers and such.\r"), String("\tif ( cent->gent->spawnflags & 16 )\r"), String("\t{\t//VectorClear( spinAngles );\r"), String("\t\tif ( item->giType == IT_WEAPON \r"), String("\t\t\t&& item->giTag == WP_SABER )\r"), String("\t\t{\r"), String("\t\t\tif ( cent->gent->random )\r"), String("\t\t\t{//pitch specified\r"), String("\t\t\t\tspinAngles[PITCH] += cent->gent->random;\r"), String("\t\t\t}\r"), String("\t\t\telse\r"), String("\t\t\t{\r"), String("\t\t\t\tspinAngles[PITCH] -= 20;\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("\t\t\tspinAngles[PITCH] -= 75;\r"), String("\t\t}\r"), String("\t}\r"), String("\t\r"), String("\tif( item->giType != IT_HOLOCRON )\r"), String("\t{\r"), String("\t\tAnglesToAxis( spinAngles, ent.axis );\r"), String("\t}\r"), String("\r"), String("\t// items without glow textures need to keep a minimum light value\r"), String("\t// so they are always visible\r"), String("/*\tif (( item->giType == IT_WEAPON ) || ( item->giType == IT_ARMOR )) \r"), String("\t{\r"), String("\t\tent.renderfx |= RF_MINLIGHT;\r"), String("\t}\r"), String("*/\r"), String("\t// increase the size of the weapons when they are presented as items\r"), String("//\tif ( item->giType == IT_WEAPON ) {\r"), String("//\t\tVectorScale( ent.axis[0], 1.5f, ent.axis[0] );\r"), String("//\t\tVectorScale( ent.axis[1], 1.5f, ent.axis[1] );\r"), String("//\t\tVectorScale( ent.axis[2], 1.5f, ent.axis[2] );\r"), String("//\t\tent.nonNormalizedAxes = qtrue;\r"), String("//\t}\r"), String("\r"), String("\t// add to refresh list\r"), String("\tcgi_R_AddRefEntityToScene(&ent);\r"), String("\r"), String("\tif ((cg.snap->ps.forcePowersActive & (1 << FP_SEE)) \r"), String("\t\t&& cg.snap->ps.clientNum != cent->currentState.number \r"), String("\t\t&& CG_PlayerCanSeeCent( cent ) )\r"), String("\t{\r"), String("\t\tCG_AddForceSightShell( &ent, cent );\r"), String("\t}\r"), String("\r"), String("\tif ( item->giType == IT_WEAPON \r"), String("\t\t&& item->giTag == WP_SABER \r"), String("\t\t&& (!cent->gent || !(cent->gent->spawnflags&64/*ITMSF_NOGLOW*/)) )\r"), String("\t{\r"), String("\t\t// saber pickup item needs to be more visible\r"), String("\t\tfloat\twv;\r"), String("\t\tvec3_t\torg;\r"), String("\r"), String("\t\tent.customShader = cgi_R_RegisterShader( \"gfx/effects/solidWhite_cull\" );\r"), String("\t\tent.renderfx = RF_RGB_TINT;\r"), String("\t\twv = sin( cg.time * 0.002f ) * 0.08f + 0.2f;\r"), String("\t\tent.shaderRGBA[0] = ent.shaderRGBA[1] = wv * 255;\r"), String("\t\tent.shaderRGBA[2] = 0;\r"), String("\t\tcgi_R_AddRefEntityToScene(&ent);\r"), String("\r"), String("\t\tfor ( int i = -4; i < 10; i += 1 )\r"), String("\t\t{\r"), String("\t\t\tVectorMA( ent.origin, -i, ent.axis[2], org );\r"), String("\r"), String("\t\t\tFX_AddSprite( org, NULL, NULL, 10.0f, 10.0f, wv * 0.5f, wv * 0.5f, 0.0f, 0.0f, 1.0f, cgs.media.yellowDroppedSaberShader, 0x08000000 );\r"), String("\t\t}\r"), String("\r"), String("\t\t// THIS light looks crappy...maybe it should just be removed...\r"), String("\t\tcgi_R_AddLightToScene( ent.origin, wv * 350 + 180, 1.0f, 1.0f, 0.0f );\r"), String("\t}\r"), String("}\r"), String("\r"), String("//============================================================================\r"), String("\r"), String("/*\r"), String("===============\r"), String("CG_Missile\r"), String("===============\r"), String("*/\r"), String("static void CG_Missile( centity_t *cent ) {\r"), String("\trefEntity_t\t\t\tent;\r"), String("\tentityState_t\t\t*s1;\r"), String("\tconst weaponInfo_t\t*weapon;\r"), String("\tconst weaponData_t  *wData;\r"), String("\r"), String("\tif ( !cent->gent->inuse )\r"), String("\t\treturn;\r"), String("\r"), String("\ts1 = &cent->currentState;\r"), String("\tif ( s1->weapon >= WP_NUM_WEAPONS ) {\r"), String("\t\ts1->weapon = 0;\r"), String("\t}\r"), String("\tweapon = &cg_weapons[s1->weapon];\r"), String("\twData = &weaponData[s1->weapon];\r"), String("\r"), String("\tif ( s1->pos.trType != TR_INTERPOLATE )\r"), String("\t{\r"), String("\t\t// calculate the axis\r"), String("\t\tVectorCopy( s1->angles, cent->lerpAngles );\r"), String("\t}\r"), String("\r"), String("\tif ( cent->gent->alt_fire )\r"), String("\t{\r"), String("\t\t// add trails\r"), String("\t\tif ( weapon->alt_missileTrailFunc )  \r"), String("\t\t\tweapon->alt_missileTrailFunc( cent, weapon );\r"), String("\r"), String("\t\t// add dynamic light\r"), String("\t\tif ( wData->alt_missileDlight )\r"), String("\t\t\t\tcgi_R_AddLightToScene(cent->lerpOrigin, wData->alt_missileDlight, \r"), String("\t\t\t\t\twData->alt_missileDlightColor[0], wData->alt_missileDlightColor[1], wData->alt_missileDlightColor[2] );\r"), String("\r"), String("\t\t// add missile sound\r"), String("\t\tif ( weapon->alt_missileSound )\r"), String("\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->alt_missileSound );\r"), String("\r"), String("\t\t//Don\'t draw something without a model\r"), String("\t\tif ( weapon->alt_missileModel == NULL )\r"), String("\t\t\treturn;\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\t// add trails\r"), String("\t\tif ( weapon->missileTrailFunc )  \r"), String("\t\t\tweapon->missileTrailFunc( cent, weapon );\r"), String("\r"), String("\t\t// add dynamic light\r"), String("\t\tif ( wData->missileDlight )\r"), String("\t\t\tcgi_R_AddLightToScene(cent->lerpOrigin, wData->missileDlight, \r"), String("\t\t\t\twData->missileDlightColor[0], wData->missileDlightColor[1], wData->missileDlightColor[2] );\r"), String("\r"), String("\t\t// add missile sound\r"), String("\t\tif ( weapon->missileSound )\r"), String("\t\t\tcgi_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->missileSound );\r"), String("\r"), String("\t\t//Don\'t draw something without a model\r"), String("\t\tif ( weapon->missileModel == NULL )\r"), String("\t\t\treturn;\r"), String("\t}\r"), String("\r"), String("\t// create the render entity\r"), String("\tmemset (&ent, 0, sizeof(ent));\r"), String("\tVectorCopy( cent->lerpOrigin, ent.origin);\r"), String("\tVectorCopy( cent->lerpOrigin, ent.oldorigin);\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\tCG_SetGhoul2Info(&ent, cent);  \r"), String("\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\t// flicker between two skins\r"), String("\tent.skinNum = cg.clientFrame & 1;\r"), String("\tent.renderfx = /*weapon->missileRenderfx | */RF_NOSHADOW;\r"), String("\r"), String("\tif ( cent->gent->alt_fire )\r"), String("\t\tent.hModel = weapon->alt_missileModel;\r"), String("\telse\r"), String("\t\tent.hModel = weapon->missileModel;\r"), String("\r"), String("\t// spin as it moves\r"), String("\tif ( s1->apos.trType != TR_INTERPOLATE)\r"), String("\t{\r"), String("\r"), String("\t\t// convert direction of travel into axis\r"), String("\t\tif ( VectorNormalize2( s1->pos.trDelta, ent.axis[0] ) == 0 ) {\r"), String("\t\t\tent.axis[0][2] = 1;\r"), String("\t\t}\r"), String("\t\tif ( s1->pos.trType != TR_STATIONARY )\r"), String("\t\t{\r"), String("\t\t\tif ( s1->eFlags & EF_MISSILE_STICK )\r"), String("\t\t\t\tRotateAroundDirection( ent.axis, cg.time * 0.5f );//Did this so regular missiles don\'t get broken\r"), String("\t\t\telse\r"), String("\t\t\t\tRotateAroundDirection( ent.axis, cg.time * 0.25f );//JFM:FLOAT FIX\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("\t\t\tif ( s1->eFlags & EF_MISSILE_STICK )\r"), String("\t\t\t\tRotateAroundDirection( ent.axis, (float)s1->pos.trTime * 0.5f );\r"), String("\t\t\telse\r"), String("\t\t\t\tRotateAroundDirection( ent.axis, (float)s1->time );\r"), String("\t\t}\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\tAnglesToAxis( cent->lerpAngles, ent.axis );\r"), String("\t}\r"), String("\r"), String("\t// add to refresh list, possibly with quad glow\r"), String("\tCG_AddRefEntityWithPowerups( &ent, s1->powerups, NULL );\r"), String("\r"), String("\tif ((cg.snap->ps.forcePowersActive & (1 << FP_SEE)) \r"), String("\t\t&& cg.snap->ps.clientNum != cent->currentState.number \r"), String("\t\t&& CG_PlayerCanSeeCent( cent ) )\r"), String("\t{//so player can see dark missiles/explosives\r"), String("\t\tif ( s1->weapon == WP_THERMAL\r"), String("\t\t\t|| s1->weapon == WP_DET_PACK\r"), String("\t\t\t|| s1->weapon == WP_TRIP_MINE\r"), String("\t\t\t|| (s1->eFlags&EF_FORCE_VISIBLE) )\r"), String("\t\t{//really, we only need to do this for things like thermals, detpacks and tripmines, no?\r"), String("\t\t\tCG_AddForceSightShell( &ent, cent );\r"), String("\t\t}\r"), String("\t}\r"), String("}\r"), String("\r"), String("/*\r"), String("===============\r"), String("CG_Mover\r"), String("===============\r"), String("*/\r"), String("\r"), String("#define DOOR_OPENING\t1\r"), String("#define DOOR_CLOSING\t2\r"), String("#define DOOR_OPEN\t\t3\r"), String("#define DOOR_CLOSED\t\t4\r"), String("\r"), String("static void CG_Mover( centity_t *cent ) {\r"), String("\trefEntity_t\t\t\tent;\r"), String("\tentityState_t\t\t*s1;\r"), String("\r"), String("\ts1 = &cent->currentState;\r"), String("\r"), String("\t// create the render entity\r"), String("\tmemset (&ent, 0, sizeof(ent));\r"), String("\t//FIXME: why are these always 0, 0, 0???!\r"), String("\tVectorCopy( cent->lerpOrigin, ent.origin);\r"), String("\tVectorCopy( cent->lerpOrigin, ent.oldorigin);\r"), String("\tAnglesToAxis( cent->lerpAngles, ent.axis );\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\r"), String("\tCG_SetGhoul2Info(&ent, cent);  \r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\tent.renderfx = RF_NOSHADOW;\r"), String("\r"), String("\t// flicker between two skins (FIXME?)\r"), String("\tent.skinNum = ( cg.time >> 6 ) & 1;\r"), String("\r"), String("\t// get the model, either as a bmodel or a modelindex\r"), String("\tif ( s1->solid == SOLID_BMODEL ) {\r"), String("\t\tent.hModel = cgs.inlineDrawModel[s1->modelindex];\r"), String("\t} else {\r"), String("\t\tent.hModel = cgs.model_draw[s1->modelindex];\r"), String("\t}\r"), String("\r"), String("\t// If there isn\'t an hModel for this mover, an RGB axis model will get drawn.\r"), String("\tif ( !ent.hModel )\r"), String("\t{\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tif ( cent->currentState.eFlags & EF_DISABLE_SHADER_ANIM )\r"), String("\t{\r"), String("\t\t// by setting the shader time to the current time, we can force an animating shader to not animate\r"), String("\t\tent.shaderTime = cg.time * 0.001f;\r"), String("\t}\r"), String("\r"), String("\t// add the secondary model\r"), String("\tif ( s1->solid == SOLID_BMODEL && s1->modelindex2 ) \r"), String("\t{\r"), String("//\t\tvec3_t\torg;\r"), String("\t\tif ( !(s1->eFlags & EF_NODRAW) )\r"), String("\t\t{\r"), String("\t\t\t// add to refresh list\r"), String("\t\t\tCG_AddRefEntWithTransportEffect( cent, &ent );\r"), String("\t\t}\r"), String("\r"), String("/*\t\t// Um, this does not interpolate nicely?  Not sure why it was here....\r"), String("\t\tVectorAdd(cent->gent->absmin, cent->gent->absmax, org);\r"), String("\t\tVectorScale(org, 0.5, org);\r"), String("\t\tVectorCopy( org, ent.origin);\r"), String("\t\tVectorCopy( org, ent.oldorigin);\r"), String("*/\r"), String("\t\tif ( !VectorCompare( vec3_origin, cent->gent->modelAngles ) )\r"), String("\t\t{//we have a rotational offset for the model for this brush\r"), String("\t\t\tvec3_t modelAngles;\r"), String("\t\t\tVectorAdd( cent->lerpAngles, cent->gent->modelAngles, modelAngles );\r"), String("\t\t\tAnglesToAxis( modelAngles, ent.axis );\r"), String("\t\t}\r"), String("\t\tent.hModel = cgs.model_draw[s1->modelindex2];\r"), String("\t}\r"), String("\r"), String("\t// I changed it to always do it because nodraw seemed like it should actually do what it says. Be aware that if you change this,\r"), String("\t//\tthe movers for the shooting gallery on doom_detention will break.\r"), String("\tif ( (s1->eFlags & EF_NODRAW) )\r"), String("\t{\r"), String("\t\treturn;\r"), String("\t}\r"), String("\t//fall through and render the hModel or...\r"), String("\r"), String("\t//We\'re a normal model being moved, animate our model\r"), String("\tent.skinNum = 0;\r"), String("\tif ( s1->eFlags & EF_ANIM_ONCE )\r"), String("\t{//FIXME: needs to anim at once per 100 ms\r"), String("\t\tent.frame = cent->gent->s.frame;\r"), String("\t\tent.renderfx|=RF_CAP_FRAMES;\r"), String("\t}\r"), String("\telse if ( s1->eFlags & EF_ANIM_ALLFAST )\r"), String("\t{\r"), String("\t\tent.frame = (cg.time / 100);\r"), String("\t\tent.renderfx|=RF_WRAP_FRAMES;\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\tent.frame = s1->frame;\r"), String("\t}\r"), String("\r"), String("\tif ( s1->eFlags & EF_SHADER_ANIM )\r"), String("\t{\r"), String("\t\tent.renderfx|=RF_SETANIMINDEX;\r"), String("\t\tent.skinNum = s1->frame;\r"), String("\t\t//ent.shaderTime = cg.time*0.001f - s1->frame/s1->time;//NOTE: s1->time is number of frames\r"), String("\t}\r"), String("\r"), String("\t// add to refresh list\r"), String("\tCG_AddRefEntWithTransportEffect( cent, &ent );\r"), String("\r"), String("\tif ((cg.snap->ps.forcePowersActive & (1 << FP_SEE)) \r"), String("\t\t&& cg.snap->ps.clientNum != cent->currentState.number \r"), String("\t\t&& (s1->eFlags&EF_FORCE_VISIBLE) )\r"), String("\t{//so player can see func_breakables\r"), String("\t\tCG_AddForceSightShell( &ent, cent );\r"), String("\t}\r"), String("}\r"), String("\r"), String("/*\r"), String("===============\r"), String("CG_Beam\r"), String("\r"), String("Also called as an event\r"), String("===============\r"), String("*/\r"), String("void CG_Beam( centity_t *cent, int color ) {\r"), String("\trefEntity_t\t\t\tent;\r"), String("\tentityState_t\t\t*s1;\r"), String("\r"), String("\ts1 = &cent->currentState;\r"), String("\r"), String("\t// create the render entity\r"), String("\tmemset (&ent, 0, sizeof(ent));\r"), String("\tVectorCopy( s1->pos.trBase, ent.origin );\r"), String("\tVectorCopy( s1->origin2, ent.oldorigin );\r"), String("\tAxisClear( ent.axis );\r"), String("\tent.reType = RT_BEAM;\r"), String("\tent.skinNum = color;\r"), String("\r"), String("\tent.renderfx = RF_NOSHADOW;\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\tCG_SetGhoul2Info(&ent, cent);  \r"), String("\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\t// add to refresh list\r"), String("\tcgi_R_AddRefEntityToScene(&ent);\r"), String("}\r"), String("\r"), String("/*\r"), String("===============\r"), String("CG_Cylinder\r"), String("===============\r"), String("*/\r"), String("void CG_Cylinder( vec3_t start, vec3_t end, float radius, vec3_t color ) \r"), String("{\r"), String("\tvec3_t\tdir;\r"), String("\tfloat\tlength;\r"), String("\r"), String("\tVectorSubtract( end, start, dir );\r"), String("\tlength = VectorNormalize( dir );\r"), String("\r"), String("/*\tFX_AddCylinder( -1, start, \r"), String("\t\t\t\t\tdir, \r"), String("\t\t\t\t\tlength, \r"), String("\t\t\t\t\t0.0f, \r"), String("\t\t\t\t\tradius,\r"), String("\t\t\t\t\t0.0f,\r"), String("\t\t\t\t\tradius,\r"), String("\t\t\t\t\t0.0f,\r"), String("\t\t\t\t\t1.0f,\r"), String("\t\t\t\t\t1.0f,\r"), String("\t\t\t\t\tcolor,\r"), String("\t\t\t\t\tcolor,\r"), String("\t\t\t\t\t100.0f,\r"), String("\t\t\t\t\tcgs.media.waterDropShader\r"), String("\t\t\t\t\t0, -1, -1 );*/\r"), String("}\r"), String("\r"), String("static vec2_t st[] = \r"), String("{\r"), String("\t0.0f, 0.0f,\r"), String("\t1.0f, 0.0f,\r"), String("\t1.0f, 1.0f,\r"), String("\t0.0f, 1.0f\r"), String("};\r"), String("\r"), String("void CG_Cube( vec3_t mins, vec3_t maxs, vec3_t color, float alpha ) \r"), String("{\r"), String("\tvec3_t\tpoint[4], rot={0,0,0};\r"), String("\tvec2_t\tst[4];\r"), String("\tint\t\tvec[3];\r"), String("\tint\t\taxis, i;\r"), String("\r"), String("\tfor ( axis = 0, vec[0] = 0, vec[1] = 1, vec[2] = 2; axis < 3; axis++, vec[0]++, vec[1]++, vec[2]++ )\r"), String("\t{\r"), String("\t\tfor ( i = 0; i < 3; i++ )\r"), String("\t\t{\r"), String("\t\t\tif ( vec[i] > 2 )\r"), String("\t\t\t{\r"), String("\t\t\t\tvec[i] = 0;\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\r"), String("\t\tpoint[0][vec[1]] = mins[vec[1]];\r"), String("\t\tpoint[0][vec[2]] = mins[vec[2]];\r"), String("\r"), String("\t\tpoint[1][vec[1]] = mins[vec[1]];\r"), String("\t\tpoint[1][vec[2]] = maxs[vec[2]];\r"), String("\r"), String("\t\tpoint[2][vec[1]] = maxs[vec[1]];\r"), String("\t\tpoint[2][vec[2]] = maxs[vec[2]];\r"), String("\t\t\r"), String("\t\tpoint[3][vec[1]] = maxs[vec[1]];\r"), String("\t\tpoint[3][vec[2]] = mins[vec[2]];\r"), String("\r"), String("\t\t//- face\r"), String("\t\tpoint[0][vec[0]] = point[1][vec[0]] = point[2][vec[0]] = point[3][vec[0]] = mins[vec[0]];\r"), String("\r"), String("\t\tFX_AddPoly( point, st, 4, NULL, NULL, alpha, alpha, 0.0f, \r"), String("\t\t\t\t\t\tcolor, color, 0.0f, rot, 0.0f, 0.0f, \r"), String("\t\t\t\t\t\t100, cgs.media.solidWhiteShader, 0 );\r"), String("\r"), String("\t\t//+ face\r"), String("\t\tpoint[0][vec[0]] = point[1][vec[0]] = point[2][vec[0]] = point[3][vec[0]] = maxs[vec[0]];\r"), String("\r"), String("\t\tFX_AddPoly( point, st, 4, NULL, NULL, alpha, alpha, 0.0f, \r"), String("\t\t\t\t\t\tcolor, color, 0.0f, rot, 0.0f, 0.0f, \r"), String("\t\t\t\t\t\t100, cgs.media.solidWhiteShader, 0 );\r"), String("\t}\r"), String("}\r"), String("\r"), String("void CG_CubeOutline( vec3_t mins, vec3_t maxs, int time, unsigned int color, float alpha )\r"), String("{\r"), String("\tvec3_t\tpoint1, point2, point3, point4;\r"), String("\tint\t\tvec[3];\r"), String("\tint\t\taxis, i;\r"), String("\r"), String("\tfor ( axis = 0, vec[0] = 0, vec[1] = 1, vec[2] = 2; axis < 3; axis++, vec[0]++, vec[1]++, vec[2]++ )\r"), String("\t{\r"), String("\t\tfor ( i = 0; i < 3; i++ )\r"), String("\t\t{\r"), String("\t\t\tif ( vec[i] > 2 )\r"), String("\t\t\t{\r"), String("\t\t\t\tvec[i] = 0;\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\r"), String("\t\tpoint1[vec[1]] = mins[vec[1]];\r"), String("\t\tpoint1[vec[2]] = mins[vec[2]];\r"), String("\r"), String("\t\tpoint2[vec[1]] = mins[vec[1]];\r"), String("\t\tpoint2[vec[2]] = maxs[vec[2]];\r"), String("\r"), String("\t\tpoint3[vec[1]] = maxs[vec[1]];\r"), String("\t\tpoint3[vec[2]] = maxs[vec[2]];\r"), String("\t\t\r"), String("\t\tpoint4[vec[1]] = maxs[vec[1]];\r"), String("\t\tpoint4[vec[2]] = mins[vec[2]];\r"), String("\r"), String("\t\t//- face\r"), String("\t\tpoint1[vec[0]] = point2[vec[0]] = point3[vec[0]] = point4[vec[0]] = mins[vec[0]];\r"), String("\r"), String("\t\tCG_TestLine( point1, point2, time, color, 1 );\r"), String("\t\tCG_TestLine( point2, point3, time, color, 1 );\r"), String("\t\tCG_TestLine( point1, point4, time, color, 1 );\r"), String("\t\tCG_TestLine( point4, point3, time, color, 1 );\r"), String("\r"), String("\t\t//+ face\r"), String("\t\tpoint1[vec[0]] = point2[vec[0]] = point3[vec[0]] = point4[vec[0]] = maxs[vec[0]];\r"), String("\r"), String("\t\tCG_TestLine( point1, point2, time, color, 1 );\r"), String("\t\tCG_TestLine( point2, point3, time, color, 1 );\r"), String("\t\tCG_TestLine( point1, point4, time, color, 1 );\r"), String("\t\tCG_TestLine( point4, point1, time, color, 1 );\r"), String("\t}\r"), String("}\r"), String("\r"), String("void CG_Line( vec3_t start, vec3_t end, vec3_t color, float alpha ) \r"), String("{\r"), String("\t/*FX_AddLine( start,\r"), String("\t\t\t\tend,\r"), String("\t\t\t\t1.0f,\r"), String("\t\t\t\t1.0,\r"), String("\t\t\t\t1.0f,\r"), String("\t\t\t\talpha,\r"), String("\t\t\t\talpha,\r"), String("\t\t\t\tcolor, \r"), String("\t\t\t\tcolor, \r"), String("\t\t\t\t100.0f,\r"), String("\t\t\t\tcgs.media.whiteShader );*/\r"), String("}\r"), String("\r"), String("/*\r"), String("===============\r"), String("CG_Portal\r"), String("===============\r"), String("*/\r"), String("static void CG_Portal( centity_t *cent ) {\r"), String("\trefEntity_t\t\t\tent;\r"), String("\tentityState_t\t\t*s1;\r"), String("\r"), String("\ts1 = &cent->currentState;\r"), String("\r"), String("\t//FIXME: this tends to give a bad axis[1], perhaps we\r"), String("\t//should just do the VectorSubtraction here rather than\r"), String("\t//on the game side.  Would also allow camera to follow\r"), String("\t//a moving target.\r"), String("\r"), String("\t// create the render entity\r"), String("\tmemset (&ent, 0, sizeof(ent));\r"), String("\tVectorCopy( cent->lerpOrigin, ent.origin );\r"), String("\tVectorCopy( s1->origin2, ent.oldorigin );\r"), String("\tByteToDir( s1->eventParm, ent.axis[0] );\r"), String("\tPerpendicularVector( ent.axis[1], ent.axis[0] );\r"), String("\r"), String("\t// negating this tends to get the directions like they want\r"), String("\t// we really should have a camera roll value\r"), String("\tVectorSubtract( vec3_origin, ent.axis[1], ent.axis[1] );\r"), String("\r"), String("\tCrossProduct( ent.axis[0], ent.axis[1], ent.axis[2] );\r"), String("\tent.reType = RT_PORTALSURFACE;\r"), String("\tent.frame = s1->frame;\t\t// rotation speed\r"), String("\tent.skinNum = (int)(s1->clientNum/256.0 * 360);\t// roll offset\r"), String("\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\tCG_SetGhoul2Info(&ent, cent);  \r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\r"), String("\t// add to refresh list\r"), String("\tcgi_R_AddRefEntityToScene(&ent);\r"), String("}\r"), String("\r"), String("\r"), String("/*\r"), String("=========================\r"), String("CG_AdjustPositionForMover\r"), String("\r"), String("Also called by client movement prediction code\r"), String("=========================\r"), String("*/\r"), String("void CG_AdjustPositionForMover( const vec3_t in, int moverNum, int atTime, vec3_t out ) {\r"), String("\tcentity_t\t*cent;\r"), String("\tvec3_t\toldOrigin, origin, deltaOrigin;\r"), String("//\tvec3_t\toldAngles, angles, deltaAngles;\r"), String("\r"), String("\tif ( moverNum <= 0 ) {\r"), String("\t\tVectorCopy( in, out );\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tcent = &cg_entities[ moverNum ];\r"), String("\tif ( cent->currentState.eType != ET_MOVER ) {\r"), String("\t\tVectorCopy( in, out );\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, oldOrigin );\r"), String("//\tEvaluateTrajectory( &cent->currentState.apos, cg.snap->serverTime, oldAngles );\r"), String("\r"), String("\tEvaluateTrajectory( &cent->currentState.pos, atTime, origin );\r"), String("//\tEvaluateTrajectory( &cent->currentState.apos, atTime, angles );\r"), String("\r"), String("\tVectorSubtract( origin, oldOrigin, deltaOrigin );\r"), String("//\tVectorSubtract( angles, oldAngles, deltaAngles );\r"), String("\r"), String("\r"), String("\tVectorAdd( in, deltaOrigin, out );\r"), String("\r"), String("\t// FIXME: origin change when on a rotating object\r"), String("}\r"), String("/*\r"), String("===============\r"), String("CG_CalcEntityLerpPositions\r"), String("\r"), String("===============\r"), String("*/\r"), String("extern char\t*vtos( const vec3_t v );\r"), String("#if 1\r"), String("void CG_CalcEntityLerpPositions( centity_t *cent ) {\r"), String("\tif ( cent->gent && cent->gent->client && cent->gent->client->NPC_class == CLASS_VEHICLE && cent->nextState ) //cent->currentState.vehicleIndex != VEHICLE_NONE )\r"), String("\t{\r"), String("\t\tfloat\t\tf = cg.frameInterpolation;\r"), String("\r"), String("\t\tcent->currentState.vehicleAngles[0] = LerpAngle( cent->currentState.vehicleAngles[0], cent->nextState->vehicleAngles[0], f );\r"), String("\t\tcent->currentState.vehicleAngles[1] = LerpAngle( cent->currentState.vehicleAngles[1], cent->nextState->vehicleAngles[1], f );\r"), String("\t\tcent->currentState.vehicleAngles[2] = LerpAngle( cent->currentState.vehicleAngles[2], cent->nextState->vehicleAngles[2], f );\r"), String("\t}\r"), String("\r"), String("\tif ( cent->currentState.number == cg.snap->ps.clientNum)\r"), String("\t{\r"), String("\t\t// if the player, take position from prediction\r"), String("\t\tVectorCopy( cg.predicted_player_state.origin, cent->lerpOrigin );\r"), String("\t\tVectorCopy( cg.predicted_player_state.viewangles, cent->lerpAngles );\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("//\t\tLerpBoneAngleOverrides(cent);\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\t\treturn;\r"), String("\t}\r"), String("\t\r"), String("\t//FIXME: prediction on clients in timescale results in jerky positional translation\r"), String("\tif ( cent->interpolate )\r"), String("\t{\r"), String("\t\t// if the entity has a valid next state, interpolate a value between the frames\r"), String("\t\t// unless it is a mover with a known start and stop\r"), String("\t\tvec3_t\t\tcurrent, next;\r"), String("\t\tfloat\t\tf;\r"), String("\r"), String("\t\t// it would be an internal error to find an entity that interpolates without\r"), String("\t\t// a snapshot ahead of the current one\r"), String("\t\tif ( cg.nextSnap == NULL ) {\r"), String("\t\t\tCG_Error( \"CG_AddCEntity: cg.nextSnap == NULL\" );\r"), String("\t\t}\r"), String("\r"), String("\t\tf = cg.frameInterpolation;\r"), String("\r"), String("\t\tif ( cent->currentState.apos.trType == TR_INTERPOLATE && cent->nextState )\r"), String("\t\t{\r"), String("\t\t\tEvaluateTrajectory( &cent->currentState.apos, cg.snap->serverTime, current );\r"), String("\t\t\tEvaluateTrajectory( &cent->nextState->apos, cg.nextSnap->serverTime, next );\r"), String("\r"), String("\t\t\tcent->lerpAngles[0] = LerpAngle( current[0], next[0], f );\r"), String("\t\t\tcent->lerpAngles[1] = LerpAngle( current[1], next[1], f );\r"), String("\t\t\tcent->lerpAngles[2] = LerpAngle( current[2], next[2], f );\r"), String("\r"), String("\t\t\t/*\r"), String("\t\t\tif(cent->gent && cent->currentState.clientNum != 0 && !VectorCompare(current, next))\r"), String("\t\t\t{\r"), String("\t\t\t\tCom_Printf(\"%s last/next/lerp apos %s/%s/%s, f = %4.2f\\n\", cent->gent->script_targetname, vtos(current), vtos(next), vtos(cent->lerpAngles), f);\r"), String("\t\t\t}\r"), String("\t\t\t*/\r"), String("\t/*\r"), String("\tGhoul2 Insert Start\r"), String("\t*/\r"), String("\t\t\t// now the nasty stuff - this will interpolate all ghoul2 models bone angle overrides per model attached to this cent\r"), String("\t\t\t/*\r"), String("\t\t\tif (cent->gent->ghoul2.size())\r"), String("\t\t\t{\r"), String("\t\t\t\tLerpBoneAngleOverrides(cent);\r"), String("\t\t\t}\r"), String("\t\t\t*/\r"), String("\t/*\r"), String("\tGhoul2 Insert End\r"), String("\t*/\r"), String("\t\t}\r"), String("\t\tif ( cent->currentState.pos.trType == TR_INTERPOLATE && cent->nextState ) \r"), String("\t\t{\r"), String("\t\t\t// this will linearize a sine or parabolic curve, but it is important\r"), String("\t\t\t// to not extrapolate player positions if more recent data is available\r"), String("\t\t\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, current );\r"), String("\t\t\tEvaluateTrajectory( &cent->nextState->pos, cg.nextSnap->serverTime, next );\r"), String("\r"), String("\t\t\tcent->lerpOrigin[0] = current[0] + f * ( next[0] - current[0] );\r"), String("\t\t\tcent->lerpOrigin[1] = current[1] + f * ( next[1] - current[1] );\r"), String("\t\t\tcent->lerpOrigin[2] = current[2] + f * ( next[2] - current[2] );\r"), String("\r"), String("\t\t\t/*\r"), String("\t\t\tif ( cent->gent && cent->currentState.clientNum != 0 )\r"), String("\t\t\t{\r"), String("\t\t\t\tCom_Printf(\"%s last/next/lerp pos %s/%s/%s, f = %4.2f\\n\", cent->gent->script_targetname, vtos(current), vtos(next), vtos(cent->lerpOrigin), f);\r"), String("\t\t\t}\r"), String("\t\t\t*/\r"), String("\t\t\treturn;//FIXME: should this be outside this if?\r"), String("\t\t}\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\tif ( cent->currentState.apos.trType == TR_INTERPOLATE )\r"), String("\t\t{\r"), String("\t\t\tEvaluateTrajectory( &cent->currentState.apos, cg.snap->serverTime, cent->lerpAngles );\r"), String("\t\t}\r"), String("\t\tif ( cent->currentState.pos.trType == TR_INTERPOLATE ) \r"), String("\t\t{\r"), String("\t\t\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, cent->lerpOrigin );\r"), String("\t\t\t/*\r"), String("\t\t\tif(cent->gent && cent->currentState.clientNum != 0 )\r"), String("\t\t\t{\r"), String("\t\t\t\tCom_Printf(\"%s last/next/lerp pos %s, f = 1.0\\n\", cent->gent->script_targetname, vtos(cent->lerpOrigin) );\r"), String("\t\t\t}\r"), String("\t\t\t*/\r"), String("\t\t\treturn;\r"), String("\t\t}\r"), String("\t}\r"), String("\t\r"), String("\t// FIXME: if it\'s blocked, it wigs out, draws it in a predicted spot, but never\r"), String("\t// makes it there - we need to predict it in the right place if this is happens...\r"), String("\r"), String("\t// just use the current frame and evaluate as best we can\r"), String("\ttrajectory_t *posData = &cent->currentState.pos;\r"), String("\t{\r"), String("\t\tgentity_t *ent = &g_entities[cent->currentState.number];\r"), String("\r"), String("\t\tif ( ent && ent->inuse)\r"), String("\t\t{\r"), String("\t\t\tif ( ent->s.eFlags & EF_BLOCKED_MOVER || ent->s.pos.trType == TR_STATIONARY )\r"), String("\t\t\t{//this mover has stopped moving and is going to wig out if we predict it\r"), String("\t\t\t\t//based on last frame\'s info- cut across the network and use the currentOrigin\r"), String("\t\t\t\tVectorCopy( ent->currentOrigin, cent->lerpOrigin );\r"), String("\t\t\t\tposData = NULL;\r"), String("\t\t\t}\r"), String("\t\t\telse\r"), String("\t\t\t{\r"), String("\t\t\t\tposData = &ent->s.pos;\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t}\r"), String("\r"), String("\tif ( posData )\r"), String("\t{\r"), String("\t\tEvaluateTrajectory( posData, cg.time, cent->lerpOrigin );\r"), String("\t}\r"), String("\r"), String("\t// FIXME: this will stomp an apos trType of TR_INTERPOLATE!!\r"), String("\tEvaluateTrajectory( &cent->currentState.apos, cg.time, cent->lerpAngles );\r"), String("\r"), String("\t// adjust for riding a mover\r"), String("\tCG_AdjustPositionForMover( cent->lerpOrigin, cent->currentState.groundEntityNum, cg.time, cent->lerpOrigin );\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\t\t// now the nasty stuff - this will interpolate all ghoul2 models bone angle overrides per model attached to this cent\r"), String("\t/*\r"), String("\tif (cent->gent->ghoul2.size())\r"), String("\t{\r"), String("\t\tLerpBoneAngleOverrides(cent);\r"), String("\t}\r"), String("\t*/\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\t// FIXME: perform general error decay?\r"), String("}\r"), String("#else\r"), String("void CG_CalcEntityLerpPositions( centity_t *cent ) \r"), String("{\r"), String("\tif ( cent->currentState.number == cg.snap->ps.clientNum)\r"), String("\t{\r"), String("\t\t// if the player, take position from prediction\r"), String("\t\tVectorCopy( cg.predicted_player_state.origin, cent->lerpOrigin );\r"), String("\t\tVectorCopy( cg.predicted_player_state.viewangles, cent->lerpAngles );\r"), String("OutputDebugString(va(\"b=(%6.2f,%6.2f,%6.2f)\\n\",cent->lerpOrigin[0],cent->lerpOrigin[1],cent->lerpOrigin[2]));\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\r"), String("if (cent->currentState.number != cg.snap->ps.clientNum&&cent->interpolate && cent->currentState.pos.trType == TR_INTERPOLATE)\r"), String("{\r"), String("\tif (cent->interpolate)\r"), String("\t{\r"), String("OutputDebugString(va(\"[%3d] interp %4.2f t=%6d  st = %6d  nst = %6d     b=%6.2f   nb=%6.2f\\n\",\r"), String("\t\tcent->currentState.number,\r"), String("\t\tcg.frameInterpolation,\r"), String("\t\tcg.time,\r"), String("\t\tcg.snap->serverTime,\r"), String("\t\tcg.nextSnap->serverTime,\r"), String("\t\tcent->currentState.pos.trBase[0],\r"), String("\t\tcent->nextState.pos.trBase[0]));\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("OutputDebugString(va(\"[%3d] nonext %4.2f t=%6d  st = %6d  nst = %6d     b=%6.2f   nb=%6.2f\\n\",\r"), String("\t\tcent->currentState.number,\r"), String("\t\tcg.frameInterpolation,\r"), String("\t\tcg.time,\r"), String("\t\tcg.snap->serverTime,\r"), String("\t\t0,\r"), String("\t\tcent->currentState.pos.trBase[0],\r"), String("\t\t0.0f));\r"), String("\t}\r"), String("}\r"), String("\r"), String("\t//FIXME: prediction on clients in timescale results in jerky positional translation\r"), String("\tif (cent->interpolate && \r"), String("\t\t(cent->currentState.number == cg.snap->ps.clientNum ||\r"), String("\t\tcent->interpolate && cent->currentState.pos.trType == TR_INTERPOLATE ) )\r"), String("\t{\r"), String("\t\tvec3_t\t\tcurrent, next;\r"), String("\t\tfloat\t\tf;\r"), String("\r"), String("\t\t// it would be an internal error to find an entity that interpolates without\r"), String("\t\t// a snapshot ahead of the current one\r"), String("\t\tif ( cg.nextSnap == NULL ) \r"), String("\t\t{\r"), String("\t\t\tCG_Error( \"CG_AddCEntity: cg.nextSnap == NULL\" );\r"), String("\t\t}\r"), String("\r"), String("\t\tf = cg.frameInterpolation;\r"), String("\r"), String("\t\tEvaluateTrajectory( &cent->currentState.apos, cg.snap->serverTime, current );\r"), String("\t\tEvaluateTrajectory( &cent->nextState.apos, cg.nextSnap->serverTime, next );\r"), String("\r"), String("\t\tcent->lerpAngles[0] = LerpAngle( current[0], next[0], f );\r"), String("\t\tcent->lerpAngles[1] = LerpAngle( current[1], next[1], f );\r"), String("\t\tcent->lerpAngles[2] = LerpAngle( current[2], next[2], f );\r"), String("\r"), String("\t\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, current );\r"), String("\t\tEvaluateTrajectory( &cent->nextState.pos, cg.nextSnap->serverTime, next );\r"), String("\r"), String("\t\tcent->lerpOrigin[0] = current[0] + f * ( next[0] - current[0] );\r"), String("\t\tcent->lerpOrigin[1] = current[1] + f * ( next[1] - current[1] );\r"), String("\t\tcent->lerpOrigin[2] = current[2] + f * ( next[2] - current[2] );\r"), String("\t\treturn;\r"), String("\t}\r"), String("\t// just use the current frame and evaluate as best we can\r"), String("\ttrajectory_t *posData = &cent->currentState.pos;\r"), String("\t{\r"), String("\t\tgentity_t *ent = &g_entities[cent->currentState.number];\r"), String("\r"), String("\t\tif ( ent && ent->inuse)\r"), String("\t\t{\r"), String("\t\t\tif ( ent->s.eFlags & EF_BLOCKED_MOVER || ent->s.pos.trType == TR_STATIONARY )\r"), String("\t\t\t{//this mover has stopped moving and is going to wig out if we predict it\r"), String("\t\t\t\t//based on last frame\'s info- cut across the network and use the currentOrigin\r"), String("\t\t\t\tVectorCopy( ent->currentOrigin, cent->lerpOrigin );\r"), String("\t\t\t\tposData = NULL;\r"), String("\t\t\t}\r"), String("\t\t\telse\r"), String("\t\t\t{\r"), String("\t\t\t\tposData = &ent->s.pos;\r"), String("\t\t\t\tEvaluateTrajectory(&ent->s.pos,cg.time, cent->lerpOrigin );\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("\t\t\tEvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, cent->lerpOrigin );\r"), String("\t\t}\r"), String("\t}\r"), String("\tEvaluateTrajectory( &cent->currentState.apos, cg.time, cent->lerpAngles );\r"), String("\r"), String("\t// adjust for riding a mover\r"), String("\tCG_AdjustPositionForMover( cent->lerpOrigin, cent->currentState.groundEntityNum, cg.time, cent->lerpOrigin );\r"), String("}\r"), String("#endif\r"), String("/*\r"), String("===============\r"), String("CG_AddLocalSet\r"), String("===============\r"), String("*/\r"), String("\r"), String("static void CG_AddLocalSet( centity_t *cent )\r"), String("{\r"), String("\tcent->gent->setTime = cgi_S_AddLocalSet( cent->gent->soundSet, cg.refdef.vieworg, cent->lerpOrigin, cent->gent->s.number, cent->gent->setTime );\r"), String("}\r"), String("\r"), String("/*\r"), String("-------------------------\r"), String("CAS_GetBModelSound\r"), String("-------------------------\r"), String("*/\r"), String("\r"), String("sfxHandle_t CAS_GetBModelSound( const char *name, int stage )\r"), String("{\r"), String("\treturn cgi_AS_GetBModelSound( name, stage );\r"), String("}\r"), String("\r"), String("void CG_DLightThink ( centity_t *cent )\r"), String("{\r"), String("\tif(cent->gent)\r"), String("\t{\r"), String("\t\tfloat\ttDelta = cg.time - cent->gent->painDebounceTime;\r"), String("\t\tfloat\tpercentage = ( tDelta/((float)cent->gent->speed) );\r"), String("\t\tvec3_t\torg;\r"), String("\t\tvec4_t\tcurrentRGBA;\r"), String("\t\tgentity_t\t*owner = NULL;\r"), String("\t\tint\t\ti;\r"), String("\t\t\r"), String("\t\tif ( percentage >= 1.0f )\r"), String("\t\t{//We hit the end\r"), String("\t\t\tpercentage = 1.0f;\r"), String("\t\t\tswitch( cent->gent->pushDebounceTime )\r"), String("\t\t\t{\r"), String("\t\t\tcase 0://Fading from start to final\r"), String("\t\t\t\tif ( cent->gent->spawnflags & 8 )\r"), String("\t\t\t\t{//PULSER\r"), String("\t\t\t\t\tif ( tDelta - cent->gent->speed - cent->gent->wait >= 0 )\r"), String("\t\t\t\t\t{//Time to start fading down\r"), String("\t\t\t\t\t\tcent->gent->painDebounceTime = cg.time;\r"), String("\t\t\t\t\t\tcent->gent->pushDebounceTime = 1;\r"), String("\t\t\t\t\t\tpercentage = 0.0f;\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\t\t\t\telse\r"), String("\t\t\t\t{//Stick on startRGBA\r"), String("\t\t\t\t\tpercentage = 0.0f;\r"), String("\t\t\t\t}\r"), String("\t\t\t\tbreak;\r"), String("\t\t\tcase 1://Fading from final to start\r"), String("\t\t\t\tif ( tDelta - cent->gent->speed - cent->gent->radius >= 0 )\r"), String("\t\t\t\t{//Time to start fading up\r"), String("\t\t\t\t\tcent->gent->painDebounceTime = cg.time;\r"), String("\t\t\t\t\tcent->gent->pushDebounceTime = 0;\r"), String("\t\t\t\t\tpercentage = 0.0f;\r"), String("\t\t\t\t}\r"), String("\t\t\t\tbreak;\r"), String("\t\t\tcase 2://Fading from 0 intensity to start intensity\r"), String("\t\t\t\t//Time to start fading from start to final\r"), String("\t\t\t\tcent->gent->painDebounceTime = cg.time;\r"), String("\t\t\t\tcent->gent->pushDebounceTime = 0;\r"), String("\t\t\t\tpercentage = 0.0f;\r"), String("\t\t\t\tbreak;\r"), String("\t\t\tcase 3://Fading from current intensity to 0 intensity\r"), String("\t\t\t\t//Time to turn off\r"), String("\t\t\t\tcent->gent->misc_dlight_active = qfalse;\r"), String("\t\t\t\tcent->gent->e_clThinkFunc = clThinkF_NULL;\r"), String("\t\t\t\tcent->gent->s.eType = ET_GENERAL;\r"), String("\t\t\t\tcent->gent->svFlags &= ~SVF_BROADCAST;\r"), String("\t\t\t\treturn;\t\t\r"), String("\t\t\t\tbreak;\r"), String("\t\t\tdefault:\r"), String("\t\t\t\tbreak;\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\r"), String("\t\tswitch( cent->gent->pushDebounceTime )\r"), String("\t\t{\r"), String("\t\tcase 0://Fading from start to final\r"), String("\t\t\tfor ( i = 0; i < 4; i++ )\r"), String("\t\t\t{\r"), String("\t\t\t\tcurrentRGBA[i] = cent->gent->startRGBA[i] + ( (cent->gent->finalRGBA[i] - cent->gent->startRGBA[i]) * percentage );\r"), String("\t\t\t}\r"), String("\t\t\tbreak;\r"), String("\t\tcase 1://Fading from final to start\r"), String("\t\t\tfor ( i = 0; i < 4; i++ )\r"), String("\t\t\t{\r"), String("\t\t\t\tcurrentRGBA[i] = cent->gent->finalRGBA[i] + ( (cent->gent->startRGBA[i] - cent->gent->finalRGBA[i]) * percentage );\r"), String("\t\t\t}\r"), String("\t\t\tbreak;\r"), String("\t\tcase 2://Fading from 0 intensity to start\r"), String("\t\t\tfor ( i = 0; i < 3; i++ )\r"), String("\t\t\t{\r"), String("\t\t\t\tcurrentRGBA[i] = cent->gent->startRGBA[i];\r"), String("\t\t\t}\r"), String("\t\t\tcurrentRGBA[3] = cent->gent->startRGBA[3] * percentage;\r"), String("\t\t\tbreak;\r"), String("\t\tcase 3://Fading from current intensity to 0\r"), String("\t\t\tfor ( i = 0; i < 3; i++ )\r"), String("\t\t\t{//FIXME: use last\r"), String("\t\t\t\tcurrentRGBA[i] = cent->gent->startRGBA[i];\r"), String("\t\t\t}\r"), String("\t\t\tcurrentRGBA[3] = cent->gent->startRGBA[3] - (cent->gent->startRGBA[3] * percentage);\r"), String("\t\t\tbreak;\r"), String("\t\tdefault:\r"), String("\t\t\treturn;\r"), String("\t\t\tbreak;\r"), String("\t\t}\r"), String("\r"), String("\t\tif ( cent->gent->owner )\r"), String("\t\t{\r"), String("\t\t\towner = cent->gent->owner;\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("\t\t\towner = cent->gent;\r"), String("\t\t}\r"), String("\r"), String("\t\tif ( owner->s.pos.trType == TR_INTERPOLATE )\r"), String("\t\t{\r"), String("\t\t\tVectorCopy( cg_entities[owner->s.number].lerpOrigin, org );\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("\t\t\tVectorCopy( owner->currentOrigin, org );\r"), String("\t\t}\r"), String("\r"), String("\t\tcgi_R_AddLightToScene(org, currentRGBA[3]*10, currentRGBA[0], currentRGBA[1], currentRGBA[2] );\r"), String("\t}\r"), String("}\r"), String("\r"), String("void CG_Limb ( centity_t *cent )\r"), String("{//first time we\'re drawn, remove us from the owner ent\r"), String("\tif ( cent->gent && cent->gent->owner && cent->gent->owner->ghoul2.size() )\r"), String("\t{\r"), String("\t\tgentity_t\t*owner = cent->gent->owner;\r"), String("\t\tif ( cent->gent->aimDebounceTime )\r"), String("\t\t{//done with dismemberment, just waiting to mark owner dismemberable again\r"), String("\t\t\tif ( cent->gent->aimDebounceTime > cg.time )\r"), String("\t\t\t{//still waiting\r"), String("\t\t\t\treturn;\r"), String("\t\t\t}\r"), String("\t\t\t//done!\r"), String("\t\t\towner->client->dismembered = false;\r"), String("\t\t\t//done!\r"), String("\t\t\tcent->gent->e_clThinkFunc = clThinkF_NULL;\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("extern cvar_t\t*g_dismemberment;\r"), String("extern cvar_t\t*g_saberRealisticCombat;\r"), String("\t\t\t//3) turn off w/descendants that surf in original model\r"), String("\t\t\tif ( cent->gent->target )//stubTagName )\r"), String("\t\t\t{//add smoke to cap surf, spawn effect\r"), String("\t\t\t\tif ( cent->gent->delay <= cg.time )\r"), String("\t\t\t\t{//debounced so it only plays effect once every 50ms\r"), String("\t\t\t\t\tint newBolt = gi.G2API_AddBolt( &owner->ghoul2[owner->playerModel], cent->gent->target );\r"), String("\t\t\t\t\tif ( newBolt != -1 )\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tcent->gent->delay = cg.time + 50;\r"), String("\t\t\t\t\t\tCG_PlayEffectBolted( \"saber/limb_bolton\", owner->playerModel, newBolt, owner->s.number, owner->s.origin );\t//ent origin used to make FX culling work\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\t\t\tif ( cent->gent->target2 )//limbName\r"), String("\t\t\t{//turn the limb off\r"), String("\t\t\t\t//NOTE: MUST use G2SURFACEFLAG_NODESCENDANTS\r"), String("\t\t\t\tgi.G2API_SetSurfaceOnOff( &owner->ghoul2[owner->playerModel], cent->gent->target2, 0x00000100 );//G2SURFACEFLAG_NODESCENDANTS\r"), String("\t\t\t}\r"), String("\t\t\tif ( cent->gent->target3 )//stubCapName )\r"), String("\t\t\t{//turn on caps\r"), String("\t\t\t\tgi.G2API_SetSurfaceOnOff( &owner->ghoul2[owner->playerModel], cent->gent->target3, 0 );\r"), String("\t\t\t}\r"), String("\t\t\tif ( owner->weaponModel[0] > 0 )\r"), String("\t\t\t{//the corpse hasn\'t dropped their weapon\r"), String("\t\t\t\tif ( cent->gent->count == BOTH_DISMEMBER_RARM || cent->gent->count == BOTH_DISMEMBER_TORSO1 )//&& ent->s.weapon == WP_SABER && ent->weaponModel[0] != -1 )\r"), String("\t\t\t\t{//FIXME: is this first check needed with this lower one?\r"), String("\t\t\t\t\tgi.G2API_RemoveGhoul2Model( owner->ghoul2, owner->weaponModel[0] );\r"), String("\t\t\t\t\towner->weaponModel[0] = -1;\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\t\t\tif ( owner->client->NPC_class == CLASS_PROTOCOL \r"), String("\t\t\t\t|| debug_subdivision->integer\r"), String("\t\t\t\t|| g_saberRealisticCombat->integer )\r"), String("\t\t\t{\r"), String("\t\t\t\t//wait 100ms before allowing owner to be dismembered again\r"), String("\t\t\t\tcent->gent->aimDebounceTime = cg.time + 100;\r"), String("\t\t\t\treturn;\r"), String("\t\t\t}\r"), String("\t\t\telse\r"), String("\t\t\t{\r"), String("\t\t\t\t//done!\r"), String("\t\t\t\tcent->gent->e_clThinkFunc = clThinkF_NULL;\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t}\r"), String("}\r"), String("\r"), String("extern Vehicle_t *G_IsRidingVehicle( gentity_t *ent );\r"), String("qboolean\tMatrixMode = qfalse;\r"), String("extern cvar_t\t*g_skippingcin;\r"), String("void CG_MatrixEffect ( centity_t *cent )\r"), String("{\r"), String("\tfloat\tMATRIX_EFFECT_TIME = 1000.0f;\r"), String("\tif ( (cent->currentState.boltInfo&MEF_MULTI_SPIN) )\r"), String("\t{//multiple spins\r"), String("\t\tif ( cent->currentState.time2 > 0 )\r"), String("\t\t{//with a custom amount of time per spin\r"), String("\t\t\tMATRIX_EFFECT_TIME = cent->currentState.time2;\r"), String("\t\t}\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\tif ( cent->currentState.eventParm \r"), String("\t\t\t&& cent->currentState.eventParm != MATRIX_EFFECT_TIME )\r"), String("\t\t{//not a falling multi-spin, so stretch out the effect over the whole desired length (or: condenses it, too)\r"), String("\t\t\tMATRIX_EFFECT_TIME = cent->currentState.eventParm;\r"), String("\t\t}\r"), String("\t}\r"), String("\t//VectorCopy( cent->lerpOrigin, cg.refdef.vieworg );\r"), String("\tfloat totalElapsedTime = (float)(cg.time - cent->currentState.time);\r"), String("\tfloat elapsedTime = totalElapsedTime;\r"), String("\tbool\tstopEffect = ((totalElapsedTime > cent->currentState.eventParm) || cg.missionStatusShow || in_camera);\r"), String("\r"), String("\tif (!stopEffect && (cent->currentState.boltInfo&MEF_HIT_GROUND_STOP) && g_entities[cent->currentState.otherEntityNum].client)\r"), String("\t{\r"), String("\t\tif (g_entities[cent->currentState.otherEntityNum].client->ps.groundEntityNum!=ENTITYNUM_NONE)\r"), String("\t\t{\r"), String("\t\t\tstopEffect = true;\r"), String("\t\t}\r"), String("\t\telse if (g_entities[cent->currentState.otherEntityNum].client->NPC_class == CLASS_VEHICLE)\r"), String("\t\t{\r"), String("\t\t\tVehicle_t*\tpVeh = g_entities[cent->currentState.otherEntityNum].m_pVehicle;\r"), String("\t\t\tif (pVeh && !(pVeh->m_ulFlags&VEH_FLYING))\r"), String("\t\t\t{\r"), String("\t\t\t\tstopEffect = true;\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t}\r"), String("\tif (!stopEffect && (cent->currentState.boltInfo&MEF_LOOK_AT_ENEMY))\r"), String("\t{\r"), String("\t\tif (!g_entities[cent->currentState.otherEntityNum].lastEnemy || \r"), String("\t\t\t!g_entities[cent->currentState.otherEntityNum].lastEnemy->inuse)\r"), String("\t\t{\r"), String("\t\t\tstopEffect = true;\r"), String("\t\t}\r"), String("\t}\r"), String("\r"), String("\tif (stopEffect)\r"), String("\t{//time is up or this is a falling spin and they hit the ground or mission end screen is up\r"), String("\t\tcg.overrides.active &= ~(/*CG_OVERRIDE_3RD_PERSON_ENT|*/CG_OVERRIDE_3RD_PERSON_RNG|CG_OVERRIDE_3RD_PERSON_ANG|CG_OVERRIDE_3RD_PERSON_POF);\r"), String("\t\t//cg.overrides.thirdPersonEntity = 0;\r"), String("\t\tcg.overrides.thirdPersonAngle = 0;\r"), String("\t\tcg.overrides.thirdPersonPitchOffset = 0;\r"), String("\t\tcg.overrides.thirdPersonRange = 0;\r"), String("\t\tif ( g_skippingcin->integer )\r"), String("\t\t{//skipping?  don\'t mess with timescale\r"), String("\t\t\t/*\r"), String("\t\t\tif ( g_timescale->integer < 100 )\r"), String("\t\t\t{//something messed up timescale, reset it?\r"), String("\t\t\t\tcgi_Cvar_Set( \"timescale\", \"100\" );\r"), String("\t\t\t}\r"), String("\t\t\t*/\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{//set it back to 1\r"), String("\t\t\tcgi_Cvar_Set( \"timescale\", \"1.0\" );\r"), String("\t\t}\r"), String("\t\tMatrixMode = qfalse;\r"), String("\t\tcent->gent->e_clThinkFunc = clThinkF_NULL;\r"), String("\t\tcent->gent->e_ThinkFunc = thinkF_G_FreeEntity;\r"), String("\t\tcent->gent->nextthink = cg.time + 500;\r"), String("\t\treturn;\r"), String("\t}\r"), String("\telse \r"), String("\t{\r"), String("\t\twhile ( elapsedTime > MATRIX_EFFECT_TIME )\r"), String("\t\t{\r"), String("\t\t\telapsedTime -= MATRIX_EFFECT_TIME;\r"), String("\t\t}\r"), String("\t}\r"), String("\t\r"), String("\tMatrixMode = qtrue;\r"), String("\r"), String("\t//FIXME: move the position towards them and back?\r"), String("\t//cg.overrides.active |= CG_OVERRIDE_3RD_PERSON_ENT;\r"), String("\t//cg.overrides.thirdPersonEntity = cent->currentState.otherEntityNum;\r"), String("\r"), String("\tif (cent->currentState.boltInfo&MEF_LOOK_AT_ENEMY)\r"), String("\t{\r"), String("\t\tvec3_t\ttoEnemy;\r"), String("\t\tvec3_t\ttoEnemyAngles;\r"), String("\r"), String("\t\tVectorCopy(cg_entities[g_entities[cent->currentState.otherEntityNum].lastEnemy->s.number].lerpOrigin, toEnemy);\r"), String("//\t\tCG_DrawEdge(cg_entities[cent->currentState.otherEntityNum].lerpOrigin, toEnemy, EDGE_NORMAL);\r"), String("\t\tVectorSubtract(cg_entities[cent->currentState.otherEntityNum].lerpOrigin, toEnemy, toEnemy);\r"), String("\t\tvectoangles(toEnemy, toEnemyAngles);\r"), String("\r"), String("\r"), String("\t\tcg.overrides.active\t\t\t\t\t|= CG_OVERRIDE_3RD_PERSON_ANG;\r"), String("  \t \tcg.overrides.thirdPersonAngle\t\t = \r"), String("\t\t\ttoEnemyAngles[1] - \r"), String("\t\t\tcg_entities[cent->currentState.otherEntityNum].lerpAngles[1] + \r"), String(" \t\t\t145.0f;\r"), String("\t \tcg.overrides.thirdPersonAngle = AngleNormalize180(cg.overrides.thirdPersonAngle);\r"), String("\r"), String("\t\tfloat\tMATRIX_EFFECT_TIME_HALF = MATRIX_EFFECT_TIME/2.0f;\r"), String("\t\tfloat\tX = 1.0f;\r"), String("\t\tif (elapsedTime>MATRIX_EFFECT_TIME_HALF)\r"), String("\t\t{\r"), String("\t\t\tX -= ((elapsedTime - MATRIX_EFFECT_TIME_HALF)/MATRIX_EFFECT_TIME_HALF);\r"), String("\t\t}\r"), String("\t\tcg.overrides.thirdPersonAngle\t\t*= X;\r"), String("\r"), String(" //\t\tgi.Printf(\"%f\\n\", cg.overrides.thirdPersonAngle);\r"), String("\t\tcg.overrides.thirdPersonPitchOffset\t = 0.0f;\r"), String("\t\tcg.overrides.thirdPersonRange\t\t = cg_thirdPersonRange.value * 3.0f;\r"), String("\t}\r"), String("\r"), String("\tif ( !(cent->currentState.boltInfo&MEF_NO_SPIN) )\r"), String("\t{//rotate around them\r"), String("\t\t//rotate\r"), String("\t\tcg.overrides.active |= CG_OVERRIDE_3RD_PERSON_ANG;\r"), String("\t\tcg.overrides.thirdPersonAngle = 360.0f*elapsedTime/MATRIX_EFFECT_TIME;\r"), String("\t\tif ( (cent->currentState.boltInfo&MEF_REVERSE_SPIN) )\r"), String("\t\t{\r"), String("\t\t\tcg.overrides.thirdPersonAngle *= -1;\r"), String("\t\t}\r"), String("\t}\r"), String("\r"), String("\t//do all the slowdown and vert bob stuff\r"), String("\tif ( cent->currentState.angles2[0] )\r"), String("\t{\r"), String("\t\tcgi_Cvar_Set( \"timescale\", va(\"%4.2f\",cent->currentState.angles2[0]) );\r"), String("\t}\r"), String("\telse if ( !(cent->currentState.boltInfo&MEF_NO_TIMESCALE) )\r"), String("\t{//ramp the timescale\r"), String("\t\t//slowdown\r"), String("\t\tfloat timescale = (elapsedTime/MATRIX_EFFECT_TIME);\r"), String("\t\tif ( timescale < 0.01f )\r"), String("\t\t{\r"), String("\t\t\ttimescale = 0.01f;\r"), String("\t\t}\r"), String("\t\tcgi_Cvar_Set( \"timescale\", va(\"%4.2f\",timescale) );\r"), String("\t}\r"), String("\telse\r"), String("\t{//FIXME: MEF_HIT_GROUND_STOP: if they\'re on the ground, stop spinning and stop timescale\r"), String("\t\t//FIXME: if they go to the menu, restore timescale?\r"), String("\t\t//cgi_Cvar_Set( \"timescale\", \"1.0ff\" );\r"), String("\t}\r"), String("\r"), String("\tif ( !(cent->currentState.boltInfo&MEF_NO_VERTBOB) )\r"), String("\t{//bob the pitch\r"), String("\t\t//pitch\r"), String("\t\t//dip - FIXME: use pitchOffet?\r"), String("\t\tcg.overrides.active |= CG_OVERRIDE_3RD_PERSON_POF;\r"), String("\t\tcg.overrides.thirdPersonPitchOffset = cg_thirdPersonPitchOffset.value;\r"), String("\t\tif ( elapsedTime < MATRIX_EFFECT_TIME*0.33f )\r"), String("\t\t{\r"), String("\t\t\tcg.overrides.thirdPersonPitchOffset -= 30.0f*elapsedTime/(MATRIX_EFFECT_TIME*0.33);\r"), String("\t\t}\r"), String("\t\telse if ( elapsedTime > MATRIX_EFFECT_TIME*0.66f )\r"), String("\t\t{\r"), String("\t\t\tcg.overrides.thirdPersonPitchOffset -= 30.0f*(MATRIX_EFFECT_TIME-elapsedTime)/(MATRIX_EFFECT_TIME*0.33);\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("\t\t\tcg.overrides.thirdPersonPitchOffset -= 30.0f;\r"), String("\t\t}\r"), String("\t}\r"), String("\r"), String("\tif ( !(cent->currentState.boltInfo&MEF_NO_RANGEVAR) )\r"), String("\t{//vary the camera range\r"), String("\t\t//pull back\r"), String("\t\tcg.overrides.active |= CG_OVERRIDE_3RD_PERSON_RNG;\r"), String("\t\tcg.overrides.thirdPersonRange = cg_thirdPersonRange.value;\r"), String("\t\tif ( elapsedTime < MATRIX_EFFECT_TIME*0.33 )\r"), String("\t\t{\r"), String("\t\t\tcg.overrides.thirdPersonRange += 80.0f*elapsedTime/(MATRIX_EFFECT_TIME*0.33);\r"), String("\t\t}\r"), String("\t\telse if ( elapsedTime > MATRIX_EFFECT_TIME*0.66 )\r"), String("\t\t{\r"), String("\t\t\tcg.overrides.thirdPersonRange += 80.0f*(MATRIX_EFFECT_TIME-elapsedTime)/(MATRIX_EFFECT_TIME*0.33);\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("\t\t\tcg.overrides.thirdPersonRange += 80.0f;\r"), String("\t\t}\r"), String("\t}\r"), String("}\r"), String("\r"), String("static void CG_Think ( centity_t *cent )\r"), String("{\r"), String("\tif(!cent->gent)\r"), String("\t{\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tCEntity_ThinkFunc(cent);\t//\tcent->gent->clThink(cent);\r"), String("}\r"), String("\r"), String("static void CG_Clouds( centity_t *cent )\r"), String("{\r"), String("\trefEntity_t\t\tent;\r"), String("\tentityState_t\t*s1;\r"), String("\r"), String("\ts1 = &cent->currentState;\r"), String("\r"), String("\t// create the render entity\r"), String("\tmemset( &ent, 0, sizeof( ent ));\r"), String("\r"), String("\tVectorCopy( cent->lerpOrigin, ent.origin );\r"), String("\r"), String("\tent.shaderRGBA[0] = ent.shaderRGBA[1] = ent.shaderRGBA[2] = ent.shaderRGBA[3] = 255;\r"), String("\r"), String("\tent.radius = cent->gent->radius;\r"), String("\tent.backlerp = cent->gent->wait;\r"), String("\r"), String("\tent.reType = RT_CLOUDS;\r"), String("\r"), String("\tif ( cent->gent->spawnflags & 1 ) // TUBE type, the one with a hole in the middle\r"), String("\t{\r"), String("\t\tent.rotation = cent->gent->random;\r"), String("\t\tent.renderfx = RF_GROW;// tube flag \r"), String("\t}\r"), String("\r"), String("\tif ( cent->gent->spawnflags & 2 ) // ALT type, uses a different shader\r"), String("\t{\r"), String("\t\tent.customShader = cgi_R_RegisterShader( \"gfx/world/haze2\" );\r"), String("\t}\r"), String("\telse\r"), String("\t{\r"), String("\t\tent.customShader = cgi_R_RegisterShader( \"gfx/world/haze\" );\r"), String("\t}\r"), String("\t\r"), String("\tcgi_R_AddRefEntityToScene( &ent );\r"), String("}\r"), String("\r"), String("/*\r"), String("===============\r"), String("CG_AddCEntity\r"), String("\r"), String("===============\r"), String("*/\r"), String("static void CG_AddCEntity( centity_t *cent ) \r"), String("{\r"), String("\t// event-only entities will have been dealt with already\r"), String("\tif ( cent->currentState.eType >= ET_EVENTS ) {\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\t//we must have restarted the game\r"), String("\tif (!cent->gent)\r"), String("\t{\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tcent->snapShotTime = cg.time;\r"), String("\r"), String("\t// calculate the current origin\r"), String("\tCG_CalcEntityLerpPositions( cent );\r"), String("\r"), String("\t// add automatic effects\r"), String("\tCG_EntityEffects( cent );\r"), String("\r"), String("\t// add local sound set if any\r"), String("\tif ( cent->gent && cent->gent->soundSet && cent->gent->soundSet[0] && cent->currentState.eType != ET_MOVER )\r"), String("\t{\r"), String("\t\tCG_AddLocalSet( cent );\r"), String("\t}\r"), String("/*\r"), String("Ghoul2 Insert Start\r"), String("*/\r"), String("\t// do this before we copy the data to refEnts\r"), String("\tif (cent->gent->ghoul2.IsValid())\r"), String("\t{\r"), String("\t\ttrap_G2_SetGhoul2ModelIndexes(cent->gent->ghoul2, cgs.model_draw, cgs.skins);\r"), String("\t}\r"), String("\r"), String("/*\r"), String("Ghoul2 Insert End\r"), String("*/\r"), String("\r"), String("\tswitch ( cent->currentState.eType ) {\r"), String("\tdefault:\r"), String("\t\tCG_Error( \"Bad entity type: %i\\n\", cent->currentState.eType );\r"), String("\t\tbreak;\r"), String("\tcase ET_INVISIBLE:\r"), String("\tcase ET_PUSH_TRIGGER:\r"), String("\tcase ET_TELEPORT_TRIGGER:\r"), String("\tcase ET_TERRAIN:\r"), String("\t\tbreak;\r"), String("\tcase ET_GENERAL:\r"), String("\t\tCG_General( cent );\r"), String("\t\tbreak;\r"), String("\tcase ET_PLAYER:\r"), String("\t\tCG_Player( cent );\r"), String("\t\tbreak;\r"), String("\tcase ET_ITEM:\r"), String("\t\tCG_Item( cent );\r"), String("\t\tbreak;\r"), String("\tcase ET_MISSILE:\r"), String("\t\tCG_Missile( cent );\r"), String("\t\tbreak;\r"), String("\tcase ET_MOVER:\r"), String("\t\tCG_Mover( cent );\r"), String("\t\tbreak;\r"), String("\tcase ET_BEAM:\r"), String("\t\tCG_Beam( cent, 0 );\r"), String("\t\tbreak;\r"), String("\tcase ET_PORTAL:\r"), String("\t\tCG_Portal( cent );\r"), String("\t\tbreak;\r"), String("\tcase ET_SPEAKER:\r"), String("\t\tif ( cent->gent && cent->gent->soundSet && cent->gent->soundSet[0] )\r"), String("\t\t{\r"), String("\t\t\tbreak;\r"), String("\t\t}\r"), String("\t\tCG_Speaker( cent );\r"), String("\t\tbreak;\r"), String("\tcase ET_THINKER:\r"), String("\t\tCG_General( cent );\r"), String("\t\tCG_Think( cent );\r"), String("\t\tbreak;\r"), String("\tcase ET_CLOUD: // dumb\r"), String("\t\tCG_Clouds( cent );\r"), String("\t\tbreak;\r"), String("\t}\r"), String("}\r"), String("\r"), String("/*\r"), String("===============\r"), String("CG_AddPacketEntities\r"), String("\r"), String("===============\r"), String("*/\r"), String("void CG_AddPacketEntities( qboolean isPortal ) {\r"), String("\tint\t\t\t\t\tnum;\r"), String("\tcentity_t\t\t\t*cent;\r"), String("\tplayerState_t\t\t*ps;\r"), String("\r"), String("\tif (isPortal)\r"), String("\t{\r"), String("\t\tfor ( num = 0 ; num < cg.snap->numEntities ; num++ )\r"), String("\t\t{\r"), String("\t\t\tcent = &cg_entities[ cg.snap->entities[ num ].number ];\r"), String("\r"), String("\t\t\tif (cent->currentState.isPortalEnt)\r"), String("\t\t\t{\r"), String("\t\t\t\tCG_AddCEntity( cent );\r"), String("\t\t\t}\r"), String("\t\t}\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\t// set cg.frameInterpolation\r"), String("\tif ( cg.nextSnap ) \r"), String("\t{\r"), String("\t\tint\t\tdelta;\r"), String("\r"), String("\t\tdelta = (cg.nextSnap->serverTime - cg.snap->serverTime);\r"), String("\t\tif ( delta == 0 ) \r"), String("\t\t{\r"), String("\t\t\tcg.frameInterpolation = 0;\r"), String("\t\t} \r"), String("\t\telse \r"), String("\t\t{\r"), String("\t\t\tcg.frameInterpolation = (float)( cg.time - cg.snap->serverTime ) / delta;\r"), String("\t\t}\r"), String("//OutputDebugString(va(\"interp %4.2f ct=%6d nt=%6d st=%6d\\n\",cg.frameInterpolation,cg.time,cg.nextSnap->serverTime,cg.snap->serverTime));\r"), String("\t} \r"), String("\telse \r"), String("\t{\r"), String("\t\tcg.frameInterpolation = 0;\t// actually, it should never be used, because \r"), String("\t\t\t\t\t\t\t\t\t// no entities should be marked as interpolating\r"), String("//OutputDebugString(va(\"noterp %4.2f ct=%6d nt=%6d st=%6d\\n\",cg.frameInterpolation,cg.time,0,cg.snap->serverTime));\r"), String("\t}\r"), String("\r"), String("\t// the auto-rotating items will all have the same axis\r"), String("\tcg.autoAngles[0] = 0;\r"), String("\tcg.autoAngles[1] = ( cg.time & 2047 ) * 360 / 2048.0f;\r"), String("\tcg.autoAngles[2] = 0;\r"), String("\r"), String("\tcg.autoAnglesFast[0] = 0;\r"), String("\tcg.autoAnglesFast[1] = ( cg.time & 1023 ) * 360 / 1024.0f;\r"), String("\tcg.autoAnglesFast[2] = 0;\r"), String("\r"), String("\tAnglesToAxis( cg.autoAngles, cg.autoAxis );\r"), String("\tAnglesToAxis( cg.autoAnglesFast, cg.autoAxisFast );\r"), String("\r"), String("\t// generate and add the entity from the playerstate\r"), String("\tps = &cg.predicted_player_state;\r"), String("\tPlayerStateToEntityState( ps, &cg_entities[ ps->clientNum ].currentState );\r"), String("//\tcent = &cg_entities[ ps->clientNum ];\t// not needed now that player is in the snap packet\r"), String("//\tCG_AddCEntity( cent );\t\t\t\t\t//\r"), String("\r"), String("\t// add each entity sent over by the server\r"), String("\tfor ( num = 0 ; num < cg.snap->numEntities ; num++ ) {\r"), String("\t\tcent = &cg_entities[ cg.snap->entities[ num ].number ];\r"), String("\r"), String("\t\tCG_AddCEntity( cent );\r"), String("\t}\r"), String("\r"), String("\tfor(num=0;num<cg_numpermanents;num++)\r"), String("\t{\r"), String("\t\tcent = cg_permanents[num];\r"), String("\t\tif (cent->currentValid)\r"), String("\t\t{\r"), String("\t\t\tCG_AddCEntity( cent );\r"), String("\t\t}\r"), String("\t}\r"), String("}\r"), String("\r"), String("//rww - This function is not currently called. Use it as the client-side ROFF\r"), String("//callback once that\'s implemented fully.\r"), String("void CG_ROFF_NotetrackCallback( centity_t *cent, const char *notetrack)\r"), String("{\r"), String("\tint i = 0, r = 0, objectID = 0, anglesGathered = 0, posoffsetGathered = 0;\r"), String("\tchar type[256];\r"), String("\tchar argument[512];\r"), String("\tchar addlArg[512];\r"), String("\tchar errMsg[256];\r"), String("\tchar t[64];\r"), String("\tint addlArgs = 0;\r"), String("\tvec3_t parsedAngles, parsedOffset, useAngles, useOrigin, forward, right, up;\r"), String("\r"), String("\tif (!cent || !notetrack)\r"), String("\t{\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\t//notetrack = \"effect effects/explosion1.efx 0+0+64 0-0-1\";\r"), String("\r"), String("\twhile (notetrack[i] && notetrack[i] != \' \')\r"), String("\t{\r"), String("\t\ttype[i] = notetrack[i];\r"), String("\t\ti++;\r"), String("\t}\r"), String("\r"), String("\ttype[i] = \'\\0\';\r"), String("\r"), String("\tif (notetrack[i] != \' \')\r"), String("\t{ //didn\'t pass in a valid notetrack type, or forgot the argument for it\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\ti++;\r"), String("\r"), String("\twhile (notetrack[i] && notetrack[i] != \' \')\r"), String("\t{\r"), String("\t\targument[r] = notetrack[i];\r"), String("\t\tr++;\r"), String("\t\ti++;\r"), String("\t}\r"), String("\targument[r] = \'\\0\';\r"), String("\r"), String("\tif (!r)\r"), String("\t{\r"), String("\t\treturn;\r"), String("\t}\r"), String("\r"), String("\tif (notetrack[i] == \' \')\r"), String("\t{ //additional arguments...\r"), String("\t\taddlArgs = 1;\r"), String("\r"), String("\t\ti++;\r"), String("\t\tr = 0;\r"), String("\t\twhile (notetrack[i])\r"), String("\t\t{\r"), String("\t\t\taddlArg[r] = notetrack[i];\r"), String("\t\t\tr++;\r"), String("\t\t\ti++;\r"), String("\t\t}\r"), String("\t\taddlArg[r] = \'\\0\';\r"), String("\t}\r"), String("\r"), String("\tif (strcmp(type, \"effect\") == 0)\r"), String("\t{\r"), String("\t\tif (!addlArgs)\r"), String("\t\t{\r"), String("\t\t\t//sprintf(errMsg, \"Offset position argument for \'effect\' type is invalid.\");\r"), String("\t\t\t//goto functionend;\r"), String("\t\t\tVectorClear(parsedOffset);\r"), String("\t\t\tgoto defaultoffsetposition;\r"), String("\t\t}\r"), String("\r"), String("\t\ti = 0;\r"), String("\r"), String("\t\twhile (posoffsetGathered < 3)\r"), String("\t\t{\r"), String("\t\t\tr = 0;\r"), String("\t\t\twhile (addlArg[i] && addlArg[i] != \'+\' && addlArg[i] != \' \')\r"), String("\t\t\t{\r"), String("\t\t\t\tt[r] = addlArg[i];\r"), String("\t\t\t\tr++;\r"), String("\t\t\t\ti++;\r"), String("\t\t\t}\r"), String("\t\t\tt[r] = \'\\0\';\r"), String("\t\t\ti++;\r"), String("\t\t\tif (!r)\r"), String("\t\t\t{ //failure..\r"), String("\t\t\t\t//sprintf(errMsg, \"Offset position argument for \'effect\' type is invalid.\");\r"), String("\t\t\t\t//goto functionend;\r"), String("\t\t\t\tVectorClear(parsedOffset);\r"), String("\t\t\t\ti = 0;\r"), String("\t\t\t\tgoto defaultoffsetposition;\r"), String("\t\t\t}\r"), String("\t\t\tparsedOffset[posoffsetGathered] = atof(t);\r"), String("\t\t\tposoffsetGathered++;\r"), String("\t\t}\r"), String("\r"), String("\t\tif (posoffsetGathered < 3)\r"), String("\t\t{\r"), String("\t\t\tsprintf(errMsg, \"Offset position argument for \'effect\' type is invalid.\");\r"), String("\t\t\tgoto functionend;\r"), String("\t\t}\r"), String("\r"), String("\t\ti--;\r"), String("\r"), String("\t\tif (addlArg[i] != \' \')\r"), String("\t\t{\r"), String("\t\t\taddlArgs = 0;\r"), String("\t\t}\r"), String("\r"), String("defaultoffsetposition:\r"), String("\r"), String("\t\tobjectID = theFxScheduler.RegisterEffect(argument);\r"), String("\r"), String("\t\tif (objectID)\r"), String("\t\t{\r"), String("\t\t\tif (addlArgs)\r"), String("\t\t\t{ //if there is an additional argument for an effect it is expected to be XANGLE-YANGLE-ZANGLE\r"), String("\t\t\t\ti++;\r"), String("\t\t\t\twhile (anglesGathered < 3)\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tr = 0;\r"), String("\t\t\t\t\twhile (addlArg[i] && addlArg[i] != \'-\')\r"), String("\t\t\t\t\t{\r"), String("\t\t\t\t\t\tt[r] = addlArg[i];\r"), String("\t\t\t\t\t\tr++;\r"), String("\t\t\t\t\t\ti++;\r"), String("\t\t\t\t\t}\r"), String("\t\t\t\t\tt[r] = \'\\0\';\r"), String("\t\t\t\t\ti++;\r"), String("\r"), String("\t\t\t\t\tif (!r)\r"), String("\t\t\t\t\t{ //failed to get a new part of the vector\r"), String("\t\t\t\t\t\tanglesGathered = 0;\r"), String("\t\t\t\t\t\tbreak;\r"), String("\t\t\t\t\t}\r"), String("\r"), String("\t\t\t\t\tparsedAngles[anglesGathered] = atof(t);\r"), String("\t\t\t\t\tanglesGathered++;\r"), String("\t\t\t\t}\r"), String("\r"), String("\t\t\t\tif (anglesGathered)\r"), String("\t\t\t\t{\r"), String("\t\t\t\t\tVectorCopy(parsedAngles, useAngles);\r"), String("\t\t\t\t}\r"), String("\t\t\t\telse\r"), String("\t\t\t\t{ //failed to parse angles from the extra argument provided..\r"), String("\t\t\t\t\tVectorCopy(cent->lerpAngles, useAngles);\r"), String("\t\t\t\t}\r"), String("\t\t\t}\r"), String("\t\t\telse\r"), String("\t\t\t{ //if no constant angles, play in direction entity is facing\r"), String("\t\t\t\tVectorCopy(cent->lerpAngles, useAngles);\r"), String("\t\t\t}\r"), String("\r"), String("\t\t\tAngleVectors(useAngles, forward, right, up);\r"), String("\r"), String("\t\t\tVectorCopy(cent->lerpOrigin, useOrigin);\r"), String("\r"), String("\t\t\t//forward\r"), String("\t\t\tuseOrigin[0] += forward[0]*parsedOffset[0];\r"), String("\t\t\tuseOrigin[1] += forward[1]*parsedOffset[0];\r"), String("\t\t\tuseOrigin[2] += forward[2]*parsedOffset[0];\r"), String("\r"), String("\t\t\t//right\r"), String("\t\t\tuseOrigin[0] += right[0]*parsedOffset[1];\r"), String("\t\t\tuseOrigin[1] += right[1]*parsedOffset[1];\r"), String("\t\t\tuseOrigin[2] += right[2]*parsedOffset[1];\r"), String("\r"), String("\t\t\t//up\r"), String("\t\t\tuseOrigin[0] += up[0]*parsedOffset[2];\r"), String("\t\t\tuseOrigin[1] += up[1]*parsedOffset[2];\r"), String("\t\t\tuseOrigin[2] += up[2]*parsedOffset[2];\r"), String("\r"), String("\t\t\ttheFxScheduler.PlayEffect(objectID, useOrigin, useAngles);\r"), String("\t\t}\r"), String("\t}\r"), String("\telse if (strcmp(type, \"sound\") == 0)\r"), String("\t{\r"), String("\t\tobjectID = cgi_S_RegisterSound(argument);\r"), String("\t\tcgi_S_StartSound(cent->lerpOrigin, cent->currentState.number, CHAN_BODY, objectID);\r"), String("\t}\r"), String("\telse if (strcmp(type, \"loop\") == 0)\r"), String("\t{ //handled server-side\r"), String("\t\treturn;\r"), String("\t}\r"), String("\t//else if ...\r"), String("\telse\r"), String("\t{\r"), String("\t\tif (type[0])\r"), String("\t\t{\r"), String("\t\t\tCom_Printf(\"^3Warning: \\\"%s\\\" is an invalid ROFF notetrack function\\n\", type);\r"), String("\t\t}\r"), String("\t\telse\r"), String("\t\t{\r"), String("\t\t\tCom_Printf(\"^3Warning: Notetrack is missing function and/or arguments\\n\");\r"), String("\t\t}\r"), String("\t}\r"), String("\r"), String("\treturn;\r"), String("\r"), String("functionend:\r"), String("\tCom_Printf(\"^3Type-specific notetrack error: %s\\n\", errMsg);\r"), String("\treturn;\r"), String("}\r"), String(">>>>>>> master"), String("")])})
11:11:50 ERROR unnamed src/rpchandler.rs:27 Error handling message: Message not handled: MethodCall { jsonrpc: Some(V2), method: "window/workDoneProgress/create", params: Map({"token": String("index")}), id: Num(1) }

Message: {"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"index"},"id":1}

Error: Message not handled: MethodCall { jsonrpc: Some(V2), method: "window/workDoneProgress/create", params: Map({"token": String("index")}), id: Num(1) }
11:11:50 INFO unnamed src/language_server_protocol.rs:2760 handle_file_type; params=Object({"bufnr": Number(3), "filename": String("/home/ys/Code/project/project-jka/src/code/game/q_shared.h"), "languageId": String("cpp"), "position": Object({"character": Number(0), "line": Number(0)}), "viewport": Object({"end": Number(65), "start": Number(0)})})
11:11:50 INFO unnamed src/language_server_protocol.rs:1946 text_document_did_open; params=Object({"bufnr": Number(3), "filename": String("/home/ys/Code/project/project-jka/src/code/game/q_shared.h"), "languageId": String("cpp"), "position": Object({"character": Number(0), "line": Number(0)}), "viewport": Object({"end": Number(65), "start": Number(0)})})
11:11:50 INFO unnamed src/language_server_protocol.rs:2739 handle_buf_enter; params=Object({"bufnr": Number(3), "filename": String("/home/ys/Code/project/project-jka/src/code/game/q_shared.h"), "languageId": String("cpp")})
11:11:50 INFO unnamed src/language_server_protocol.rs:1888 text_document_code_lens; params=Object({"bufnr": Number(3), "filename": String("/home/ys/Code/project/project-jka/src/code/game/q_shared.h"), "languageId": String("cpp"), "position": Object({"character": Number(0), "line": Number(0)}), "viewport": Object({"end": Number(65), "start": Number(0)})})
11:11:50 WARN unnamed src/rpchandler.rs:217 Message not handled: Notification { jsonrpc: Some(V2), method: "$ccls/publishSkippedRanges", params: Map({"skippedRanges": Array([Object({"end": Object({"character": Number(6), "line": Number(31)}), "start": Object({"character": Number(0), "line": Number(7)})}), Object({"end": Object({"character": Number(15), "line": Number(72)}), "start": Object({"character": Number(0), "line": Number(54)})}), Object({"end": Object({"character": Number(5), "line": Number(78)}), "start": Object({"character": Number(0), "line": Number(76)})}), Object({"end": Object({"character": Number(6), "line": Number(113)}), "start": Object({"character": Number(0), "line": Number(88)})}), Object({"end": Object({"character": Number(6), "line": Number(135)}), "start": Object({"character": Number(0), "line": Number(117)})}), Object({"end": Object({"character": Number(6), "line": Number(153)}), "start": Object({"character": Number(0), "line": Number(139)})}), Object({"end": Object({"character": Number(5), "line": Number(167)}), "start": Object({"character": Number(0), "line": Number(163)})}), Object({"end": Object({"character": Number(6), "line": Number(196)}), "start": Object({"character": Number(0), "line": Number(177)})}), Object({"end": Object({"character": Number(6), "line": Number(220)}), "start": Object({"character": Number(0), "line": Number(218)})}), Object({"end": Object({"character": Number(5), "line": Number(245)}), "start": Object({"character": Number(0), "line": Number(243)})}), Object({"end": Object({"character": Number(6), "line": Number(364)}), "start": Object({"character": Number(0), "line": Number(362)})}), Object({"end": Object({"character": Number(6), "line": Number(561)}), "start": Object({"character": Number(0), "line": Number(541)})}), Object({"end": Object({"character": Number(6), "line": Number(605)}), "start": Object({"character": Number(0), "line": Number(597)})}), Object({"end": Object({"character": Number(5), "line": Number(632)}), "start": Object({"character": Number(0), "line": Number(608)})}), Object({"end": Object({"character": Number(6), "line": Number(641)}), "start": Object({"character": Number(0), "line": Number(637)})}), Object({"end": Object({"character": Number(5), "line": Number(666)}), "start": Object({"character": Number(0), "line": Number(650)})}), Object({"end": Object({"character": Number(6), "line": Number(691)}), "start": Object({"character": Number(0), "line": Number(673)})}), Object({"end": Object({"character": Number(5), "line": Number(710)}), "start": Object({"character": Number(0), "line": Number(694)})}), Object({"end": Object({"character": Number(6), "line": Number(729)}), "start": Object({"character": Number(0), "line": Number(723)})}), Object({"end": Object({"character": Number(5), "line": Number(747)}), "start": Object({"character": Number(0), "line": Number(732)})}), Object({"end": Object({"character": Number(6), "line": Number(787)}), "start": Object({"character": Number(0), "line": Number(764)})}), Object({"end": Object({"character": Number(5), "line": Number(854)}), "start": Object({"character": Number(0), "line": Number(829)})}), Object({"end": Object({"character": Number(5), "line": Number(883)}), "start": Object({"character": Number(0), "line": Number(860)})}), Object({"end": Object({"character": Number(6), "line": Number(985)}), "start": Object({"character": Number(0), "line": Number(966)})}), Object({"end": Object({"character": Number(6), "line": Number(1174)}), "start": Object({"character": Number(0), "line": Number(1172)})}), Object({"end": Object({"character": Number(5), "line": Number(1199)}), "start": Object({"character": Number(0), "line": Number(1197)})}), Object({"end": Object({"character": Number(5), "line": Number(1286)}), "start": Object({"character": Number(0), "line": Number(1275)})}), Object({"end": Object({"character": Number(20), "line": Number(1509)}), "start": Object({"character": Number(0), "line": Number(1507)})}), Object({"end": Object({"character": Number(5), "line": Number(1550)}), "start": Object({"character": Number(0), "line": Number(1547)})}), Object({"end": Object({"character": Number(6), "line": Number(1570)}), "start": Object({"character": Number(0), "line": Number(1568)})}), Object({"end": Object({"character": Number(20), "line": Number(2747)}), "start": Object({"character": Number(0), "line": Number(2745)})})]), "uri": String("file:///home/ys/Code/project/project-jka/src/code/game/q_shared.h")}) }
11:11:50 WARN unnamed src/rpchandler.rs:217 Message not handled: Notification { jsonrpc: Some(V2), method: "$ccls/publishSemanticHighlight", params: Map({"symbols": Array([Object({"id": Number(1582), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(26190), "R": Number(26209)})]), "storage": Number(0)}), Object({"id": Number(8801), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(81185), "R": Number(81195)})]), "storage": Number(0)}), Object({"id": Number(8838), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(74186), "R": Number(74197)})]), "storage": Number(0)}), Object({"id": Number(484), "kind": Number(23), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(79664), "R": Number(79670)})]), "storage": Number(0)}), Object({"id": Number(9373), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7527), "R": Number(7538)})]), "storage": Number(0)}), Object({"id": Number(9115), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(65514), "R": Number(65527)})]), "storage": Number(0)}), Object({"id": Number(9348), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(73920), "R": Number(73939)})]), "storage": Number(0)}), Object({"id": Number(472), "kind": Number(10), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(81141), "R": Number(81154)})]), "storage": Number(0)}), Object({"id": Number(8984), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(48170), "R": Number(48186)})]), "storage": Number(0)}), Object({"id": Number(9128), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8282), "R": Number(8294)})]), "storage": Number(0)}), Object({"id": Number(9561), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(23285), "R": Number(23290)})]), "storage": Number(0)}), Object({"id": Number(345), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(4930), "R": Number(4935)})]), "storage": Number(0)}), Object({"id": Number(1602), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(25988), "R": Number(26003)})]), "storage": Number(0)}), Object({"id": Number(1645), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(56726), "R": Number(56742)})]), "storage": Number(0)}), Object({"id": Number(9127), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(13479), "R": Number(13488)})]), "storage": Number(0)}), Object({"id": Number(8806), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(80245), "R": Number(80257)})]), "storage": Number(0)}), Object({"id": Number(1639), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(30220), "R": Number(30236)})]), "storage": Number(0)}), Object({"id": Number(9094), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(53231), "R": Number(53243)})]), "storage": Number(0)}), Object({"id": Number(9754), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(31562), "R": Number(31572)})]), "storage": Number(0)}), Object({"id": Number(9299), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(77770), "R": Number(77779)})]), "storage": Number(0)}), Object({"id": Number(8955), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(54455), "R": Number(54467)})]), "storage": Number(0)}), Object({"id": Number(1620), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(27390), "R": Number(27402)})]), "storage": Number(0)}), Object({"id": Number(9358), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(30500), "R": Number(30505)})]), "storage": Number(0)}), Object({"id": Number(1640), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(30440), "R": Number(30453)})]), "storage": Number(0)}), Object({"id": Number(9303), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(32591), "R": Number(32595)})]), "storage": Number(0)}), Object({"id": Number(9058), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(39460), "R": Number(39470)})]), "storage": Number(0)}), Object({"id": Number(9443), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9379), "R": Number(9394)})]), "storage": Number(0)}), Object({"id": Number(9351), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7710), "R": Number(7729)})]), "storage": Number(0)}), Object({"id": Number(9781), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(30476), "R": Number(30479)})]), "storage": Number(0)}), Object({"id": Number(9589), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(29383), "R": Number(29386)})]), "storage": Number(0)}), Object({"id": Number(1558), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(68405), "R": Number(68420)})]), "storage": Number(0)}), Object({"id": Number(1536), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(60991), "R": Number(61001)})]), "storage": Number(0)}), Object({"id": Number(9276), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(39521), "R": Number(39532)})]), "storage": Number(0)}), Object({"id": Number(8903), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(63765), "R": Number(63777)})]), "storage": Number(0)}), Object({"id": Number(9619), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26252), "R": Number(26258)})]), "storage": Number(0)}), Object({"id": Number(9368), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(80425), "R": Number(80436)})]), "storage": Number(0)}), Object({"id": Number(951), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(26586), "R": Number(26600)})]), "storage": Number(0)}), Object({"id": Number(8828), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(76592), "R": Number(76605)})]), "storage": Number(0)}), Object({"id": Number(1529), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(67330), "R": Number(67344)})]), "storage": Number(0)}), Object({"id": Number(9188), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10618), "R": Number(10633)})]), "storage": Number(0)}), Object({"id": Number(9437), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10377), "R": Number(10390)})]), "storage": Number(0)}), Object({"id": Number(9567), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(33234), "R": Number(33241)})]), "storage": Number(0)}), Object({"id": Number(8897), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(64590), "R": Number(64603)})]), "storage": Number(0)}), Object({"id": Number(9780), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(34698), "R": Number(34708)})]), "storage": Number(0)}), Object({"id": Number(1584), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(30326), "R": Number(30345)})]), "storage": Number(0)}), Object({"id": Number(9553), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(37751), "R": Number(37761)}), Object({"L": Number(37834), "R": Number(37844)})]), "storage": Number(0)}), Object({"id": Number(9615), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(30353), "R": Number(30354)})]), "storage": Number(0)}), Object({"id": Number(1576), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(24467), "R": Number(24483)})]), "storage": Number(0)}), Object({"id": Number(9068), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(38902), "R": Number(38909)})]), "storage": Number(0)}), Object({"id": Number(9159), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9674), "R": Number(9684)})]), "storage": Number(0)}), Object({"id": Number(1547), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(24010), "R": Number(24028)})]), "storage": Number(0)}), Object({"id": Number(9236), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8021), "R": Number(8034)})]), "storage": Number(0)}), Object({"id": Number(122), "kind": Number(23), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(63350), "R": Number(63363)})]), "storage": Number(0)}), Object({"id": Number(1609), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(29929), "R": Number(29940)})]), "storage": Number(0)}), Object({"id": Number(9248), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(38717), "R": Number(38724)})]), "storage": Number(0)}), Object({"id": Number(519), "kind": Number(10), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(77387), "R": Number(77391)})]), "storage": Number(0)}), Object({"id": Number(9369), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(70290), "R": Number(70311)})]), "storage": Number(0)}), Object({"id": Number(9467), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10393), "R": Number(10401)})]), "storage": Number(0)}), Object({"id": Number(9340), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(42), "R": Number(54)})]), "storage": Number(0)}), Object({"id": Number(512), "kind": Number(10), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(6995), "R": Number(6999)})]), "storage": Number(0)}), Object({"id": Number(9220), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(12143), "R": Number(12154)})]), "storage": Number(0)}), Object({"id": Number(9537), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(58727), "R": Number(58731)})]), "storage": Number(0)}), Object({"id": Number(490), "kind": Number(10), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(80388), "R": Number(80406)})]), "storage": Number(0)}), Object({"id": Number(9054), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(74143), "R": Number(74149)})]), "storage": Number(0)}), Object({"id": Number(9712), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(39198), "R": Number(39207)})]), "storage": Number(0)}), Object({"id": Number(9278), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(58840), "R": Number(58847)})]), "storage": Number(0)}), Object({"id": Number(9167), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(17735), "R": Number(17736)})]), "storage": Number(0)}), Object({"id": Number(8793), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5624), "R": Number(5640)})]), "storage": Number(0)}), Object({"id": Number(9785), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(35656), "R": Number(35676)})]), "storage": Number(0)}), Object({"id": Number(8849), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(74114), "R": Number(74121)})]), "storage": Number(0)}), Object({"id": Number(9226), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(44226), "R": Number(44242)})]), "storage": Number(0)}), Object({"id": Number(4639), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(75727), "R": Number(75740)})]), "storage": Number(0)}), Object({"id": Number(9216), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10207), "R": Number(10216)})]), "storage": Number(0)}), Object({"id": Number(1638), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(29904), "R": Number(29912)})]), "storage": Number(0)}), Object({"id": Number(8937), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(58601), "R": Number(58605)})]), "storage": Number(0)}), Object({"id": Number(9284), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7803), "R": Number(7821)})]), "storage": Number(0)}), Object({"id": Number(9084), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26335), "R": Number(26340)})]), "storage": Number(0)}), Object({"id": Number(8858), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(71182), "R": Number(71201)})]), "storage": Number(0)}), Object({"id": Number(8833), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(74811), "R": Number(74821)})]), "storage": Number(0)}), Object({"id": Number(8890), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(65073), "R": Number(65084)})]), "storage": Number(0)}), Object({"id": Number(9073), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(52259), "R": Number(52270)})]), "storage": Number(0)}), Object({"id": Number(8820), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(78289), "R": Number(78294)})]), "storage": Number(0)}), Object({"id": Number(8830), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(76247), "R": Number(76255)})]), "storage": Number(0)}), Object({"id": Number(9447), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9727), "R": Number(9739)})]), "storage": Number(0)}), Object({"id": Number(9366), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(6120), "R": Number(6130)})]), "storage": Number(0)}), Object({"id": Number(9022), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(42644), "R": Number(42663)})]), "storage": Number(0)}), Object({"id": Number(1550), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(30609), "R": Number(30618)})]), "storage": Number(0)}), Object({"id": Number(9784), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(48755), "R": Number(48765)})]), "storage": Number(0)}), Object({"id": Number(9328), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26953), "R": Number(26960)})]), "storage": Number(0)}), Object({"id": Number(9578), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(30049), "R": Number(30050)})]), "storage": Number(0)}), Object({"id": Number(1561), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(30277), "R": Number(30291)})]), "storage": Number(0)}), Object({"id": Number(8896), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(64656), "R": Number(64673)})]), "storage": Number(0)}), Object({"id": Number(9708), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(33462), "R": Number(33466)})]), "storage": Number(0)}), Object({"id": Number(465), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(79968), "R": Number(79988)})]), "storage": Number(0)}), Object({"id": Number(9190), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(23399), "R": Number(23405)}), Object({"L": Number(23511), "R": Number(23517)})]), "storage": Number(0)}), Object({"id": Number(9802), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(42567), "R": Number(42582)})]), "storage": Number(0)}), Object({"id": Number(9563), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(48973), "R": Number(48983)})]), "storage": Number(0)}), Object({"id": Number(936), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(23609), "R": Number(23618)})]), "storage": Number(0)}), Object({"id": Number(9059), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(40402), "R": Number(40412)})]), "storage": Number(0)}), Object({"id": Number(9381), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(6816), "R": Number(6831)})]), "storage": Number(0)}), Object({"id": Number(9024), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(59517), "R": Number(59527)})]), "storage": Number(0)}), Object({"id": Number(9120), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(13864), "R": Number(13874)})]), "storage": Number(0)}), Object({"id": Number(4475), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(75384), "R": Number(75389)})]), "storage": Number(0)}), Object({"id": Number(9429), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8222), "R": Number(8232)})]), "storage": Number(0)}), Object({"id": Number(9616), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(29263), "R": Number(29267)})]), "storage": Number(0)}), Object({"id": Number(9733), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(39305), "R": Number(39313)})]), "storage": Number(0)}), Object({"id": Number(482), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(82083), "R": Number(82091)})]), "storage": Number(0)}), Object({"id": Number(8931), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(59719), "R": Number(59736)})]), "storage": Number(0)}), Object({"id": Number(483), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8893), "R": Number(8901)})]), "storage": Number(0)}), Object({"id": Number(9379), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(12243), "R": Number(12254)})]), "storage": Number(1)}), Object({"id": Number(9242), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(76357), "R": Number(76366)})]), "storage": Number(0)}), Object({"id": Number(473), "kind": Number(23), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(58584), "R": Number(58590)})]), "storage": Number(0)}), Object({"id": Number(8856), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(71433), "R": Number(71457)})]), "storage": Number(0)}), Object({"id": Number(8823), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(77975), "R": Number(77983)})]), "storage": Number(0)}), Object({"id": Number(9473), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9844), "R": Number(9856)})]), "storage": Number(0)}), Object({"id": Number(4731), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(32881), "R": Number(32888)})]), "storage": Number(0)}), Object({"id": Number(1568), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(29124), "R": Number(29133)})]), "storage": Number(0)}), Object({"id": Number(8898), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(64555), "R": Number(64565)})]), "storage": Number(0)}), Object({"id": Number(1588), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(18887), "R": Number(18901)})]), "storage": Number(0)}), Object({"id": Number(9386), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(80017), "R": Number(80024)})]), "storage": Number(0)}), Object({"id": Number(9060), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(40364), "R": Number(40379)})]), "storage": Number(0)}), Object({"id": Number(521), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(32655), "R": Number(32667)}), Object({"L": Number(32812), "R": Number(32824)})]), "storage": Number(0)}), Object({"id": Number(1621), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(27498), "R": Number(27511)})]), "storage": Number(0)}), Object({"id": Number(9075), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(38671), "R": Number(38679)})]), "storage": Number(0)}), Object({"id": Number(967), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(16462), "R": Number(16471)})]), "storage": Number(0)}), Object({"id": Number(9439), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9993), "R": Number(10006)})]), "storage": Number(0)}), Object({"id": Number(9110), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(41304), "R": Number(41310)})]), "storage": Number(0)}), Object({"id": Number(9481), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(32057), "R": Number(32071)})]), "storage": Number(0)}), Object({"id": Number(8815), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(78511), "R": Number(78520)})]), "storage": Number(0)}), Object({"id": Number(8893), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(64900), "R": Number(64907)})]), "storage": Number(0)}), Object({"id": Number(9709), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(28304), "R": Number(28305)})]), "storage": Number(0)}), Object({"id": Number(9687), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27917), "R": Number(27918)})]), "storage": Number(0)}), Object({"id": Number(1592), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(18360), "R": Number(18376)})]), "storage": Number(0)}), Object({"id": Number(8878), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(66291), "R": Number(66303)})]), "storage": Number(0)}), Object({"id": Number(9664), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27376), "R": Number(27377)})]), "storage": Number(0)}), Object({"id": Number(9357), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(77818), "R": Number(77830)})]), "storage": Number(0)}), Object({"id": Number(9186), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24574), "R": Number(24579)})]), "storage": Number(0)}), Object({"id": Number(8960), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(52113), "R": Number(52123)})]), "storage": Number(0)}), Object({"id": Number(9160), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(45616), "R": Number(45631)})]), "storage": Number(0)}), Object({"id": Number(4691), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(70122), "R": Number(70138)})]), "storage": Number(0)}), Object({"id": Number(492), "kind": Number(10), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(6295), "R": Number(6299)})]), "storage": Number(0)}), Object({"id": Number(486), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8868), "R": Number(8875)})]), "storage": Number(0)}), Object({"id": Number(9013), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(43898), "R": Number(43915)})]), "storage": Number(0)}), Object({"id": Number(1531), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(66959), "R": Number(66973)})]), "storage": Number(0)}), Object({"id": Number(9041), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(41155), "R": Number(41175)})]), "storage": Number(0)}), Object({"id": Number(9331), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(32227), "R": Number(32231)})]), "storage": Number(0)}), Object({"id": Number(4542), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(39600), "R": Number(39610)})]), "storage": Number(0)}), Object({"id": Number(1525), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(69599), "R": Number(69614)})]), "storage": Number(0)}), Object({"id": Number(9261), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(6303), "R": Number(6311)})]), "storage": Number(0)}), Object({"id": Number(9492), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(81547), "R": Number(81560)})]), "storage": Number(0)}), Object({"id": Number(503), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5019), "R": Number(5025)})]), "storage": Number(0)}), Object({"id": Number(8796), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(81718), "R": Number(81732)})]), "storage": Number(1)}), Object({"id": Number(9651), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26704), "R": Number(26707)})]), "storage": Number(0)}), Object({"id": Number(9238), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(49901), "R": Number(49916)})]), "storage": Number(0)}), Object({"id": Number(480), "kind": Number(10), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(38586), "R": Number(38590)})]), "storage": Number(0)}), Object({"id": Number(4833), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(32546), "R": Number(32553)})]), "storage": Number(0)}), Object({"id": Number(9433), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27484), "R": Number(27485)})]), "storage": Number(0)}), Object({"id": Number(9604), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24550), "R": Number(24555)})]), "storage": Number(0)}), Object({"id": Number(9667), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(63454), "R": Number(63462)})]), "storage": Number(0)}), Object({"id": Number(9695), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(28056), "R": Number(28063)})]), "storage": Number(0)}), Object({"id": Number(9432), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(41785), "R": Number(41794)})]), "storage": Number(0)}), Object({"id": Number(9051), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(39573), "R": Number(39583)})]), "storage": Number(0)}), Object({"id": Number(9793), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(33613), "R": Number(33616)})]), "storage": Number(0)}), Object({"id": Number(9172), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(11080), "R": Number(11094)})]), "storage": Number(0)}), Object({"id": Number(9763), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(32241), "R": Number(32247)})]), "storage": Number(0)}), Object({"id": Number(4598), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(75485), "R": Number(75489)})]), "storage": Number(0)}), Object({"id": Number(9645), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(70923), "R": Number(70938)})]), "storage": Number(0)}), Object({"id": Number(1627), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(41598), "R": Number(41613)}), Object({"L": Number(58227), "R": Number(58242)}), Object({"L": Number(62633), "R": Number(62648)})]), "storage": Number(0)}), Object({"id": Number(9061), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(40327), "R": Number(40342)})]), "storage": Number(0)}), Object({"id": Number(9302), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(29919), "R": Number(29920)})]), "storage": Number(0)}), Object({"id": Number(8952), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(68535), "R": Number(68543)}), Object({"L": Number(68581), "R": Number(68589)}), Object({"L": Number(68653), "R": Number(68661)})]), "storage": Number(0)}), Object({"id": Number(1595), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(23198), "R": Number(23205)})]), "storage": Number(0)}), Object({"id": Number(9290), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(61971), "R": Number(61975)}), Object({"L": Number(62060), "R": Number(62064)}), Object({"L": Number(62082), "R": Number(62086)}), Object({"L": Number(62134), "R": Number(62138)})]), "storage": Number(0)}), Object({"id": Number(9483), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(76727), "R": Number(76739)})]), "storage": Number(0)}), Object({"id": Number(9668), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(40162), "R": Number(40179)}), Object({"L": Number(65408), "R": Number(65425)})]), "storage": Number(0)}), Object({"id": Number(8846), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(72342), "R": Number(72352)})]), "storage": Number(0)}), Object({"id": Number(9723), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(71697), "R": Number(71711)})]), "storage": Number(0)}), Object({"id": Number(8863), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(70320), "R": Number(70333)})]), "storage": Number(0)}), Object({"id": Number(8999), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(79517), "R": Number(79523)})]), "storage": Number(0)}), Object({"id": Number(1538), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(58121), "R": Number(58136)}), Object({"L": Number(68746), "R": Number(68761)}), Object({"L": Number(68820), "R": Number(68835)})]), "storage": Number(0)}), Object({"id": Number(917), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(30668), "R": Number(30678)})]), "storage": Number(0)}), Object({"id": Number(9280), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(82213), "R": Number(82233)})]), "storage": Number(0)}), Object({"id": Number(9017), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(43619), "R": Number(43636)})]), "storage": Number(0)}), Object({"id": Number(8925), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(60458), "R": Number(60470)})]), "storage": Number(0)}), Object({"id": Number(8819), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(78339), "R": Number(78344)})]), "storage": Number(0)}), Object({"id": Number(488), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7375), "R": Number(7386)})]), "storage": Number(0)}), Object({"id": Number(9623), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(78131), "R": Number(78136)})]), "storage": Number(0)}), Object({"id": Number(9657), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(41797), "R": Number(41806)})]), "storage": Number(0)}), Object({"id": Number(9656), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(63699), "R": Number(63706)})]), "storage": Number(0)}), Object({"id": Number(9448), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(65537), "R": Number(65547)})]), "storage": Number(0)}), Object({"id": Number(9322), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(50325), "R": Number(50336)})]), "storage": Number(0)}), Object({"id": Number(9343), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(25417), "R": Number(25422)}), Object({"L": Number(25460), "R": Number(25465)})]), "storage": Number(0)}), Object({"id": Number(9743), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(33254), "R": Number(33261)})]), "storage": Number(0)}), Object({"id": Number(9016), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(43716), "R": Number(43732)})]), "storage": Number(0)}), Object({"id": Number(8987), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(47916), "R": Number(47932)})]), "storage": Number(0)}), Object({"id": Number(8792), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(40066), "R": Number(40077)})]), "storage": Number(0)}), Object({"id": Number(8868), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(70051), "R": Number(70065)})]), "storage": Number(0)}), Object({"id": Number(9375), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9793), "R": Number(9804)})]), "storage": Number(0)}), Object({"id": Number(9138), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(11425), "R": Number(11437)})]), "storage": Number(0)}), Object({"id": Number(9), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8691), "R": Number(8697)}), Object({"L": Number(8761), "R": Number(8767)}), Object({"L": Number(9077), "R": Number(9083)}), Object({"L": Number(12203), "R": Number(12209)}), Object({"L": Number(12236), "R": Number(12242)}), Object({"L": Number(13005), "R": Number(13011)}), Object({"L": Number(13042), "R": Number(13048)}), Object({"L": Number(14003), "R": Number(14009)}), Object({"L": Number(14035), "R": Number(14041)}), Object({"L": Number(14048), "R": Number(14054)}), Object({"L": Number(14593), "R": Number(14599)}), Object({"L": Number(14610), "R": Number(14616)}), Object({"L": Number(15299), "R": Number(15305)}), Object({"L": Number(15316), "R": Number(15322)}), Object({"L": Number(15327), "R": Number(15333)}), Object({"L": Number(15498), "R": Number(15504)}), Object({"L": Number(15517), "R": Number(15523)}), Object({"L": Number(15530), "R": Number(15536)}), Object({"L": Number(16479), "R": Number(16485)}), Object({"L": Number(16498), "R": Number(16504)}), Object({"L": Number(16511), "R": Number(16517)}), Object({"L": Number(16963), "R": Number(16969)}), Object({"L": Number(16974), "R": Number(16980)}), Object({"L": Number(17227), "R": Number(17233)}), Object({"L": Number(17250), "R": Number(17256)}), Object({"L": Number(17659), "R": Number(17665)}), Object({"L": Number(17680), "R": Number(17686)}), Object({"L": Number(17836), "R": Number(17842)}), Object({"L": Number(17847), "R": Number(17853)}), Object({"L": Number(17891), "R": Number(17897)}), Object({"L": Number(17910), "R": Number(17916)}), Object({"L": Number(17944), "R": Number(17950)}), Object({"L": Number(17957), "R": Number(17963)}), Object({"L": Number(18384), "R": Number(18390)}), Object({"L": Number(18394), "R": Number(18400)}), Object({"L": Number(18407), "R": Number(18413)}), Object({"L": Number(18733), "R": Number(18739)}), Object({"L": Number(18750), "R": Number(18756)}), Object({"L": Number(18909), "R": Number(18915)}), Object({"L": Number(18926), "R": Number(18932)}), Object({"L": Number(19165), "R": Number(19171)}), Object({"L": Number(19690), "R": Number(19696)}), Object({"L": Number(20164), "R": Number(20170)}), Object({"L": Number(20181), "R": Number(20187)}), Object({"L": Number(20196), "R": Number(20202)}), Object({"L": Number(20302), "R": Number(20308)}), Object({"L": Number(20319), "R": Number(20325)}), Object({"L": Number(20334), "R": Number(20340)}), Object({"L": Number(20592), "R": Number(20598)}), Object({"L": Number(20749), "R": Number(20755)}), Object({"L": Number(20835), "R": Number(20841)}), Object({"L": Number(20846), "R": Number(20852)}), Object({"L": Number(20864), "R": Number(20870)}), Object({"L": Number(21088), "R": Number(21094)}), Object({"L": Number(21428), "R": Number(21434)}), Object({"L": Number(21438), "R": Number(21444)}), Object({"L": Number(23247), "R": Number(23253)}), Object({"L": Number(23262), "R": Number(23268)}), Object({"L": Number(23278), "R": Number(23284)}), Object({"L": Number(23292), "R": Number(23298)}), Object({"L": Number(23392), "R": Number(23398)}), Object({"L": Number(23407), "R": Number(23413)}), Object({"L": Number(23427), "R": Number(23433)}), Object({"L": Number(23620), "R": Number(23626)}), Object({"L": Number(23823), "R": Number(23829)}), Object({"L": Number(23837), "R": Number(23843)}), Object({"L": Number(23972), "R": Number(23978)}), Object({"L": Number(23987), "R": Number(23993)}), Object({"L": Number(24036), "R": Number(24042)}), Object({"L": Number(24053), "R": Number(24059)}), Object({"L": Number(24105), "R": Number(24111)}), Object({"L": Number(24122), "R": Number(24128)}), Object({"L": Number(24175), "R": Number(24181)}), Object({"L": Number(24192), "R": Number(24198)}), Object({"L": Number(24207), "R": Number(24213)}), Object({"L": Number(24349), "R": Number(24355)}), Object({"L": Number(24366), "R": Number(24372)}), Object({"L": Number(24377), "R": Number(24383)}), Object({"L": Number(24393), "R": Number(24399)}), Object({"L": Number(24529), "R": Number(24535)}), Object({"L": Number(24543), "R": Number(24549)}), Object({"L": Number(25101), "R": Number(25107)}), Object({"L": Number(25112), "R": Number(25118)}), Object({"L": Number(25123), "R": Number(25129)}), Object({"L": Number(26025), "R": Number(26031)}), Object({"L": Number(26041), "R": Number(26047)}), Object({"L": Number(26057), "R": Number(26063)}), Object({"L": Number(26211), "R": Number(26217)}), Object({"L": Number(26229), "R": Number(26235)}), Object({"L": Number(26245), "R": Number(26251)}), Object({"L": Number(26292), "R": Number(26298)}), Object({"L": Number(26310), "R": Number(26316)}), Object({"L": Number(26328), "R": Number(26334)}), Object({"L": Number(26387), "R": Number(26393)}), Object({"L": Number(26446), "R": Number(26452)}), Object({"L": Number(26462), "R": Number(26468)}), Object({"L": Number(26476), "R": Number(26482)}), Object({"L": Number(26564), "R": Number(26570)}), Object({"L": Number(26679), "R": Number(26685)}), Object({"L": Number(26697), "R": Number(26703)}), Object({"L": Number(33428), "R": Number(33434)}), Object({"L": Number(34078), "R": Number(34084)}), Object({"L": Number(34766), "R": Number(34772)}), Object({"L": Number(34783), "R": Number(34789)}), Object({"L": Number(40869), "R": Number(40875)}), Object({"L": Number(40883), "R": Number(40889)}), Object({"L": Number(40938), "R": Number(40944)}), Object({"L": Number(40960), "R": Number(40966)}), Object({"L": Number(41367), "R": Number(41373)}), Object({"L": Number(41389), "R": Number(41395)}), Object({"L": Number(41414), "R": Number(41420)}), Object({"L": Number(41434), "R": Number(41440)}), Object({"L": Number(63573), "R": Number(63579)}), Object({"L": Number(63590), "R": Number(63596)}), Object({"L": Number(64852), "R": Number(64858)}), Object({"L": Number(65480), "R": Number(65486)}), Object({"L": Number(71104), "R": Number(71110)}), Object({"L": Number(71234), "R": Number(71240)}), Object({"L": Number(71863), "R": Number(71869)}), Object({"L": Number(74871), "R": Number(74877)}), Object({"L": Number(74887), "R": Number(74893)}), Object({"L": Number(75545), "R": Number(75551)}), Object({"L": Number(75561), "R": Number(75567)}), Object({"L": Number(75579), "R": Number(75585)}), Object({"L": Number(75595), "R": Number(75601)}), Object({"L": Number(76694), "R": Number(76700)}), Object({"L": Number(76904), "R": Number(76910)}), Object({"L": Number(77948), "R": Number(77954)}), Object({"L": Number(77966), "R": Number(77972)}), Object({"L": Number(78023), "R": Number(78029)}), Object({"L": Number(78065), "R": Number(78071)}), Object({"L": Number(78106), "R": Number(78112)}), Object({"L": Number(78330), "R": Number(78336)}), Object({"L": Number(79510), "R": Number(79516)}), Object({"L": Number(79526), "R": Number(79532)}), Object({"L": Number(79544), "R": Number(79550)}), Object({"L": Number(79559), "R": Number(79565)}), Object({"L": Number(79710), "R": Number(79716)}), Object({"L": Number(79797), "R": Number(79803)}), Object({"L": Number(80010), "R": Number(80016)}), Object({"L": Number(80044), "R": Number(80050)}), Object({"L": Number(80078), "R": Number(80084)}), Object({"L": Number(80113), "R": Number(80119)}), Object({"L": Number(80148), "R": Number(80154)})]), "storage": Number(0)}), Object({"id": Number(4522), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(76701), "R": Number(76714)})]), "storage": Number(0)}), Object({"id": Number(9580), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24129), "R": Number(24131)})]), "storage": Number(0)}), Object({"id": Number(8961), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(51986), "R": Number(51994)})]), "storage": Number(0)}), Object({"id": Number(9285), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(25130), "R": Number(25132)}), Object({"L": Number(25138), "R": Number(25140)}), Object({"L": Number(25178), "R": Number(25180)}), Object({"L": Number(25218), "R": Number(25220)})]), "storage": Number(0)}), Object({"id": Number(8926), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(60353), "R": Number(60373)})]), "storage": Number(0)}), Object({"id": Number(9337), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(52991), "R": Number(53005)})]), "storage": Number(0)}), Object({"id": Number(4652), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(75790), "R": Number(75799)})]), "storage": Number(0)}), Object({"id": Number(4868), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(13588), "R": Number(13599)}), Object({"L": Number(21673), "R": Number(21684)})]), "storage": Number(0)}), Object({"id": Number(9173), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(11053), "R": Number(11066)})]), "storage": Number(0)}), Object({"id": Number(9672), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26903), "R": Number(26906)})]), "storage": Number(0)}), Object({"id": Number(467), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(79587), "R": Number(79614)})]), "storage": Number(0)}), Object({"id": Number(115), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(77363), "R": Number(77376)})]), "storage": Number(0)}), Object({"id": Number(9565), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(23830), "R": Number(23832)}), Object({"L": Number(23868), "R": Number(23870)}), Object({"L": Number(23898), "R": Number(23900)}), Object({"L": Number(23928), "R": Number(23930)})]), "storage": Number(0)}), Object({"id": Number(8951), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(55301), "R": Number(55313)})]), "storage": Number(0)}), Object({"id": Number(9137), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(11454), "R": Number(11464)})]), "storage": Number(0)}), Object({"id": Number(502), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(41876), "R": Number(41890)}), Object({"L": Number(48155), "R": Number(48169)}), Object({"L": Number(59118), "R": Number(59132)}), Object({"L": Number(60224), "R": Number(60238)})]), "storage": Number(0)}), Object({"id": Number(9253), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10758), "R": Number(10769)})]), "storage": Number(0)}), Object({"id": Number(9776), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(33901), "R": Number(33909)})]), "storage": Number(0)}), Object({"id": Number(9798), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(36884), "R": Number(36897)})]), "storage": Number(0)}), Object({"id": Number(1632), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(27871), "R": Number(27884)})]), "storage": Number(0)}), Object({"id": Number(978), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(13987), "R": Number(13995)})]), "storage": Number(0)}), Object({"id": Number(1530), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(67118), "R": Number(67129)})]), "storage": Number(0)}), Object({"id": Number(9265), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(12939), "R": Number(12940)})]), "storage": Number(0)}), Object({"id": Number(9441), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(64179), "R": Number(64190)})]), "storage": Number(0)}), Object({"id": Number(2873), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(36523), "R": Number(36536)}), Object({"L": Number(38208), "R": Number(38221)})]), "storage": Number(0)}), Object({"id": Number(9254), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27734), "R": Number(27738)})]), "storage": Number(0)}), Object({"id": Number(9080), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(73374), "R": Number(73384)})]), "storage": Number(0)}), Object({"id": Number(9748), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(30998), "R": Number(31007)})]), "storage": Number(0)}), Object({"id": Number(9339), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7167), "R": Number(7176)})]), "storage": Number(0)}), Object({"id": Number(1581), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(30070), "R": Number(30079)})]), "storage": Number(0)}), Object({"id": Number(9455), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(77579), "R": Number(77591)})]), "storage": Number(0)}), Object({"id": Number(461), "kind": Number(10), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(82205), "R": Number(82209)})]), "storage": Number(0)}), Object({"id": Number(9124), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(22757), "R": Number(22760)}), Object({"L": Number(22901), "R": Number(22904)}), Object({"L": Number(22955), "R": Number(22958)})]), "storage": Number(0)}), Object({"id": Number(9206), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(11000), "R": Number(11013)})]), "storage": Number(0)}), Object({"id": Number(9725), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(29309), "R": Number(29323)})]), "storage": Number(0)}), Object({"id": Number(9572), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(28089), "R": Number(28103)})]), "storage": Number(0)}), Object({"id": Number(295), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(74924), "R": Number(74936)}), Object({"L": Number(75425), "R": Number(75437)}), Object({"L": Number(75472), "R": Number(75484)})]), "storage": Number(0)}), Object({"id": Number(8913), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(65313), "R": Number(65322)})]), "storage": Number(0)}), Object({"id": Number(9801), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(37816), "R": Number(37831)}), Object({"L": Number(37881), "R": Number(37896)})]), "storage": Number(0)}), Object({"id": Number(9636), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26571), "R": Number(26577)})]), "storage": Number(0)}), Object({"id": Number(40), "kind": Number(23), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(33882), "R": Number(33888)})]), "storage": Number(0)}), Object({"id": Number(9356), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26797), "R": Number(26800)})]), "storage": Number(0)}), Object({"id": Number(9399), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(70391), "R": Number(70407)})]), "storage": Number(0)}), Object({"id": Number(2872), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(36247), "R": Number(36257)}), Object({"L": Number(37561), "R": Number(37571)})]), "storage": Number(0)}), Object({"id": Number(9632), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(6445), "R": Number(6456)})]), "storage": Number(0)}), Object({"id": Number(9592), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27910), "R": Number(27911)})]), "storage": Number(0)}), Object({"id": Number(9256), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7922), "R": Number(7929)})]), "storage": Number(0)}), Object({"id": Number(9175), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(78938), "R": Number(78948)})]), "storage": Number(0)}), Object({"id": Number(474), "kind": Number(23), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(46694), "R": Number(46700)})]), "storage": Number(0)}), Object({"id": Number(9093), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(17785), "R": Number(17786)})]), "storage": Number(0)}), Object({"id": Number(8932), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(59307), "R": Number(59315)})]), "storage": Number(0)}), Object({"id": Number(9525), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(20612), "R": Number(20619)}), Object({"L": Number(20623), "R": Number(20630)}), Object({"L": Number(20674), "R": Number(20681)}), Object({"L": Number(20692), "R": Number(20699)}), Object({"L": Number(20710), "R": Number(20717)})]), "storage": Number(0)}), Object({"id": Number(9485), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9590), "R": Number(9597)})]), "storage": Number(0)}), Object({"id": Number(4758), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(75857), "R": Number(75868)})]), "storage": Number(0)}), Object({"id": Number(9298), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(80410), "R": Number(80418)})]), "storage": Number(0)}), Object({"id": Number(436), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5279), "R": Number(5291)})]), "storage": Number(0)}), Object({"id": Number(9179), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10880), "R": Number(10890)})]), "storage": Number(0)}), Object({"id": Number(8907), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(63598), "R": Number(63606)})]), "storage": Number(0)}), Object({"id": Number(9734), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26893), "R": Number(26895)})]), "storage": Number(0)}), Object({"id": Number(9391), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(16970), "R": Number(16972)}), Object({"L": Number(16999), "R": Number(17001)}), Object({"L": Number(17016), "R": Number(17018)}), Object({"L": Number(17033), "R": Number(17035)})]), "storage": Number(0)}), Object({"id": Number(9681), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27642), "R": Number(27647)})]), "storage": Number(0)}), Object({"id": Number(9211), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9936), "R": Number(9947)})]), "storage": Number(0)}), Object({"id": Number(1541), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(24923), "R": Number(24936)}), Object({"L": Number(25146), "R": Number(25159)}), Object({"L": Number(25186), "R": Number(25199)}), Object({"L": Number(25226), "R": Number(25239)})]), "storage": Number(0)}), Object({"id": Number(9155), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(4316), "R": Number(4326)})]), "storage": Number(0)}), Object({"id": Number(9181), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10831), "R": Number(10843)})]), "storage": Number(0)}), Object({"id": Number(990), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(28740), "R": Number(28749)})]), "storage": Number(0)}), Object({"id": Number(8873), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(67173), "R": Number(67177)}), Object({"L": Number(67243), "R": Number(67247)}), Object({"L": Number(67309), "R": Number(67313)})]), "storage": Number(0)}), Object({"id": Number(9454), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9742), "R": Number(9753)})]), "storage": Number(0)}), Object({"id": Number(9452), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7617), "R": Number(7636)})]), "storage": Number(0)}), Object({"id": Number(9072), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(38742), "R": Number(38754)})]), "storage": Number(0)}), Object({"id": Number(4530), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(74797), "R": Number(74803)})]), "storage": Number(0)}), Object({"id": Number(8909), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(63562), "R": Number(63569)})]), "storage": Number(0)}), Object({"id": Number(955), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(56551), "R": Number(56557)}), Object({"L": Number(66902), "R": Number(66908)}), Object({"L": Number(66936), "R": Number(66942)}), Object({"L": Number(68954), "R": Number(68960)}), Object({"L": Number(69235), "R": Number(69241)}), Object({"L": Number(69673), "R": Number(69679)}), Object({"L": Number(69772), "R": Number(69778)})]), "storage": Number(0)}), Object({"id": Number(9612), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26012), "R": Number(26017)})]), "storage": Number(0)}), Object({"id": Number(8964), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(50615), "R": Number(50624)})]), "storage": Number(0)}), Object({"id": Number(1548), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(22736), "R": Number(22743)})]), "storage": Number(0)}), Object({"id": Number(9728), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(30624), "R": Number(30629)})]), "storage": Number(0)}), Object({"id": Number(501), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8741), "R": Number(8747)})]), "storage": Number(0)}), Object({"id": Number(38), "kind": Number(23), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(32210), "R": Number(32216)}), Object({"L": Number(32583), "R": Number(32589)})]), "storage": Number(0)}), Object({"id": Number(8799), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(81237), "R": Number(81247)})]), "storage": Number(0)}), Object({"id": Number(1570), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(29010), "R": Number(29018)})]), "storage": Number(0)}), Object({"id": Number(8991), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(47129), "R": Number(47138)}), Object({"L": Number(55851), "R": Number(55860)}), Object({"L": Number(55979), "R": Number(55988)}), Object({"L": Number(56470), "R": Number(56479)}), Object({"L": Number(56593), "R": Number(56602)}), Object({"L": Number(56778), "R": Number(56787)}), Object({"L": Number(57438), "R": Number(57447)}), Object({"L": Number(57601), "R": Number(57610)}), Object({"L": Number(57816), "R": Number(57825)}), Object({"L": Number(58034), "R": Number(58043)}), Object({"L": Number(58188), "R": Number(58197)})]), "storage": Number(0)}), Object({"id": Number(8986), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(81772), "R": Number(81780)})]), "storage": Number(0)}), Object({"id": Number(9418), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(70021), "R": Number(70041)})]), "storage": Number(0)}), Object({"id": Number(9611), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8160), "R": Number(8173)})]), "storage": Number(0)}), Object({"id": Number(1642), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(17632), "R": Number(17651)})]), "storage": Number(0)}), Object({"id": Number(9132), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(74199), "R": Number(74208)})]), "storage": Number(0)}), Object({"id": Number(9726), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(70601), "R": Number(70614)})]), "storage": Number(0)}), Object({"id": Number(9266), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7648), "R": Number(7669)})]), "storage": Number(0)}), Object({"id": Number(9768), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(30430), "R": Number(30431)})]), "storage": Number(0)}), Object({"id": Number(4809), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(12210), "R": Number(12221)}), Object({"L": Number(23563), "R": Number(23574)})]), "storage": Number(1)}), Object({"id": Number(9279), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7328), "R": Number(7339)})]), "storage": Number(0)}), Object({"id": Number(8940), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(73462), "R": Number(73479)})]), "storage": Number(0)}), Object({"id": Number(8854), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(71523), "R": Number(71539)})]), "storage": Number(0)}), Object({"id": Number(1596), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(57380), "R": Number(57389)}), Object({"L": Number(67010), "R": Number(67019)}), Object({"L": Number(67076), "R": Number(67085)})]), "storage": Number(0)}), Object({"id": Number(59), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8666), "R": Number(8672)})]), "storage": Number(0)}), Object({"id": Number(9710), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(69638), "R": Number(69648)}), Object({"L": Number(69697), "R": Number(69707)}), Object({"L": Number(69823), "R": Number(69833)}), Object({"L": Number(69881), "R": Number(69891)})]), "storage": Number(0)}), Object({"id": Number(9643), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(81694), "R": Number(81703)})]), "storage": Number(1)}), Object({"id": Number(1594), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(28914), "R": Number(28924)})]), "storage": Number(0)}), Object({"id": Number(9307), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(14617), "R": Number(14619)}), Object({"L": Number(15086), "R": Number(15088)}), Object({"L": Number(15100), "R": Number(15102)}), Object({"L": Number(15114), "R": Number(15116)})]), "storage": Number(0)}), Object({"id": Number(9608), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(25119), "R": Number(25121)}), Object({"L": Number(25168), "R": Number(25170)}), Object({"L": Number(25208), "R": Number(25210)}), Object({"L": Number(25248), "R": Number(25250)})]), "storage": Number(0)}), Object({"id": Number(9404), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8431), "R": Number(8439)})]), "storage": Number(0)}), Object({"id": Number(8963), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(51349), "R": Number(51359)})]), "storage": Number(0)}), Object({"id": Number(1611), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(26769), "R": Number(26778)})]), "storage": Number(0)}), Object({"id": Number(8910), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(63373), "R": Number(63384)})]), "storage": Number(0)}), Object({"id": Number(8915), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(72994), "R": Number(73012)})]), "storage": Number(0)}), Object({"id": Number(8883), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(65290), "R": Number(65294)})]), "storage": Number(0)}), Object({"id": Number(9779), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(68715), "R": Number(68723)}), Object({"L": Number(68763), "R": Number(68771)}), Object({"L": Number(68837), "R": Number(68845)})]), "storage": Number(0)}), Object({"id": Number(9746), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(30385), "R": Number(30390)})]), "storage": Number(0)}), Object({"id": Number(9630), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26453), "R": Number(26460)})]), "storage": Number(0)}), Object({"id": Number(8957), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(53343), "R": Number(53358)})]), "storage": Number(0)}), Object({"id": Number(8992), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(46950), "R": Number(46957)})]), "storage": Number(0)}), Object({"id": Number(9314), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(40011), "R": Number(40025)}), Object({"L": Number(65150), "R": Number(65164)})]), "storage": Number(0)}), Object({"id": Number(121), "kind": Number(23), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(75276), "R": Number(75289)})]), "storage": Number(0)}), Object({"id": Number(9773), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(33294), "R": Number(33309)})]), "storage": Number(0)}), Object({"id": Number(8995), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(57397), "R": Number(57403)}), Object({"L": Number(57486), "R": Number(57492)})]), "storage": Number(0)}), Object({"id": Number(9034), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(41731), "R": Number(41741)}), Object({"L": Number(47159), "R": Number(47169)}), Object({"L": Number(59049), "R": Number(59059)})]), "storage": Number(0)}), Object({"id": Number(675), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(29178), "R": Number(29185)})]), "storage": Number(0)}), Object({"id": Number(1527), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(68508), "R": Number(68526)})]), "storage": Number(0)}), Object({"id": Number(9114), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(31930), "R": Number(31943)})]), "storage": Number(0)}), Object({"id": Number(4486), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(39629), "R": Number(39645)})]), "storage": Number(0)}), Object({"id": Number(934), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(15476), "R": Number(15490)}), Object({"L": Number(20208), "R": Number(20222)}), Object({"L": Number(20346), "R": Number(20360)}), Object({"L": Number(23547), "R": Number(23561)}), Object({"L": Number(24227), "R": Number(24241)}), Object({"L": Number(24405), "R": Number(24419)})]), "storage": Number(0)}), Object({"id": Number(9415), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(34022), "R": Number(34030)})]), "storage": Number(0)}), Object({"id": Number(8804), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(80653), "R": Number(80657)})]), "storage": Number(0)}), Object({"id": Number(60), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5226), "R": Number(5237)})]), "storage": Number(0)}), Object({"id": Number(9095), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(43535), "R": Number(43551)})]), "storage": Number(0)}), Object({"id": Number(9292), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(18916), "R": Number(18918)}), Object({"L": Number(18946), "R": Number(18948)}), Object({"L": Number(18971), "R": Number(18973)}), Object({"L": Number(18998), "R": Number(19000)}), Object({"L": Number(19023), "R": Number(19025)}), Object({"L": Number(19050), "R": Number(19052)}), Object({"L": Number(19075), "R": Number(19077)})]), "storage": Number(0)}), Object({"id": Number(9374), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(80827), "R": Number(80829)})]), "storage": Number(0)}), Object({"id": Number(478), "kind": Number(10), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(39452), "R": Number(39456)})]), "storage": Number(0)}), Object({"id": Number(9510), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(17951), "R": Number(17955)})]), "storage": Number(0)}), Object({"id": Number(8962), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(51477), "R": Number(51490)})]), "storage": Number(0)}), Object({"id": Number(9090), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(17917), "R": Number(17921)})]), "storage": Number(0)}), Object({"id": Number(9246), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(46489), "R": Number(46512)})]), "storage": Number(0)}), Object({"id": Number(9497), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(41809), "R": Number(41818)})]), "storage": Number(0)}), Object({"id": Number(9503), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(31239), "R": Number(31252)})]), "storage": Number(0)}), Object({"id": Number(8982), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(48437), "R": Number(48449)})]), "storage": Number(0)}), Object({"id": Number(9145), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27629), "R": Number(27634)})]), "storage": Number(0)}), Object({"id": Number(9352), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(79804), "R": Number(79810)})]), "storage": Number(0)}), Object({"id": Number(9722), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(29083), "R": Number(29085)}), Object({"L": Number(29104), "R": Number(29106)})]), "storage": Number(0)}), Object({"id": Number(9193), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(20871), "R": Number(20874)}), Object({"L": Number(20880), "R": Number(20883)}), Object({"L": Number(20919), "R": Number(20922)}), Object({"L": Number(20958), "R": Number(20961)})]), "storage": Number(0)}), Object({"id": Number(9355), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7003), "R": Number(7012)})]), "storage": Number(0)}), Object({"id": Number(9329), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7227), "R": Number(7235)})]), "storage": Number(0)}), Object({"id": Number(4506), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(46837), "R": Number(46841)}), Object({"L": Number(66784), "R": Number(66788)}), Object({"L": Number(66831), "R": Number(66835)})]), "storage": Number(0)}), Object({"id": Number(9716), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(28845), "R": Number(28847)}), Object({"L": Number(28889), "R": Number(28891)})]), "storage": Number(0)}), Object({"id": Number(9515), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(20188), "R": Number(20190)}), Object({"L": Number(20224), "R": Number(20226)})]), "storage": Number(0)}), Object({"id": Number(8988), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(47785), "R": Number(47795)}), Object({"L": Number(69720), "R": Number(69730)}), Object({"L": Number(69850), "R": Number(69860)})]), "storage": Number(0)}), Object({"id": Number(1537), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(60865), "R": Number(60873)})]), "storage": Number(0)}), Object({"id": Number(9420), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24043), "R": Number(24045)})]), "storage": Number(0)}), Object({"id": Number(8816), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(78491), "R": Number(78501)})]), "storage": Number(0)}), Object({"id": Number(464), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(81620), "R": Number(81631)}), Object({"L": Number(81681), "R": Number(81692)})]), "storage": Number(0)}), Object({"id": Number(1603), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(27096), "R": Number(27117)})]), "storage": Number(0)}), Object({"id": Number(9020), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(53539), "R": Number(53550)})]), "storage": Number(0)}), Object({"id": Number(148), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5201), "R": Number(5211)})]), "storage": Number(0)}), Object({"id": Number(9030), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(58899), "R": Number(58908)})]), "storage": Number(0)}), Object({"id": Number(1600), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(17757), "R": Number(17768)})]), "storage": Number(0)}), Object({"id": Number(9758), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(63634), "R": Number(63650)})]), "storage": Number(0)}), Object({"id": Number(9601), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24536), "R": Number(24541)})]), "storage": Number(0)}), Object({"id": Number(8923), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(61425), "R": Number(61431)}), Object({"L": Number(61509), "R": Number(61515)}), Object({"L": Number(61523), "R": Number(61529)}), Object({"L": Number(61571), "R": Number(61577)})]), "storage": Number(0)}), Object({"id": Number(8970), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(50211), "R": Number(50220)})]), "storage": Number(0)}), Object({"id": Number(9586), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10068), "R": Number(10081)})]), "storage": Number(0)}), Object({"id": Number(9529), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(80665), "R": Number(80667)})]), "storage": Number(0)}), Object({"id": Number(9209), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(13012), "R": Number(13015)})]), "storage": Number(0)}), Object({"id": Number(9079), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(38617), "R": Number(38624)})]), "storage": Number(0)}), Object({"id": Number(8844), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(73703), "R": Number(73721)})]), "storage": Number(0)}), Object({"id": Number(9504), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9818), "R": Number(9828)})]), "storage": Number(0)}), Object({"id": Number(9690), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27924), "R": Number(27925)})]), "storage": Number(0)}), Object({"id": Number(9575), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(55432), "R": Number(55445)})]), "storage": Number(0)}), Object({"id": Number(9699), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(37361), "R": Number(37369)})]), "storage": Number(0)}), Object({"id": Number(945), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(23227), "R": Number(23239)}), Object({"L": Number(23497), "R": Number(23509)})]), "storage": Number(0)}), Object({"id": Number(9406), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(31372), "R": Number(31387)})]), "storage": Number(0)}), Object({"id": Number(9542), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(21467), "R": Number(21474)}), Object({"L": Number(21566), "R": Number(21573)}), Object({"L": Number(21602), "R": Number(21609)}), Object({"L": Number(21627), "R": Number(21634)}), Object({"L": Number(21652), "R": Number(21659)})]), "storage": Number(0)}), Object({"id": Number(9479), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9806), "R": Number(9816)})]), "storage": Number(0)}), Object({"id": Number(1563), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(22335), "R": Number(22344)})]), "storage": Number(0)}), Object({"id": Number(8805), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(80324), "R": Number(80332)})]), "storage": Number(0)}), Object({"id": Number(8795), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(82004), "R": Number(82010)})]), "storage": Number(0)}), Object({"id": Number(9009), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(44701), "R": Number(44720)})]), "storage": Number(0)}), Object({"id": Number(9215), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10218), "R": Number(10227)})]), "storage": Number(0)}), Object({"id": Number(9727), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(41320), "R": Number(41326)}), Object({"L": Number(57477), "R": Number(57483)}), Object({"L": Number(57645), "R": Number(57651)}), Object({"L": Number(57692), "R": Number(57698)}), Object({"L": Number(61883), "R": Number(61889)}), Object({"L": Number(62051), "R": Number(62057)}), Object({"L": Number(62098), "R": Number(62104)})]), "storage": Number(0)}), Object({"id": Number(471), "kind": Number(10), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(73671), "R": Number(73675)})]), "storage": Number(0)}), Object({"id": Number(9297), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(6901), "R": Number(6917)}), Object({"L": Number(37900), "R": Number(37916)})]), "storage": Number(0)}), Object({"id": Number(9509), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10097), "R": Number(10109)})]), "storage": Number(0)}), Object({"id": Number(8825), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(77414), "R": Number(77429)})]), "storage": Number(0)}), Object({"id": Number(9212), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(17726), "R": Number(17727)})]), "storage": Number(0)}), Object({"id": Number(9786), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(40946), "R": Number(40952)})]), "storage": Number(0)}), Object({"id": Number(9500), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9652), "R": Number(9661)})]), "storage": Number(0)}), Object({"id": Number(9126), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9950), "R": Number(9963)})]), "storage": Number(0)}), Object({"id": Number(971), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(16945), "R": Number(16955)}), Object({"L": Number(23856), "R": Number(23866)}), Object({"L": Number(23886), "R": Number(23896)}), Object({"L": Number(23916), "R": Number(23926)})]), "storage": Number(0)}), Object({"id": Number(1619), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(61921), "R": Number(61927)})]), "storage": Number(0)}), Object({"id": Number(9401), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(18757), "R": Number(18759)}), Object({"L": Number(18778), "R": Number(18780)}), Object({"L": Number(18796), "R": Number(18798)}), Object({"L": Number(18814), "R": Number(18816)})]), "storage": Number(0)}), Object({"id": Number(9407), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(73745), "R": Number(73762)})]), "storage": Number(0)}), Object({"id": Number(4888), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(36113), "R": Number(36127)})]), "storage": Number(0)}), Object({"id": Number(9513), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(15306), "R": Number(15308)}), Object({"L": Number(15356), "R": Number(15358)}), Object({"L": Number(15370), "R": Number(15372)}), Object({"L": Number(15395), "R": Number(15397)}), Object({"L": Number(15409), "R": Number(15411)}), Object({"L": Number(15434), "R": Number(15436)}), Object({"L": Number(15448), "R": Number(15450)})]), "storage": Number(0)}), Object({"id": Number(1591), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(17814), "R": Number(17828)})]), "storage": Number(0)}), Object({"id": Number(1599), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(26915), "R": Number(26935)})]), "storage": Number(0)}), Object({"id": Number(9566), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(23844), "R": Number(23847)}), Object({"L": Number(23875), "R": Number(23878)}), Object({"L": Number(23905), "R": Number(23908)}), Object({"L": Number(23935), "R": Number(23938)})]), "storage": Number(0)}), Object({"id": Number(9207), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(79533), "R": Number(79541)})]), "storage": Number(0)}), Object({"id": Number(8850), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(72135), "R": Number(72145)})]), "storage": Number(0)}), Object({"id": Number(9523), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(20599), "R": Number(20600)}), Object({"L": Number(20654), "R": Number(20655)}), Object({"L": Number(20657), "R": Number(20658)}), Object({"L": Number(20666), "R": Number(20667)}), Object({"L": Number(20684), "R": Number(20685)}), Object({"L": Number(20702), "R": Number(20703)})]), "storage": Number(0)}), Object({"id": Number(9724), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10253), "R": Number(10262)})]), "storage": Number(0)}), Object({"id": Number(9105), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27204), "R": Number(27210)})]), "storage": Number(0)}), Object({"id": Number(9043), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(58803), "R": Number(58807)})]), "storage": Number(0)}), Object({"id": Number(8920), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(62186), "R": Number(62190)}), Object({"L": Number(62278), "R": Number(62282)}), Object({"L": Number(62300), "R": Number(62304)}), Object({"L": Number(62355), "R": Number(62359)})]), "storage": Number(0)}), Object({"id": Number(9203), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(17687), "R": Number(17693)})]), "storage": Number(0)}), Object({"id": Number(9749), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(44472), "R": Number(44486)})]), "storage": Number(0)}), Object({"id": Number(8983), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(48282), "R": Number(48294)})]), "storage": Number(0)}), Object({"id": Number(9606), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24968), "R": Number(24969)}), Object({"L": Number(24973), "R": Number(24974)}), Object({"L": Number(24995), "R": Number(24996)}), Object({"L": Number(25009), "R": Number(25010)}), Object({"L": Number(25031), "R": Number(25032)}), Object({"L": Number(25046), "R": Number(25047)}), Object({"L": Number(25067), "R": Number(25068)})]), "storage": Number(0)}), Object({"id": Number(9312), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5349), "R": Number(5357)})]), "storage": Number(0)}), Object({"id": Number(56), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(32930), "R": Number(32938)})]), "storage": Number(0)}), Object({"id": Number(459), "kind": Number(10), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(11390), "R": Number(11394)})]), "storage": Number(0)}), Object({"id": Number(9130), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(59019), "R": Number(59028)}), Object({"L": Number(60914), "R": Number(60923)}), Object({"L": Number(61042), "R": Number(61051)}), Object({"L": Number(61533), "R": Number(61542)}), Object({"L": Number(61656), "R": Number(61665)}), Object({"L": Number(61844), "R": Number(61853)}), Object({"L": Number(62007), "R": Number(62016)}), Object({"L": Number(62222), "R": Number(62231)}), Object({"L": Number(62440), "R": Number(62449)}), Object({"L": Number(62594), "R": Number(62603)})]), "storage": Number(0)}), Object({"id": Number(9029), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(41622), "R": Number(41630)}), Object({"L": Number(41691), "R": Number(41699)})]), "storage": Number(0)}), Object({"id": Number(9109), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(62551), "R": Number(62559)}), Object({"L": Number(62650), "R": Number(62658)})]), "storage": Number(0)}), Object({"id": Number(9629), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(11440), "R": Number(11451)})]), "storage": Number(0)}), Object({"id": Number(9235), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(47703), "R": Number(47712)})]), "storage": Number(0)}), Object({"id": Number(9487), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(28954), "R": Number(28956)}), Object({"L": Number(28987), "R": Number(28989)})]), "storage": Number(0)}), Object({"id": Number(9640), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(16505), "R": Number(16509)}), Object({"L": Number(16864), "R": Number(16868)}), Object({"L": Number(16889), "R": Number(16893)}), Object({"L": Number(16914), "R": Number(16918)})]), "storage": Number(0)}), Object({"id": Number(4561), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(34774), "R": Number(34780)})]), "storage": Number(0)}), Object({"id": Number(9707), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(28256), "R": Number(28257)})]), "storage": Number(0)}), Object({"id": Number(9512), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(20171), "R": Number(20173)}), Object({"L": Number(20228), "R": Number(20230)})]), "storage": Number(0)}), Object({"id": Number(9007), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(45737), "R": Number(45751)})]), "storage": Number(0)}), Object({"id": Number(9663), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(48090), "R": Number(48102)}), Object({"L": Number(69102), "R": Number(69114)}), Object({"L": Number(69435), "R": Number(69447)})]), "storage": Number(0)}), Object({"id": Number(9067), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(46880), "R": Number(46885)})]), "storage": Number(0)}), Object({"id": Number(9264), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(10440), "R": Number(10450)})]), "storage": Number(1)}), Object({"id": Number(9548), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(61442), "R": Number(61449)}), Object({"L": Number(61588), "R": Number(61595)})]), "storage": Number(0)}), Object({"id": Number(9044), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(40546), "R": Number(40554)})]), "storage": Number(0)}), Object({"id": Number(9028), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(41951), "R": Number(41967)})]), "storage": Number(0)}), Object({"id": Number(9493), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9631), "R": Number(9639)})]), "storage": Number(0)}), Object({"id": Number(8885), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(65215), "R": Number(65223)})]), "storage": Number(0)}), Object({"id": Number(1571), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(56343), "R": Number(56356)}), Object({"L": Number(68229), "R": Number(68242)})]), "storage": Number(0)}), Object({"id": Number(9365), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(12839), "R": Number(12847)})]), "storage": Number(0)}), Object({"id": Number(9199), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10286), "R": Number(10296)})]), "storage": Number(0)}), Object({"id": Number(1616), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(27220), "R": Number(27232)})]), "storage": Number(0)}), Object({"id": Number(8989), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(47153), "R": Number(47158)}), Object({"L": Number(55881), "R": Number(55886)}), Object({"L": Number(56009), "R": Number(56014)}), Object({"L": Number(56502), "R": Number(56507)}), Object({"L": Number(56628), "R": Number(56633)}), Object({"L": Number(57285), "R": Number(57290)}), Object({"L": Number(57468), "R": Number(57473)}), Object({"L": Number(57636), "R": Number(57641)}), Object({"L": Number(57683), "R": Number(57688)}), Object({"L": Number(57851), "R": Number(57856)}), Object({"L": Number(57901), "R": Number(57906)}), Object({"L": Number(58064), "R": Number(58069)}), Object({"L": Number(58218), "R": Number(58223)})]), "storage": Number(0)}), Object({"id": Number(9560), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(71242), "R": Number(71255)})]), "storage": Number(0)}), Object({"id": Number(9300), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(16486), "R": Number(16490)}), Object({"L": Number(16856), "R": Number(16860)}), Object({"L": Number(16881), "R": Number(16885)}), Object({"L": Number(16906), "R": Number(16910)})]), "storage": Number(0)}), Object({"id": Number(1004), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(57515), "R": Number(57521)}), Object({"L": Number(67189), "R": Number(67195)}), Object({"L": Number(67232), "R": Number(67238)}), Object({"L": Number(67279), "R": Number(67285)})]), "storage": Number(0)}), Object({"id": Number(9571), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(63615), "R": Number(63625)})]), "storage": Number(0)}), Object({"id": Number(9380), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(62397), "R": Number(62405)}), Object({"L": Number(62494), "R": Number(62502)})]), "storage": Number(0)}), Object({"id": Number(9223), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10111), "R": Number(10124)})]), "storage": Number(0)}), Object({"id": Number(1560), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(27748), "R": Number(27761)})]), "storage": Number(0)}), Object({"id": Number(9063), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(57991), "R": Number(57999)}), Object({"L": Number(58088), "R": Number(58096)})]), "storage": Number(0)}), Object({"id": Number(9057), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(62583), "R": Number(62584)}), Object({"L": Number(62590), "R": Number(62591)}), Object({"L": Number(62605), "R": Number(62606)}), Object({"L": Number(62630), "R": Number(62631)})]), "storage": Number(0)}), Object({"id": Number(980), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(23030), "R": Number(23040)}), Object({"L": Number(23166), "R": Number(23176)})]), "storage": Number(0)}), Object({"id": Number(9378), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10404), "R": Number(10410)}), Object({"L": Number(10451), "R": Number(10457)})]), "storage": Number(0)}), Object({"id": Number(8946), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(73428), "R": Number(73444)})]), "storage": Number(0)}), Object({"id": Number(4484), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(75568), "R": Number(75575)})]), "storage": Number(0)}), Object({"id": Number(985), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(26364), "R": Number(26385)})]), "storage": Number(0)}), Object({"id": Number(8872), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(67939), "R": Number(67945)}), Object({"L": Number(68154), "R": Number(68160)}), Object({"L": Number(68170), "R": Number(68176)}), Object({"L": Number(68221), "R": Number(68227)})]), "storage": Number(0)}), Object({"id": Number(9477), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(59679), "R": Number(59688)})]), "storage": Number(0)}), Object({"id": Number(9750), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(36995), "R": Number(37017)})]), "storage": Number(0)}), Object({"id": Number(9359), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(36594), "R": Number(36611)}), Object({"L": Number(38340), "R": Number(38357)}), Object({"L": Number(38484), "R": Number(38501)})]), "storage": Number(0)}), Object({"id": Number(1634), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(29339), "R": Number(29347)})]), "storage": Number(0)}), Object({"id": Number(9163), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(11160), "R": Number(11175)})]), "storage": Number(0)}), Object({"id": Number(9065), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(40040), "R": Number(40052)}), Object({"L": Number(65224), "R": Number(65236)})]), "storage": Number(0)}), Object({"id": Number(1540), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(57749), "R": Number(57758)}), Object({"L": Number(67374), "R": Number(67383)}), Object({"L": Number(67397), "R": Number(67406)}), Object({"L": Number(67440), "R": Number(67449)}), Object({"L": Number(67517), "R": Number(67526)})]), "storage": Number(0)}), Object({"id": Number(4749), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(74894), "R": Number(74901)})]), "storage": Number(0)}), Object({"id": Number(9405), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9871), "R": Number(9882)})]), "storage": Number(0)}), Object({"id": Number(9402), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(30020), "R": Number(30021)})]), "storage": Number(0)}), Object({"id": Number(9148), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(40968), "R": Number(40977)})]), "storage": Number(0)}), Object({"id": Number(463), "kind": Number(23), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(81317), "R": Number(81328)})]), "storage": Number(0)}), Object({"id": Number(9731), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(40119), "R": Number(40132)}), Object({"L": Number(65323), "R": Number(65336)})]), "storage": Number(0)}), Object({"id": Number(4685), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(75688), "R": Number(75703)})]), "storage": Number(0)}), Object({"id": Number(965), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(26658), "R": Number(26677)})]), "storage": Number(0)}), Object({"id": Number(9703), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(28147), "R": Number(28158)})]), "storage": Number(0)}), Object({"id": Number(8822), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(78014), "R": Number(78020)})]), "storage": Number(0)}), Object({"id": Number(9143), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(41506), "R": Number(41514)}), Object({"L": Number(41574), "R": Number(41582)})]), "storage": Number(0)}), Object({"id": Number(9191), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(81404), "R": Number(81413)})]), "storage": Number(0)}), Object({"id": Number(8794), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(81872), "R": Number(81883)})]), "storage": Number(0)}), Object({"id": Number(9032), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(41265), "R": Number(41271)}), Object({"L": Number(55890), "R": Number(55896)}), Object({"L": Number(56018), "R": Number(56024)}), Object({"L": Number(56516), "R": Number(56522)}), Object({"L": Number(56637), "R": Number(56643)}), Object({"L": Number(57294), "R": Number(57300)}), Object({"L": Number(60953), "R": Number(60959)}), Object({"L": Number(61081), "R": Number(61087)}), Object({"L": Number(61579), "R": Number(61585)}), Object({"L": Number(61700), "R": Number(61706)})]), "storage": Number(0)}), Object({"id": Number(477), "kind": Number(23), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(40643), "R": Number(40649)})]), "storage": Number(0)}), Object({"id": Number(145), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(38564), "R": Number(38575)})]), "storage": Number(0)}), Object({"id": Number(9233), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(15524), "R": Number(15528)}), Object({"L": Number(15882), "R": Number(15886)}), Object({"L": Number(15907), "R": Number(15911)}), Object({"L": Number(15932), "R": Number(15936)})]), "storage": Number(0)}), Object({"id": Number(8836), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(74210), "R": Number(74216)})]), "storage": Number(0)}), Object({"id": Number(8974), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(49597), "R": Number(49609)})]), "storage": Number(0)}), Object({"id": Number(4807), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(64860), "R": Number(64870)})]), "storage": Number(0)}), Object({"id": Number(1633), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(29245), "R": Number(29255)})]), "storage": Number(0)}), Object({"id": Number(1002), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(23807), "R": Number(23815)})]), "storage": Number(0)}), Object({"id": Number(493), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8796), "R": Number(8803)})]), "storage": Number(0)}), Object({"id": Number(9092), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(21435), "R": Number(21436)}), Object({"L": Number(21487), "R": Number(21488)}), Object({"L": Number(21492), "R": Number(21493)}), Object({"L": Number(21499), "R": Number(21500)}), Object({"L": Number(21504), "R": Number(21505)}), Object({"L": Number(21511), "R": Number(21512)}), Object({"L": Number(21516), "R": Number(21517)}), Object({"L": Number(21597), "R": Number(21598)}), Object({"L": Number(21622), "R": Number(21623)}), Object({"L": Number(21647), "R": Number(21648)})]), "storage": Number(0)}), Object({"id": Number(8877), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(69928), "R": Number(69941)})]), "storage": Number(0)}), Object({"id": Number(9260), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26394), "R": Number(26398)})]), "storage": Number(0)}), Object({"id": Number(9624), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26317), "R": Number(26320)})]), "storage": Number(0)}), Object({"id": Number(9088), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(18391), "R": Number(18392)}), Object({"L": Number(18429), "R": Number(18430)}), Object({"L": Number(18460), "R": Number(18461)}), Object({"L": Number(18475), "R": Number(18476)}), Object({"L": Number(18505), "R": Number(18506)}), Object({"L": Number(18521), "R": Number(18522)}), Object({"L": Number(18552), "R": Number(18553)}), Object({"L": Number(18567), "R": Number(18568)}), Object({"L": Number(18597), "R": Number(18598)}), Object({"L": Number(18613), "R": Number(18614)}), Object({"L": Number(18644), "R": Number(18645)}), Object({"L": Number(18659), "R": Number(18660)}), Object({"L": Number(18689), "R": Number(18690)})]), "storage": Number(0)}), Object({"id": Number(9214), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(41442), "R": Number(41454)})]), "storage": Number(0)}), Object({"id": Number(9469), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9489), "R": Number(9504)})]), "storage": Number(0)}), Object({"id": Number(9244), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(19697), "R": Number(19698)}), Object({"L": Number(20089), "R": Number(20090)}), Object({"L": Number(20094), "R": Number(20095)}), Object({"L": Number(20101), "R": Number(20102)}), Object({"L": Number(20106), "R": Number(20107)}), Object({"L": Number(20113), "R": Number(20114)}), Object({"L": Number(20118), "R": Number(20119)})]), "storage": Number(0)}), Object({"id": Number(9245), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(73854), "R": Number(73874)})]), "storage": Number(0)}), Object({"id": Number(9596), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(57565), "R": Number(57569)}), Object({"L": Number(57654), "R": Number(57658)}), Object({"L": Number(57676), "R": Number(57680)}), Object({"L": Number(57728), "R": Number(57732)})]), "storage": Number(0)}), Object({"id": Number(9053), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(81859), "R": Number(81869)})]), "storage": Number(0)}), Object({"id": Number(8978), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(49273), "R": Number(49287)})]), "storage": Number(0)}), Object({"id": Number(9653), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26844), "R": Number(26852)})]), "storage": Number(0)}), Object({"id": Number(409), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5042), "R": Number(5048)}), Object({"L": Number(29324), "R": Number(29330)}), Object({"L": Number(41661), "R": Number(41667)}), Object({"L": Number(56027), "R": Number(56033)}), Object({"L": Number(56702), "R": Number(56708)}), Object({"L": Number(57359), "R": Number(57365)}), Object({"L": Number(61090), "R": Number(61096)}), Object({"L": Number(61765), "R": Number(61771)})]), "storage": Number(0)}), Object({"id": Number(9745), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9461), "R": Number(9475)})]), "storage": Number(0)}), Object({"id": Number(9036), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(40922), "R": Number(40932)})]), "storage": Number(0)}), Object({"id": Number(9692), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(62429), "R": Number(62430)}), Object({"L": Number(62436), "R": Number(62437)}), Object({"L": Number(62451), "R": Number(62452)}), Object({"L": Number(62476), "R": Number(62477)})]), "storage": Number(0)}), Object({"id": Number(1590), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(14575), "R": Number(14585)}), Object({"L": Number(20642), "R": Number(20652)}), Object({"L": Number(20889), "R": Number(20899)}), Object({"L": Number(20928), "R": Number(20938)}), Object({"L": Number(20967), "R": Number(20977)})]), "storage": Number(0)}), Object({"id": Number(9027), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(42157), "R": Number(42175)})]), "storage": Number(0)}), Object({"id": Number(8990), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(64947), "R": Number(64957)})]), "storage": Number(0)}), Object({"id": Number(9669), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27899), "R": Number(27904)})]), "storage": Number(0)}), Object({"id": Number(9459), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9965), "R": Number(9977)})]), "storage": Number(0)}), Object({"id": Number(9294), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(69999), "R": Number(70011)})]), "storage": Number(0)}), Object({"id": Number(479), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(39661), "R": Number(39672)}), Object({"L": Number(46825), "R": Number(46836)}), Object({"L": Number(58715), "R": Number(58726)})]), "storage": Number(0)}), Object({"id": Number(9538), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(11592), "R": Number(11606)})]), "storage": Number(0)}), Object({"id": Number(973), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(30101), "R": Number(30103)})]), "storage": Number(0)}), Object({"id": Number(8902), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(63952), "R": Number(63960)})]), "storage": Number(0)}), Object({"id": Number(485), "kind": Number(10), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7159), "R": Number(7163)})]), "storage": Number(0)}), Object({"id": Number(8874), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(66723), "R": Number(66733)}), Object({"L": Number(66808), "R": Number(66818)}), Object({"L": Number(66915), "R": Number(66925)}), Object({"L": Number(67041), "R": Number(67051)}), Object({"L": Number(67209), "R": Number(67219)}), Object({"L": Number(67475), "R": Number(67485)}), Object({"L": Number(68186), "R": Number(68196)}), Object({"L": Number(68338), "R": Number(68348)}), Object({"L": Number(68603), "R": Number(68613)}), Object({"L": Number(68785), "R": Number(68795)}), Object({"L": Number(69212), "R": Number(69222)}), Object({"L": Number(69749), "R": Number(69759)})]), "storage": Number(0)}), Object({"id": Number(9554), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26236), "R": Number(26237)})]), "storage": Number(0)}), Object({"id": Number(9755), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(67968), "R": Number(67975)}), Object({"L": Number(68252), "R": Number(68259)})]), "storage": Number(0)}), Object({"id": Number(9310), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(18740), "R": Number(18742)}), Object({"L": Number(18769), "R": Number(18771)}), Object({"L": Number(18787), "R": Number(18789)}), Object({"L": Number(18805), "R": Number(18807)})]), "storage": Number(0)}), Object({"id": Number(8968), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(50389), "R": Number(50398)})]), "storage": Number(0)}), Object({"id": Number(4669), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(76189), "R": Number(76195)})]), "storage": Number(0)}), Object({"id": Number(9263), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(37512), "R": Number(37521)}), Object({"L": Number(37551), "R": Number(37560)})]), "storage": Number(0)}), Object({"id": Number(9152), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(71493), "R": Number(71514)})]), "storage": Number(0)}), Object({"id": Number(9417), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(77518), "R": Number(77532)})]), "storage": Number(0)}), Object({"id": Number(8905), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(63715), "R": Number(63722)})]), "storage": Number(0)}), Object({"id": Number(8998), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(41854), "R": Number(41873)})]), "storage": Number(0)}), Object({"id": Number(9344), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(47853), "R": Number(47868)})]), "storage": Number(0)}), Object({"id": Number(1552), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(17931), "R": Number(17942)})]), "storage": Number(0)}), Object({"id": Number(4594), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(75839), "R": Number(75849)})]), "storage": Number(0)}), Object({"id": Number(9196), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10335), "R": Number(10345)})]), "storage": Number(0)}), Object({"id": Number(9541), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(21116), "R": Number(21123)}), Object({"L": Number(21226), "R": Number(21233)}), Object({"L": Number(21256), "R": Number(21263)}), Object({"L": Number(21275), "R": Number(21282)}), Object({"L": Number(21294), "R": Number(21301)})]), "storage": Number(0)}), Object({"id": Number(1533), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(62375), "R": Number(62388)})]), "storage": Number(0)}), Object({"id": Number(1546), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(29524), "R": Number(29534)})]), "storage": Number(0)}), Object({"id": Number(8944), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(56582), "R": Number(56583)}), Object({"L": Number(56589), "R": Number(56590)}), Object({"L": Number(56604), "R": Number(56605)}), Object({"L": Number(56634), "R": Number(56635)})]), "storage": Number(0)}), Object({"id": Number(9228), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10173), "R": Number(10182)})]), "storage": Number(0)}), Object({"id": Number(1572), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(22129), "R": Number(22135)})]), "storage": Number(0)}), Object({"id": Number(540), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(22613), "R": Number(22617)}), Object({"L": Number(22944), "R": Number(22948)}), Object({"L": Number(23055), "R": Number(23059)})]), "storage": Number(0)}), Object({"id": Number(9262), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(50957), "R": Number(50973)}), Object({"L": Number(56813), "R": Number(56829)}), Object({"L": Number(56861), "R": Number(56877)}), Object({"L": Number(68992), "R": Number(69008)}), Object({"L": Number(69044), "R": Number(69060)}), Object({"L": Number(69300), "R": Number(69316)}), Object({"L": Number(69352), "R": Number(69368)})]), "storage": Number(0)}), Object({"id": Number(4549), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(75352), "R": Number(75358)})]), "storage": Number(0)}), Object({"id": Number(9434), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(13065), "R": Number(13076)})]), "storage": Number(0)}), Object({"id": Number(9106), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(59999), "R": Number(60009)})]), "storage": Number(0)}), Object({"id": Number(9066), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(39764), "R": Number(39773)}), Object({"L": Number(65120), "R": Number(65129)})]), "storage": Number(0)}), Object({"id": Number(9436), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(11108), "R": Number(11120)})]), "storage": Number(0)}), Object({"id": Number(9197), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(23979), "R": Number(23985)})]), "storage": Number(0)}), Object({"id": Number(9631), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26469), "R": Number(26474)})]), "storage": Number(0)}), Object({"id": Number(4703), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(76966), "R": Number(76972)})]), "storage": Number(0)}), Object({"id": Number(9660), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(39561), "R": Number(39570)})]), "storage": Number(0)}), Object({"id": Number(9613), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(28280), "R": Number(28281)})]), "storage": Number(0)}), Object({"id": Number(9609), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(56767), "R": Number(56768)}), Object({"L": Number(56774), "R": Number(56775)}), Object({"L": Number(56789), "R": Number(56790)}), Object({"L": Number(56856), "R": Number(56857)}), Object({"L": Number(57291), "R": Number(57292)})]), "storage": Number(0)}), Object({"id": Number(8861), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(70623), "R": Number(70650)})]), "storage": Number(0)}), Object({"id": Number(9642), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26641), "R": Number(26644)})]), "storage": Number(0)}), Object({"id": Number(9112), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27247), "R": Number(27253)})]), "storage": Number(0)}), Object({"id": Number(943), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(18712), "R": Number(18725)})]), "storage": Number(0)}), Object({"id": Number(9638), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26624), "R": Number(26627)})]), "storage": Number(0)}), Object({"id": Number(9347), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(2890), "R": Number(2895)})]), "storage": Number(0)}), Object({"id": Number(9521), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(51628), "R": Number(51646)})]), "storage": Number(0)}), Object({"id": Number(1557), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(26267), "R": Number(26290)})]), "storage": Number(0)}), Object({"id": Number(9625), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(18414), "R": Number(18418)}), Object({"L": Number(18482), "R": Number(18486)}), Object({"L": Number(18495), "R": Number(18499)}), Object({"L": Number(18574), "R": Number(18578)}), Object({"L": Number(18587), "R": Number(18591)}), Object({"L": Number(18666), "R": Number(18670)}), Object({"L": Number(18679), "R": Number(18683)})]), "storage": Number(0)}), Object({"id": Number(9505), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(58958), "R": Number(58966)})]), "storage": Number(0)}), Object({"id": Number(9077), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(38640), "R": Number(38653)})]), "storage": Number(0)}), Object({"id": Number(8973), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(80085), "R": Number(80091)})]), "storage": Number(0)}), Object({"id": Number(9569), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(35824), "R": Number(35836)}), Object({"L": Number(37959), "R": Number(37971)})]), "storage": Number(0)}), Object({"id": Number(8972), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(49798), "R": Number(49812)})]), "storage": Number(0)}), Object({"id": Number(9108), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(16981), "R": Number(16984)}), Object({"L": Number(16990), "R": Number(16993)}), Object({"L": Number(17007), "R": Number(17010)}), Object({"L": Number(17024), "R": Number(17027)})]), "storage": Number(0)}), Object({"id": Number(9673), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27417), "R": Number(27421)})]), "storage": Number(0)}), Object({"id": Number(9100), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(17744), "R": Number(17745)})]), "storage": Number(0)}), Object({"id": Number(1566), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(20148), "R": Number(20156)})]), "storage": Number(0)}), Object({"id": Number(1565), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(12890), "R": Number(12899)})]), "storage": Number(0)}), Object({"id": Number(8894), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(64762), "R": Number(64768)})]), "storage": Number(0)}), Object({"id": Number(9141), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(41833), "R": Number(41840)})]), "storage": Number(0)}), Object({"id": Number(9288), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(61803), "R": Number(61809)}), Object({"L": Number(61892), "R": Number(61898)})]), "storage": Number(0)}), Object({"id": Number(9486), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(40470), "R": Number(40478)})]), "storage": Number(0)}), Object({"id": Number(9200), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(77957), "R": Number(77963)})]), "storage": Number(0)}), Object({"id": Number(9475), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(71549), "R": Number(71563)})]), "storage": Number(0)}), Object({"id": Number(1637), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(29442), "R": Number(29455)})]), "storage": Number(0)}), Object({"id": Number(1631), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(29067), "R": Number(29075)})]), "storage": Number(0)}), Object({"id": Number(9794), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(36429), "R": Number(36435)}), Object({"L": Number(38129), "R": Number(38135)})]), "storage": Number(0)}), Object({"id": Number(1607), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(26421), "R": Number(26438)})]), "storage": Number(0)}), Object({"id": Number(9140), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(74096), "R": Number(74106)})]), "storage": Number(0)}), Object({"id": Number(9134), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(52732), "R": Number(52746)})]), "storage": Number(0)}), Object({"id": Number(9403), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(81803), "R": Number(81810)})]), "storage": Number(0)}), Object({"id": Number(9113), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(15323), "R": Number(15325)}), Object({"L": Number(15362), "R": Number(15364)}), Object({"L": Number(15376), "R": Number(15378)}), Object({"L": Number(15401), "R": Number(15403)}), Object({"L": Number(15415), "R": Number(15417)}), Object({"L": Number(15440), "R": Number(15442)}), Object({"L": Number(15454), "R": Number(15456)})]), "storage": Number(0)}), Object({"id": Number(9166), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(21445), "R": Number(21448)}), Object({"L": Number(21588), "R": Number(21591)}), Object({"L": Number(21613), "R": Number(21616)}), Object({"L": Number(21638), "R": Number(21641)}), Object({"L": Number(21686), "R": Number(21689)})]), "storage": Number(0)}), Object({"id": Number(470), "kind": Number(10), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(74421), "R": Number(74425)})]), "storage": Number(0)}), Object({"id": Number(9056), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(39506), "R": Number(39518)})]), "storage": Number(0)}), Object({"id": Number(4478), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(66694), "R": Number(66699)}), Object({"L": Number(66775), "R": Number(66780)}), Object({"L": Number(66822), "R": Number(66827)}), Object({"L": Number(66893), "R": Number(66898)}), Object({"L": Number(66927), "R": Number(66932)}), Object({"L": Number(67001), "R": Number(67006)}), Object({"L": Number(67067), "R": Number(67072)}), Object({"L": Number(67180), "R": Number(67185)}), Object({"L": Number(67223), "R": Number(67228)}), Object({"L": Number(67270), "R": Number(67275)}), Object({"L": Number(67365), "R": Number(67370)}), Object({"L": Number(67388), "R": Number(67393)}), Object({"L": Number(67431), "R": Number(67436)}), Object({"L": Number(67508), "R": Number(67513)}), Object({"L": Number(68215), "R": Number(68220)}), Object({"L": Number(68307), "R": Number(68312)}), Object({"L": Number(68364), "R": Number(68369)}), Object({"L": Number(68442), "R": Number(68447)}), Object({"L": Number(68471), "R": Number(68476)}), Object({"L": Number(68557), "R": Number(68562)}), Object({"L": Number(68629), "R": Number(68634)}), Object({"L": Number(68737), "R": Number(68742)}), Object({"L": Number(68811), "R": Number(68816)}), Object({"L": Number(68945), "R": Number(68950)}), Object({"L": Number(68983), "R": Number(68988)}), Object({"L": Number(69035), "R": Number(69040)}), Object({"L": Number(69093), "R": Number(69098)}), Object({"L": Number(69165), "R": Number(69170)}), Object({"L": Number(69226), "R": Number(69231)}), Object({"L": Number(69291), "R": Number(69296)}), Object({"L": Number(69343), "R": Number(69348)}), Object({"L": Number(69426), "R": Number(69431)}), Object({"L": Number(69523), "R": Number(69528)}), Object({"L": Number(69664), "R": Number(69669)}), Object({"L": Number(69711), "R": Number(69716)}), Object({"L": Number(69763), "R": Number(69768)}), Object({"L": Number(69841), "R": Number(69846)})]), "storage": Number(0)}), Object({"id": Number(9684), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27776), "R": Number(27781)})]), "storage": Number(0)}), Object({"id": Number(9142), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(11410), "R": Number(11422)})]), "storage": Number(0)}), Object({"id": Number(8865), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(77993), "R": Number(78004)})]), "storage": Number(0)}), Object({"id": Number(9456), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(76268), "R": Number(76281)})]), "storage": Number(0)}), Object({"id": Number(9330), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(30468), "R": Number(30469)})]), "storage": Number(0)}), Object({"id": Number(489), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(41133), "R": Number(41145)}), Object({"L": Number(41457), "R": Number(41469)})]), "storage": Number(0)}), Object({"id": Number(9562), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(23299), "R": Number(23301)})]), "storage": Number(0)}), Object({"id": Number(9666), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(36298), "R": Number(36309)}), Object({"L": Number(38011), "R": Number(38022)})]), "storage": Number(0)}), Object({"id": Number(460), "kind": Number(23), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(34683), "R": Number(34689)})]), "storage": Number(0)}), Object({"id": Number(9549), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(22256), "R": Number(22260)}), Object({"L": Number(22283), "R": Number(22287)})]), "storage": Number(0)}), Object({"id": Number(71), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5153), "R": Number(5162)}), Object({"L": Number(48879), "R": Number(48888)}), Object({"L": Number(48963), "R": Number(48972)}), Object({"L": Number(49095), "R": Number(49104)}), Object({"L": Number(51976), "R": Number(51985)}), Object({"L": Number(52103), "R": Number(52112)}), Object({"L": Number(52249), "R": Number(52258)}), Object({"L": Number(54170), "R": Number(54179)}), Object({"L": Number(54298), "R": Number(54307)}), Object({"L": Number(54445), "R": Number(54454)})]), "storage": Number(0)}), Object({"id": Number(9445), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9262), "R": Number(9275)})]), "storage": Number(0)}), Object({"id": Number(4560), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(34791), "R": Number(34795)})]), "storage": Number(0)}), Object({"id": Number(518), "kind": Number(23), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(12179), "R": Number(12187)}), Object({"L": Number(24492), "R": Number(24500)}), Object({"L": Number(24564), "R": Number(24572)}), Object({"L": Number(33416), "R": Number(33424)})]), "storage": Number(0)}), Object({"id": Number(9478), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(15537), "R": Number(15538)}), Object({"L": Number(15867), "R": Number(15868)}), Object({"L": Number(15892), "R": Number(15893)}), Object({"L": Number(15917), "R": Number(15918)})]), "storage": Number(0)}), Object({"id": Number(9409), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(74681), "R": Number(74691)})]), "storage": Number(0)}), Object({"id": Number(8939), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(58023), "R": Number(58024)}), Object({"L": Number(58030), "R": Number(58031)}), Object({"L": Number(58045), "R": Number(58046)}), Object({"L": Number(58070), "R": Number(58071)})]), "storage": Number(0)}), Object({"id": Number(9208), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7774), "R": Number(7789)})]), "storage": Number(0)}), Object({"id": Number(8927), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(60130), "R": Number(60141)})]), "storage": Number(0)}), Object({"id": Number(9599), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(70847), "R": Number(70862)})]), "storage": Number(0)}), Object({"id": Number(8889), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(66511), "R": Number(66526)})]), "storage": Number(0)}), Object({"id": Number(8812), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(78873), "R": Number(78881)})]), "storage": Number(0)}), Object({"id": Number(1618), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(27288), "R": Number(27300)})]), "storage": Number(0)}), Object({"id": Number(9171), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(11134), "R": Number(11146)})]), "storage": Number(0)}), Object({"id": Number(9581), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(59586), "R": Number(59600)})]), "storage": Number(0)}), Object({"id": Number(9269), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9884), "R": Number(9896)})]), "storage": Number(0)}), Object({"id": Number(9178), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24217), "R": Number(24223)}), Object({"L": Number(24273), "R": Number(24279)}), Object({"L": Number(24292), "R": Number(24298)})]), "storage": Number(0)}), Object({"id": Number(1643), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(28313), "R": Number(28322)})]), "storage": Number(0)}), Object({"id": Number(2396), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(6669), "R": Number(6687)})]), "storage": Number(0)}), Object({"id": Number(9156), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27357), "R": Number(27361)})]), "storage": Number(0)}), Object({"id": Number(9086), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(70496), "R": Number(70514)})]), "storage": Number(0)}), Object({"id": Number(9085), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9572), "R": Number(9578)})]), "storage": Number(0)}), Object({"id": Number(8832), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(75876), "R": Number(75887)})]), "storage": Number(0)}), Object({"id": Number(9005), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(46251), "R": Number(46269)})]), "storage": Number(0)}), Object({"id": Number(9185), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10783), "R": Number(10792)})]), "storage": Number(0)}), Object({"id": Number(9360), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(79018), "R": Number(79029)})]), "storage": Number(0)}), Object({"id": Number(1635), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(27704), "R": Number(27718)})]), "storage": Number(0)}), Object({"id": Number(9151), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(11301), "R": Number(11309)})]), "storage": Number(0)}), Object({"id": Number(1623), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(19663), "R": Number(19682)})]), "storage": Number(0)}), Object({"id": Number(8802), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(81172), "R": Number(81182)})]), "storage": Number(0)}), Object({"id": Number(47), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8645), "R": Number(8650)}), Object({"L": Number(8660), "R": Number(8665)}), Object({"L": Number(8685), "R": Number(8690)}), Object({"L": Number(8710), "R": Number(8715)}), Object({"L": Number(8735), "R": Number(8740)}), Object({"L": Number(14569), "R": Number(14574)}), Object({"L": Number(17237), "R": Number(17242)}), Object({"L": Number(19139), "R": Number(19144)}), Object({"L": Number(19592), "R": Number(19597)}), Object({"L": Number(19657), "R": Number(19662)}), Object({"L": Number(20142), "R": Number(20147)}), Object({"L": Number(20273), "R": Number(20278)}), Object({"L": Number(21065), "R": Number(21070)}), Object({"L": Number(21398), "R": Number(21403)}), Object({"L": Number(24004), "R": Number(24009)}), Object({"L": Number(24066), "R": Number(24071)}), Object({"L": Number(24143), "R": Number(24148)})]), "storage": Number(0)}), Object({"id": Number(8892), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(82255), "R": Number(82274)})]), "storage": Number(0)}), Object({"id": Number(9797), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24182), "R": Number(24184)}), Object({"L": Number(24247), "R": Number(24249)})]), "storage": Number(0)}), Object({"id": Number(9306), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(34388), "R": Number(34402)})]), "storage": Number(0)}), Object({"id": Number(1555), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(25886), "R": Number(25896)})]), "storage": Number(0)}), Object({"id": Number(8906), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(63659), "R": Number(63671)})]), "storage": Number(0)}), Object({"id": Number(9559), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(23269), "R": Number(23276)})]), "storage": Number(0)}), Object({"id": Number(9457), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(67951), "R": Number(67957)}), Object({"L": Number(68244), "R": Number(68250)})]), "storage": Number(0)}), Object({"id": Number(9652), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26786), "R": Number(26789)})]), "storage": Number(0)}), Object({"id": Number(9000), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(41843), "R": Number(41851)})]), "storage": Number(0)}), Object({"id": Number(9098), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(11027), "R": Number(11038)})]), "storage": Number(0)}), Object({"id": Number(9547), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(22171), "R": Number(22175)}), Object({"L": Number(22182), "R": Number(22186)}), Object({"L": Number(22199), "R": Number(22203)}), Object({"L": Number(22219), "R": Number(22223)})]), "storage": Number(0)}), Object({"id": Number(9333), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(52879), "R": Number(52890)})]), "storage": Number(0)}), Object({"id": Number(9217), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10195), "R": Number(10205)})]), "storage": Number(0)}), Object({"id": Number(9144), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(14055), "R": Number(14059)}), Object({"L": Number(14064), "R": Number(14068)}), Object({"L": Number(14100), "R": Number(14104)}), Object({"L": Number(14136), "R": Number(14140)})]), "storage": Number(0)}), Object({"id": Number(1601), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(20734), "R": Number(20747)})]), "storage": Number(0)}), Object({"id": Number(8943), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(57427), "R": Number(57428)}), Object({"L": Number(57434), "R": Number(57435)}), Object({"L": Number(57449), "R": Number(57450)}), Object({"L": Number(57474), "R": Number(57475)})]), "storage": Number(0)}), Object({"id": Number(8867), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(70099), "R": Number(70113)})]), "storage": Number(0)}), Object({"id": Number(336), "kind": Number(23), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(34756), "R": Number(34762)})]), "storage": Number(0)}), Object({"id": Number(4523), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(76125), "R": Number(76134)})]), "storage": Number(0)}), Object({"id": Number(10), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(32599), "R": Number(32605)})]), "storage": Number(0)}), Object({"id": Number(9465), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(79717), "R": Number(79730)})]), "storage": Number(0)}), Object({"id": Number(8922), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(61645), "R": Number(61646)}), Object({"L": Number(61652), "R": Number(61653)}), Object({"L": Number(61667), "R": Number(61668)}), Object({"L": Number(61697), "R": Number(61698)})]), "storage": Number(0)}), Object({"id": Number(1545), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(25391), "R": Number(25408)}), Object({"L": Number(25677), "R": Number(25694)})]), "storage": Number(0)}), Object({"id": Number(9675), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(54792), "R": Number(54808)})]), "storage": Number(0)}), Object({"id": Number(429), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(11483), "R": Number(11497)}), Object({"L": Number(41274), "R": Number(41288)})]), "storage": Number(0)}), Object({"id": Number(9524), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(42013), "R": Number(42030)})]), "storage": Number(0)}), Object({"id": Number(4499), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(75524), "R": Number(75528)})]), "storage": Number(0)}), Object({"id": Number(9535), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(21095), "R": Number(21096)}), Object({"L": Number(21136), "R": Number(21137)}), Object({"L": Number(21141), "R": Number(21142)}), Object({"L": Number(21148), "R": Number(21149)}), Object({"L": Number(21153), "R": Number(21154)}), Object({"L": Number(21160), "R": Number(21161)}), Object({"L": Number(21165), "R": Number(21166)}), Object({"L": Number(21248), "R": Number(21249)}), Object({"L": Number(21267), "R": Number(21268)}), Object({"L": Number(21286), "R": Number(21287)})]), "storage": Number(0)}), Object({"id": Number(499), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(73943), "R": Number(73952)})]), "storage": Number(0)}), Object({"id": Number(9008), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(45333), "R": Number(45355)})]), "storage": Number(0)}), Object({"id": Number(8956), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(54308), "R": Number(54319)})]), "storage": Number(0)}), Object({"id": Number(9730), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(40230), "R": Number(40243)}), Object({"L": Number(64532), "R": Number(64545)}), Object({"L": Number(64566), "R": Number(64579)})]), "storage": Number(0)}), Object({"id": Number(9281), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10024), "R": Number(10036)})]), "storage": Number(0)}), Object({"id": Number(9096), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(17776), "R": Number(17777)})]), "storage": Number(0)}), Object({"id": Number(1543), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(68686), "R": Number(68706)})]), "storage": Number(0)}), Object({"id": Number(9622), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(80155), "R": Number(80160)})]), "storage": Number(0)}), Object({"id": Number(515), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5075), "R": Number(5083)}), Object({"L": Number(25979), "R": Number(25987)}), Object({"L": Number(27255), "R": Number(27263)}), Object({"L": Number(27318), "R": Number(27326)}), Object({"L": Number(27381), "R": Number(27389)}), Object({"L": Number(27433), "R": Number(27441)}), Object({"L": Number(27489), "R": Number(27497)}), Object({"L": Number(29300), "R": Number(29308)}), Object({"L": Number(30394), "R": Number(30402)}), Object({"L": Number(32374), "R": Number(32382)}), Object({"L": Number(33892), "R": Number(33900)}), Object({"L": Number(33943), "R": Number(33951)}), Object({"L": Number(40913), "R": Number(40921)}), Object({"L": Number(41256), "R": Number(41264)}), Object({"L": Number(56370), "R": Number(56378)}), Object({"L": Number(56542), "R": Number(56550)}), Object({"L": Number(56717), "R": Number(56725)}), Object({"L": Number(59298), "R": Number(59306)}), Object({"L": Number(59349), "R": Number(59357)}), Object({"L": Number(59508), "R": Number(59516)}), Object({"L": Number(59577), "R": Number(59585)}), Object({"L": Number(59670), "R": Number(59678)}), Object({"L": Number(60344), "R": Number(60352)}), Object({"L": Number(60760), "R": Number(60768)}), Object({"L": Number(61433), "R": Number(61441)}), Object({"L": Number(61605), "R": Number(61613)}), Object({"L": Number(65505), "R": Number(65513)}), Object({"L": Number(66714), "R": Number(66722)}), Object({"L": Number(66736), "R": Number(66744)}), Object({"L": Number(66859), "R": Number(66867)}), Object({"L": Number(67959), "R": Number(67967)}), Object({"L": Number(72099), "R": Number(72107)}), Object({"L": Number(76583), "R": Number(76591)}), Object({"L": Number(76608), "R": Number(76616)}), Object({"L": Number(77338), "R": Number(77346)})]), "storage": Number(0)}), Object({"id": Number(1579), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(24072), "R": Number(24097)})]), "storage": Number(0)}), Object({"id": Number(9430), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(36198), "R": Number(36218)})]), "storage": Number(0)}), Object({"id": Number(428), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(81913), "R": Number(81921)})]), "storage": Number(0)}), Object({"id": Number(9752), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(31448), "R": Number(31457)})]), "storage": Number(0)}), Object({"id": Number(8942), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(61833), "R": Number(61834)}), Object({"L": Number(61840), "R": Number(61841)}), Object({"L": Number(61855), "R": Number(61856)}), Object({"L": Number(61880), "R": Number(61881)})]), "storage": Number(0)}), Object({"id": Number(952), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(21071), "R": Number(21086)})]), "storage": Number(0)}), Object({"id": Number(9698), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(32825), "R": Number(32831)})]), "storage": Number(0)}), Object({"id": Number(9383), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(35444), "R": Number(35455)})]), "storage": Number(0)}), Object({"id": Number(9665), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(82277), "R": Number(82293)})]), "storage": Number(0)}), Object({"id": Number(9158), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(45963), "R": Number(45985)})]), "storage": Number(0)}), Object({"id": Number(9315), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(22520), "R": Number(22523)}), Object({"L": Number(22629), "R": Number(22632)}), Object({"L": Number(22664), "R": Number(22667)})]), "storage": Number(0)}), Object({"id": Number(9756), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(31804), "R": Number(31812)})]), "storage": Number(0)}), Object({"id": Number(1625), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(27950), "R": Number(27961)})]), "storage": Number(0)}), Object({"id": Number(9682), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(59358), "R": Number(59367)})]), "storage": Number(0)}), Object({"id": Number(9047), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(40494), "R": Number(40503)})]), "storage": Number(0)}), Object({"id": Number(9225), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(70075), "R": Number(70090)})]), "storage": Number(0)}), Object({"id": Number(1578), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(27327), "R": Number(27342)})]), "storage": Number(0)}), Object({"id": Number(1559), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(25085), "R": Number(25099)})]), "storage": Number(0)}), Object({"id": Number(9055), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(63517), "R": Number(63525)})]), "storage": Number(0)}), Object({"id": Number(9568), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(66981), "R": Number(66987)}), Object({"L": Number(67021), "R": Number(67027)}), Object({"L": Number(67087), "R": Number(67093)})]), "storage": Number(0)}), Object({"id": Number(9461), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(13323), "R": Number(13334)})]), "storage": Number(0)}), Object({"id": Number(9471), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(64682), "R": Number(64699)})]), "storage": Number(0)}), Object({"id": Number(683), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(28881), "R": Number(28888)})]), "storage": Number(0)}), Object({"id": Number(528), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5050), "R": Number(5055)}), Object({"L": Number(41545), "R": Number(41550)}), Object({"L": Number(55899), "R": Number(55904)}), Object({"L": Number(56389), "R": Number(56394)}), Object({"L": Number(56668), "R": Number(56673)}), Object({"L": Number(57325), "R": Number(57330)}), Object({"L": Number(60962), "R": Number(60967)}), Object({"L": Number(61452), "R": Number(61457)}), Object({"L": Number(61731), "R": Number(61736)}), Object({"L": Number(67978), "R": Number(67983)})]), "storage": Number(0)}), Object({"id": Number(9326), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(1922), "R": Number(1945)})]), "storage": Number(0)}), Object({"id": Number(9738), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7741), "R": Number(7762)})]), "storage": Number(0)}), Object({"id": Number(9591), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27542), "R": Number(27543)})]), "storage": Number(0)}), Object({"id": Number(9370), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7554), "R": Number(7574)})]), "storage": Number(0)}), Object({"id": Number(9139), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(20203), "R": Number(20204)}), Object({"L": Number(20232), "R": Number(20233)}), Object({"L": Number(20258), "R": Number(20259)})]), "storage": Number(0)}), Object({"id": Number(9790), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(80289), "R": Number(80299)})]), "storage": Number(0)}), Object({"id": Number(9393), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(21108), "R": Number(21114)}), Object({"L": Number(21127), "R": Number(21133)}), Object({"L": Number(21172), "R": Number(21178)}), Object({"L": Number(21187), "R": Number(21193)}), Object({"L": Number(21203), "R": Number(21209)}), Object({"L": Number(21238), "R": Number(21244)}), Object({"L": Number(21317), "R": Number(21323)})]), "storage": Number(0)}), Object({"id": Number(506), "kind": Number(10), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5036), "R": Number(5040)})]), "storage": Number(0)}), Object({"id": Number(9704), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(30299), "R": Number(30300)})]), "storage": Number(0)}), Object({"id": Number(4521), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(63902), "R": Number(63917)})]), "storage": Number(0)}), Object({"id": Number(9293), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(30314), "R": Number(30317)})]), "storage": Number(0)}), Object({"id": Number(9446), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(41375), "R": Number(41386)})]), "storage": Number(0)}), Object({"id": Number(9187), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(64814), "R": Number(64825)})]), "storage": Number(0)}), Object({"id": Number(9336), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(17257), "R": Number(17258)}), Object({"L": Number(17557), "R": Number(17558)}), Object({"L": Number(17577), "R": Number(17578)}), Object({"L": Number(17597), "R": Number(17598)})]), "storage": Number(0)}), Object({"id": Number(9628), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(29542), "R": Number(29548)})]), "storage": Number(0)}), Object({"id": Number(9546), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8450), "R": Number(8460)})]), "storage": Number(0)}), Object({"id": Number(9257), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24214), "R": Number(24215)}), Object({"L": Number(24251), "R": Number(24252)}), Object({"L": Number(24270), "R": Number(24271)})]), "storage": Number(0)}), Object({"id": Number(8899), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(64525), "R": Number(64531)})]), "storage": Number(0)}), Object({"id": Number(9147), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(11223), "R": Number(11236)})]), "storage": Number(1)}), Object({"id": Number(8857), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(71313), "R": Number(71327)})]), "storage": Number(0)}), Object({"id": Number(9157), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(11189), "R": Number(11202)})]), "storage": Number(0)}), Object({"id": Number(1569), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(12994), "R": Number(13003)})]), "storage": Number(0)}), Object({"id": Number(9121), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(13779), "R": Number(13790)})]), "storage": Number(0)}), Object({"id": Number(9771), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(32439), "R": Number(32456)})]), "storage": Number(0)}), Object({"id": Number(4483), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(38821), "R": Number(38834)})]), "storage": Number(0)}), Object({"id": Number(9213), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(16518), "R": Number(16519)}), Object({"L": Number(16849), "R": Number(16850)}), Object({"L": Number(16874), "R": Number(16875)}), Object({"L": Number(16899), "R": Number(16900)})]), "storage": Number(0)}), Object({"id": Number(9646), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24944), "R": Number(24946)}), Object({"L": Number(24977), "R": Number(24979)})]), "storage": Number(0)}), Object({"id": Number(9286), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7443), "R": Number(7457)})]), "storage": Number(0)}), Object({"id": Number(498), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(4961), "R": Number(4965)})]), "storage": Number(0)}), Object({"id": Number(9679), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(80735), "R": Number(80740)})]), "storage": Number(0)}), Object({"id": Number(9252), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(70179), "R": Number(70208)})]), "storage": Number(0)}), Object({"id": Number(511), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(28175), "R": Number(28185)})]), "storage": Number(0)}), Object({"id": Number(9654), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24112), "R": Number(24114)})]), "storage": Number(0)}), Object({"id": Number(9384), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10308), "R": Number(10318)})]), "storage": Number(0)}), Object({"id": Number(9040), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(80187), "R": Number(80193)})]), "storage": Number(0)}), Object({"id": Number(9440), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(29147), "R": Number(29150)}), Object({"L": Number(29186), "R": Number(29189)})]), "storage": Number(0)}), Object({"id": Number(3094), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(22645), "R": Number(22653)}), Object({"L": Number(23072), "R": Number(23080)})]), "storage": Number(0)}), Object({"id": Number(9545), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(72108), "R": Number(72116)})]), "storage": Number(0)}), Object({"id": Number(9081), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(38594), "R": Number(38602)})]), "storage": Number(0)}), Object({"id": Number(517), "kind": Number(10), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(40462), "R": Number(40466)})]), "storage": Number(0)}), Object({"id": Number(8958), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(53178), "R": Number(53190)})]), "storage": Number(0)}), Object({"id": Number(9605), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(29290), "R": Number(29298)})]), "storage": Number(0)}), Object({"id": Number(9686), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(31303), "R": Number(31318)})]), "storage": Number(0)}), Object({"id": Number(9325), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(41289), "R": Number(41294)})]), "storage": Number(0)}), Object({"id": Number(8901), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(64087), "R": Number(64101)})]), "storage": Number(0)}), Object({"id": Number(8921), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(61996), "R": Number(61997)}), Object({"L": Number(62003), "R": Number(62004)}), Object({"L": Number(62018), "R": Number(62019)}), Object({"L": Number(62048), "R": Number(62049)}), Object({"L": Number(62095), "R": Number(62096)})]), "storage": Number(0)}), Object({"id": Number(8829), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(76471), "R": Number(76476)})]), "storage": Number(0)}), Object({"id": Number(9674), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(33952), "R": Number(33962)})]), "storage": Number(0)}), Object({"id": Number(4881), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5431), "R": Number(5436)})]), "storage": Number(0)}), Object({"id": Number(8929), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(60067), "R": Number(60082)})]), "storage": Number(0)}), Object({"id": Number(9584), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24356), "R": Number(24358)}), Object({"L": Number(24425), "R": Number(24427)})]), "storage": Number(0)}), Object({"id": Number(8949), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(55840), "R": Number(55841)}), Object({"L": Number(55847), "R": Number(55848)}), Object({"L": Number(55862), "R": Number(55863)}), Object({"L": Number(55887), "R": Number(55888)})]), "storage": Number(0)}), Object({"id": Number(9062), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(40191), "R": Number(40216)}), Object({"L": Number(65427), "R": Number(65452)})]), "storage": Number(0)}), Object({"id": Number(9729), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(62706), "R": Number(62716)}), Object({"L": Number(66700), "R": Number(66710)})]), "storage": Number(0)}), Object({"id": Number(4805), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(63581), "R": Number(63587)})]), "storage": Number(0)}), Object({"id": Number(9498), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(11398), "R": Number(11407)})]), "storage": Number(0)}), Object({"id": Number(8843), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(73724), "R": Number(73742)})]), "storage": Number(0)}), Object({"id": Number(9412), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(53667), "R": Number(53681)})]), "storage": Number(0)}), Object({"id": Number(9583), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24199), "R": Number(24201)}), Object({"L": Number(24243), "R": Number(24245)})]), "storage": Number(0)}), Object({"id": Number(9720), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7499), "R": Number(7515)})]), "storage": Number(0)}), Object({"id": Number(9039), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(40755), "R": Number(40763)}), Object({"L": Number(41563), "R": Number(41571)}), Object({"L": Number(41680), "R": Number(41688)})]), "storage": Number(0)}), Object({"id": Number(9530), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(49353), "R": Number(49367)})]), "storage": Number(0)}), Object({"id": Number(9015), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(43841), "R": Number(43853)})]), "storage": Number(0)}), Object({"id": Number(9762), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(1834), "R": Number(1842)})]), "storage": Number(0)}), Object({"id": Number(9777), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(30692), "R": Number(30695)})]), "storage": Number(0)}), Object({"id": Number(9183), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(72617), "R": Number(72630)})]), "storage": Number(0)}), Object({"id": Number(9526), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(20842), "R": Number(20844)}), Object({"L": Number(20901), "R": Number(20903)}), Object({"L": Number(20940), "R": Number(20942)}), Object({"L": Number(20979), "R": Number(20981)})]), "storage": Number(0)}), Object({"id": Number(4600), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(39362), "R": Number(39368)})]), "storage": Number(0)}), Object({"id": Number(4668), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(32867), "R": Number(32872)})]), "storage": Number(0)}), Object({"id": Number(1556), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(22158), "R": Number(22164)}), Object({"L": Number(22275), "R": Number(22281)})]), "storage": Number(0)}), Object({"id": Number(8977), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(52454), "R": Number(52465)})]), "storage": Number(0)}), Object({"id": Number(8860), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(71572), "R": Number(71589)})]), "storage": Number(0)}), Object({"id": Number(9740), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(45099), "R": Number(45116)})]), "storage": Number(0)}), Object({"id": Number(8310), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(39409), "R": Number(39425)}), Object({"L": Number(70435), "R": Number(70451)}), Object({"L": Number(70515), "R": Number(70531)}), Object({"L": Number(70773), "R": Number(70789)})]), "storage": Number(0)}), Object({"id": Number(9387), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5464), "R": Number(5467)}), Object({"L": Number(24299), "R": Number(24302)})]), "storage": Number(0)}), Object({"id": Number(1580), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(20821), "R": Number(20833)})]), "storage": Number(0)}), Object({"id": Number(9240), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9701), "R": Number(9712)})]), "storage": Number(0)}), Object({"id": Number(8919), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(72861), "R": Number(72874)})]), "storage": Number(0)}), Object({"id": Number(9520), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(20326), "R": Number(20328)}), Object({"L": Number(20362), "R": Number(20364)})]), "storage": Number(0)}), Object({"id": Number(9618), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26064), "R": Number(26065)})]), "storage": Number(0)}), Object({"id": Number(9267), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10930), "R": Number(10941)})]), "storage": Number(0)}), Object({"id": Number(9087), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(65139), "R": Number(65149)})]), "storage": Number(0)}), Object({"id": Number(9737), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(29469), "R": Number(29475)})]), "storage": Number(0)}), Object({"id": Number(1626), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(28241), "R": Number(28250)})]), "storage": Number(0)}), Object({"id": Number(9296), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(25905), "R": Number(25911)}), Object({"L": Number(25957), "R": Number(25963)})]), "storage": Number(0)}), Object({"id": Number(1577), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(20571), "R": Number(20590)})]), "storage": Number(0)}), Object({"id": Number(9164), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(68918), "R": Number(68929)}), Object({"L": Number(69078), "R": Number(69089)}), Object({"L": Number(69150), "R": Number(69161)}), Object({"L": Number(69407), "R": Number(69418)}), Object({"L": Number(69504), "R": Number(69515)}), Object({"L": Number(69572), "R": Number(69583)})]), "storage": Number(0)}), Object({"id": Number(8891), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(65055), "R": Number(65064)})]), "storage": Number(0)}), Object({"id": Number(9470), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9553), "R": Number(9560)})]), "storage": Number(0)}), Object({"id": Number(9411), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(38100), "R": Number(38112)}), Object({"L": Number(38193), "R": Number(38205)})]), "storage": Number(0)}), Object({"id": Number(8886), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(68892), "R": Number(68900)}), Object({"L": Number(69023), "R": Number(69031)}), Object({"L": Number(69331), "R": Number(69339)})]), "storage": Number(0)}), Object({"id": Number(9038), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(40876), "R": Number(40880)})]), "storage": Number(0)}), Object({"id": Number(9421), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27852), "R": Number(27853)})]), "storage": Number(0)}), Object({"id": Number(517), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(35914), "R": Number(35927)}), Object({"L": Number(36130), "R": Number(36143)})]), "storage": Number(0)}), Object({"id": Number(9650), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(22351), "R": Number(22355)}), Object({"L": Number(22387), "R": Number(22391)})]), "storage": Number(0)}), Object({"id": Number(9494), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(17234), "R": Number(17235)}), Object({"L": Number(17564), "R": Number(17565)}), Object({"L": Number(17584), "R": Number(17585)}), Object({"L": Number(17604), "R": Number(17605)})]), "storage": Number(0)}), Object({"id": Number(8997), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(46711), "R": Number(46715)})]), "storage": Number(0)}), Object({"id": Number(9804), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(78074), "R": Number(78085)})]), "storage": Number(0)}), Object({"id": Number(3), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(34518), "R": Number(34525)})]), "storage": Number(0)}), Object({"id": Number(1567), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(30030), "R": Number(30041)})]), "storage": Number(0)}), Object({"id": Number(9342), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5709), "R": Number(5726)})]), "storage": Number(0)}), Object({"id": Number(9634), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(28938), "R": Number(28940)}), Object({"L": Number(28983), "R": Number(28985)})]), "storage": Number(0)}), Object({"id": Number(523), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(33623), "R": Number(33631)}), Object({"L": Number(34114), "R": Number(34122)})]), "storage": Number(0)}), Object({"id": Number(9168), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9899), "R": Number(9910)})]), "storage": Number(0)}), Object({"id": Number(8918), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(72886), "R": Number(72908)})]), "storage": Number(0)}), Object({"id": Number(9428), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(19172), "R": Number(19173)}), Object({"L": Number(19604), "R": Number(19605)}), Object({"L": Number(19609), "R": Number(19610)}), Object({"L": Number(19616), "R": Number(19617)}), Object({"L": Number(19621), "R": Number(19622)}), Object({"L": Number(19628), "R": Number(19629)}), Object({"L": Number(19633), "R": Number(19634)})]), "storage": Number(0)}), Object({"id": Number(455), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(28106), "R": Number(28114)})]), "storage": Number(0)}), Object({"id": Number(4573), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(70757), "R": Number(70772)})]), "storage": Number(0)}), Object({"id": Number(9031), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(41336), "R": Number(41345)}), Object({"L": Number(57860), "R": Number(57869)}), Object({"L": Number(57910), "R": Number(57919)}), Object({"L": Number(62266), "R": Number(62275)}), Object({"L": Number(62316), "R": Number(62325)})]), "storage": Number(0)}), Object({"id": Number(1583), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(24513), "R": Number(24527)})]), "storage": Number(0)}), Object({"id": Number(9502), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9767), "R": Number(9777)})]), "storage": Number(0)}), Object({"id": Number(9277), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(6874), "R": Number(6887)})]), "storage": Number(0)}), Object({"id": Number(9408), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9924), "R": Number(9934)})]), "storage": Number(0)}), Object({"id": Number(9552), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10264), "R": Number(10273)})]), "storage": Number(0)}), Object({"id": Number(9496), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9830), "R": Number(9841)})]), "storage": Number(0)}), Object({"id": Number(9019), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(43369), "R": Number(43387)})]), "storage": Number(0)}), Object({"id": Number(9484), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(44078), "R": Number(44099)})]), "storage": Number(0)}), Object({"id": Number(9564), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(23414), "R": Number(23418)}), Object({"L": Number(23519), "R": Number(23523)}), Object({"L": Number(23535), "R": Number(23539)}), Object({"L": Number(23583), "R": Number(23587)})]), "storage": Number(0)}), Object({"id": Number(9229), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(33435), "R": Number(33441)})]), "storage": Number(0)}), Object({"id": Number(9210), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(78032), "R": Number(78044)})]), "storage": Number(0)}), Object({"id": Number(9522), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(20341), "R": Number(20342)}), Object({"L": Number(20370), "R": Number(20371)}), Object({"L": Number(20382), "R": Number(20383)}), Object({"L": Number(20387), "R": Number(20388)}), Object({"L": Number(20394), "R": Number(20395)}), Object({"L": Number(20399), "R": Number(20400)}), Object({"L": Number(20406), "R": Number(20407)}), Object({"L": Number(20411), "R": Number(20412)})]), "storage": Number(0)}), Object({"id": Number(2343), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(35542), "R": Number(35563)})]), "storage": Number(0)}), Object({"id": Number(8875), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(66453), "R": Number(66467)})]), "storage": Number(0)}), Object({"id": Number(9715), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27834), "R": Number(27839)})]), "storage": Number(0)}), Object({"id": Number(8809), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(79896), "R": Number(79909)})]), "storage": Number(0)}), Object({"id": Number(9123), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(14022), "R": Number(14027)}), Object({"L": Number(14084), "R": Number(14089)}), Object({"L": Number(14120), "R": Number(14125)}), Object({"L": Number(14156), "R": Number(14161)})]), "storage": Number(0)}), Object({"id": Number(9091), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(72597), "R": Number(72608)})]), "storage": Number(0)}), Object({"id": Number(9635), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10009), "R": Number(10022)})]), "storage": Number(0)}), Object({"id": Number(9714), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(28779), "R": Number(28781)}), Object({"L": Number(28804), "R": Number(28806)})]), "storage": Number(0)}), Object({"id": Number(9204), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(72473), "R": Number(72491)})]), "storage": Number(0)}), Object({"id": Number(4604), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(75602), "R": Number(75609)})]), "storage": Number(0)}), Object({"id": Number(9304), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8193), "R": Number(8201)})]), "storage": Number(0)}), Object({"id": Number(9332), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(54180), "R": Number(54189)})]), "storage": Number(0)}), Object({"id": Number(9533), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9641), "R": Number(9650)})]), "storage": Number(0)}), Object({"id": Number(9334), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(14600), "R": Number(14602)}), Object({"L": Number(15080), "R": Number(15082)}), Object({"L": Number(15094), "R": Number(15096)}), Object({"L": Number(15108), "R": Number(15110)})]), "storage": Number(0)}), Object({"id": Number(9131), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(13231), "R": Number(13241)})]), "storage": Number(0)}), Object({"id": Number(516), "kind": Number(23), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(41246), "R": Number(41252)})]), "storage": Number(0)}), Object({"id": Number(9614), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26032), "R": Number(26033)})]), "storage": Number(0)}), Object({"id": Number(9661), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24652), "R": Number(24654)}), Object({"L": Number(24687), "R": Number(24689)}), Object({"L": Number(24709), "R": Number(24711)}), Object({"L": Number(24729), "R": Number(24731)}), Object({"L": Number(24752), "R": Number(24754)}), Object({"L": Number(24786), "R": Number(24788)})]), "storage": Number(0)}), Object({"id": Number(9574), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(32511), "R": Number(32516)})]), "storage": Number(0)}), Object({"id": Number(9010), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(44347), "R": Number(44365)})]), "storage": Number(0)}), Object({"id": Number(9620), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(28861), "R": Number(28863)}), Object({"L": Number(28893), "R": Number(28895)})]), "storage": Number(0)}), Object({"id": Number(1574), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(12923), "R": Number(12933)})]), "storage": Number(0)}), Object({"id": Number(9769), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(32383), "R": Number(32391)})]), "storage": Number(0)}), Object({"id": Number(1613), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(27180), "R": Number(27189)})]), "storage": Number(0)}), Object({"id": Number(8884), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(77639), "R": Number(77649)})]), "storage": Number(0)}), Object({"id": Number(8855), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(71466), "R": Number(71484)})]), "storage": Number(0)}), Object({"id": Number(9195), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(47308), "R": Number(47323)})]), "storage": Number(0)}), Object({"id": Number(8969), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(50268), "R": Number(50276)})]), "storage": Number(0)}), Object({"id": Number(504), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(74694), "R": Number(74702)}), Object({"L": Number(74774), "R": Number(74782)})]), "storage": Number(0)}), Object({"id": Number(8996), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(46760), "R": Number(46768)})]), "storage": Number(0)}), Object({"id": Number(9499), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8054), "R": Number(8066)})]), "storage": Number(0)}), Object({"id": Number(8800), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(81224), "R": Number(81234)})]), "storage": Number(0)}), Object({"id": Number(9489), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(81886), "R": Number(81896)})]), "storage": Number(0)}), Object({"id": Number(9268), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10856), "R": Number(10866)})]), "storage": Number(0)}), Object({"id": Number(9354), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(35018), "R": Number(35034)})]), "storage": Number(0)}), Object({"id": Number(9573), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(23994), "R": Number(24000)})]), "storage": Number(0)}), Object({"id": Number(9413), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(39492), "R": Number(39503)}), Object({"L": Number(66792), "R": Number(66803)}), Object({"L": Number(66839), "R": Number(66850)})]), "storage": Number(0)}), Object({"id": Number(9026), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(42305), "R": Number(42319)})]), "storage": Number(0)}), Object({"id": Number(8911), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(73549), "R": Number(73557)})]), "storage": Number(0)}), Object({"id": Number(9774), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24677), "R": Number(24678)}), Object({"L": Number(24767), "R": Number(24768)}), Object({"L": Number(24807), "R": Number(24808)})]), "storage": Number(0)}), Object({"id": Number(9346), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5788), "R": Number(5803)})]), "storage": Number(0)}), Object({"id": Number(1644), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(41484), "R": Number(41497)}), Object({"L": Number(58073), "R": Number(58086)}), Object({"L": Number(62479), "R": Number(62492)})]), "storage": Number(0)}), Object({"id": Number(1585), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(80694), "R": Number(80708)})]), "storage": Number(0)}), Object({"id": Number(8864), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(70267), "R": Number(70281)})]), "storage": Number(0)}), Object({"id": Number(8934), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(59133), "R": Number(59138)})]), "storage": Number(0)}), Object({"id": Number(9600), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(60769), "R": Number(60781)})]), "storage": Number(0)}), Object({"id": Number(9582), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(20756), "R": Number(20757)}), Object({"L": Number(20762), "R": Number(20763)}), Object({"L": Number(20770), "R": Number(20771)}), Object({"L": Number(20777), "R": Number(20778)}), Object({"L": Number(20785), "R": Number(20786)}), Object({"L": Number(20792), "R": Number(20793)}), Object({"L": Number(20800), "R": Number(20801)})]), "storage": Number(0)}), Object({"id": Number(9544), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27979), "R": Number(27983)})]), "storage": Number(0)}), Object({"id": Number(9507), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(69951), "R": Number(69966)})]), "storage": Number(0)}), Object({"id": Number(9224), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10052), "R": Number(10065)})]), "storage": Number(0)}), Object({"id": Number(9766), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10139), "R": Number(10148)})]), "storage": Number(0)}), Object({"id": Number(1554), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(66868), "R": Number(66879)})]), "storage": Number(0)}), Object({"id": Number(9232), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(55190), "R": Number(55205)})]), "storage": Number(0)}), Object({"id": Number(4659), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(75895), "R": Number(75904)})]), "storage": Number(0)}), Object({"id": Number(9753), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(32897), "R": Number(32903)})]), "storage": Number(0)}), Object({"id": Number(9372), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10038), "R": Number(10050)})]), "storage": Number(0)}), Object({"id": Number(1617), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(55802), "R": Number(55810)}), Object({"L": Number(68316), "R": Number(68324)}), Object({"L": Number(68373), "R": Number(68381)})]), "storage": Number(0)}), Object({"id": Number(9003), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(41761), "R": Number(41768)})]), "storage": Number(0)}), Object({"id": Number(1630), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(55928), "R": Number(55938)}), Object({"L": Number(68451), "R": Number(68461)}), Object({"L": Number(68480), "R": Number(68490)})]), "storage": Number(0)}), Object({"id": Number(4510), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(75964), "R": Number(75969)})]), "storage": Number(0)}), Object({"id": Number(510), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(58272), "R": Number(58283)}), Object({"L": Number(66682), "R": Number(66693)})]), "storage": Number(0)}), Object({"id": Number(9528), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(20853), "R": Number(20859)}), Object({"L": Number(20905), "R": Number(20911)}), Object({"L": Number(20944), "R": Number(20950)}), Object({"L": Number(20983), "R": Number(20989)})]), "storage": Number(0)}), Object({"id": Number(9688), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(80953), "R": Number(80969)})]), "storage": Number(0)}), Object({"id": Number(9273), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(17666), "R": Number(17672)})]), "storage": Number(0)}), Object({"id": Number(8803), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(80983), "R": Number(81003)})]), "storage": Number(0)}), Object({"id": Number(9069), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(38837), "R": Number(38853)})]), "storage": Number(0)}), Object({"id": Number(9104), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(78374), "R": Number(78384)})]), "storage": Number(0)}), Object({"id": Number(9165), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(63438), "R": Number(63445)})]), "storage": Number(0)}), Object({"id": Number(1534), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(61786), "R": Number(61795)})]), "storage": Number(0)}), Object({"id": Number(466), "kind": Number(23), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(79500), "R": Number(79506)})]), "storage": Number(0)}), Object({"id": Number(9670), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(38169), "R": Number(38191)}), Object({"L": Number(38247), "R": Number(38269)})]), "storage": Number(0)}), Object({"id": Number(4624), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(77347), "R": Number(77358)})]), "storage": Number(0)}), Object({"id": Number(1549), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(12758), "R": Number(12764)})]), "storage": Number(0)}), Object({"id": Number(4556), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(74783), "R": Number(74789)})]), "storage": Number(0)}), Object({"id": Number(9218), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(81284), "R": Number(81298)})]), "storage": Number(0)}), Object({"id": Number(8813), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(78736), "R": Number(78758)})]), "storage": Number(0)}), Object({"id": Number(9639), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(40817), "R": Number(40825)})]), "storage": Number(0)}), Object({"id": Number(4842), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(75536), "R": Number(75541)})]), "storage": Number(0)}), Object({"id": Number(9806), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(38284), "R": Number(38290)}), Object({"L": Number(38330), "R": Number(38336)})]), "storage": Number(0)}), Object({"id": Number(8953), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(54930), "R": Number(54945)})]), "storage": Number(0)}), Object({"id": Number(9787), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(35854), "R": Number(35869)}), Object({"L": Number(35933), "R": Number(35948)})]), "storage": Number(0)}), Object({"id": Number(8839), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(73899), "R": Number(73917)})]), "storage": Number(0)}), Object({"id": Number(8967), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(50444), "R": Number(50451)})]), "storage": Number(0)}), Object({"id": Number(8827), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(76861), "R": Number(76874)})]), "storage": Number(0)}), Object({"id": Number(9490), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(32320), "R": Number(32333)})]), "storage": Number(0)}), Object({"id": Number(9453), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(58770), "R": Number(58775)})]), "storage": Number(0)}), Object({"id": Number(9392), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10321), "R": Number(10333)})]), "storage": Number(0)}), Object({"id": Number(8941), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(57805), "R": Number(57806)}), Object({"L": Number(57812), "R": Number(57813)}), Object({"L": Number(57827), "R": Number(57828)}), Object({"L": Number(57857), "R": Number(57858)}), Object({"L": Number(57907), "R": Number(57908)})]), "storage": Number(0)}), Object({"id": Number(9495), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(64064), "R": Number(64073)})]), "storage": Number(0)}), Object({"id": Number(1526), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(68870), "R": Number(68886)})]), "storage": Number(0)}), Object({"id": Number(491), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(40569), "R": Number(40587)}), Object({"L": Number(72009), "R": Number(72027)})]), "storage": Number(0)}), Object({"id": Number(9018), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(43441), "R": Number(43456)})]), "storage": Number(0)}), Object({"id": Number(984), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(17208), "R": Number(17219)})]), "storage": Number(0)}), Object({"id": Number(157), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8716), "R": Number(8722)}), Object({"L": Number(10433), "R": Number(10439)}), Object({"L": Number(11216), "R": Number(11222)}), Object({"L": Number(26005), "R": Number(26011)}), Object({"L": Number(27534), "R": Number(27540)})]), "storage": Number(0)}), Object({"id": Number(9237), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9779), "R": Number(9790)})]), "storage": Number(0)}), Object({"id": Number(8845), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(73679), "R": Number(73696)})]), "storage": Number(0)}), Object({"id": Number(9757), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(31987), "R": Number(31997)})]), "storage": Number(0)}), Object({"id": Number(9395), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(40682), "R": Number(40690)}), Object({"L": Number(41534), "R": Number(41542)}), Object({"L": Number(41650), "R": Number(41658)})]), "storage": Number(0)}), Object({"id": Number(9460), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(17794), "R": Number(17795)})]), "storage": Number(0)}), Object({"id": Number(9052), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(39549), "R": Number(39558)})]), "storage": Number(0)}), Object({"id": Number(9118), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(23254), "R": Number(23260)})]), "storage": Number(0)}), Object({"id": Number(1629), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(30403), "R": Number(30416)})]), "storage": Number(0)}), Object({"id": Number(9508), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(22748), "R": Number(22751)}), Object({"L": Number(22908), "R": Number(22911)}), Object({"L": Number(22925), "R": Number(22928)}), Object({"L": Number(22961), "R": Number(22964)}), Object({"L": Number(22973), "R": Number(22976)})]), "storage": Number(0)}), Object({"id": Number(9385), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(11467), "R": Number(11479)})]), "storage": Number(0)}), Object({"id": Number(9308), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9599), "R": Number(9608)})]), "storage": Number(0)}), Object({"id": Number(8817), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(78473), "R": Number(78481)})]), "storage": Number(0)}), Object({"id": Number(8797), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(81460), "R": Number(81471)})]), "storage": Number(0)}), Object({"id": Number(431), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(34729), "R": Number(34743)})]), "storage": Number(0)}), Object({"id": Number(4585), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(47009), "R": Number(47018)})]), "storage": Number(0)}), Object({"id": Number(8947), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(56362), "R": Number(56368)}), Object({"L": Number(56446), "R": Number(56452)}), Object({"L": Number(56460), "R": Number(56466)}), Object({"L": Number(56508), "R": Number(56514)})]), "storage": Number(0)}), Object({"id": Number(8834), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(74598), "R": Number(74615)})]), "storage": Number(0)}), Object({"id": Number(494), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7097), "R": Number(7108)})]), "storage": Number(0)}), Object({"id": Number(6), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5252), "R": Number(5264)})]), "storage": Number(0)}), Object({"id": Number(1586), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(62155), "R": Number(62164)})]), "storage": Number(0)}), Object({"id": Number(9071), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(62211), "R": Number(62212)}), Object({"L": Number(62218), "R": Number(62219)}), Object({"L": Number(62233), "R": Number(62234)}), Object({"L": Number(62263), "R": Number(62264)}), Object({"L": Number(62313), "R": Number(62314)})]), "storage": Number(0)}), Object({"id": Number(9721), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(29026), "R": Number(29028)}), Object({"L": Number(29047), "R": Number(29049)})]), "storage": Number(0)}), Object({"id": Number(8814), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(78530), "R": Number(78537)})]), "storage": Number(0)}), Object({"id": Number(4470), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(74878), "R": Number(74884)})]), "storage": Number(0)}), Object({"id": Number(9425), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(38551), "R": Number(38560)})]), "storage": Number(0)}), Object({"id": Number(9169), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(34716), "R": Number(34725)})]), "storage": Number(0)}), Object({"id": Number(1575), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(19145), "R": Number(19157)}), Object({"L": Number(20244), "R": Number(20256)})]), "storage": Number(0)}), Object({"id": Number(1604), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(12783), "R": Number(12790)}), Object({"L": Number(20633), "R": Number(20640)})]), "storage": Number(0)}), Object({"id": Number(9424), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(29994), "R": Number(29995)})]), "storage": Number(0)}), Object({"id": Number(4), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(74220), "R": Number(74229)})]), "storage": Number(0)}), Object({"id": Number(1562), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(80776), "R": Number(80790)})]), "storage": Number(0)}), Object({"id": Number(8933), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(59181), "R": Number(59189)})]), "storage": Number(0)}), Object({"id": Number(8887), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(65114), "R": Number(65119)})]), "storage": Number(0)}), Object({"id": Number(9598), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24502), "R": Number(24505)})]), "storage": Number(0)}), Object({"id": Number(9799), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(37603), "R": Number(37612)}), Object({"L": Number(37765), "R": Number(37774)})]), "storage": Number(0)}), Object({"id": Number(4700), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(75586), "R": Number(75592)})]), "storage": Number(0)}), Object({"id": Number(4619), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(65612), "R": Number(65629)})]), "storage": Number(0)}), Object({"id": Number(1612), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(27141), "R": Number(27164)})]), "storage": Number(0)}), Object({"id": Number(9677), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(60239), "R": Number(60255)})]), "storage": Number(0)}), Object({"id": Number(320), "kind": Number(23), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(74713), "R": Number(74719)})]), "storage": Number(0)}), Object({"id": Number(8810), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(79581), "R": Number(79583)})]), "storage": Number(0)}), Object({"id": Number(9464), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(29156), "R": Number(29157)}), Object({"L": Number(29191), "R": Number(29192)})]), "storage": Number(0)}), Object({"id": Number(9518), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(20309), "R": Number(20311)}), Object({"L": Number(20366), "R": Number(20368)})]), "storage": Number(0)}), Object({"id": Number(4739), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(75438), "R": Number(75441)})]), "storage": Number(0)}), Object({"id": Number(8916), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(79390), "R": Number(79397)})]), "storage": Number(0)}), Object({"id": Number(9239), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(39040), "R": Number(39050)})]), "storage": Number(0)}), Object({"id": Number(9800), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26218), "R": Number(26221)})]), "storage": Number(0)}), Object({"id": Number(9527), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(49700), "R": Number(49713)})]), "storage": Number(0)}), Object({"id": Number(9617), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(30368), "R": Number(30371)})]), "storage": Number(0)}), Object({"id": Number(8851), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(72028), "R": Number(72044)})]), "storage": Number(0)}), Object({"id": Number(8936), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(58650), "R": Number(58658)})]), "storage": Number(0)}), Object({"id": Number(9702), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(70365), "R": Number(70381)})]), "storage": Number(0)}), Object({"id": Number(8900), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(64424), "R": Number(64430)})]), "storage": Number(0)}), Object({"id": Number(9222), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10150), "R": Number(10159)})]), "storage": Number(0)}), Object({"id": Number(8908), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(74160), "R": Number(74171)})]), "storage": Number(0)}), Object({"id": Number(500), "kind": Number(23), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(80000), "R": Number(80006)})]), "storage": Number(0)}), Object({"id": Number(9011), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(44935), "R": Number(44954)})]), "storage": Number(0)}), Object({"id": Number(9705), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9332), "R": Number(9347)})]), "storage": Number(0)}), Object({"id": Number(994), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(24623), "R": Number(24632)})]), "storage": Number(0)}), Object({"id": Number(9099), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(28962), "R": Number(28963)}), Object({"L": Number(28991), "R": Number(28992)})]), "storage": Number(0)}), Object({"id": Number(9136), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(12268), "R": Number(12275)})]), "storage": Number(0)}), Object({"id": Number(9676), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27428), "R": Number(27429)})]), "storage": Number(0)}), Object({"id": Number(9791), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(36155), "R": Number(36170)})]), "storage": Number(0)}), Object({"id": Number(9150), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(41355), "R": Number(41364)})]), "storage": Number(0)}), Object({"id": Number(8879), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(72500), "R": Number(72517)})]), "storage": Number(0)}), Object({"id": Number(9540), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(22531), "R": Number(22534)}), Object({"L": Number(22623), "R": Number(22626)})]), "storage": Number(0)}), Object({"id": Number(4518), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(70217), "R": Number(70232)})]), "storage": Number(0)}), Object({"id": Number(9111), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(15334), "R": Number(15339)}), Object({"L": Number(15345), "R": Number(15350)}), Object({"L": Number(15384), "R": Number(15389)}), Object({"L": Number(15423), "R": Number(15428)})]), "storage": Number(0)}), Object({"id": Number(8976), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(49472), "R": Number(49480)})]), "storage": Number(0)}), Object({"id": Number(9514), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(34194), "R": Number(34206)})]), "storage": Number(0)}), Object({"id": Number(9759), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(34123), "R": Number(34128)})]), "storage": Number(0)}), Object({"id": Number(9309), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10161), "R": Number(10171)})]), "storage": Number(0)}), Object({"id": Number(4636), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(74496), "R": Number(74510)})]), "storage": Number(0)}), Object({"id": Number(9700), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(52595), "R": Number(52610)})]), "storage": Number(0)}), Object({"id": Number(9202), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10275), "R": Number(10284)})]), "storage": Number(0)}), Object({"id": Number(9480), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(38420), "R": Number(38439)}), Object({"L": Number(38522), "R": Number(38541)})]), "storage": Number(0)}), Object({"id": Number(8917), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(72967), "R": Number(72983)})]), "storage": Number(0)}), Object({"id": Number(9194), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10361), "R": Number(10375)})]), "storage": Number(0)}), Object({"id": Number(930), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(15279), "R": Number(15291)})]), "storage": Number(0)}), Object({"id": Number(9736), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(57590), "R": Number(57591)}), Object({"L": Number(57597), "R": Number(57598)}), Object({"L": Number(57612), "R": Number(57613)}), Object({"L": Number(57642), "R": Number(57643)}), Object({"L": Number(57689), "R": Number(57690)})]), "storage": Number(0)}), Object({"id": Number(9621), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26299), "R": Number(26302)})]), "storage": Number(0)}), Object({"id": Number(9076), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(45234), "R": Number(45259)}), Object({"L": Number(57047), "R": Number(57072)}), Object({"L": Number(57173), "R": Number(57198)})]), "storage": Number(0)}), Object({"id": Number(9463), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(71746), "R": Number(71754)})]), "storage": Number(0)}), Object({"id": Number(9501), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7681), "R": Number(7697)})]), "storage": Number(0)}), Object({"id": Number(9316), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(73809), "R": Number(73831)})]), "storage": Number(0)}), Object({"id": Number(9451), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(23434), "R": Number(23439)}), Object({"L": Number(23528), "R": Number(23533)}), Object({"L": Number(23576), "R": Number(23581)})]), "storage": Number(0)}), Object({"id": Number(9517), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(25919), "R": Number(25925)}), Object({"L": Number(25966), "R": Number(25972)})]), "storage": Number(0)}), Object({"id": Number(9658), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26943), "R": Number(26947)})]), "storage": Number(0)}), Object({"id": Number(9046), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(47234), "R": Number(47247)})]), "storage": Number(0)}), Object({"id": Number(9227), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5499), "R": Number(5503)})]), "storage": Number(0)}), Object({"id": Number(9119), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(63734), "R": Number(63742)})]), "storage": Number(0)}), Object({"id": Number(9742), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(28869), "R": Number(28870)}), Object({"L": Number(28897), "R": Number(28898)})]), "storage": Number(0)}), Object({"id": Number(1539), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(57969), "R": Number(57982)}), Object({"L": Number(68566), "R": Number(68579)}), Object({"L": Number(68638), "R": Number(68651)})]), "storage": Number(0)}), Object({"id": Number(1615), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(27806), "R": Number(27819)})]), "storage": Number(0)}), Object({"id": Number(332), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(34802), "R": Number(34815)})]), "storage": Number(0)}), Object({"id": Number(9577), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24060), "R": Number(24062)})]), "storage": Number(0)}), Object({"id": Number(4617), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(75618), "R": Number(75632)})]), "storage": Number(0)}), Object({"id": Number(8979), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(49105), "R": Number(49114)})]), "storage": Number(0)}), Object({"id": Number(1606), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(29956), "R": Number(29963)})]), "storage": Number(0)}), Object({"id": Number(8818), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(78423), "R": Number(78431)})]), "storage": Number(0)}), Object({"id": Number(9543), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26348), "R": Number(26355)})]), "storage": Number(0)}), Object({"id": Number(9585), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(79679), "R": Number(79687)})]), "storage": Number(0)}), Object({"id": Number(9641), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(30643), "R": Number(30648)})]), "storage": Number(0)}), Object({"id": Number(476), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(41710), "R": Number(41721)}), Object({"L": Number(47141), "R": Number(47152)}), Object({"L": Number(59031), "R": Number(59042)})]), "storage": Number(0)}), Object({"id": Number(9717), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(73789), "R": Number(73806)})]), "storage": Number(0)}), Object({"id": Number(8971), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(50108), "R": Number(50123)})]), "storage": Number(0)}), Object({"id": Number(8852), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(71889), "R": Number(71900)})]), "storage": Number(0)}), Object({"id": Number(8985), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(47990), "R": Number(48001)}), Object({"L": Number(69174), "R": Number(69185)}), Object({"L": Number(69532), "R": Number(69543)})]), "storage": Number(0)}), Object({"id": Number(9431), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8314), "R": Number(8325)})]), "storage": Number(0)}), Object({"id": Number(9783), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(35498), "R": Number(35509)})]), "storage": Number(0)}), Object({"id": Number(9205), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(21459), "R": Number(21465)}), Object({"L": Number(21478), "R": Number(21484)}), Object({"L": Number(21523), "R": Number(21529)}), Object({"L": Number(21538), "R": Number(21544)}), Object({"L": Number(21553), "R": Number(21559)}), Object({"L": Number(21578), "R": Number(21584)}), Object({"L": Number(21707), "R": Number(21713)})]), "storage": Number(0)}), Object({"id": Number(9289), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7015), "R": Number(7030)})]), "storage": Number(0)}), Object({"id": Number(9426), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(58145), "R": Number(58153)}), Object({"L": Number(58244), "R": Number(58252)})]), "storage": Number(0)}), Object({"id": Number(8938), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(58177), "R": Number(58178)}), Object({"L": Number(58184), "R": Number(58185)}), Object({"L": Number(58199), "R": Number(58200)}), Object({"L": Number(58224), "R": Number(58225)})]), "storage": Number(0)}), Object({"id": Number(9282), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(4443), "R": Number(4452)})]), "storage": Number(0)}), Object({"id": Number(4671), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(64709), "R": Number(64718)})]), "storage": Number(0)}), Object({"id": Number(8869), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(69976), "R": Number(69989)})]), "storage": Number(0)}), Object({"id": Number(8975), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(70416), "R": Number(70434)})]), "storage": Number(0)}), Object({"id": Number(526), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8844), "R": Number(8851)})]), "storage": Number(0)}), Object({"id": Number(8881), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(65488), "R": Number(65501)})]), "storage": Number(0)}), Object({"id": Number(9283), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9858), "R": Number(9869)})]), "storage": Number(0)}), Object({"id": Number(8862), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(70342), "R": Number(70356)})]), "storage": Number(0)}), Object({"id": Number(9107), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(29281), "R": Number(29284)})]), "storage": Number(0)}), Object({"id": Number(9377), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24640), "R": Number(24644)}), Object({"L": Number(24692), "R": Number(24696)}), Object({"L": Number(24734), "R": Number(24738)}), Object({"L": Number(24771), "R": Number(24775)}), Object({"L": Number(24791), "R": Number(24795)})]), "storage": Number(0)}), Object({"id": Number(9259), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24954), "R": Number(24956)}), Object({"L": Number(24982), "R": Number(24984)})]), "storage": Number(0)}), Object({"id": Number(9050), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(76379), "R": Number(76393)})]), "storage": Number(0)}), Object({"id": Number(9154), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10229), "R": Number(10239)})]), "storage": Number(0)}), Object({"id": Number(9364), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5886), "R": Number(5898)}), Object({"L": Number(30480), "R": Number(30492)})]), "storage": Number(0)}), Object({"id": Number(9153), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(47068), "R": Number(47076)})]), "storage": Number(0)}), Object({"id": Number(9536), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(80754), "R": Number(80760)})]), "storage": Number(0)}), Object({"id": Number(8950), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(55545), "R": Number(55561)})]), "storage": Number(0)}), Object({"id": Number(9610), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(25658), "R": Number(25663)}), Object({"L": Number(25669), "R": Number(25674)}), Object({"L": Number(25696), "R": Number(25701)}), Object({"L": Number(25711), "R": Number(25716)}), Object({"L": Number(25731), "R": Number(25736)}), Object({"L": Number(25758), "R": Number(25763)})]), "storage": Number(0)}), Object({"id": Number(1528), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(67915), "R": Number(67933)})]), "storage": Number(0)}), Object({"id": Number(982), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(13024), "R": Number(13033)})]), "storage": Number(0)}), Object({"id": Number(1624), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(27657), "R": Number(27674)})]), "storage": Number(0)}), Object({"id": Number(9103), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(17243), "R": Number(17248)}), Object({"L": Number(17569), "R": Number(17574)}), Object({"L": Number(17589), "R": Number(17594)}), Object({"L": Number(17609), "R": Number(17614)})]), "storage": Number(0)}), Object({"id": Number(8966), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(70709), "R": Number(70730)})]), "storage": Number(0)}), Object({"id": Number(9305), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10904), "R": Number(10917)})]), "storage": Number(0)}), Object({"id": Number(9174), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10347), "R": Number(10359)})]), "storage": Number(0)}), Object({"id": Number(9435), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(77460), "R": Number(77473)})]), "storage": Number(0)}), Object({"id": Number(34), "kind": Number(23), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(74078), "R": Number(74087)})]), "storage": Number(0)}), Object({"id": Number(1636), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(24320), "R": Number(24341)})]), "storage": Number(0)}), Object({"id": Number(1593), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(26861), "R": Number(26879)})]), "storage": Number(0)}), Object({"id": Number(9444), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9049), "R": Number(9065)}), Object({"L": Number(9093), "R": Number(9109)})]), "storage": Number(0)}), Object({"id": Number(8831), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(81899), "R": Number(81910)})]), "storage": Number(0)}), Object({"id": Number(9078), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(55378), "R": Number(55391)})]), "storage": Number(0)}), Object({"id": Number(8948), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(55968), "R": Number(55969)}), Object({"L": Number(55975), "R": Number(55976)}), Object({"L": Number(55990), "R": Number(55991)}), Object({"L": Number(56015), "R": Number(56016)})]), "storage": Number(0)}), Object({"id": Number(9516), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7833), "R": Number(7853)})]), "storage": Number(0)}), Object({"id": Number(9002), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(53819), "R": Number(53838)})]), "storage": Number(0)}), Object({"id": Number(9808), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(38470), "R": Number(38483)})]), "storage": Number(0)}), Object({"id": Number(8928), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(70659), "R": Number(70678)})]), "storage": Number(0)}), Object({"id": Number(1628), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(28265), "R": Number(28274)})]), "storage": Number(0)}), Object({"id": Number(9696), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10083), "R": Number(10095)})]), "storage": Number(0)}), Object({"id": Number(8912), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(73493), "R": Number(73511)})]), "storage": Number(0)}), Object({"id": Number(9397), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(28077), "R": Number(28086)})]), "storage": Number(0)}), Object({"id": Number(8880), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(66264), "R": Number(66271)})]), "storage": Number(0)}), Object({"id": Number(9482), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9580), "R": Number(9588)})]), "storage": Number(0)}), Object({"id": Number(9732), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(29355), "R": Number(29359)})]), "storage": Number(0)}), Object({"id": Number(9655), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(37273), "R": Number(37281)})]), "storage": Number(0)}), Object({"id": Number(9747), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(41775), "R": Number(41782)})]), "storage": Number(0)}), Object({"id": Number(9291), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(56379), "R": Number(56386)}), Object({"L": Number(56525), "R": Number(56532)})]), "storage": Number(0)}), Object({"id": Number(117), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(72634), "R": Number(72647)})]), "storage": Number(0)}), Object({"id": Number(61), "kind": Number(23), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(32802), "R": Number(32808)})]), "storage": Number(0)}), Object({"id": Number(8847), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(72247), "R": Number(72257)})]), "storage": Number(0)}), Object({"id": Number(9363), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8128), "R": Number(8140)})]), "storage": Number(0)}), Object({"id": Number(9400), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9610), "R": Number(9620)})]), "storage": Number(0)}), Object({"id": Number(9258), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24662), "R": Number(24666)}), Object({"L": Number(24778), "R": Number(24782)})]), "storage": Number(0)}), Object({"id": Number(9788), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(44591), "R": Number(44604)})]), "storage": Number(0)}), Object({"id": Number(8835), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(74569), "R": Number(74578)})]), "storage": Number(0)}), Object({"id": Number(9590), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24384), "R": Number(24387)}), Object({"L": Number(24451), "R": Number(24454)})]), "storage": Number(0)}), Object({"id": Number(8842), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(73765), "R": Number(73786)})]), "storage": Number(0)}), Object({"id": Number(9382), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(66397), "R": Number(66409)})]), "storage": Number(0)}), Object({"id": Number(522), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(77900), "R": Number(77911)})]), "storage": Number(0)}), Object({"id": Number(9249), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(17854), "R": Number(17857)})]), "storage": Number(0)}), Object({"id": Number(9313), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(79566), "R": Number(79574)})]), "storage": Number(0)}), Object({"id": Number(8945), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(74129), "R": Number(74135)})]), "storage": Number(0)}), Object({"id": Number(9697), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(28066), "R": Number(28074)})]), "storage": Number(0)}), Object({"id": Number(9594), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24400), "R": Number(24401)}), Object({"L": Number(24429), "R": Number(24430)}), Object({"L": Number(24448), "R": Number(24449)})]), "storage": Number(0)}), Object({"id": Number(1589), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(28289), "R": Number(28298)})]), "storage": Number(0)}), Object({"id": Number(9627), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(33274), "R": Number(33281)})]), "storage": Number(0)}), Object({"id": Number(9149), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(6789), "R": Number(6802)})]), "storage": Number(0)}), Object({"id": Number(9735), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(29365), "R": Number(29369)})]), "storage": Number(0)}), Object({"id": Number(9398), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7083), "R": Number(7094)})]), "storage": Number(0)}), Object({"id": Number(9021), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(42781), "R": Number(42798)})]), "storage": Number(0)}), Object({"id": Number(2869), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(36272), "R": Number(36282)}), Object({"L": Number(37775), "R": Number(37785)})]), "storage": Number(0)}), Object({"id": Number(8870), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(69909), "R": Number(69918)})]), "storage": Number(0)}), Object({"id": Number(9335), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(4483), "R": Number(4491)})]), "storage": Number(0)}), Object({"id": Number(9579), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(30116), "R": Number(30122)})]), "storage": Number(0)}), Object({"id": Number(8811), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(79551), "R": Number(79556)})]), "storage": Number(0)}), Object({"id": Number(9170), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(70582), "R": Number(70592)})]), "storage": Number(0)}), Object({"id": Number(9792), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26974), "R": Number(26983)})]), "storage": Number(0)}), Object({"id": Number(9648), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(35069), "R": Number(35085)})]), "storage": Number(0)}), Object({"id": Number(4572), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(75415), "R": Number(75421)})]), "storage": Number(0)}), Object({"id": Number(9353), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(6761), "R": Number(6776)})]), "storage": Number(0)}), Object({"id": Number(1598), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(17867), "R": Number(17883)})]), "storage": Number(0)}), Object({"id": Number(8994), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(46913), "R": Number(46917)})]), "storage": Number(0)}), Object({"id": Number(9796), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(36451), "R": Number(36463)}), Object({"L": Number(38310), "R": Number(38322)})]), "storage": Number(0)}), Object({"id": Number(9662), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27308), "R": Number(27314)})]), "storage": Number(0)}), Object({"id": Number(9694), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27997), "R": Number(28000)})]), "storage": Number(0)}), Object({"id": Number(4472), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(77145), "R": Number(77153)})]), "storage": Number(0)}), Object({"id": Number(9607), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(18933), "R": Number(18935)}), Object({"L": Number(18954), "R": Number(18956)}), Object({"L": Number(18979), "R": Number(18981)}), Object({"L": Number(19006), "R": Number(19008)}), Object({"L": Number(19031), "R": Number(19033)}), Object({"L": Number(19058), "R": Number(19060)}), Object({"L": Number(19083), "R": Number(19085)})]), "storage": Number(0)}), Object({"id": Number(9035), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(42355), "R": Number(42381)})]), "storage": Number(0)}), Object({"id": Number(9805), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(37929), "R": Number(37942)}), Object({"L": Number(37995), "R": Number(38008)})]), "storage": Number(0)}), Object({"id": Number(9287), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(37294), "R": Number(37304)})]), "storage": Number(0)}), Object({"id": Number(9741), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(9084), "R": Number(9092)})]), "storage": Number(1)}), Object({"id": Number(958), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(23137), "R": Number(23144)})]), "storage": Number(0)}), Object({"id": Number(9023), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(79356), "R": Number(79362)})]), "storage": Number(0)}), Object({"id": Number(475), "kind": Number(10), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(41753), "R": Number(41757)})]), "storage": Number(0)}), Object({"id": Number(162), "kind": Number(23), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(38454), "R": Number(38460)})]), "storage": Number(0)}), Object({"id": Number(481), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(39428), "R": Number(39441)})]), "storage": Number(0)}), Object({"id": Number(9597), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9912), "R": Number(9922)})]), "storage": Number(0)}), Object({"id": Number(9511), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(75664), "R": Number(75679)})]), "storage": Number(0)}), Object({"id": Number(9557), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9406), "R": Number(9422)})]), "storage": Number(0)}), Object({"id": Number(9685), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27845), "R": Number(27846)})]), "storage": Number(0)}), Object({"id": Number(9064), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(40094), "R": Number(40102)}), Object({"L": Number(65295), "R": Number(65303)})]), "storage": Number(0)}), Object({"id": Number(9588), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(24373), "R": Number(24375)}), Object({"L": Number(24421), "R": Number(24423)})]), "storage": Number(0)}), Object({"id": Number(9012), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(43964), "R": Number(43976)})]), "storage": Number(0)}), Object({"id": Number(9587), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(29969), "R": Number(29970)})]), "storage": Number(0)}), Object({"id": Number(1641), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(26824), "R": Number(26836)})]), "storage": Number(0)}), Object({"id": Number(9603), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7067), "R": Number(7080)})]), "storage": Number(0)}), Object({"id": Number(9301), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(25108), "R": Number(25110)}), Object({"L": Number(25161), "R": Number(25163)}), Object({"L": Number(25201), "R": Number(25203)}), Object({"L": Number(25241), "R": Number(25243)})]), "storage": Number(0)}), Object({"id": Number(525), "kind": Number(5), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(34371), "R": Number(34387)})]), "storage": Number(0)}), Object({"id": Number(1532), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(66745), "R": Number(66755)})]), "storage": Number(0)}), Object({"id": Number(9180), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5379), "R": Number(5387)})]), "storage": Number(0)}), Object({"id": Number(9442), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7287), "R": Number(7301)})]), "storage": Number(0)}), Object({"id": Number(9491), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9622), "R": Number(9629)})]), "storage": Number(0)}), Object({"id": Number(9416), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(34230), "R": Number(34238)})]), "storage": Number(0)}), Object({"id": Number(9189), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(64477), "R": Number(64490)})]), "storage": Number(0)}), Object({"id": Number(9751), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(31085), "R": Number(31097)})]), "storage": Number(0)}), Object({"id": Number(9438), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8471), "R": Number(8481)})]), "storage": Number(0)}), Object({"id": Number(496), "kind": Number(10), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(82030), "R": Number(82034)})]), "storage": Number(0)}), Object({"id": Number(9519), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(39613), "R": Number(39626)})]), "storage": Number(0)}), Object({"id": Number(8924), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(61031), "R": Number(61032)}), Object({"L": Number(61038), "R": Number(61039)}), Object({"L": Number(61053), "R": Number(61054)}), Object({"L": Number(61078), "R": Number(61079)})]), "storage": Number(0)}), Object({"id": Number(9122), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(41470), "R": Number(41475)}), Object({"L": Number(41528), "R": Number(41533)}), Object({"L": Number(41557), "R": Number(41562)}), Object({"L": Number(41644), "R": Number(41649)}), Object({"L": Number(41674), "R": Number(41679)})]), "storage": Number(0)}), Object({"id": Number(9419), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(17803), "R": Number(17804)})]), "storage": Number(0)}), Object({"id": Number(9350), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9290), "R": Number(9304)})]), "storage": Number(0)}), Object({"id": Number(9789), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(43788), "R": Number(43800)})]), "storage": Number(0)}), Object({"id": Number(8981), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(80816), "R": Number(80821)})]), "storage": Number(0)}), Object({"id": Number(9230), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8086), "R": Number(8096)})]), "storage": Number(0)}), Object({"id": Number(4494), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(48889), "R": Number(48898)})]), "storage": Number(0)}), Object({"id": Number(9014), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(74581), "R": Number(74595)})]), "storage": Number(0)}), Object({"id": Number(4874), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(74390), "R": Number(74402)})]), "storage": Number(0)}), Object({"id": Number(9201), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10470), "R": Number(10484)})]), "storage": Number(0)}), Object({"id": Number(9272), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9517), "R": Number(9533)})]), "storage": Number(0)}), Object({"id": Number(9693), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27969), "R": Number(27973)})]), "storage": Number(0)}), Object({"id": Number(4866), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(13712), "R": Number(13721)})]), "storage": Number(0)}), Object({"id": Number(9376), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(71871), "R": Number(71878)})]), "storage": Number(0)}), Object({"id": Number(8980), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(48801), "R": Number(48812)}), Object({"L": Number(56903), "R": Number(56914)}), Object({"L": Number(57035), "R": Number(57046)}), Object({"L": Number(57161), "R": Number(57172)})]), "storage": Number(0)}), Object({"id": Number(1610), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(61406), "R": Number(61419)})]), "storage": Number(0)}), Object({"id": Number(9271), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7894), "R": Number(7907)})]), "storage": Number(0)}), Object({"id": Number(9462), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27797), "R": Number(27798)})]), "storage": Number(0)}), Object({"id": Number(9004), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(46388), "R": Number(46414)}), Object({"L": Number(56915), "R": Number(56941)})]), "storage": Number(0)}), Object({"id": Number(4815), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(75552), "R": Number(75558)})]), "storage": Number(0)}), Object({"id": Number(12), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(80671), "R": Number(80687)}), Object({"L": Number(80717), "R": Number(80733)}), Object({"L": Number(80798), "R": Number(80814)})]), "storage": Number(0)}), Object({"id": Number(9074), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(38692), "R": Number(38699)})]), "storage": Number(0)}), Object({"id": Number(9744), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(30250), "R": Number(30251)})]), "storage": Number(0)}), Object({"id": Number(513), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(6575), "R": Number(6585)})]), "storage": Number(0)}), Object({"id": Number(9531), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(17964), "R": Number(17968)})]), "storage": Number(0)}), Object({"id": Number(996), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(21404), "R": Number(21420)})]), "storage": Number(0)}), Object({"id": Number(9476), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9755), "R": Number(9765)})]), "storage": Number(0)}), Object({"id": Number(9539), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(34288), "R": Number(34297)})]), "storage": Number(0)}), Object({"id": Number(9647), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(32840), "R": Number(32857)})]), "storage": Number(0)}), Object({"id": Number(9778), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(34086), "R": Number(34092)})]), "storage": Number(0)}), Object({"id": Number(4813), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(76911), "R": Number(76921)})]), "storage": Number(0)}), Object({"id": Number(469), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(79421), "R": Number(79434)})]), "storage": Number(0)}), Object({"id": Number(1573), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(20279), "R": Number(20294)})]), "storage": Number(0)}), Object({"id": Number(9472), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(37981), "R": Number(37991)}), Object({"L": Number(38116), "R": Number(38126)})]), "storage": Number(0)}), Object({"id": Number(9593), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(39535), "R": Number(39546)})]), "storage": Number(0)}), Object({"id": Number(8888), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(65093), "R": Number(65104)})]), "storage": Number(0)}), Object({"id": Number(9765), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(32366), "R": Number(32371)})]), "storage": Number(0)}), Object({"id": Number(8935), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(59043), "R": Number(59048)}), Object({"L": Number(60944), "R": Number(60949)}), Object({"L": Number(61072), "R": Number(61077)}), Object({"L": Number(61565), "R": Number(61570)}), Object({"L": Number(61691), "R": Number(61696)}), Object({"L": Number(61874), "R": Number(61879)}), Object({"L": Number(62042), "R": Number(62047)}), Object({"L": Number(62089), "R": Number(62094)}), Object({"L": Number(62257), "R": Number(62262)}), Object({"L": Number(62307), "R": Number(62312)}), Object({"L": Number(62470), "R": Number(62475)}), Object({"L": Number(62624), "R": Number(62629)})]), "storage": Number(0)}), Object({"id": Number(9349), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(30265), "R": Number(30268)})]), "storage": Number(0)}), Object({"id": Number(740), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(19598), "R": Number(19602)}), Object({"L": Number(21181), "R": Number(21185)}), Object({"L": Number(21532), "R": Number(21536)})]), "storage": Number(0)}), Object({"id": Number(9390), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(39477), "R": Number(39489)})]), "storage": Number(0)}), Object({"id": Number(8895), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(76058), "R": Number(76063)})]), "storage": Number(0)}), Object({"id": Number(8821), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(78210), "R": Number(78215)})]), "storage": Number(0)}), Object({"id": Number(9251), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(22140), "R": Number(22143)})]), "storage": Number(0)}), Object({"id": Number(9466), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(78115), "R": Number(78120)})]), "storage": Number(0)}), Object({"id": Number(9795), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27862), "R": Number(27863)})]), "storage": Number(0)}), Object({"id": Number(9045), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(40530), "R": Number(40543)})]), "storage": Number(0)}), Object({"id": Number(921), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(25632), "R": Number(25649)}), Object({"L": Number(25938), "R": Number(25955)})]), "storage": Number(0)}), Object({"id": Number(9410), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(40506), "R": Number(40515)})]), "storage": Number(0)}), Object({"id": Number(9558), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(31872), "R": Number(31889)})]), "storage": Number(0)}), Object({"id": Number(922), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(23953), "R": Number(23964)}), Object({"L": Number(24257), "R": Number(24268)}), Object({"L": Number(24435), "R": Number(24446)})]), "storage": Number(0)}), Object({"id": Number(9006), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(45849), "R": Number(45869)})]), "storage": Number(0)}), Object({"id": Number(8871), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(71672), "R": Number(71688)})]), "storage": Number(0)}), Object({"id": Number(9177), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(45490), "R": Number(45509)})]), "storage": Number(0)}), Object({"id": Number(8993), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(81783), "R": Number(81791)})]), "storage": Number(0)}), Object({"id": Number(2871), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(35774), "R": Number(35785)}), Object({"L": Number(37845), "R": Number(37856)})]), "storage": Number(0)}), Object({"id": Number(9133), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(12905), "R": Number(12906)})]), "storage": Number(0)}), Object({"id": Number(4601), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(76159), "R": Number(76167)})]), "storage": Number(0)}), Object({"id": Number(9701), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(28133), "R": Number(28144)})]), "storage": Number(0)}), Object({"id": Number(9162), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(37442), "R": Number(37456)})]), "storage": Number(0)}), Object({"id": Number(8876), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(66344), "R": Number(66348)})]), "storage": Number(0)}), Object({"id": Number(4631), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(75978), "R": Number(75983)})]), "storage": Number(0)}), Object({"id": Number(9231), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8391), "R": Number(8401)})]), "storage": Number(0)}), Object({"id": Number(9671), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(38231), "R": Number(38242)}), Object({"L": Number(38296), "R": Number(38307)})]), "storage": Number(0)}), Object({"id": Number(9706), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(28161), "R": Number(28172)})]), "storage": Number(0)}), Object({"id": Number(9274), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(63751), "R": Number(63756)})]), "storage": Number(0)}), Object({"id": Number(9250), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(63974), "R": Number(63987)})]), "storage": Number(0)}), Object({"id": Number(512), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(2946), "R": Number(2951)}), Object({"L": Number(27944), "R": Number(27949)}), Object({"L": Number(30095), "R": Number(30100)}), Object({"L": Number(30603), "R": Number(30608)}), Object({"L": Number(30662), "R": Number(30667)})]), "storage": Number(0)}), Object({"id": Number(8959), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(53102), "R": Number(53113)})]), "storage": Number(0)}), Object({"id": Number(4473), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(81211), "R": Number(81221)})]), "storage": Number(0)}), Object({"id": Number(9371), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9714), "R": Number(9725)})]), "storage": Number(0)}), Object({"id": Number(9033), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(44814), "R": Number(44835)})]), "storage": Number(0)}), Object({"id": Number(8826), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(77395), "R": Number(77411)})]), "storage": Number(0)}), Object({"id": Number(9082), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9663), "R": Number(9672)})]), "storage": Number(0)}), Object({"id": Number(8904), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(71797), "R": Number(71807)})]), "storage": Number(0)}), Object({"id": Number(462), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(82297), "R": Number(82310)})]), "storage": Number(0)}), Object({"id": Number(9555), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(17843), "R": Number(17845)})]), "storage": Number(0)}), Object({"id": Number(508), "kind": Number(10), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9546), "R": Number(9550)})]), "storage": Number(0)}), Object({"id": Number(457), "kind": Number(10), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(81764), "R": Number(81768)})]), "storage": Number(0)}), Object({"id": Number(9394), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(57780), "R": Number(57784)}), Object({"L": Number(57872), "R": Number(57876)}), Object({"L": Number(57894), "R": Number(57898)}), Object({"L": Number(57949), "R": Number(57953)})]), "storage": Number(0)}), Object({"id": Number(9711), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(28328), "R": Number(28329)})]), "storage": Number(0)}), Object({"id": Number(9644), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26686), "R": Number(26689)})]), "storage": Number(0)}), Object({"id": Number(9556), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(23213), "R": Number(23217)})]), "storage": Number(0)}), Object({"id": Number(991), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(23372), "R": Number(23384)})]), "storage": Number(0)}), Object({"id": Number(8954), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(54650), "R": Number(54662)})]), "storage": Number(0)}), Object({"id": Number(9691), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27934), "R": Number(27935)})]), "storage": Number(0)}), Object({"id": Number(9247), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7866), "R": Number(7879)})]), "storage": Number(0)}), Object({"id": Number(9234), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(73037), "R": Number(73053)})]), "storage": Number(0)}), Object({"id": Number(9319), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(39648), "R": Number(39658)})]), "storage": Number(0)}), Object({"id": Number(9221), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10184), "R": Number(10192)})]), "storage": Number(0)}), Object({"id": Number(9367), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10955), "R": Number(10965)})]), "storage": Number(0)}), Object({"id": Number(9450), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9435), "R": Number(9448)})]), "storage": Number(0)}), Object({"id": Number(1608), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(26544), "R": Number(26562)})]), "storage": Number(0)}), Object({"id": Number(9001), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(41821), "R": Number(41830)})]), "storage": Number(0)}), Object({"id": Number(9097), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(13135), "R": Number(13150)})]), "storage": Number(0)}), Object({"id": Number(9764), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(38856), "R": Number(38872)})]), "storage": Number(0)}), Object({"id": Number(9338), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(50555), "R": Number(50567)})]), "storage": Number(0)}), Object({"id": Number(9117), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(13039), "R": Number(13040)})]), "storage": Number(0)}), Object({"id": Number(8837), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(74618), "R": Number(74625)})]), "storage": Number(0)}), Object({"id": Number(9602), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(60613), "R": Number(60625)})]), "storage": Number(0)}), Object({"id": Number(9125), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(13638), "R": Number(13650)})]), "storage": Number(0)}), Object({"id": Number(513), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5944), "R": Number(5953)}), Object({"L": Number(51491), "R": Number(51500)}), Object({"L": Number(51647), "R": Number(51656)}), Object({"L": Number(53682), "R": Number(53691)}), Object({"L": Number(53839), "R": Number(53848)}), Object({"L": Number(81346), "R": Number(81355)})]), "storage": Number(0)}), Object({"id": Number(9135), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(12295), "R": Number(12301)})]), "storage": Number(0)}), Object({"id": Number(9422), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7585), "R": Number(7606)})]), "storage": Number(0)}), Object({"id": Number(9129), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(13393), "R": Number(13405)})]), "storage": Number(0)}), Object({"id": Number(9803), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(37866), "R": Number(37877)}), Object({"L": Number(37945), "R": Number(37956)})]), "storage": Number(0)}), Object({"id": Number(9255), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10806), "R": Number(10817)})]), "storage": Number(0)}), Object({"id": Number(514), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8915), "R": Number(8923)})]), "storage": Number(0)}), Object({"id": Number(487), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(62678), "R": Number(62695)})]), "storage": Number(0)}), Object({"id": Number(45), "kind": Number(23), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(80627), "R": Number(80643)})]), "storage": Number(0)}), Object({"id": Number(9680), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27526), "R": Number(27532)})]), "storage": Number(0)}), Object({"id": Number(8848), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(72193), "R": Number(72205)})]), "storage": Number(0)}), Object({"id": Number(1542), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(24149), "R": Number(24167)})]), "storage": Number(0)}), Object({"id": Number(9146), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(11768), "R": Number(11775)})]), "storage": Number(0)}), Object({"id": Number(8841), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(73834), "R": Number(73851)})]), "storage": Number(0)}), Object({"id": Number(9198), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10298), "R": Number(10306)})]), "storage": Number(0)}), Object({"id": Number(1551), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(17707), "R": Number(17718)})]), "storage": Number(0)}), Object({"id": Number(468), "kind": Number(23), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(77929), "R": Number(77944)})]), "storage": Number(0)}), Object({"id": Number(9595), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(80120), "R": Number(80126)})]), "storage": Number(0)}), Object({"id": Number(9324), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(41397), "R": Number(41411)})]), "storage": Number(0)}), Object({"id": Number(9323), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5856), "R": Number(5871)})]), "storage": Number(0)}), Object({"id": Number(9362), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9236), "R": Number(9248)})]), "storage": Number(0)}), Object({"id": Number(515), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10413), "R": Number(10423)})]), "storage": Number(0)}), Object({"id": Number(9772), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(41422), "R": Number(41431)})]), "storage": Number(0)}), Object({"id": Number(9761), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(47382), "R": Number(47390)})]), "storage": Number(0)}), Object({"id": Number(9458), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(38766), "R": Number(38773)})]), "storage": Number(0)}), Object({"id": Number(8798), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(81337), "R": Number(81345)})]), "storage": Number(0)}), Object({"id": Number(9182), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7992), "R": Number(8000)})]), "storage": Number(0)}), Object({"id": Number(9241), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(7962), "R": Number(7971)})]), "storage": Number(0)}), Object({"id": Number(1564), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(68274), "R": Number(68287)})]), "storage": Number(0)}), Object({"id": Number(9102), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(33528), "R": Number(33536)})]), "storage": Number(0)}), Object({"id": Number(9637), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26607), "R": Number(26610)})]), "storage": Number(0)}), Object({"id": Number(9192), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(33450), "R": Number(33454)})]), "storage": Number(0)}), Object({"id": Number(9760), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(32616), "R": Number(32637)}), Object({"L": Number(32904), "R": Number(32925)})]), "storage": Number(0)}), Object({"id": Number(9570), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(70147), "R": Number(70170)})]), "storage": Number(0)}), Object({"id": Number(4692), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(76617), "R": Number(76628)})]), "storage": Number(0)}), Object({"id": Number(9176), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8412), "R": Number(8420)})]), "storage": Number(0)}), Object({"id": Number(9719), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(50004), "R": Number(50020)})]), "storage": Number(0)}), Object({"id": Number(1544), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(30004), "R": Number(30012)})]), "storage": Number(0)}), Object({"id": Number(9550), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(64987), "R": Number(64998)})]), "storage": Number(0)}), Object({"id": Number(9468), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8253), "R": Number(8261)})]), "storage": Number(0)}), Object({"id": Number(9534), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26808), "R": Number(26813)})]), "storage": Number(0)}), Object({"id": Number(9042), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(40557), "R": Number(40566)})]), "storage": Number(0)}), Object({"id": Number(9070), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(38791), "R": Number(38803)})]), "storage": Number(0)}), Object({"id": Number(9427), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(14042), "R": Number(14046)}), Object({"L": Number(14090), "R": Number(14094)}), Object({"L": Number(14126), "R": Number(14130)}), Object({"L": Number(14162), "R": Number(14166)})]), "storage": Number(0)}), Object({"id": Number(9551), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(47505), "R": Number(47522)})]), "storage": Number(0)}), Object({"id": Number(8965), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(50495), "R": Number(50507)})]), "storage": Number(0)}), Object({"id": Number(1622), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(27607), "R": Number(27621)})]), "storage": Number(0)}), Object({"id": Number(495), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8820), "R": Number(8827)})]), "storage": Number(0)}), Object({"id": Number(8866), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(70241), "R": Number(70258)})]), "storage": Number(0)}), Object({"id": Number(9101), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27787), "R": Number(27788)})]), "storage": Number(0)}), Object({"id": Number(9488), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(18401), "R": Number(18405)}), Object({"L": Number(18436), "R": Number(18440)}), Object({"L": Number(18450), "R": Number(18454)}), Object({"L": Number(18528), "R": Number(18532)}), Object({"L": Number(18542), "R": Number(18546)}), Object({"L": Number(18620), "R": Number(18624)}), Object({"L": Number(18634), "R": Number(18638)})]), "storage": Number(0)}), Object({"id": Number(9025), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(42449), "R": Number(42466)})]), "storage": Number(0)}), Object({"id": Number(8824), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(77714), "R": Number(77723)})]), "storage": Number(0)}), Object({"id": Number(9626), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26409), "R": Number(26412)})]), "storage": Number(0)}), Object({"id": Number(9449), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5913), "R": Number(5927)}), Object({"L": Number(30506), "R": Number(30520)})]), "storage": Number(0)}), Object({"id": Number(9423), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(12798), "R": Number(12799)})]), "storage": Number(0)}), Object({"id": Number(9414), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(38511), "R": Number(38521)})]), "storage": Number(0)}), Object({"id": Number(1614), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(29978), "R": Number(29988)})]), "storage": Number(0)}), Object({"id": Number(9049), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(39586), "R": Number(39597)})]), "storage": Number(0)}), Object({"id": Number(9243), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(14010), "R": Number(14014)}), Object({"L": Number(14074), "R": Number(14078)}), Object({"L": Number(14110), "R": Number(14114)}), Object({"L": Number(14146), "R": Number(14150)})]), "storage": Number(0)}), Object({"id": Number(9089), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(12772), "R": Number(12773)})]), "storage": Number(0)}), Object({"id": Number(9184), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(15505), "R": Number(15509)}), Object({"L": Number(15874), "R": Number(15878)}), Object({"L": Number(15899), "R": Number(15903)}), Object({"L": Number(15924), "R": Number(15928)})]), "storage": Number(0)}), Object({"id": Number(9327), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(55077), "R": Number(55089)})]), "storage": Number(0)}), Object({"id": Number(9345), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10242), "R": Number(10251)})]), "storage": Number(0)}), Object({"id": Number(9718), "kind": Number(13), "lsRanges": Array([]), "parentKind": Number(6), "ranges": Array([Object({"L": Number(60903), "R": Number(60904)}), Object({"L": Number(60910), "R": Number(60911)}), Object({"L": Number(60925), "R": Number(60926)}), Object({"L": Number(60950), "R": Number(60951)})]), "storage": Number(0)}), Object({"id": Number(9361), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(11250), "R": Number(11257)})]), "storage": Number(0)}), Object({"id": Number(9474), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(11722), "R": Number(11729)})]), "storage": Number(0)}), Object({"id": Number(9116), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(13049), "R": Number(13052)})]), "storage": Number(0)}), Object({"id": Number(9713), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(28763), "R": Number(28765)}), Object({"L": Number(28800), "R": Number(28802)})]), "storage": Number(0)}), Object({"id": Number(9576), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(23627), "R": Number(23631)}), Object({"L": Number(23640), "R": Number(23644)}), Object({"L": Number(23657), "R": Number(23661)}), Object({"L": Number(23674), "R": Number(23678)}), Object({"L": Number(23691), "R": Number(23695)}), Object({"L": Number(23708), "R": Number(23712)}), Object({"L": Number(23725), "R": Number(23729)}), Object({"L": Number(23742), "R": Number(23746)}), Object({"L": Number(23759), "R": Number(23763)}), Object({"L": Number(23776), "R": Number(23780)})]), "storage": Number(0)}), Object({"id": Number(8840), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(73877), "R": Number(73896)})]), "storage": Number(0)}), Object({"id": Number(8808), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(80051), "R": Number(80058)})]), "storage": Number(0)}), Object({"id": Number(1587), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(28822), "R": Number(28831)})]), "storage": Number(0)}), Object({"id": Number(9295), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(6509), "R": Number(6520)})]), "storage": Number(0)}), Object({"id": Number(8882), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(65387), "R": Number(65407)})]), "storage": Number(0)}), Object({"id": Number(119), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(4992), "R": Number(4996)}), Object({"L": Number(33457), "R": Number(33461)}), Object({"L": Number(33523), "R": Number(33527)}), Object({"L": Number(33608), "R": Number(33612)}), Object({"L": Number(74124), "R": Number(74128)}), Object({"L": Number(74155), "R": Number(74159)})]), "storage": Number(0)}), Object({"id": Number(9770), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(42211), "R": Number(42234)})]), "storage": Number(0)}), Object({"id": Number(9320), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(11536), "R": Number(11546)})]), "storage": Number(0)}), Object({"id": Number(1605), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(0), "ranges": Array([Object({"L": Number(27442), "R": Number(27456)})]), "storage": Number(0)}), Object({"id": Number(9678), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27471), "R": Number(27475)})]), "storage": Number(0)}), Object({"id": Number(4750), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(74480), "R": Number(74493)})]), "storage": Number(0)}), Object({"id": Number(509), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5177), "R": Number(5186)})]), "storage": Number(0)}), Object({"id": Number(9270), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(11508), "R": Number(11521)})]), "storage": Number(0)}), Object({"id": Number(9275), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(40518), "R": Number(40527)})]), "storage": Number(0)}), Object({"id": Number(9739), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(29947), "R": Number(29948)})]), "storage": Number(0)}), Object({"id": Number(497), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8937), "R": Number(8946)})]), "storage": Number(0)}), Object({"id": Number(505), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(5057), "R": Number(5065)})]), "storage": Number(0)}), Object({"id": Number(9782), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(32257), "R": Number(32268)})]), "storage": Number(0)}), Object({"id": Number(9532), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(36810), "R": Number(36823)})]), "storage": Number(0)}), Object({"id": Number(1597), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(62527), "R": Number(62542)})]), "storage": Number(0)}), Object({"id": Number(1553), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(22241), "R": Number(22249)}), Object({"L": Number(22377), "R": Number(22385)})]), "storage": Number(0)}), Object({"id": Number(9506), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9979), "R": Number(9991)})]), "storage": Number(0)}), Object({"id": Number(8807), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(80211), "R": Number(80220)})]), "storage": Number(0)}), Object({"id": Number(9037), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(40890), "R": Number(40893)})]), "storage": Number(0)}), Object({"id": Number(9659), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27264), "R": Number(27278)})]), "storage": Number(0)}), Object({"id": Number(9689), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(64835), "R": Number(64848)})]), "storage": Number(0)}), Object({"id": Number(2870), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(36387), "R": Number(36400)})]), "storage": Number(0)}), Object({"id": Number(4554), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(81198), "R": Number(81208)})]), "storage": Number(0)}), Object({"id": Number(8914), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(73111), "R": Number(73125)})]), "storage": Number(0)}), Object({"id": Number(9767), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(37536), "R": Number(37548)}), Object({"L": Number(37616), "R": Number(37628)})]), "storage": Number(0)}), Object({"id": Number(9649), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(78641), "R": Number(78653)})]), "storage": Number(0)}), Object({"id": Number(9161), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(17898), "R": Number(17902)})]), "storage": Number(0)}), Object({"id": Number(9389), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(82236), "R": Number(82252)})]), "storage": Number(0)}), Object({"id": Number(4779), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(81158), "R": Number(81164)})]), "storage": Number(0)}), Object({"id": Number(9317), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26048), "R": Number(26049)})]), "storage": Number(0)}), Object({"id": Number(9048), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(40481), "R": Number(40491)})]), "storage": Number(0)}), Object({"id": Number(9388), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(6193), "R": Number(6208)})]), "storage": Number(0)}), Object({"id": Number(8859), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(71052), "R": Number(71070)})]), "storage": Number(0)}), Object({"id": Number(9321), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9562), "R": Number(9570)})]), "storage": Number(0)}), Object({"id": Number(9396), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(10127), "R": Number(10137)})]), "storage": Number(0)}), Object({"id": Number(520), "kind": Number(10), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(28125), "R": Number(28129)})]), "storage": Number(0)}), Object({"id": Number(9775), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(33792), "R": Number(33809)}), Object({"L": Number(34403), "R": Number(34420)})]), "storage": Number(0)}), Object({"id": Number(1535), "kind": Number(6), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(61614), "R": Number(61620)})]), "storage": Number(0)}), Object({"id": Number(9311), "kind": Number(22), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(9687), "R": Number(9699)})]), "storage": Number(0)}), Object({"id": Number(9083), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(46086), "R": Number(46106)})]), "storage": Number(0)}), Object({"id": Number(1248), "kind": Number(12), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(22505), "R": Number(22513)})]), "storage": Number(0)}), Object({"id": Number(524), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(80352), "R": Number(80380)})]), "storage": Number(0)}), Object({"id": Number(9807), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(43262), "R": Number(43280)})]), "storage": Number(0)}), Object({"id": Number(8930), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(59917), "R": Number(59926)})]), "storage": Number(0)}), Object({"id": Number(8853), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(71720), "R": Number(71736)})]), "storage": Number(0)}), Object({"id": Number(507), "kind": Number(252), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(8768), "R": Number(8778)})]), "storage": Number(0)}), Object({"id": Number(9683), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(27689), "R": Number(27696)})]), "storage": Number(0)}), Object({"id": Number(9341), "kind": Number(8), "lsRanges": Array([]), "parentKind": Number(23), "ranges": Array([Object({"L": Number(71112), "R": Number(71124)})]), "storage": Number(0)}), Object({"id": Number(9219), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(35574), "R": Number(35593)})]), "storage": Number(0)}), Object({"id": Number(9633), "kind": Number(253), "lsRanges": Array([]), "parentKind": Number(12), "ranges": Array([Object({"L": Number(26483), "R": Number(26485)})]), "storage": Number(0)}), Object({"id": Number(9318), "kind": Number(255), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(35045), "R": Number(35056)})]), "storage": Number(0)}), Object({"id": Number(458), "kind": Number(10), "lsRanges": Array([]), "parentKind": Number(1), "ranges": Array([Object({"L": Number(28048), "R": Number(28052)})]), "storage": Number(0)})]), "uri": String("file:///home/ys/Code/project/project-jka/src/code/game/q_shared.h")}) }
11:11:50 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(3), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/game/q_shared.h"), "languageId": String("cpp"), "position": Object({"character": Number(13), "line": Number(1024)}), "viewport": Object({"end": Number(1057), "start": Number(992)})}) force_redraw=false
11:11:50 INFO unnamed src/language_server_protocol.rs:2847 get_signs_to_display; filename="/home/ys/Code/project/project-jka/src/code/game/q_shared.h" viewport=Viewport { start: 992, end: 1057 }
11:11:50 INFO unnamed src/language_server_protocol.rs:2095 text_document_publish_diagnostics; params=Object({"diagnostics": Array([Object({"code": Number(1), "message": String("version control conflict marker in file"), "range": Object({"end": Object({"character": Number(2), "line": Number(0)}), "start": Object({"character": Number(0), "line": Number(0)})}), "relatedInformation": Array([]), "severity": Number(1), "source": String("ccls")}), Object({"code": Number(1), "message": String("\'algorithm\' file not found"), "range": Object({"end": Object({"character": Number(20), "line": Number(52)}), "start": Object({"character": Number(9), "line": Number(52)})}), "relatedInformation": Array([]), "severity": Number(1), "source": String("ccls")})]), "uri": String("file:///home/ys/Code/project/project-jka/src/code/game/q_shared.h")})
11:11:50 INFO unnamed src/vim.rs:225 Begin setqflist
11:11:50 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Null force_redraw=true
11:11:50 INFO unnamed src/language_server_protocol.rs:2847 get_signs_to_display; filename="/home/ys/Code/project/project-jka/src/code/game/q_shared.h" viewport=Viewport { start: 992, end: 1057 }
11:11:51 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(3), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/game/q_shared.h"), "languageId": String("cpp"), "position": Object({"character": Number(13), "line": Number(1025)}), "viewport": Object({"end": Number(1057), "start": Number(992)})}) force_redraw=false
11:11:51 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(3), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/game/q_shared.h"), "languageId": String("cpp"), "position": Object({"character": Number(0), "line": Number(1026)}), "viewport": Object({"end": Number(1057), "start": Number(992)})}) force_redraw=false
11:11:51 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(3), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/game/q_shared.h"), "languageId": String("cpp"), "position": Object({"character": Number(13), "line": Number(1025)}), "viewport": Object({"end": Number(1057), "start": Number(992)})}) force_redraw=false
11:11:52 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(3), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/game/q_shared.h"), "languageId": String("cpp"), "position": Object({"character": Number(13), "line": Number(1024)}), "viewport": Object({"end": Number(1057), "start": Number(992)})}) force_redraw=false
11:11:52 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(3), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/game/q_shared.h"), "languageId": String("cpp"), "position": Object({"character": Number(13), "line": Number(1023)}), "viewport": Object({"end": Number(1057), "start": Number(992)})}) force_redraw=false
11:11:52 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(3), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/game/q_shared.h"), "languageId": String("cpp"), "position": Object({"character": Number(0), "line": Number(1022)}), "viewport": Object({"end": Number(1057), "start": Number(992)})}) force_redraw=false
11:11:52 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(3), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/game/q_shared.h"), "languageId": String("cpp"), "position": Object({"character": Number(13), "line": Number(1023)}), "viewport": Object({"end": Number(1057), "start": Number(992)})}) force_redraw=false
11:11:52 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(3), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/game/q_shared.h"), "languageId": String("cpp"), "position": Object({"character": Number(13), "line": Number(1024)}), "viewport": Object({"end": Number(1057), "start": Number(992)})}) force_redraw=false
11:11:53 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(3), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/game/q_shared.h"), "languageId": String("cpp"), "position": Object({"character": Number(13), "line": Number(1023)}), "viewport": Object({"end": Number(1057), "start": Number(992)})}) force_redraw=false
11:11:53 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(3), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/game/q_shared.h"), "languageId": String("cpp"), "position": Object({"character": Number(13), "line": Number(1024)}), "viewport": Object({"end": Number(1057), "start": Number(992)})}) force_redraw=false
11:11:53 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(3), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/game/q_shared.h"), "languageId": String("cpp"), "position": Object({"character": Number(13), "line": Number(1023)}), "viewport": Object({"end": Number(1057), "start": Number(992)})}) force_redraw=false
11:11:54 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(3), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/game/q_shared.h"), "languageId": String("cpp"), "position": Object({"character": Number(13), "line": Number(1024)}), "viewport": Object({"end": Number(1057), "start": Number(992)})}) force_redraw=false
11:12:06 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(3), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/game/q_shared.h"), "languageId": String("cpp"), "position": Object({"character": Number(13), "line": Number(1025)}), "viewport": Object({"end": Number(1057), "start": Number(992)})}) force_redraw=false
11:12:07 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(3), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/game/q_shared.h"), "languageId": String("cpp"), "position": Object({"character": Number(13), "line": Number(1024)}), "viewport": Object({"end": Number(1057), "start": Number(992)})}) force_redraw=false
11:12:11 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(3), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/game/q_shared.h"), "languageId": String("cpp"), "position": Object({"character": Number(13), "line": Number(1025)}), "viewport": Object({"end": Number(1057), "start": Number(992)})}) force_redraw=false
11:12:11 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(3), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/game/q_shared.h"), "languageId": String("cpp"), "position": Object({"character": Number(0), "line": Number(1026)}), "viewport": Object({"end": Number(1057), "start": Number(992)})}) force_redraw=false
11:12:11 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(3), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/game/q_shared.h"), "languageId": String("cpp"), "position": Object({"character": Number(13), "line": Number(1025)}), "viewport": Object({"end": Number(1057), "start": Number(992)})}) force_redraw=false
11:12:11 INFO unnamed src/language_server_protocol.rs:2873 handle_cursor_moved; params=Object({"bufnr": Number(3), "buftype": String(""), "filename": String("/home/ys/Code/project/project-jka/src/code/game/q_shared.h"), "languageId": String("cpp"), "position": Object({"character": Number(13), "line": Number(1024)}), "viewport": Object({"end": Number(1057), "start": Number(992)})}) force_redraw=false
